(* AALDS Anti-Aliased Low-Discrepacy Sequences
	VO 2004-2015

	previous projects: mxBasedNumberSystems mxBasedFastMultidimensionalSampling PiGoodPermutations fastMultidimensionalSampling OmegaSampling first-LDSwithBlueNoise PiSystemBasedLDS LDSwBN etc.

		matrix generation
		<very narrow> 	mx_64x64_0.12-0.13/mx_64.NNN.dat generated with AALDS1dBuildMX[64, 6, 1, 1.]
		<very narrow> 	mx_64x64_0.11-0.13/mx_64.NNN.dat generated with  AALDS1dBuildMX[64, 1, .05, 1]
		<narrow> 		mx_64x64_0.11-0.14/mx_64.NNN.dat generated with  AALDS1dBuildMX[64, 3, 1, .5]
		<large> 		mx_64x64_0.08-0.15/mx_64.NNN.dat generated with  AALDS1dBuildMX[64, 4, 3]

		<medium>		matrices/mx_64x64_medium/mx_64.NNN.dat generated with AALDS1dBuildMX[64, 3, 2] 
DweRuKiShowInflation[]

dbgSobol[]

makeFigureDiscrepancyAndVariance[]

-------MU3:
MU3prepAllL1Tiles[] 
MU3buildCCVTbasedTilesBN[]
MU3pocRecursive[]
MU3recursiveSubdivWithRank[]
MU3recursiveSubdiv[]
MU3getActiveCodes[]
MU3recursiveSubdivSIMPLEST[]
MU3AAmuPartitioningQ[]
MU3makeFigureMUadicPartitioning[]
MU3mkFigurePascalTriangle[]
seqMU3ClosedForm[]
MU3makeFigureDweRuKi1d[]
MU3Phi[]
MU3index2symbols[]
MU3prepAllL1Tiles[]
MU3buildCCVTbasedTilesBN[]
MU3makeFigureProduction[] 
MU3makeFigurePopulatingL1[]
MU3mkFigureMultiplePoitns[]
MU3makeFigureRanking[]
MU3generatePointSets[]

lambdaMU3 = 1.465571231876768;
lambdaMU3quared = 2.1478990357047874;

MU3basicSeq = {1,2,3,4,6,9,13,19,28,41,60,88,129,189,277,406,595,872,1278,1873,2745,4023,5896,8641,12664,18560,27201,39865,58425,85626,125491,183916,269542,395033,578949,848491,1243524,1822473,2670964,3914488,5736961,8407925,12322413,
	18059374,26467299,38789712,56849086,83316385,122106097,178955183,262271568,384377665,563332848,825604416,1209982081,1773314929,2598919345,3808901426,5582216355,8181135700,11990037126,17572253481,25753389181,37743426307,55315679788,
	81069068969,118812495276,174128175064,255197244033,374009739309,548137914373,803335158406,1177344897715,1725482812088,2528817970494,3706162868209,5431645680297,7960463650791,11666626519000,17098272199297,25058735850088,36725362369088,
	53823634568385,78882370418473,115607732787561,169431367355946,248313737774419,363921470561980,533352837917926,781666575692345,1145588046254325,1678940884172251,2460607459864596,3606195506118921,5285136390291172,7745743850155768,11351939356274689,16637075746565861};

MU3basicSeqExtended  = {0,1,0,0,1,1,1,2,3,4,6,9,13,19,28,41,60,88,129,189,277,406,595,872,1278,1873,2745,4023,5896,8641,12664,18560,27201,39865,58425,85626,125491,183916,269542,395033,578949,848491,1243524,1822473,2670964,3914488,5736961,8407925,12322413,
	18059374,26467299,38789712,56849086,83316385,122106097,178955183,262271568,384377665,563332848,825604416,1209982081,1773314929,2598919345,3808901426,5582216355,8181135700,11990037126,17572253481,25753389181,37743426307,55315679788,
	81069068969,118812495276,174128175064,255197244033,374009739309,548137914373,803335158406,1177344897715,1725482812088,2528817970494,3706162868209,5431645680297,7960463650791,11666626519000,17098272199297,25058735850088,36725362369088,
	53823634568385,78882370418473,115607732787561,169431367355946,248313737774419,363921470561980,533352837917926,781666575692345,1145588046254325,1678940884172251,2460607459864596,3606195506118921,5285136390291172,7745743850155768,11351939356274689,16637075746565861};

-------MU4:
MU4prepAllL0Tiles[]
MU4prepAllL1Tiles[]
MU4buildCCVTbasedTilesBN[]
MU4pocRecursive[]
MU4recursiveSubdiv[]
MU4getGrid[]
MU4subdiv1d[]
MU4getCodes1d[]
MU4basicSeq
MU4F[]
MU4FInv[]
MU4FXY[]
MU4Phi[]
MU4PhiXY[]
seqMU4ClosedForm[]


MU4generatePointSets[]
MU4symbols2binCode[symbols_] :=  (symbols/.{a:>0,b:>1,c:>0,d:>0})
MU4symbols2index[symbols_] :=  (symbols/.{a:>1,b:>2,c:>3,d:>4})
MU4index2symbols[ind_] :=  (ind/.{1:>a,2:>b,3:>c,4:>d})

MU4makeZonePlateFromFile[]

MU4pmkFigureProduction[]
MU4pmkFigureSubdivision[] (* -> fig-2subdivs *)
MU4getGrid4Figures[]
MU4pmkFigurePopulatingL0[]
MU4mkFigureMultiplePoitns[]
MU4makeZonePlates[]
MU4mkFigureFourier[]
MU4makeFigureDweRuKiTu1d[]
MU4makeFigureMUadicPartitioning[]
MU4pmkFigureRanking[]
MU4mkFigurePascalTriangle[]

makeFigureDiadicPartitioningSobol[]

makeRefDiscrepancy[]
getRefDiscrepancyWhiteNoise[]

lambda = lambdaMU4 = 1.3802775690976141;
lambdaMU4Squared = 1.9051661677540188;

MU4basicSeq = {1,2,3,4,5,7,10,14,19,26,36,50,69,95,131,181,250,345,476,657,907,1252,1728,2385,3292,4544,6272,8657,11949,16493,22765,31422,43371,59864,82629,114051,157422,217286,299915,413966,571388,788674,1088589,1502555,
    2073943,2862617,3951206,5453761,7527704,10390321,14341527,19795288,27322992,37713313,52054840,71850128,99173120,136886433,188941273,260791401,359964521,496850954,685792227,946583628,1306548149,1803399103,2489191330,3435774958,
    4742323107,6545722210,9034913540,12470688498,17213011605,23758733815,32793647355,45264335853,62477347458,86236081273,119029728628,164294064481,226771411939,313007493212,432037221840,596331286321,823102698260,1136110191472,
    1568147413312,2164478699633,2987581397893,4123691589365,5691839002677,7856317702310,10843899100203,14967590689568,20659429692245,28515747394555,39359646494758,54327237184326};

MU4basicSeqExtended = (* campatible with seqMU4ClosedForm[] *)
	{0,0,1,0,0,0,1,1,1,1,2,3,4,5,7,10,14,19,26,36,50,69,95,131,181,250,345,476,657,907,1252,1728,2385,3292,4544,6272,8657,11949,16493,22765,31422,43371,59864,82629,114051,157422,217286,299915,413966,571388,788674,1088589,1502555,
    2073943,2862617,3951206,5453761,7527704,10390321,14341527,19795288,27322992,37713313,52054840,71850128,99173120,136886433,188941273,260791401,359964521,496850954,685792227,946583628,1306548149,1803399103,2489191330,3435774958,
    4742323107,6545722210,9034913540,12470688498,17213011605,23758733815,32793647355,45264335853,62477347458,86236081273,119029728628,164294064481,226771411939,313007493212,432037221840,596331286321,823102698260,1136110191472,
    1568147413312,2164478699633,2987581397893,4123691589365,5691839002677,7856317702310,10843899100203,14967590689568,20659429692245,28515747394555,39359646494758,54327237184326};



------- FIBO:
FIBOpoc2DRecursive[]
FIBOrecursiveSubdiv[]
prepFIBOGrids[]
tstFIBOPermutTrees[]
goodFIBOSetQ[]
FIBOshowAllPermutTrees[4]
consolidateFIBOLen8Patterns[]
goodFIBOSetQ[]
goodFIBOSetQHorizontalOrVerticalRectangles[]
goodFIBOSetQSmallSquares[]
pocAALDSFIBO2D[] -- old version

----------DweRuKi
pocDweRuKi[] -- works well for mx21 only
getDweRuKiGrid[]
prepDweRuKiBestPatterns[]
pocDweRuKi[]    	
recursiveSubdivDweRuKi2D[]


pocAALDSBinary2D[]
pocAALDSBinary2DBase4[]

getGoodPattern[]
getBayerOrdering[]
getGoodOrderedPattern[]
tstGoodOrderedActivePattern[]


mkAALDSmx[]

AALDS1dDemo[]
AALDS2dPOC[20]


FIBOF[symbols_] := With[{s=Reverse[symbols]}, Total@Table[Fibonacci[i+1 ] s[[i]], {i, Length[s]}] ]
FIBOFinv[symbols_] := Total@Table[Fibonacci[i+1 ] symbols[[i]], {i, Length[symbols]}]
FIBOFxy[symbols_]:=FIBOF/@symbols
phitab = Table[phi^-i, {i, 32}] // N;
FIBOPhi[s_] := Sum[phitab[[i]] s[[i]], {i, Length[s]}] 

Table[mx = getMyFamilyRadixInvertible[i]; CharacteristicPolynomial[mx, x], {i, 2, 10}] // mf
{
-1 - x + x^2, 
 1 + x^2 - x^3, 
-1 - x^3 + x^4, 
 1 + x^4 - x^5, 
-1 - x^5 + x^6,
 1 + x^6 - x^7,
-1 - x^7 + x^8, 
 1 + x^8 - x^9,
-1 - x^9 + x^10}


showAllBinaryPermutTrees[]

**********************************************************)

(**************** System-dependent setup ******************)
SetDirectory[ToFileName[$HomeDirectory,"AALDS"]];
SetOptions[Graphics, ImageSize -> { 1/4 1024,Automatic},AspectRatio->Automatic, PlotRange->All];
SetOptions[ListPlot, ImageSize -> { 600,Automatic},AspectRatio->.2, PlotRange->All];
SetOptions[ListLogLogPlot, ImageSize -> { 600,Automatic},AspectRatio->.61, PlotRange->All];
SetOptions[ListDensityPlot, ImageSize -> {512,Automatic},AspectRatio->Automatic, PlotRange->All];
pid := "_pid"<>ToString[$ProcessID]<>"_kid"<>ToString[$KernelID]
systemID = StringSplit[$System][[1]];
execPrefix = "~/bin/";

epsilon = 10^-10.;
eps = epsilon = 10^-6.;

Print["AALDS (current version) loaded."];



(**************** useful common constants, macros and routines ******************)
mf := MatrixForm
if := InputForm
T :=  Transpose
gr = GoldenRatio // N
PI = Pi//N;
phi = 1/2 (Sqrt[5]+1);
phiN = 1/2 (Sqrt[5]+1)//N;
known := ValueQ

euclidlen[z_] :=
    Sqrt[Total[z^2]]
euclidlen2[z_] :=
    Total[z^2]
euclidlenN[z_] :=
    Sqrt[Total[z^2]]//N

colTable = Join[{Darker@Gray,Red,Green,Blue,Gray,Magenta,LightGray,Cyan,Magenta,Orange,Brown,Pink,Purple}
    (*,Table[Hue[RandomReal[]],{120}]*) ];

getColor[ind_:Infinity] :=
    If[ ind==Infinity,
        colTable[[ RandomInteger[{1,Length[colTable]}] ]],
        colTable[[Mod[ind,Length[colTable],1] ]]
    ]
getRandomColor[] :=
    getColor[RandomInteger[{1, 128}]]
getLightColor[ind_] :=
    Lighter@(Lighter@(Lighter@colTable[[Mod[ind,Length[colTable],1 ] ]]))

colSolidTable = {Red,Blue,Orange,Gray,Magenta,Yellow,Cyan,Green};
getColorSolid[ind_] :=
    colSolidTable[[Mod[ind,Length[colSolidTable],1] ]]

lightColSolidTable = Lighter /@ (Lighter /@ {Red,Blue,Orange,Gray,Magenta,Yellow,Cyan,Green});
getLightColorSolid[ind_] :=
    lightColSolidTable[[Mod[ind,Length[lightColSolidTable],1] ]]

order2permut[s_] := (Flatten[Drop[#,1]& /@ Sort[Table[{s[[i]],i},{i,Length[s]}]]]); (* 1..n *)
permut2order := order2permut

order2permut1toN := order2permut
order2permut0toNminus1[s_] := ((s+1)//order2permut)-1

(* getMyFamilyNew *)
getMyFamilyRadixInvertible[sz_:4] := (* RadixInvertible *)
    Module[ {mx},
        mx = RotateRight /@ IdentityMatrix[sz];
        mx[[1, 1]] = 1;
        mx
    ] (* getMyFamilyRadixInvertible *)

getMyFamilyNew[sz_:4] := (* Wed Aug 19 11:08:35 CEST 2015 *)
    Module[ {mx},
        mx = RotateRight /@ IdentityMatrix[sz];
        mx[[1, Mod[3, sz, 1]]] = 1;
        mx
    ] (* getMyFamilyNew *)

(**************** useful common constants, macros and routines ******************)
reorg2D[lst2D_] :=
    With[ {sz = Floor[Length[lst2D]/2]},
        If[ sz == 0,
            Print["reorg3D: void data"];
            Break[]
        ];
        (RotateLeft[#,sz]& /@ (RotateLeft[#,sz]& @ lst2D))
    ] (* reorg2D *)
Reorg := reorg2D

reorg3D[lst3D_] :=
    With[ {sz = Floor[Length[lst3D]/2]},
        If[ sz == 0,
            Print["reorg3D: void data"];
            Break[]
        ];
        (RotateLeft[#,sz]& /@ #)& /@ (RotateLeft[#,sz]& /@ (RotateLeft[#,sz]& @ lst3D))
    ] (* reorg3D *)

reorg4D[lst4D_] :=
    With[ {sz = Floor[Length[lst4D]/2]},
        If[ sz == 0,
            Print["reorg3D: void data"];
            Break[]
        ];
        (RotateLeft[#,sz]& /@ #)& /@   ((RotateLeft[#,sz]& /@ #)& /@ (RotateLeft[#,sz]& /@ (RotateLeft[#,sz]& @ lst4D)))
    ] (* reorg4D *)


niceRaster[img_,OptionsPattern[]] :=
    Block[ {sx,sy,z},
        z = OptionValue[zoom];
        {sy,sx} = Dimensions[img];
        Return[Graphics[Raster[img],PlotRange->{{0,sx},{0,sy}},ImageSize->{z sx,z sy}]];
    ];
Options[niceRaster] = {zoom->1};

getFourier1D[xvals_,fouriertabsz_] :=
    Module[ {tab,pos},
        tab = Table[0,{fouriertabsz}];
        If[ Min[xvals] <= 0,
            Print["getFourier1D: min=",Min[xvals]];
            Abort[]
        ];
        If[ Max[xvals] > fouriertabsz,
            Print["getFourier1D: max=",Max[xvals]];
            Abort[]
        ];
        Do[
            pos = xvals[[i]];
            If[ (pos <= 0) || (pos > fouriertabsz),
                Continue[]
            ];
            tab[[ pos ]] += 1
        ,{i,Length[xvals]}];
        (*tab[[xvals+1]] = 1;*)
        Return[Fourier[tab]// Abs]
    ] (* getFourier1D *)


getFourier2D[pts_,fouriertabsz_:512] :=
    Module[ {tab,sel},
        tab = Table[0,{fouriertabsz},{fouriertabsz}];
        sel = Select[Ceiling[pts], Min[#] > 0 && Max[#] <= fouriertabsz &];
        (tab[[#[[2]], #[[1]]]] = 1) & /@ sel;
        Return[Fourier[tab]// Abs]
    ] (* getFourier2D *)

getFourier3D[pts_,fouriertabsz_:256] :=
    Module[ {tab,sel},
        tab = Table[0,{fouriertabsz},{fouriertabsz},{fouriertabsz}];
        sel = Select[Ceiling[pts], Min[#] > 0 && Max[#] <= fouriertabsz &];
        (tab[[#[[3]], #[[2]], #[[1]]]] = 1) & /@ sel;
        Return[Fourier[tab]// Abs]
    ] (* getFourier3D *)


getFourier4D[pts_,fouriertabsz_:64] :=
    Module[ {tab,sel},
        tab = Table[0,{fouriertabsz},{fouriertabsz},{fouriertabsz},{fouriertabsz}];
        sel = Select[Ceiling[pts], Min[#] > 0 && Max[#] <= fouriertabsz &];
        (tab[[#[[4]], #[[3]], #[[2]], #[[1]]]] = 1) & /@ sel;
        Return[Fourier[tab]// Abs]
    ] (* getFourier4D *)

   
(*---------------------- sobol ----------------------*)
(*---------------------- see: Bratley & Fox, 1988 ----------------------*)
(*
 f1(z)=z+1                  powers: 1 0
 f2(z)=z^2+z+1              powers: 2 1 0
 f3(z)=z^3+z+1              powers: 3 1 0
 f4(z)=z^3+z^2+1              powers: 3 2 0
 f5(z)=z^4+z+1              powers: 4 1 0
 f6(z)=z^4+z^3+1              powers: 4 3 0
 f7(z)=z^5+z^2+1              powers: 5 2 0
 f8(z)=z^5+z^3+1              powers: 5 3 0
 f9(z)=z^5+z^3+z^2+z+1        powers: 5 3 2 1 0
 f10(z)=z^5+z^4+z^2+z+1        powers: 5 4 2 1 0
 f11(z)=z^5+z^4+z^3+z+1        powers: 5 4 3 1 0
 f12(z)=z^5+z^4+z^3+z^2+1    powers: 5 4 3 2 0
 etc. see a058947
*)

a011260 = (* Number of primitive polynomials of degree n over GF(2). 
               src: http://www.research.att.com/~njas/sequences/A011260 *)
    {1, 1, 2, 2, 6, 6, 18, 16, 48, 60, 176, 144, 630, 756, 1800, 2048, \
7710, 7776, 27594, 24000, 84672, 120032, 356960, 276480, 1296000, \
1719900, 4202496, 4741632, 18407808, 17820000, 69273666, 67108864, \
211016256};
a058947 = (* Coefficients of primitive irreducible polynomials over GF(2) listed in lexicographic order.  
            src: http://www.research.att.com/~njas/sequences/A058947 
            T. D. Noe, Table of n, a(n) for n=1..1110 (through degree 13) 
            Note that Take[a011260, 13] // Total -> 1110 (1111 with first 1)
            For higher degree < 32, http://www.theory.cs.uvic.ca/~cos/gen/poly.html
            VO: extra first entry is added to match Kuo,s implementation (by default, parameters direction vectors 1 and 2
            *)
{1,    (*1*)
11, (*2*)
111, (*3*)
1011, 1101, (*4,5*)
10011, 11001, (*6,7*)
100101, 101001, 101111, 110111, 111011, 111101, (*9..14*)
1000011, 1011011, 1100001, 1100111, 1101101, 1110011, (*15..20*)
10000011, 10001001, 10001111, 10010001, 10011101, 10100111, 10101011, \
10111001, 10111111, 11000001, 11001011, 11010011, 11010101, 11100101, \
11101111, 11110001, 11110111, 11111101, 100011101, 100101011, \
100101101, 101001101, 101011111, 101100011, 101100101, 101101001, \
101110001, 110000111, 110001101, 110101001, 111000011, 111001111, \
111100111, 111110101, 1000010001, 1000011011, 1000100001, 1000101101, \
1000110011, 1001011001, 1001011111, 1001101001, 1001101111, \
1001110111, 1001111101, 1010000111, 1010010101, 1010100011, \
1010100101, 1010101111, 1010110111, 1010111101, 1011001111, \
1011010001, 1011011011, 1011110101, 1011111001, 1100010011, \
1100010101, 1100011111, 1100100011, 1100110001, 1100111011, \
1101001111, 1101011011, 1101100001, 1101101011, 1101101101, \
1101110011, 1101111111, 1110000101, 1110001111, 1110110101, \
1110111001, 1111000111, 1111001011, 1111001101, 1111010101, \
1111011001, 1111100011, 1111101001, 1111111011, 10000001001, \
10000011011, 10000100111, 10000101101, 10001100101, 10001101111, \
10010000001, 10010001011, 10011000101, 10011010111, 10011100111, \
10011110011, 10011111111, 10100001101, 10100011001, 10100100011, \
10100110001, 10100111101, 10101000011, 10101010111, 10101101011, \
10110000101, 10110001111, 10110010111, 10110100001, 10111000111, \
10111100101, 10111110111, 10111111011, 11000010011, 11000010101, \
11000100101, 11000110111, 11001000011, 11001001111, 11001011011, \
11001111001, 11001111111, 11010001001, 11010110101, 11011000001, \
11011010011, 11011011111, 11011111101, 11100010111, 11100011101, \
11100100001, 11100111001, 11101000111, 11101001101, 11101010101, \
11101011001, 11101100011, 11101111101, 11110001101, 11110010011, \
11110110001, 11111011011, 11111110011, 11111111001, 100000000101, \
100000010111, 100000101011, 100000101101, 100001000111, 100001100011, \
100001100101, 100001110001, 100001111011, 100010001101, 100010010101, \
100010011111, 100010101001, 100010110001, 100011001111, 100011010001, \
100011100001, 100011100111, 100011101011, 100011110101, 100100001101, \
100100010011, 100100100101, 100100101001, 100100111011, 100100111101, \
100101000101, 100101001001, 100101010001, 100101011011, 100101110011, \
100101110101, 100101111111, 100110000011, 100110001111, 100110101011, \
100110101101, 100110111001, 100111000111, 100111011001, 100111100101, \
100111110111, 101000000001, 101000000111, 101000010011, 101000010101, \
101000101001, 101001001001, 101001100001, 101001101101, 101001111001, \
101001111111, 101010000101, 101010010001, 101010011101, 101010100111, \
101010101011, 101010110011, 101010110101, 101011010101, 101011011111, \
101011101001, 101011101111, 101011110001, 101011111011, 101100000011, \
101100001001, 101100010001, 101100110011, 101100111111, 101101000001, \
101101001011, 101101011001, 101101011111, 101101100101, 101101101111, \
101101111101, 101110000111, 101110001011, 101110010011, 101110010101, \
101110101111, 101110110111, 101110111101, 101111001001, 101111011011, \
101111011101, 101111100111, 101111101101, 110000001011, 110000001101, \
110000011001, 110000011111, 110001010111, 110001100001, 110001101011, \
110001110011, 110010000101, 110010001001, 110010010111, 110010011011, \
110010011101, 110010110011, 110010111111, 110011000111, 110011001101, \
110011010011, 110011010101, 110011100011, 110011101001, 110011110111, \
110100000011, 110100001111, 110100011101, 110100100111, 110100101101, \
110101000001, 110101000111, 110101010101, 110101011001, 110101100011, \
110101101111, 110101110001, 110110010011, 110110011111, 110110101001, \
110110111011, 110110111101, 110111001001, 110111010111, 110111011011, \
110111100001, 110111100111, 110111110101, 111000000101, 111000011101, \
111000100001, 111000100111, 111000101011, 111000110011, 111000111001, \
111001000111, 111001001011, 111001010101, 111001011111, 111001110001, \
111001111011, 111001111101, 111010000001, 111010010011, 111010011111, \
111010100011, 111010111011, 111011001111, 111011011101, 111011110011, \
111011111001, 111100001011, 111100011001, 111100110001, 111100110111, \
111101011101, 111101101011, 111101101101, 111101110101, 111110000011, \
111110010001, 111110010111, 111110011011, 111110100111, 111110101101, \
111110110101, 111111001101, 111111010011, 111111100101, 111111101001, \
1000001010011, 1000001101001, 1000001111011, 1000001111101, \
1000010011001, 1000011010001, 1000011101011, 1000100000111, \
1000100011111, 1000100100011, 1000100111011, 1000101001111, \
1000101010111, 1000101100001, 1000101101011, 1000110000101, \
1000110110011, 1000111011001, 1000111011111, 1001000001101, \
1001000110111, 1001000111101, 1001001100111, 1001001110011, \
1001001111111, 1001010111001, 1001011000001, 1001011001011, \
1001100001111, 1001100011101, 1001100100001, 1001100111001, \
1001100111111, 1001101001101, 1001101110001, 1001110011001, \
1001110100011, 1001110101001, 1010000000111, 1010000110001, \
1010000110111, 1010001001111, 1010001011101, 1010001100111, \
1010001110101, 1010010100111, 1010010101101, 1010011010011, \
1010100001111, 1010100011101, 1010101001101, 1010110010011, \
1010111000101, 1010111010111, 1010111011101, 1010111101011, \
1011000001001, 1011001000111, 1011001010101, 1011001011001, \
1011010100101, 1011010111101, 1011100010101, 1011100011001, \
1011101000011, 1011101000101, 1011101110101, 1011110001001, \
1011110101101, 1011110110011, 1011110111111, 1011111000001, \
1100001010111, 1100001011101, 1100010010001, 1100010010111, \
1100010111001, 1100011101111, 1100100011011, 1100100110101, \
1100101000001, 1100101100101, 1100101111011, 1100110001011, \
1100110110001, 1100110111101, 1100111001001, 1100111001111, \
1100111100111, 1101000011011, 1101000101011, 1101000110011, \
1101001101001, 1101010001011, 1101011010001, 1101011100001, \
1101011110101, 1101100001011, 1101100010011, 1101100011111, \
1101101010111, 1101110010001, 1101110100111, 1101110111111, \
1101111000001, 1101111010011, 1110000000101, 1110000010001, \
1110000010111, 1110000100111, 1110001001101, 1110010000111, \
1110010011111, 1110010100101, 1110010111011, 1110011000101, \
1110011001001, 1110011001111, 1110011110011, 1110100000111, \
1110100100011, 1110101000011, 1110101010001, 1110101011011, \
1110101110101, 1110110000101, 1110110001001, 1111000010101, \
1111000011001, 1111000101111, 1111001000101, 1111001010001, \
1111001100111, 1111001110011, 1111010001111, 1111011100011, \
1111100010001, 1111100011011, 1111100100111, 1111101110001, \
1111110011001, 1111110111011, 1111110111101, 1111111001001, \
10000000011011, 10000000100111, 10000000110101, 10000001010011, \
10000001100101, 10000001101111, 10000010001011, 10000010001101, \
10000010011111, 10000010100101, 10000010101111, 10000010111011, \
10000010111101, 10000011000011, 10000011001001, 10000011100001, \
10000011110011, 10000100001101, 10000100010101, 10000100101001, \
10000100101111, 10000100111011, 10000101000011, 10000101100111, \
10000101101011, 10000101111001, 10000110001001, 10000110010111, \
10000110011101, 10000110111111, 10000111000001, 10000111000111, \
10000111001101, 10000111011111, 10000111100011, 10000111110001, \
10000111111011, 10001000011001, 10001000100101, 10001000110111, \
10001000111101, 10001001000011, 10001001011011, 10001001011101, \
10001001111001, 10001001111111, 10001010001001, 10001010010111, \
10001010011011, 10001010110011, 10001010111111, 10001011001101, \
10001011101111, 10001011110111, 10001011111011, 10001100000101, \
10001100100111, 10001100101011, 10001101000111, 10001101010101, \
10001101011001, 10001101101111, 10001101110001, 10001101111101, \
10001110000111, 10001110001101, 10001110010101, 10001110100011, \
10001110101001, 10001110110001, 10001110110111, 10001110111011, \
10001111100001, 10001111101101, 10001111111001, 10010000001011, \
10010000010011, 10010000011111, 10010000100101, 10010000101001, \
10010000111101, 10010001010001, 10010001010111, 10010001100001, \
10010001101101, 10010001111111, 10010010000011, 10010010011011, \
10010010011101, 10010010110101, 10010010111111, 10010011000001, \
10010011000111, 10010011001011, 10010011100011, 10010100001001, \
10010100010111, 10010100011101, 10010100100001, 10010100101101, \
10010100111001, 10010101010011, 10010101010101, 10010101100011, \
10010101110001, 10010101110111, 10010110000111, 10010110001011, \
10010110010101, 10010110011001, 10010110011111, 10010110101111, \
10010110111101, 10010111000101, 10010111001111, 10010111010111, \
10010111101011, 10011000000011, 10011000000101, 10011000010001, \
10011000101101, 10011000111111, 10011001001011, 10011001010011, \
10011001011001, 10011001101001, 10011001110111, 10011001111011, \
10011010000111, 10011010010011, 10011010011001, 10011010110001, \
10011010110111, 10011010111101, 10011011000011, 10011011101011, \
10011011110101, 10011100010011, 10011100101001, 10011100111011, \
10011101001111, 10011101010111, 10011101011101, 10011101101011, \
10011101110011, 10011101111001, 10011110000011, 10011110010001, \
10011110100001, 10011110111001, 10011111000111, 10011111001011, \
10011111011111, 10011111101111, 10011111110001, 10100000000111, \
10100000011001, 10100000011111, 10100000100011, 10100000110001, \
10100000111011, 10100000111101, 10100001000101, 10100001100111, \
10100001110101, 10100010000101, 10100010101011, 10100010101101, \
10100010111111, 10100011001101, 10100011010101, 10100011011111, \
10100011100011, 10100011101001, 10100011111011, 10100100001001, \
10100100001111, 10100100010001, 10100100011011, 10100100101011, \
10100100110101, 10100100111111, 10100101000001, 10100101001011, \
10100101010101, 10100101110111, 10100101111101, 10100110000001, \
10100110010011, 10100110011111, 10100110101111, 10100110110111, \
10100110111101, 10100111000011, 10100111010111, 10100111110011, \
10100111110101, 10101000000011, 10101000001111, 10101000011101, \
10101000100001, 10101000110011, 10101000110101, 10101001001101, \
10101001101001, 10101001101111, 10101001110001, 10101001111011, \
10101001111101, 10101010100101, 10101010101001, 10101010110001, \
10101011000101, 10101011010111, 10101011011011, 10101011101011, \
10101011110011, 10101100000001, 10101100010101, 10101100100011, \
10101100100101, 10101100101111, 10101100110111, 10101101000011, \
10101101001001, 10101101101101, 10101101111111, 10101110000101, \
10101110010111, 10101110011011, 10101110101101, 10101110110011, \
10101111011001, 10101111100101, 10101111111101, 10110000001111, \
10110000100001, 10110000101011, 10110000101101, 10110000111111, \
10110001000001, 10110001001101, 10110001110001, 10110010001011, \
10110010001101, 10110010010101, 10110010100011, 10110010101111, \
10110010111101, 10110011000101, 10110011010001, 10110011010111, \
10110011100001, 10110011100111, 10110011101011, 10110100001101, \
10110100011001, 10110100101001, 10110100101111, 10110100110111, \
10110100111011, 10110101000101, 10110101011011, 10110101100111, \
10110101110101, 10110110001001, 10110110001111, 10110110100111, \
10110110101011, 10110110110101, 10110111100011, 10110111110001, \
10110111111101, 10111000000111, 10111000010011, 10111000010101, \
10111000101001, 10111001001001, 10111001001111, 10111001011011, \
10111001011101, 10111001100001, 10111001101011, 10111010001111, \
10111010010001, 10111010010111, 10111010011101, 10111010101011, \
10111010110011, 10111010111001, 10111011011111, 10111011111011, \
10111011111101, 10111100000101, 10111100001001, 10111100010001, \
10111100010111, 10111100111111, 10111101000001, 10111101001011, \
10111101001101, 10111101011001, 10111101011111, 10111101100101, \
10111101101001, 10111110010101, 10111110100101, 10111110101111, \
10111110110001, 10111111001111, 10111111011101, 10111111100111, \
10111111101101, 10111111110101, 10111111111111, 11000000000111, \
11000000010101, 11000000011001, 11000000101111, 11000001001001, \
11000001001111, 11000001100111, 11000001111001, 11000001111111, \
11000010010001, 11000010100001, 11000010110101, 11000010111111, \
11000011000001, 11000011010011, 11000011011001, 11000011100101, \
11000011101111, 11000100000101, 11000100001111, 11000100110101, \
11000101000111, 11000101001101, 11000101011111, 11000101100011, \
11000101110001, 11000101111011, 11000110100011, 11000110101001, \
11000110110111, 11000111000101, 11000111001001, 11000111011011, \
11000111100001, 11000111101011, 11000111101101, 11000111110011, \
11000111111111, 11001000001001, 11001000001111, 11001000011101, \
11001000100111, 11001000111001, 11001001001011, 11001001010011, \
11001001011001, 11001001100101, 11001010000001, 11001010010011, \
11001010011001, 11001010011111, 11001010101001, 11001010110111, \
11001010111011, 11001011000011, 11001011010111, 11001011011011, \
11001011100111, 11001100000111, 11001100010101, 11001100101111, \
11001101010001, 11001101011101, 11001101110101, 11001110010111, \
11001110011011, 11001110101011, 11001110111001, 11001111000001, \
11001111000111, 11001111010101, 11001111100011, 11001111100101, \
11001111110111, 11001111111011, 11010000001001, 11010000011011, \
11010000100111, 11010001000001, 11010001001101, 11010001011111, \
11010001101001, 11010001110111, 11010001111011, 11010010000111, \
11010010010011, 11010010011001, 11010010100101, 11010010111101, \
11010011001001, 11010011011011, 11010011100111, 11010011111001, \
11010100001101, 11010100011111, 11010100100101, 11010100110001, \
11010100110111, 11010101000101, 11010101001111, 11010101011101, \
11010101101101, 11010101110011, 11010101111111, 11010110011101, \
11010110100001, 11010110111001, 11010111001101, 11010111010101, \
11010111011001, 11010111100011, 11010111101001, 11010111101111, \
11011000000001, 11011000001011, 11011000011111, 11011000100101, \
11011000101111, 11011000111011, 11011001001001, 11011001010001, \
11011001011011, 11011001110011, 11011001110101, 11011010010001, \
11011010011011, 11011010011101, 11011010101101, 11011011001011, \
11011011010011, 11011011010101, 11011011100011, 11011011101111, \
11011100000101, 11011100001111, 11011100011011, 11011100100001, \
11011100101101, 11011100111001, 11011101000001, 11011101000111, \
11011101010011, 11011101110001, 11011101110111, 11011110001011, \
11011110010101, 11011110011001, 11011110100011, 11011111000101, \
11011111001111, 11011111010001, 11011111010111, 11011111011101, \
11011111100001, 11011111110011, 11100000000011, 11100000000101, \
11100000010111, 11100000011101, 11100000100111, 11100000110011, \
11100001001011, 11100001011001, 11100001101001, 11100001110001, \
11100010100011, 11100010110001, 11100010111011, 11100011001001, \
11100011001111, 11100011100001, 11100011110011, 11100011111001, \
11100100000001, 11100100000111, 11100100001011, 11100100010011, \
11100100110001, 11100101001111, 11100101100111, 11100101101101, \
11100110000011, 11100110000101, 11100110010111, 11100110100001, \
11100110100111, 11100110101101, 11100111001011, 11100111001101, \
11100111010011, 11100111101111, 11100111110111, 11100111111101, \
11101000000111, 11101000101001, 11101000101111, 11101000111101, \
11101001010001, 11101001011101, 11101001100001, 11101001100111, \
11101001110011, 11101001110101, 11101010001001, 11101010111001, \
11101010111111, 11101011001101, 11101011010011, 11101011010101, \
11101011011111, 11101011100101, 11101011101001, 11101011111011, \
11101100010001, 11101100101011, 11101100101101, 11101100110101, \
11101100111111, 11101101010011, 11101101011001, 11101101100011, \
11101101100101, 11101101101111, 11101101110001, 11101101110111, \
11101110001011, 11101110011001, 11101110100101, 11101110101001, \
11101110110111, 11101110111011, 11101111010001, 11101111100111, \
11101111110011, 11101111111111, 11110000001101, 11110000010011, \
11110000010101, 11110000011111, 11110000100011, 11110000100101, \
11110000111011, 11110001001111, 11110001011101, 11110001101101, \
11110010000011, 11110010001111, 11110010011101, 11110010100111, \
11110010101011, 11110010111001, 11110011000111, 11110011101001, \
11110011111011, 11110011111101, 11110100000011, 11110100010111, \
11110100011011, 11110100100001, 11110100101101, 11110100110011, \
11110100110101, 11110101000001, 11110101001101, 11110101100101, \
11110101101001, 11110101111101, 11110110000001, 11110110010101, \
11110110110001, 11110110110111, 11110111000011, 11110111010001, \
11110111011011, 11110111100111, 11110111101011, 11110111111001, \
11111000000101, 11111000001001, 11111000001111, 11111000011011, \
11111000101011, 11111000111111, 11111001000001, 11111001010011, \
11111001100101, 11111001101001, 11111010001011, 11111010100011, \
11111010111101, 11111011000101, 11111011010111, 11111011011101, \
11111011100001, 11111011111001, 11111100001101, 11111100011001, \
11111100011111, 11111100100101, 11111100110111, 11111100111101, \
11111101000011, 11111101000101, 11111101001001, 11111101010001, \
11111101010111, 11111101100001, 11111110000011, 11111110001001, \
11111110010001, 11111110101011, 11111110110101, 11111111100011, \
11111111110111, 11111111111101};

primitivePolynomialsDegree31 = (* first 1001 polynomials; src: http://www.theory.cs.uvic.ca/~cos/gen/poly.html *)
    {{31, 3, 0}, {31, 3, 2, 1, 0}, {31, 13, 8, 3, 0}, {31, 27, 23, 19, 15,
   11, 7, 3, 0}, {31, 21, 12, 3, 2, 1, 0}, {31, 20, 18, 7, 5, 3, 
  0}, {31, 20, 15, 5, 4, 3, 0}, {31, 25, 19, 14, 7, 3, 2, 1, 0}, {31, 
  16, 8, 4, 3, 2, 0}, {31, 23, 22, 15, 14, 7, 4, 3, 0}, {31, 27, 23, 
  19, 15, 11, 10, 9, 7, 6, 5, 3, 2, 1, 0}, {31, 26, 19, 9, 7, 6, 3, 2,
   0}, {31, 15, 13, 12, 7, 5, 4, 3, 0}, {31, 15, 14, 7, 6, 5, 4, 3, 2,
   1, 0}, {31, 28, 22, 19, 14, 10, 7, 4, 3, 2, 0}, {31, 30, 29, 28, 
  27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 
  10, 9, 8, 7, 6, 5, 4, 2, 1, 0}, {31, 20, 18, 17, 15, 10, 9, 8, 7, 6,
   4, 3, 2, 1, 0}, {31, 27, 24, 23, 20, 19, 16, 15, 11, 7, 6, 2, 
  0}, {31, 20, 19, 18, 16, 12, 11, 7, 4, 1, 0}, {31, 20, 18, 13, 12, 
  11, 9, 7, 2, 1, 0}, {31, 26, 22, 20, 17, 16, 13, 12, 11, 10, 9, 5, 
  3, 2, 0}, {31, 14, 12, 11, 10, 9, 7, 5, 2, 1, 0}, {31, 29, 25, 23, 
  17, 16, 15, 13, 4, 3, 2, 1, 0}, {31, 23, 22, 18, 17, 14, 13, 11, 10,
   8, 7, 5, 4, 2, 0}, {31, 27, 26, 23, 21, 19, 16, 15, 12, 8, 6, 1, 
  0}, {31, 26, 22, 21, 16, 14, 11, 9, 8, 7, 5, 4, 2, 1, 0}, {31, 20, 
  19, 15, 14, 7, 6, 5, 3, 2, 0}, {31, 15, 14, 9, 8, 6, 2, 1, 0}, {31, 
  28, 25, 23, 20, 19, 18, 17, 16, 15, 12, 11, 9, 8, 4, 3, 2, 1, 
  0}, {31, 30, 28, 27, 26, 20, 19, 18, 4, 2, 0}, {31, 28, 25, 18, 15, 
  12, 10, 9, 8, 7, 6, 1, 0}, {31, 27, 24, 23, 19, 17, 15, 12, 11, 7, 
  6, 3, 2, 1, 0}, {31, 21, 19, 17, 12, 10, 9, 7, 6, 5, 4, 3, 2, 1, 
  0}, {31, 26, 24, 22, 21, 18, 15, 13, 12, 11, 7, 4, 2, 1, 0}, {31, 
  27, 26, 22, 21, 20, 17, 16, 15, 11, 6, 5, 4, 3, 2, 1, 0}, {31, 25, 
  22, 21, 18, 16, 15, 14, 12, 9, 7, 5, 4, 3, 0}, {31, 27, 25, 21, 20, 
  18, 15, 14, 13, 12, 8, 7, 4, 1, 0}, {31, 25, 23, 22, 19, 17, 16, 14,
   11, 10, 9, 8, 7, 6, 2, 1, 0}, {31, 27, 25, 23, 22, 21, 19, 18, 17, 
  16, 15, 13, 12, 7, 4, 1, 0}, {31, 26, 16, 14, 13, 11, 10, 8, 7, 6, 
  5, 1, 0}, {31, 23, 22, 21, 20, 15, 13, 11, 10, 9, 8, 7, 6, 5, 4, 3, 
  2, 1, 0}, {31, 27, 20, 19, 16, 15, 14, 12, 11, 8, 7, 2, 0}, {31, 28,
   21, 20, 18, 17, 16, 15, 14, 12, 11, 10, 9, 7, 4, 1, 0}, {31, 30, 
  29, 27, 26, 19, 18, 14, 13, 12, 4, 3, 2, 1, 0}, {31, 25, 19, 14, 10,
   7, 4, 3, 2, 1, 0}, {31, 27, 23, 21, 17, 16, 12, 11, 10, 9, 8, 4, 3,
   1, 0}, {31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,
   16, 15, 14, 13, 11, 10, 9, 8, 7, 6, 5, 4, 2, 0}, {31, 26, 24, 22, 
  21, 19, 18, 14, 12, 7, 6, 5, 0}, {31, 27, 24, 23, 16, 11, 8, 5, 3, 
  1, 0}, {31, 24, 22, 18, 15, 14, 12, 11, 10, 9, 7, 5, 4, 1, 0}, {31, 
  29, 27, 24, 23, 22, 20, 19, 14, 13, 12, 5, 4, 1, 0}, {31, 23, 17, 
  15, 13, 12, 11, 9, 7, 5, 4, 1, 0}, {31, 27, 24, 23, 20, 19, 18, 16, 
  15, 14, 13, 12, 6, 5, 4, 3, 0}, {31, 29, 27, 26, 24, 22, 19, 16, 12,
   7, 6, 5, 4, 2, 0}, {31, 23, 17, 15, 6, 5, 3, 1, 0}, {31, 27, 26, 
  23, 22, 21, 13, 7, 5, 4, 2, 1, 0}, {31, 28, 25, 23, 22, 21, 20, 18, 
  14, 11, 10, 7, 5, 4, 2, 1, 0}, {31, 30, 27, 23, 18, 11, 10, 9, 4, 1,
   0}, {31, 25, 20, 19, 17, 16, 15, 14, 13, 11, 9, 7, 5, 4, 3, 2, 
  0}, {31, 27, 25, 21, 20, 16, 15, 14, 13, 12, 11, 8, 7, 5, 4, 3, 
  0}, {31, 30, 29, 28, 27, 25, 22, 17, 13, 9, 4, 1, 0}, {31, 28, 22, 
  21, 20, 19, 17, 15, 13, 12, 11, 10, 9, 4, 3, 1, 0}, {31, 24, 23, 21,
   20, 18, 14, 12, 11, 10, 9, 8, 5, 1, 0}, {31, 25, 24, 18, 16, 14, 
  12, 11, 10, 9, 8, 5, 4, 3, 0}, {31, 24, 23, 21, 19, 16, 14, 13, 7, 
  6, 5, 4, 0}, {31, 27, 25, 24, 22, 20, 18, 16, 12, 11, 10, 5, 3, 2, 
  0}, {31, 27, 26, 24, 23, 20, 15, 14, 8, 4, 3, 2, 0}, {31, 26, 25, 
  23, 20, 19, 15, 13, 12, 10, 8, 7, 6, 5, 4, 3, 2, 1, 0}, {31, 24, 20,
   18, 15, 14, 13, 11, 8, 7, 5, 3, 2, 1, 0}, {31, 26, 25, 23, 21, 20, 
  18, 17, 15, 14, 12, 11, 10, 9, 8, 7, 2, 1, 0}, {31, 28, 22, 21, 18, 
  12, 11, 7, 5, 3, 0}, {31, 30, 29, 28, 27, 25, 18, 15, 10, 9, 8, 7, 
  4, 3, 0}, {31, 28, 27, 24, 23, 22, 18, 17, 16, 12, 10, 9, 8, 7, 5, 
  4, 2, 1, 0}, {31, 28, 27, 26, 25, 24, 22, 19, 18, 15, 14, 12, 11, 
  10, 7, 3, 2, 1, 0}, {31, 29, 28, 26, 22, 21, 17, 14, 13, 7, 4, 1, 
  0}, {31, 28, 26, 23, 22, 21, 20, 19, 18, 16, 14, 13, 12, 11, 10, 8, 
  6, 5, 3, 2, 0}, {31, 28, 26, 25, 22, 20, 19, 18, 17, 15, 13, 12, 9, 
  8, 7, 5, 4, 3, 0}, {31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 
  14, 8, 6, 5, 4, 1, 0}, {31, 29, 25, 17, 16, 13, 9, 3, 0}, {31, 27, 
  22, 18, 17, 14, 13, 10, 6, 5, 4, 3, 2, 1, 0}, {31, 27, 23, 22, 21, 
  18, 17, 16, 14, 13, 10, 9, 7, 6, 4, 2, 0}, {31, 27, 26, 24, 23, 21, 
  20, 19, 17, 15, 14, 12, 11, 10, 9, 8, 5, 1, 0}, {31, 21, 20, 17, 15,
   13, 11, 5, 4, 3, 0}, {31, 26, 23, 21, 20, 17, 16, 14, 11, 7, 6, 5, 
  3, 2, 0}, {31, 29, 28, 26, 22, 21, 19, 17, 16, 15, 14, 13, 11, 10, 
  8, 6, 5, 1, 0}, {31, 30, 28, 27, 21, 20, 19, 18, 16, 14, 13, 9, 8, 
  6, 4, 3, 2, 1, 0}, {31, 27, 26, 23, 22, 20, 19, 17, 12, 7, 5, 3, 2, 
  1, 0}, {31, 27, 26, 24, 23, 22, 21, 20, 18, 17, 16, 15, 13, 11, 10, 
  7, 6, 3, 0}, {31, 29, 23, 21, 19, 18, 15, 14, 13, 12, 8, 7, 6, 4, 
  0}, {31, 26, 22, 21, 20, 18, 16, 11, 8, 5, 4, 3, 2, 1, 0}, {31, 27, 
  26, 22, 20, 18, 15, 14, 13, 12, 10, 9, 6, 4, 3, 2, 0}, {31, 30, 28, 
  26, 25, 24, 23, 22, 20, 19, 18, 15, 13, 9, 7, 6, 4, 3, 2, 1, 
  0}, {31, 28, 27, 26, 24, 21, 20, 19, 18, 15, 14, 13, 12, 11, 9, 6, 
  5, 3, 0}, {31, 27, 26, 24, 23, 20, 19, 17, 13, 10, 9, 7, 5, 4, 2, 1,
   0}, {31, 27, 23, 21, 19, 18, 17, 16, 15, 13, 12, 9, 8, 5, 4, 1, 
  0}, {31, 23, 22, 21, 15, 14, 13, 12, 11, 7, 6, 5, 0}, {31, 27, 26, 
  23, 21, 19, 16, 15, 10, 9, 8, 7, 2, 1, 0}, {31, 27, 24, 23, 22, 20, 
  18, 15, 14, 12, 10, 9, 7, 6, 5, 4, 2, 1, 0}, {31, 28, 27, 24, 23, 
  19, 16, 15, 13, 12, 11, 10, 9, 1, 0}, {31, 30, 29, 27, 25, 24, 22, 
  21, 20, 19, 17, 15, 14, 13, 12, 11, 10, 9, 7, 5, 4, 2, 0}, {31, 28, 
  27, 25, 24, 21, 17, 16, 15, 14, 12, 11, 10, 9, 6, 4, 3, 2, 0}, {31, 
  27, 24, 23, 19, 17, 15, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 
  0}, {31, 30, 28, 27, 26, 22, 20, 19, 17, 16, 15, 11, 10, 7, 6, 5, 4,
   3, 0}, {31, 27, 24, 22, 20, 19, 17, 13, 12, 10, 8, 6, 5, 3, 2, 1, 
  0}, {31, 27, 25, 22, 20, 17, 14, 13, 12, 11, 10, 8, 6, 5, 4, 2, 
  0}, {31, 30, 28, 25, 20, 17, 16, 15, 12, 11, 6, 5, 4, 1, 0}, {31, 
  29, 28, 27, 26, 24, 21, 17, 16, 15, 12, 11, 9, 7, 5, 3, 2, 1, 
  0}, {31, 27, 25, 23, 21, 18, 17, 13, 12, 11, 10, 8, 6, 5, 3, 2, 
  0}, {31, 30, 29, 28, 23, 22, 21, 20, 15, 11, 7, 4, 0}, {31, 29, 26, 
  25, 22, 21, 19, 18, 17, 16, 15, 8, 7, 6, 4, 3, 2, 1, 0}, {31, 27, 
  18, 10, 6, 5, 4, 3, 2, 1, 0}, {31, 27, 20, 19, 18, 17, 16, 15, 14, 
  13, 12, 11, 7, 6, 5, 4, 0}, {31, 29, 28, 26, 23, 20, 19, 18, 17, 16,
   13, 10, 6, 3, 0}, {31, 30, 27, 25, 22, 21, 20, 19, 18, 16, 15, 7, 
  4, 1, 0}, {31, 28, 27, 24, 22, 18, 16, 15, 14, 13, 11, 9, 8, 7, 6, 
  3, 0}, {31, 29, 28, 26, 25, 21, 20, 18, 15, 14, 13, 10, 8, 7, 2, 1, 
  0}, {31, 30, 28, 27, 26, 23, 22, 19, 18, 15, 9, 6, 4, 3, 0}, {31, 
  27, 25, 24, 23, 21, 14, 13, 10, 9, 8, 3, 2, 1, 0}, {31, 25, 24, 23, 
  22, 20, 19, 18, 15, 8, 7, 5, 4, 1, 0}, {31, 30, 29, 26, 22, 21, 20, 
  19, 18, 16, 12, 7, 6, 5, 4, 3, 0}, {31, 28, 25, 24, 19, 17, 16, 15, 
  11, 9, 6, 4, 0}, {31, 28, 25, 23, 22, 20, 17, 15, 14, 12, 11, 8, 7, 
  6, 5, 3, 2, 1, 0}, {31, 30, 29, 28, 27, 26, 25, 24, 22, 21, 20, 18, 
  17, 16, 13, 12, 11, 9, 8, 5, 4, 1, 0}, {31, 28, 26, 25, 23, 19, 17, 
  16, 13, 10, 3, 2, 0}, {31, 24, 21, 18, 14, 13, 12, 5, 3, 2, 0}, {31,
   24, 21, 18, 16, 14, 13, 11, 9, 8, 7, 6, 5, 2, 0}, {31, 28, 26, 23, 
  22, 21, 18, 15, 14, 11, 8, 7, 5, 4, 0}, {31, 30, 29, 28, 26, 24, 22,
   21, 18, 13, 12, 11, 10, 9, 5, 3, 2, 1, 0}, {31, 25, 23, 20, 19, 18,
   16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 1, 0}, {31, 27, 25, 24, 23,
   21, 19, 18, 14, 12, 9, 8, 5, 1, 0}, {31, 28, 27, 25, 24, 21, 20, 
  14, 11, 7, 6, 3, 2, 1, 0}, {31, 28, 26, 23, 22, 20, 18, 16, 15, 14, 
  11, 7, 6, 4, 2, 1, 0}, {31, 26, 19, 18, 17, 14, 13, 9, 8, 6, 5, 4, 
  3, 2, 0}, {31, 29, 25, 24, 23, 22, 20, 18, 14, 13, 11, 10, 9, 8, 6, 
  3, 2, 1, 0}, {31, 29, 28, 27, 26, 25, 23, 22, 20, 18, 12, 11, 9, 5, 
  4, 3, 0}, {31, 28, 25, 24, 22, 18, 14, 12, 9, 8, 7, 5, 3, 2, 
  0}, {31, 26, 25, 24, 22, 21, 20, 19, 16, 14, 13, 10, 9, 8, 0}, {31, 
  26, 25, 23, 21, 20, 18, 16, 15, 14, 13, 10, 8, 7, 6, 5, 4, 3, 2, 1, 
  0}, {31, 28, 24, 21, 19, 14, 12, 10, 9, 5, 3, 2, 0}, {31, 30, 29, 
  28, 27, 26, 25, 24, 23, 22, 18, 17, 16, 15, 14, 13, 12, 11, 9, 7, 5,
   2, 0}, {31, 28, 27, 25, 24, 21, 19, 18, 17, 16, 13, 12, 7, 4, 3, 2,
   0}, {31, 30, 28, 26, 25, 21, 20, 19, 18, 17, 15, 12, 11, 10, 8, 5, 
  4, 1, 0}, {31, 28, 23, 22, 21, 20, 18, 16, 12, 7, 6, 5, 4, 2, 
  0}, {31, 27, 24, 21, 19, 18, 16, 14, 11, 10, 8, 5, 3, 2, 0}, {31, 
  28, 27, 26, 25, 24, 23, 21, 17, 16, 12, 10, 9, 8, 6, 5, 4, 3, 
  0}, {31, 26, 25, 24, 22, 21, 20, 19, 17, 16, 15, 14, 13, 12, 11, 8, 
  7, 3, 0}, {31, 29, 28, 27, 22, 21, 19, 18, 17, 16, 11, 9, 5, 3, 2, 
  1, 0}, {31, 29, 27, 25, 22, 21, 20, 18, 17, 16, 15, 14, 12, 11, 10, 
  9, 6, 5, 4, 2, 0}, {31, 28, 25, 21, 18, 16, 15, 14, 13, 12, 11, 7, 
  4, 1, 0}, {31, 22, 21, 19, 18, 17, 16, 13, 11, 6, 4, 3, 0}, {31, 28,
   20, 18, 17, 15, 14, 13, 10, 8, 7, 6, 4, 3, 0}, {31, 26, 25, 22, 17,
   16, 15, 14, 13, 11, 10, 9, 8, 6, 5, 1, 0}, {31, 28, 25, 23, 22, 18,
   16, 15, 8, 7, 6, 5, 2, 1, 0}, {31, 30, 28, 26, 23, 22, 21, 18, 17, 
  14, 13, 10, 8, 7, 4, 1, 0}, {31, 25, 23, 20, 19, 17, 16, 14, 11, 6, 
  5, 1, 0}, {31, 30, 29, 26, 25, 23, 21, 20, 16, 15, 14, 13, 5, 1, 
  0}, {31, 25, 23, 20, 19, 17, 16, 15, 14, 13, 11, 10, 8, 7, 6, 5, 4, 
  3, 2, 1, 0}, {31, 27, 25, 23, 22, 21, 20, 19, 18, 16, 14, 13, 12, 
  11, 10, 6, 4, 1, 0}, {31, 30, 29, 26, 25, 21, 17, 15, 13, 11, 10, 8,
   4, 2, 0}, {31, 26, 25, 24, 23, 22, 20, 18, 8, 6, 4, 3, 0}, {31, 25,
   22, 21, 20, 17, 16, 13, 12, 11, 10, 9, 7, 6, 3, 2, 0}, {31, 29, 27,
   25, 24, 23, 20, 18, 14, 12, 10, 8, 6, 1, 0}, {31, 29, 26, 25, 24, 
  23, 22, 18, 15, 14, 11, 9, 8, 7, 5, 3, 2, 1, 0}, {31, 21, 20, 16, 
  15, 14, 13, 9, 7, 5, 4, 2, 0}, {31, 29, 26, 25, 24, 23, 22, 21, 17, 
  12, 11, 10, 7, 5, 4, 3, 0}, {31, 29, 26, 25, 24, 21, 20, 19, 18, 16,
   13, 10, 8, 5, 4, 1, 0}, {31, 20, 16, 13, 12, 9, 7, 5, 4, 3, 
  0}, {31, 30, 29, 27, 26, 22, 20, 16, 14, 13, 12, 10, 9, 8, 7, 6, 5, 
  3, 0}, {31, 28, 27, 25, 24, 22, 21, 20, 18, 17, 16, 11, 8, 6, 5, 2, 
  0}, {31, 30, 25, 23, 22, 19, 11, 8, 5, 3, 0}, {31, 30, 29, 28, 27, 
  26, 25, 24, 20, 19, 18, 17, 16, 15, 14, 11, 10, 4, 0}, {31, 26, 21, 
  20, 19, 18, 17, 15, 13, 12, 9, 7, 5, 2, 0}, {31, 30, 29, 26, 23, 21,
   20, 18, 17, 15, 14, 13, 12, 11, 9, 8, 7, 6, 5, 4, 2, 1, 0}, {31, 
  26, 23, 20, 19, 18, 17, 16, 14, 13, 11, 10, 9, 6, 5, 4, 0}, {31, 29,
   27, 23, 22, 21, 17, 16, 14, 13, 8, 7, 3, 2, 0}, {31, 29, 26, 23, 
  22, 18, 17, 14, 12, 11, 10, 6, 5, 4, 2, 1, 0}, {31, 27, 25, 21, 20, 
  14, 13, 12, 10, 8, 7, 5, 0}, {31, 29, 25, 24, 21, 18, 15, 14, 10, 9,
   8, 5, 3, 1, 0}, {31, 29, 25, 24, 20, 18, 17, 15, 12, 10, 8, 7, 5, 
  4, 2, 1, 0}, {31, 27, 26, 22, 17, 13, 11, 7, 6, 3, 2, 1, 0}, {31, 
  26, 24, 23, 21, 18, 17, 16, 15, 14, 9, 8, 6, 4, 3, 1, 0}, {31, 30, 
  28, 27, 24, 23, 20, 19, 18, 17, 16, 14, 13, 12, 11, 10, 9, 8, 5, 4, 
  2, 1, 0}, {31, 28, 26, 23, 22, 20, 19, 16, 15, 14, 12, 11, 8, 5, 4, 
  2, 0}, {31, 30, 29, 28, 25, 23, 22, 21, 18, 16, 14, 12, 11, 10, 9, 
  8, 0}, {31, 30, 29, 27, 26, 25, 24, 18, 15, 14, 13, 12, 10, 9, 7, 6,
   5, 3, 0}, {31, 27, 25, 23, 18, 17, 11, 10, 8, 6, 5, 4, 2, 1, 
  0}, {31, 29, 27, 21, 18, 14, 13, 10, 9, 6, 3, 1, 0}, {31, 26, 20, 
  19, 15, 14, 12, 4, 2, 1, 0}, {31, 21, 20, 17, 16, 13, 12, 10, 9, 8, 
  7, 6, 5, 3, 0}, {31, 30, 28, 26, 16, 15, 14, 13, 12, 10, 7, 6, 4, 1,
   0}, {31, 29, 27, 26, 25, 23, 17, 16, 10, 7, 5, 3, 2, 1, 0}, {31, 
  27, 26, 24, 21, 18, 17, 15, 10, 7, 5, 2, 0}, {31, 25, 24, 22, 21, 
  20, 16, 14, 13, 12, 10, 8, 5, 3, 0}, {31, 27, 24, 23, 20, 19, 17, 
  16, 15, 14, 13, 12, 7, 6, 5, 4, 3, 2, 0}, {31, 26, 24, 22, 21, 19, 
  18, 17, 16, 15, 14, 11, 10, 9, 8, 5, 4, 2, 0}, {31, 30, 28, 27, 26, 
  25, 24, 23, 22, 20, 19, 18, 17, 15, 13, 11, 10, 9, 8, 7, 3, 2, 
  0}, {31, 29, 28, 26, 24, 23, 21, 19, 18, 17, 16, 15, 13, 12, 11, 8, 
  4, 1, 0}, {31, 30, 28, 25, 23, 20, 19, 15, 14, 12, 10, 8, 6, 5, 4, 
  3, 0}, {31, 29, 28, 26, 23, 22, 20, 19, 17, 15, 14, 12, 11, 10, 9, 
  7, 5, 4, 0}, {31, 28, 27, 25, 24, 21, 18, 17, 16, 13, 9, 7, 6, 4, 2,
   1, 0}, {31, 29, 27, 25, 22, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5,
   0}, {31, 30, 29, 28, 27, 26, 25, 24, 23, 19, 14, 12, 10, 9, 8, 4, 
  0}, {31, 29, 26, 25, 19, 18, 16, 15, 12, 10, 9, 7, 6, 4, 2, 1, 
  0}, {31, 30, 29, 26, 25, 24, 23, 18, 17, 16, 14, 13, 9, 8, 7, 5, 3, 
  1, 0}, {31, 24, 20, 18, 15, 14, 12, 11, 10, 9, 4, 2, 0}, {31, 24, 
  23, 22, 20, 19, 17, 8, 7, 1, 0}, {31, 24, 20, 19, 16, 14, 12, 11, 
  10, 9, 3, 2, 0}, {31, 26, 25, 20, 15, 14, 13, 12, 11, 9, 7, 6, 
  0}, {31, 29, 27, 24, 23, 22, 19, 16, 15, 10, 8, 2, 0}, {31, 30, 29, 
  27, 25, 24, 22, 21, 18, 15, 14, 12, 10, 6, 4, 1, 0}, {31, 28, 26, 
  23, 22, 19, 17, 15, 14, 11, 7, 4, 2, 1, 0}, {31, 30, 29, 26, 25, 24,
   23, 22, 21, 20, 19, 16, 15, 14, 13, 12, 10, 8, 6, 3, 2, 1, 0}, {31,
   29, 23, 20, 19, 16, 14, 12, 11, 10, 9, 7, 6, 5, 0}, {31, 27, 24, 
  23, 22, 19, 18, 13, 11, 10, 9, 5, 4, 3, 2, 1, 0}, {31, 30, 26, 23, 
  22, 19, 14, 13, 12, 10, 9, 8, 7, 5, 2, 1, 0}, {31, 30, 28, 27, 26, 
  24, 23, 22, 17, 13, 11, 9, 7, 4, 0}, {31, 23, 21, 20, 19, 18, 16, 
  15, 12, 11, 7, 5, 4, 3, 0}, {31, 30, 29, 26, 24, 23, 21, 20, 10, 9, 
  7, 6, 4, 3, 0}, {31, 29, 20, 19, 16, 15, 14, 13, 11, 10, 9, 8, 7, 6,
   2, 1, 0}, {31, 27, 25, 23, 22, 16, 15, 12, 10, 9, 8, 5, 3, 2, 
  0}, {31, 30, 28, 25, 22, 20, 19, 18, 17, 15, 14, 13, 11, 10, 9, 5, 
  4, 3, 2, 1, 0}, {31, 29, 27, 26, 23, 22, 20, 19, 17, 16, 12, 10, 9, 
  7, 6, 5, 3, 2, 0}, {31, 25, 23, 18, 17, 14, 13, 10, 3, 2, 0}, {31, 
  30, 28, 24, 23, 22, 20, 18, 16, 14, 12, 7, 6, 4, 2, 1, 0}, {31, 29, 
  28, 24, 19, 17, 15, 13, 12, 10, 7, 6, 4, 3, 0}, {31, 30, 23, 22, 21,
   20, 18, 16, 15, 9, 8, 6, 5, 4, 0}, {31, 30, 29, 27, 25, 24, 22, 19,
   18, 17, 16, 13, 12, 11, 2, 1, 0}, {31, 29, 28, 26, 25, 19, 18, 16, 
  15, 14, 6, 5, 2, 1, 0}, {31, 30, 28, 27, 24, 22, 21, 19, 18, 16, 12,
   11, 9, 8, 6, 4, 3, 2, 0}, {31, 30, 27, 26, 25, 24, 22, 21, 18, 17, 
  15, 12, 7, 5, 4, 3, 2, 1, 0}, {31, 29, 25, 23, 21, 20, 19, 18, 16, 
  15, 14, 12, 11, 10, 9, 8, 7, 5, 0}, {31, 30, 27, 24, 23, 22, 21, 20,
   19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 8, 5, 0}, {31, 30, 29, 28, 
  25, 24, 23, 22, 16, 15, 14, 12, 11, 9, 8, 3, 2, 1, 0}, {31, 29, 27, 
  25, 22, 21, 20, 18, 17, 15, 14, 13, 11, 9, 6, 3, 2, 1, 0}, {31, 30, 
  28, 27, 26, 23, 22, 20, 18, 16, 15, 14, 11, 4, 3, 1, 0}, {31, 27, 
  26, 25, 23, 22, 21, 20, 17, 16, 12, 10, 9, 7, 6, 5, 2, 1, 0}, {31, 
  29, 24, 22, 17, 16, 15, 14, 10, 7, 5, 4, 0}, {31, 30, 29, 26, 25, 
  24, 22, 20, 19, 18, 17, 16, 15, 14, 12, 7, 6, 5, 4, 1, 0}, {31, 28, 
  27, 25, 24, 21, 19, 18, 17, 16, 14, 13, 12, 10, 7, 6, 4, 3, 2, 1, 
  0}, {31, 30, 27, 26, 25, 23, 15, 12, 11, 9, 8, 7, 6, 5, 4, 2, 
  0}, {31, 30, 29, 28, 27, 25, 23, 20, 19, 17, 16, 14, 13, 11, 7, 6, 
  4, 3, 0}, {31, 28, 26, 25, 24, 22, 16, 15, 14, 12, 11, 8, 7, 2, 
  0}, {31, 28, 26, 24, 23, 22, 21, 19, 18, 16, 15, 14, 12, 10, 5, 4, 
  3, 1, 0}, {31, 30, 29, 28, 24, 22, 21, 20, 19, 15, 14, 13, 12, 11, 
  10, 8, 6, 5, 3, 2, 0}, {31, 28, 26, 24, 23, 21, 19, 18, 16, 15, 11, 
  8, 5, 4, 2, 1, 0}, {31, 28, 27, 23, 22, 21, 20, 19, 18, 17, 14, 12, 
  11, 9, 6, 3, 0}, {31, 30, 28, 26, 23, 21, 20, 19, 18, 17, 16, 15, 
  14, 12, 10, 5, 0}, {31, 25, 24, 23, 21, 20, 19, 18, 17, 11, 9, 5, 2,
   1, 0}, {31, 27, 26, 24, 21, 19, 18, 17, 16, 14, 12, 9, 8, 7, 
  0}, {31, 26, 22, 21, 20, 19, 18, 17, 16, 12, 11, 10, 7, 4, 3, 1, 
  0}, {31, 26, 24, 19, 17, 15, 14, 9, 6, 5, 4, 3, 2, 1, 0}, {31, 29, 
  27, 26, 24, 23, 21, 20, 18, 17, 16, 15, 14, 13, 10, 9, 6, 4, 3, 1, 
  0}, {31, 28, 26, 25, 24, 23, 22, 21, 20, 19, 18, 16, 14, 12, 11, 9, 
  8, 4, 3, 1, 0}, {31, 30, 28, 27, 26, 24, 22, 19, 17, 15, 14, 13, 12,
   11, 10, 8, 7, 6, 3, 1, 0}, {31, 25, 23, 20, 17, 15, 14, 10, 8, 6, 
  4, 2, 0}, {31, 28, 27, 24, 23, 19, 18, 16, 15, 12, 11, 10, 9, 8, 7, 
  5, 4, 3, 2, 1, 0}, {31, 25, 23, 21, 20, 19, 18, 17, 16, 15, 14, 1, 
  0}, {31, 27, 24, 23, 22, 21, 20, 18, 15, 12, 9, 7, 6, 5, 3, 1, 
  0}, {31, 27, 26, 23, 22, 21, 19, 12, 11, 10, 9, 6, 4, 2, 0}, {31, 
  27, 23, 22, 21, 17, 16, 15, 12, 9, 7, 6, 3, 1, 0}, {31, 28, 27, 26, 
  25, 24, 23, 22, 21, 19, 14, 13, 12, 11, 8, 5, 4, 3, 0}, {31, 26, 24,
   23, 22, 21, 17, 14, 13, 12, 11, 10, 7, 6, 5, 3, 0}, {31, 27, 24, 
  22, 20, 19, 17, 15, 12, 10, 9, 8, 7, 6, 3, 1, 0}, {31, 30, 29, 28, 
  27, 24, 23, 22, 21, 20, 18, 16, 15, 13, 11, 9, 8, 6, 5, 3, 2, 1, 
  0}, {31, 22, 21, 20, 14, 12, 11, 9, 4, 1, 0}, {31, 29, 27, 26, 24, 
  23, 21, 20, 19, 17, 13, 12, 11, 10, 8, 6, 5, 2, 0}, {31, 28, 26, 24,
   23, 16, 14, 13, 11, 10, 9, 8, 7, 6, 0}, {31, 30, 29, 27, 26, 25, 
  24, 20, 18, 16, 12, 10, 8, 7, 6, 5, 4, 3, 2, 1, 0}, {31, 28, 26, 21,
   20, 17, 14, 10, 9, 7, 5, 4, 3, 1, 0}, {31, 27, 26, 24, 23, 21, 20, 
  17, 15, 14, 11, 10, 8, 6, 5, 4, 3, 1, 0}, {31, 30, 28, 27, 25, 23, 
  20, 17, 13, 12, 10, 9, 8, 3, 2, 1, 0}, {31, 27, 24, 22, 20, 17, 16, 
  14, 9, 8, 3, 1, 0}, {31, 26, 25, 22, 19, 16, 12, 11, 10, 9, 8, 7, 5,
   1, 0}, {31, 27, 23, 21, 14, 12, 10, 8, 5, 2, 0}, {31, 29, 28, 27, 
  25, 24, 23, 20, 17, 16, 14, 12, 8, 7, 6, 5, 3, 1, 0}, {31, 25, 24, 
  23, 22, 21, 20, 17, 15, 14, 10, 9, 8, 7, 4, 3, 0}, {31, 28, 25, 24, 
  20, 19, 18, 14, 13, 12, 10, 7, 5, 4, 0}, {31, 30, 29, 26, 24, 23, 
  22, 21, 16, 15, 14, 13, 11, 10, 8, 6, 4, 1, 0}, {31, 24, 23, 18, 15,
   10, 9, 8, 7, 5, 2, 1, 0}, {31, 29, 26, 25, 23, 22, 21, 20, 17, 16, 
  15, 14, 13, 12, 8, 6, 3, 2, 0}, {31, 28, 25, 22, 21, 20, 18, 16, 15,
   13, 12, 11, 9, 6, 0}, {31, 30, 27, 24, 23, 22, 21, 19, 18, 17, 14, 
  13, 12, 11, 10, 7, 6, 4, 0}, {31, 29, 28, 27, 21, 18, 16, 12, 11, 9,
   6, 3, 2, 1, 0}, {31, 27, 26, 23, 18, 17, 14, 12, 11, 9, 7, 6, 4, 1,
   0}, {31, 30, 29, 28, 26, 25, 21, 20, 18, 13, 11, 8, 7, 6, 2, 1, 
  0}, {31, 28, 27, 26, 24, 23, 21, 19, 13, 11, 7, 6, 2, 1, 0}, {31, 
  28, 25, 23, 16, 15, 14, 13, 9, 8, 4, 2, 0}, {31, 27, 26, 25, 24, 22,
   21, 20, 19, 17, 15, 14, 6, 5, 3, 2, 0}, {31, 28, 27, 26, 25, 24, 
  23, 21, 18, 17, 15, 13, 10, 9, 7, 5, 3, 2, 0}, {31, 28, 27, 26, 25, 
  20, 18, 16, 15, 9, 5, 2, 0}, {31, 28, 23, 19, 17, 16, 15, 13, 12, 
  11, 7, 6, 5, 4, 2, 1, 0}, {31, 30, 29, 27, 25, 24, 23, 22, 20, 17, 
  11, 10, 9, 8, 6, 5, 0}, {31, 28, 26, 25, 21, 18, 17, 13, 11, 5, 3, 
  2, 0}, {31, 29, 28, 26, 25, 22, 20, 19, 18, 17, 16, 15, 14, 9, 8, 7,
   6, 3, 0}, {31, 30, 29, 22, 21, 18, 12, 11, 9, 7, 6, 1, 0}, {31, 30,
   29, 28, 27, 24, 23, 22, 21, 20, 18, 17, 15, 14, 12, 9, 8, 4, 3, 1, 
  0}, {31, 29, 24, 23, 22, 20, 19, 18, 11, 7, 5, 2, 0}, {31, 27, 23, 
  22, 21, 20, 18, 17, 15, 14, 10, 7, 6, 1, 0}, {31, 28, 25, 24, 21, 
  18, 12, 10, 9, 4, 0}, {31, 28, 27, 26, 25, 24, 22, 20, 15, 12, 11, 
  10, 8, 7, 4, 1, 0}, {31, 27, 26, 24, 21, 17, 14, 13, 10, 9, 8, 6, 5,
   4, 0}, {31, 30, 28, 27, 26, 23, 21, 20, 17, 16, 14, 12, 11, 5, 3, 
  1, 0}, {31, 29, 28, 27, 26, 23, 22, 21, 16, 14, 12, 10, 9, 3, 
  0}, {31, 28, 24, 20, 19, 18, 14, 13, 11, 8, 7, 4, 3, 1, 0}, {31, 27,
   25, 24, 23, 20, 18, 16, 12, 8, 7, 6, 4, 3, 2, 1, 0}, {31, 30, 28, 
  27, 23, 19, 18, 16, 13, 12, 11, 10, 3, 1, 0}, {31, 28, 25, 24, 21, 
  18, 9, 8, 6, 5, 3, 1, 0}, {31, 29, 28, 26, 23, 21, 17, 16, 15, 14, 
  9, 8, 7, 6, 4, 1, 0}, {31, 30, 18, 17, 15, 14, 10, 8, 7, 6, 4, 2, 
  0}, {31, 30, 28, 27, 26, 23, 22, 21, 20, 14, 13, 12, 9, 6, 5, 3, 
  0}, {31, 28, 25, 24, 20, 19, 18, 17, 15, 14, 11, 10, 9, 8, 7, 6, 4, 
  3, 2, 1, 0}, {31, 28, 27, 25, 24, 23, 22, 21, 19, 16, 14, 13, 11, 
  10, 9, 8, 6, 5, 0}, {31, 29, 28, 26, 24, 23, 22, 19, 17, 16, 15, 12,
   10, 7, 5, 2, 0}, {31, 29, 28, 26, 21, 18, 17, 16, 13, 11, 10, 7, 6,
   2, 0}, {31, 28, 27, 26, 25, 23, 22, 20, 18, 17, 16, 12, 11, 10, 9, 
  8, 7, 3, 2, 1, 0}, {31, 30, 26, 22, 18, 17, 16, 15, 13, 11, 10, 8, 
  7, 6, 4, 1, 0}, {31, 28, 27, 23, 22, 21, 19, 18, 17, 16, 14, 12, 11,
   10, 8, 7, 6, 4, 2, 1, 0}, {31, 28, 27, 26, 25, 24, 20, 18, 16, 13, 
  7, 6, 3, 1, 0}, {31, 28, 27, 25, 21, 20, 18, 16, 15, 12, 9, 8, 5, 4,
   3, 1, 0}, {31, 30, 29, 28, 23, 21, 20, 17, 15, 14, 11, 10, 8, 6, 5,
   1, 0}, {31, 28, 27, 25, 23, 22, 19, 15, 14, 13, 12, 10, 9, 8, 7, 6,
   5, 1, 0}, {31, 29, 28, 26, 25, 24, 22, 21, 20, 18, 17, 12, 5, 2, 
  0}, {31, 29, 27, 24, 22, 21, 18, 14, 12, 8, 2, 1, 0}, {31, 30, 29, 
  28, 25, 23, 21, 19, 18, 16, 15, 10, 9, 6, 3, 1, 0}, {31, 25, 24, 23,
   21, 19, 18, 17, 16, 15, 10, 7, 4, 3, 0}, {31, 30, 29, 28, 23, 18, 
  17, 16, 15, 14, 10, 8, 5, 4, 0}, {31, 30, 29, 27, 26, 24, 23, 22, 
  21, 19, 18, 15, 11, 10, 9, 6, 3, 2, 0}, {31, 29, 26, 25, 23, 21, 20,
   15, 13, 11, 10, 8, 0}, {31, 24, 23, 21, 20, 19, 17, 15, 14, 13, 11,
   8, 3, 1, 0}, {31, 30, 28, 25, 22, 20, 17, 16, 14, 12, 11, 10, 9, 5,
   3, 2, 0}, {31, 29, 27, 26, 22, 20, 19, 17, 15, 14, 12, 10, 9, 8, 6,
   4, 3, 1, 0}, {31, 27, 22, 21, 19, 18, 14, 7, 6, 5, 4, 3, 2, 1, 
  0}, {31, 30, 28, 27, 21, 20, 19, 18, 16, 14, 12, 10, 6, 4, 3, 1, 
  0}, {31, 30, 29, 25, 21, 20, 19, 17, 16, 14, 12, 10, 6, 5, 2, 1, 
  0}, {31, 23, 22, 19, 17, 16, 13, 11, 9, 8, 6, 5, 3, 2, 0}, {31, 29, 
  27, 26, 19, 12, 9, 7, 4, 2, 0}, {31, 28, 27, 25, 24, 23, 22, 20, 16,
   15, 14, 12, 11, 9, 6, 5, 3, 2, 0}, {31, 30, 27, 25, 23, 20, 18, 17,
   15, 11, 10, 9, 8, 5, 3, 1, 0}, {31, 29, 28, 26, 22, 20, 18, 17, 16,
   14, 13, 12, 9, 5, 2, 1, 0}, {31, 30, 29, 28, 27, 26, 25, 23, 22, 
  19, 17, 16, 15, 14, 13, 12, 11, 10, 7, 6, 5, 4, 3, 2, 0}, {31, 30, 
  27, 26, 25, 23, 21, 20, 18, 17, 16, 15, 13, 12, 8, 6, 5, 4, 2, 1, 
  0}, {31, 29, 26, 25, 24, 21, 20, 17, 15, 12, 8, 6, 4, 2, 0}, {31, 
  24, 22, 21, 20, 18, 17, 15, 13, 12, 11, 10, 9, 7, 6, 4, 3, 2, 
  0}, {31, 30, 29, 27, 26, 25, 24, 18, 17, 15, 12, 10, 6, 1, 0}, {31, 
  29, 26, 25, 20, 16, 15, 14, 13, 12, 9, 7, 5, 4, 0}, {31, 26, 23, 22,
   17, 15, 14, 13, 12, 11, 10, 6, 4, 3, 2, 1, 0}, {31, 30, 29, 25, 24,
   22, 21, 19, 17, 14, 13, 11, 10, 9, 8, 7, 6, 4, 3, 2, 0}, {31, 30, 
  29, 25, 23, 18, 14, 9, 6, 5, 3, 1, 0}, {31, 26, 25, 24, 23, 21, 20, 
  18, 16, 12, 8, 7, 5, 2, 0}, {31, 29, 27, 26, 24, 20, 19, 18, 14, 13,
   12, 11, 9, 7, 6, 5, 4, 1, 0}, {31, 30, 27, 26, 25, 23, 21, 20, 18, 
  12, 10, 8, 5, 4, 0}, {31, 30, 29, 28, 26, 25, 24, 23, 19, 16, 15, 
  12, 10, 9, 8, 5, 2, 1, 0}, {31, 29, 27, 23, 19, 18, 17, 16, 15, 10, 
  6, 5, 4, 3, 2, 1, 0}, {31, 30, 28, 27, 23, 21, 20, 19, 18, 15, 14, 
  12, 11, 10, 8, 7, 6, 3, 2, 1, 0}, {31, 29, 25, 23, 21, 17, 14, 13, 
  12, 10, 8, 7, 6, 5, 4, 2, 0}, {31, 29, 28, 26, 25, 23, 19, 18, 17, 
  15, 13, 12, 8, 7, 6, 5, 4, 1, 0}, {31, 30, 29, 28, 26, 25, 24, 22, 
  18, 17, 16, 13, 11, 10, 9, 8, 6, 5, 2, 1, 0}, {31, 24, 23, 17, 16, 
  15, 14, 12, 9, 2, 0}, {31, 23, 22, 21, 20, 17, 11, 10, 9, 6, 5, 1, 
  0}, {31, 27, 26, 24, 22, 20, 19, 18, 17, 16, 14, 13, 12, 9, 6, 5, 4,
   3, 0}, {31, 29, 26, 25, 24, 23, 22, 21, 19, 17, 16, 15, 12, 11, 8, 
  5, 3, 2, 0}, {31, 30, 28, 27, 24, 23, 22, 21, 20, 19, 16, 13, 12, 
  11, 9, 7, 3, 2, 0}, {31, 27, 22, 21, 20, 16, 15, 14, 13, 11, 10, 9, 
  8, 6, 3, 1, 0}, {31, 30, 29, 27, 25, 24, 20, 17, 16, 14, 9, 8, 7, 6,
   5, 4, 2, 1, 0}, {31, 30, 22, 21, 18, 17, 16, 15, 14, 11, 10, 9, 6, 
  3, 2, 1, 0}, {31, 30, 28, 27, 25, 24, 20, 17, 10, 9, 8, 7, 2, 1, 
  0}, {31, 28, 26, 25, 24, 22, 20, 17, 14, 10, 7, 6, 5, 3, 2, 1, 
  0}, {31, 30, 29, 27, 26, 25, 24, 23, 20, 18, 16, 14, 13, 12, 11, 10,
   6, 1, 0}, {31, 27, 26, 24, 23, 12, 9, 8, 7, 6, 5, 2, 0}, {31, 28, 
  27, 23, 20, 19, 16, 15, 14, 10, 8, 7, 6, 5, 0}, {31, 30, 28, 27, 26,
   24, 23, 22, 19, 18, 17, 14, 13, 12, 9, 8, 7, 4, 3, 1, 0}, {31, 29, 
  28, 26, 25, 23, 22, 20, 18, 17, 16, 14, 11, 10, 8, 7, 6, 5, 3, 1, 
  0}, {31, 26, 25, 24, 20, 18, 12, 11, 10, 9, 7, 5, 0}, {31, 25, 24, 
  22, 19, 17, 15, 11, 6, 1, 0}, {31, 25, 24, 23, 21, 19, 16, 15, 11, 
  9, 7, 5, 4, 2, 0}, {31, 30, 28, 25, 24, 23, 22, 21, 19, 18, 17, 16, 
  14, 10, 7, 6, 3, 2, 0}, {31, 26, 25, 24, 23, 21, 20, 17, 15, 13, 12,
   11, 10, 9, 7, 6, 5, 3, 0}, {31, 30, 29, 24, 23, 21, 20, 19, 15, 13,
   12, 10, 9, 8, 7, 3, 0}, {31, 28, 27, 26, 25, 23, 21, 20, 19, 16, 
  12, 11, 9, 7, 5, 3, 2, 1, 0}, {31, 30, 29, 26, 25, 22, 18, 17, 14, 
  9, 8, 7, 6, 5, 4, 3, 0}, {31, 26, 25, 24, 22, 18, 17, 14, 12, 10, 9,
   6, 2, 1, 0}, {31, 29, 25, 24, 23, 20, 17, 15, 13, 11, 8, 5, 3, 1, 
  0}, {31, 30, 26, 24, 22, 20, 18, 17, 13, 12, 10, 7, 6, 1, 0}, {31, 
  28, 27, 24, 22, 19, 17, 12, 11, 10, 8, 4, 0}, {31, 26, 24, 23, 22, 
  20, 18, 16, 15, 12, 7, 6, 4, 2, 0}, {31, 29, 26, 22, 19, 18, 15, 13,
   10, 9, 8, 3, 2, 1, 0}, {31, 29, 26, 25, 23, 21, 19, 16, 15, 13, 10,
   7, 3, 1, 0}, {31, 30, 29, 28, 27, 22, 19, 17, 14, 9, 7, 6, 4, 3, 2,
   1, 0}, {31, 29, 25, 24, 22, 21, 20, 19, 16, 14, 11, 10, 9, 6, 5, 4,
   2, 1, 0}, {31, 30, 28, 25, 24, 23, 21, 20, 19, 18, 16, 15, 13, 9, 
  8, 7, 6, 2, 0}, {31, 26, 24, 23, 22, 21, 14, 12, 5, 4, 3, 1, 
  0}, {31, 30, 28, 27, 26, 25, 24, 22, 19, 18, 15, 8, 6, 1, 0}, {31, 
  28, 25, 24, 23, 22, 17, 16, 15, 14, 11, 9, 8, 4, 0}, {31, 30, 25, 
  21, 20, 19, 13, 11, 10, 9, 7, 6, 5, 4, 3, 2, 0}, {31, 30, 29, 26, 
  25, 24, 22, 20, 19, 18, 17, 16, 13, 12, 11, 10, 7, 5, 0}, {31, 29, 
  25, 24, 20, 19, 18, 17, 13, 11, 9, 8, 5, 4, 3, 1, 0}, {31, 30, 29, 
  28, 27, 26, 25, 23, 21, 20, 19, 18, 17, 16, 15, 13, 11, 10, 9, 8, 5,
   1, 0}, {31, 27, 26, 21, 20, 19, 17, 15, 13, 12, 6, 5, 3, 1, 
  0}, {31, 29, 28, 26, 25, 24, 17, 16, 15, 14, 13, 10, 7, 4, 0}, {31, 
  29, 27, 25, 23, 18, 17, 15, 13, 12, 9, 8, 5, 1, 0}, {31, 24, 22, 18,
   17, 14, 13, 12, 11, 9, 8, 6, 5, 1, 0}, {31, 30, 29, 28, 20, 13, 11,
   10, 9, 8, 7, 6, 3, 1, 0}, {31, 29, 28, 27, 24, 23, 21, 20, 19, 18, 
  17, 15, 13, 10, 7, 4, 0}, {31, 30, 28, 26, 25, 24, 23, 21, 20, 16, 
  15, 10, 9, 7, 6, 5, 4, 3, 2, 1, 0}, {31, 25, 24, 23, 21, 20, 19, 18,
   16, 15, 12, 9, 8, 7, 6, 4, 0}, {31, 30, 29, 27, 26, 25, 22, 20, 17,
   15, 14, 11, 10, 9, 7, 6, 4, 3, 0}, {31, 30, 24, 23, 22, 18, 16, 15,
   12, 10, 9, 8, 4, 1, 0}, {31, 30, 29, 28, 26, 20, 18, 17, 16, 15, 
  14, 12, 11, 10, 5, 4, 3, 2, 0}, {31, 30, 27, 25, 24, 22, 21, 20, 18,
   17, 15, 14, 13, 12, 11, 10, 9, 8, 7, 2, 0}, {31, 29, 28, 27, 26, 
  25, 24, 22, 21, 19, 16, 13, 12, 3, 0}, {31, 28, 27, 24, 23, 22, 20, 
  17, 15, 14, 12, 11, 8, 6, 5, 4, 3, 2, 0}, {31, 27, 25, 21, 18, 15, 
  11, 6, 5, 4, 3, 1, 0}, {31, 29, 27, 26, 25, 24, 19, 18, 16, 15, 14, 
  13, 11, 10, 8, 7, 2, 1, 0}, {31, 30, 29, 26, 25, 24, 18, 16, 11, 9, 
  8, 4, 3, 1, 0}, {31, 29, 28, 26, 24, 22, 20, 19, 18, 15, 9, 8, 6, 5,
   2, 1, 0}, {31, 30, 29, 28, 27, 25, 23, 22, 19, 18, 17, 15, 14, 13, 
  12, 4, 3, 1, 0}, {31, 28, 27, 22, 21, 20, 18, 17, 15, 14, 12, 7, 6, 
  4, 3, 2, 0}, {31, 30, 29, 28, 25, 24, 21, 17, 16, 15, 12, 11, 8, 5, 
  3, 2, 0}, {31, 30, 29, 28, 27, 26, 25, 23, 19, 16, 15, 14, 13, 7, 6,
   4, 3, 2, 0}, {31, 30, 29, 26, 23, 19, 17, 16, 13, 9, 8, 6, 4, 1, 
  0}, {31, 30, 29, 28, 26, 20, 18, 16, 14, 11, 10, 9, 7, 6, 3, 2, 
  0}, {31, 30, 28, 26, 24, 23, 22, 21, 18, 17, 16, 15, 14, 13, 11, 10,
   4, 3, 2, 1, 0}, {31, 27, 23, 22, 16, 15, 13, 12, 9, 6, 5, 2, 
  0}, {31, 29, 26, 24, 22, 20, 19, 18, 16, 13, 12, 11, 9, 8, 6, 4, 
  0}, {31, 29, 21, 19, 17, 15, 14, 13, 11, 9, 7, 4, 3, 1, 0}, {31, 30,
   29, 28, 27, 25, 23, 18, 15, 11, 9, 8, 7, 5, 4, 2, 0}, {31, 27, 26, 
  23, 20, 19, 16, 15, 14, 11, 9, 8, 7, 6, 3, 1, 0}, {31, 30, 29, 24, 
  23, 20, 19, 14, 11, 10, 8, 7, 3, 2, 0}, {31, 28, 23, 22, 20, 13, 10,
   8, 7, 6, 5, 1, 0}, {31, 30, 28, 27, 26, 23, 21, 20, 19, 18, 16, 15,
   14, 13, 11, 6, 2, 1, 0}, {31, 23, 22, 21, 20, 19, 15, 12, 11, 9, 8,
   6, 4, 1, 0}, {31, 30, 28, 27, 25, 24, 19, 17, 16, 15, 14, 13, 12, 
  10, 8, 6, 5, 3, 0}, {31, 30, 28, 26, 25, 24, 23, 22, 21, 14, 13, 12,
   11, 9, 7, 2, 0}, {31, 30, 26, 24, 22, 20, 13, 12, 11, 10, 8, 6, 3, 
  1, 0}, {31, 29, 28, 26, 25, 24, 23, 22, 21, 20, 19, 18, 16, 14, 12, 
  11, 10, 7, 6, 5, 2, 1, 0}, {31, 30, 29, 26, 24, 18, 16, 15, 14, 13, 
  11, 10, 8, 6, 4, 2, 0}, {31, 29, 28, 27, 26, 25, 20, 19, 17, 15, 14,
   12, 10, 6, 4, 3, 2, 1, 0}, {31, 30, 29, 25, 23, 16, 6, 4, 0}, {31, 
  30, 29, 27, 24, 21, 19, 18, 17, 13, 12, 10, 9, 7, 6, 5, 4, 2, 
  0}, {31, 30, 29, 28, 27, 26, 25, 22, 20, 18, 17, 12, 8, 7, 6, 5, 4, 
  1, 0}, {31, 25, 24, 21, 15, 13, 8, 5, 0}, {31, 30, 29, 28, 27, 25, 
  21, 20, 18, 17, 15, 13, 11, 10, 9, 7, 5, 2, 0}, {31, 29, 28, 26, 25,
   24, 23, 22, 19, 18, 17, 14, 11, 10, 9, 5, 3, 2, 0}, {31, 30, 28, 
  27, 24, 21, 20, 19, 18, 12, 11, 9, 7, 6, 4, 1, 0}, {31, 30, 29, 28, 
  27, 22, 21, 18, 16, 15, 13, 11, 7, 6, 5, 4, 2, 1, 0}, {31, 30, 28, 
  24, 22, 18, 16, 15, 14, 11, 6, 4, 2, 1, 0}, {31, 29, 25, 24, 22, 19,
   18, 17, 16, 12, 8, 6, 4, 3, 0}, {31, 30, 29, 28, 27, 23, 22, 20, 
  17, 16, 15, 14, 10, 7, 2, 1, 0}, {31, 28, 27, 26, 22, 20, 18, 16, 
  14, 13, 10, 9, 6, 4, 3, 1, 0}, {31, 19, 18, 15, 11, 2, 0}, {31, 30, 
  29, 28, 27, 21, 20, 16, 15, 4, 3, 2, 0}, {31, 30, 29, 28, 25, 24, 
  23, 22, 21, 20, 19, 18, 16, 14, 12, 11, 10, 9, 7, 5, 3, 1, 0}, {31, 
  30, 28, 27, 22, 19, 16, 14, 13, 12, 11, 9, 5, 4, 3, 1, 0}, {31, 30, 
  29, 28, 27, 25, 24, 23, 22, 21, 18, 17, 16, 15, 14, 13, 11, 10, 9, 
  6, 3, 2, 0}, {31, 29, 28, 27, 25, 24, 22, 21, 19, 17, 15, 14, 13, 
  11, 9, 8, 7, 6, 5, 1, 0}, {31, 30, 25, 24, 23, 17, 15, 14, 12, 11, 
  10, 8, 7, 2, 0}, {31, 30, 29, 26, 22, 18, 17, 15, 12, 11, 7, 5, 4, 
  2, 0}, {31, 30, 26, 23, 21, 18, 17, 16, 14, 12, 10, 9, 8, 4, 3, 2, 
  0}, {31, 30, 27, 26, 24, 23, 22, 21, 20, 18, 17, 13, 12, 8, 7, 6, 
  0}, {31, 30, 24, 23, 21, 19, 15, 13, 9, 8, 7, 4, 2, 1, 0}, {31, 25, 
  19, 16, 15, 13, 11, 8, 7, 5, 4, 3, 2, 1, 0}, {31, 30, 27, 26, 25, 
  21, 20, 19, 15, 14, 12, 11, 9, 7, 6, 4, 2, 1, 0}, {31, 30, 29, 26, 
  25, 24, 19, 16, 15, 14, 13, 11, 10, 8, 6, 4, 3, 1, 0}, {31, 29, 26, 
  25, 23, 21, 20, 17, 15, 14, 13, 7, 4, 1, 0}, {31, 30, 26, 24, 23, 
  21, 19, 18, 17, 16, 13, 11, 10, 7, 5, 4, 3, 2, 0}, {31, 30, 28, 27, 
  25, 23, 22, 18, 17, 15, 14, 13, 12, 10, 9, 7, 4, 2, 0}, {31, 29, 28,
   27, 26, 25, 24, 19, 18, 17, 16, 15, 14, 13, 10, 9, 2, 1, 0}, {31, 
  30, 28, 26, 25, 14, 12, 11, 9, 6, 3, 1, 0}, {31, 30, 29, 28, 25, 20,
   17, 15, 14, 13, 11, 9, 8, 7, 5, 4, 0}, {31, 29, 26, 24, 23, 18, 17,
   16, 15, 10, 9, 6, 5, 4, 2, 1, 0}, {31, 30, 29, 28, 26, 25, 24, 19, 
  18, 17, 12, 9, 3, 2, 0}, {31, 30, 28, 27, 26, 22, 20, 19, 18, 16, 
  14, 13, 12, 10, 8, 7, 6, 5, 3, 2, 0}, {31, 29, 28, 22, 21, 20, 16, 
  14, 9, 8, 5, 4, 3, 1, 0}, {31, 30, 29, 27, 26, 25, 24, 23, 22, 21, 
  20, 19, 17, 15, 12, 8, 7, 6, 4, 3, 0}, {31, 30, 29, 28, 27, 23, 21, 
  20, 18, 16, 12, 11, 9, 3, 2, 1, 0}, {31, 29, 27, 26, 24, 23, 22, 21,
   17, 15, 14, 11, 7, 6, 0}, {31, 30, 29, 27, 24, 22, 20, 18, 14, 13, 
  12, 11, 10, 9, 7, 4, 3, 1, 0}, {31, 29, 27, 23, 21, 20, 17, 15, 14, 
  13, 12, 9, 7, 6, 3, 1, 0}, {31, 29, 28, 24, 21, 18, 17, 16, 15, 14, 
  13, 12, 11, 6, 3, 1, 0}, {31, 30, 29, 28, 27, 26, 23, 22, 17, 12, 
  10, 7, 5, 4, 0}, {31, 30, 29, 27, 26, 24, 23, 22, 21, 20, 18, 17, 
  13, 9, 8, 7, 3, 1, 0}, {31, 29, 28, 27, 26, 25, 24, 23, 22, 21, 17, 
  16, 14, 12, 10, 7, 4, 3, 2, 1, 0}, {31, 30, 29, 28, 27, 26, 23, 19, 
  15, 14, 13, 12, 8, 7, 5, 1, 0}, {31, 28, 27, 26, 23, 22, 21, 20, 18,
   16, 14, 12, 10, 9, 8, 7, 5, 4, 0}, {31, 29, 28, 27, 25, 23, 22, 21,
   19, 16, 15, 14, 13, 12, 10, 9, 8, 6, 4, 3, 2, 1, 0}, {31, 30, 29, 
  28, 26, 25, 24, 20, 18, 17, 16, 14, 11, 10, 5, 4, 3, 2, 0}, {31, 28,
   25, 24, 22, 21, 15, 13, 11, 7, 6, 5, 0}, {31, 28, 24, 23, 21, 20, 
  19, 18, 17, 15, 13, 12, 10, 7, 6, 4, 3, 1, 0}, {31, 30, 29, 28, 24, 
  20, 18, 17, 15, 13, 11, 9, 5, 4, 0}, {31, 28, 27, 22, 21, 20, 18, 
  16, 15, 14, 13, 12, 11, 8, 4, 2, 0}, {31, 26, 25, 24, 23, 22, 20, 
  15, 10, 9, 8, 7, 5, 4, 0}, {31, 29, 28, 27, 24, 21, 18, 17, 15, 14, 
  13, 12, 9, 7, 6, 5, 4, 1, 0}, {31, 22, 20, 18, 14, 13, 12, 10, 9, 8,
   7, 5, 4, 1, 0}, {31, 28, 27, 25, 23, 17, 13, 12, 10, 9, 7, 5, 2, 1,
   0}, {31, 29, 27, 26, 25, 24, 23, 20, 19, 17, 16, 13, 12, 11, 9, 8, 
  4, 3, 0}, {31, 23, 21, 20, 19, 18, 16, 14, 12, 6, 5, 1, 0}, {31, 27,
   24, 21, 20, 14, 13, 12, 11, 10, 5, 4, 3, 1, 0}, {31, 24, 23, 22, 
  21, 18, 17, 14, 13, 11, 6, 5, 3, 1, 0}, {31, 29, 27, 26, 25, 24, 20,
   18, 17, 16, 15, 13, 12, 10, 9, 8, 6, 5, 4, 3, 0}, {31, 26, 25, 23, 
  22, 19, 18, 17, 16, 12, 11, 10, 8, 7, 6, 3, 2, 1, 0}, {31, 27, 26, 
  25, 22, 21, 18, 17, 16, 14, 13, 8, 6, 4, 0}, {31, 27, 26, 25, 24, 
  21, 20, 16, 12, 9, 7, 6, 5, 3, 0}, {31, 25, 23, 21, 20, 19, 18, 17, 
  14, 13, 12, 9, 6, 1, 0}, {31, 26, 24, 23, 22, 20, 19, 17, 13, 11, 9,
   8, 6, 4, 3, 1, 0}, {31, 28, 26, 25, 24, 22, 17, 15, 13, 12, 11, 9, 
  8, 7, 5, 4, 3, 2, 0}, {31, 30, 27, 26, 25, 23, 21, 20, 19, 13, 11, 
  8, 7, 6, 4, 3, 0}, {31, 28, 24, 22, 21, 18, 15, 13, 11, 8, 3, 1, 
  0}, {31, 27, 25, 23, 20, 17, 16, 13, 9, 7, 6, 4, 2, 1, 0}, {31, 30, 
  29, 26, 25, 24, 23, 22, 21, 20, 19, 18, 14, 12, 11, 10, 9, 6, 5, 3, 
  2, 1, 0}, {31, 28, 25, 24, 23, 21, 18, 17, 16, 12, 11, 7, 6, 5, 4, 
  3, 0}, {31, 28, 24, 23, 22, 18, 15, 14, 13, 12, 10, 8, 7, 4, 3, 1, 
  0}, {31, 30, 29, 28, 27, 26, 23, 22, 21, 20, 17, 16, 15, 13, 11, 8, 
  6, 4, 0}, {31, 25, 24, 21, 19, 18, 16, 14, 13, 12, 11, 10, 9, 8, 7, 
  6, 3, 1, 0}, {31, 27, 24, 23, 22, 19, 18, 16, 14, 11, 10, 7, 6, 5, 
  4, 3, 0}, {31, 27, 24, 22, 19, 15, 13, 12, 11, 8, 5, 4, 3, 2, 
  0}, {31, 29, 26, 25, 24, 22, 20, 19, 17, 16, 9, 7, 5, 3, 0}, {31, 
  25, 24, 21, 20, 19, 18, 15, 14, 7, 6, 4, 0}, {31, 27, 25, 24, 23, 
  20, 19, 17, 16, 15, 13, 10, 4, 2, 0}, {31, 28, 27, 23, 22, 21, 20, 
  19, 18, 17, 12, 7, 6, 5, 4, 1, 0}, {31, 30, 29, 28, 27, 26, 20, 19, 
  16, 15, 13, 11, 10, 9, 8, 7, 3, 2, 0}, {31, 27, 25, 17, 16, 15, 13, 
  12, 6, 2, 0}, {31, 27, 26, 25, 24, 22, 18, 16, 15, 14, 10, 8, 7, 4, 
  3, 1, 0}, {31, 29, 27, 24, 23, 22, 21, 20, 19, 18, 16, 12, 10, 8, 7,
   6, 5, 4, 2, 1, 0}, {31, 28, 25, 24, 23, 21, 20, 19, 16, 15, 12, 10,
   6, 1, 0}, {31, 28, 26, 23, 21, 17, 16, 14, 8, 7, 3, 2, 0}, {31, 27,
   26, 25, 23, 20, 17, 12, 10, 7, 6, 1, 0}, {31, 29, 25, 24, 23, 22, 
  21, 18, 16, 14, 13, 12, 10, 9, 8, 5, 4, 2, 0}, {31, 27, 24, 23, 22, 
  18, 14, 12, 11, 10, 8, 7, 3, 1, 0}, {31, 27, 25, 24, 23, 22, 15, 10,
   9, 6, 3, 2, 0}, {31, 29, 26, 25, 22, 19, 18, 17, 16, 15, 13, 10, 9,
   7, 6, 5, 0}, {31, 26, 23, 22, 21, 18, 17, 13, 11, 4, 0}, {31, 27, 
  25, 24, 23, 20, 17, 16, 12, 11, 10, 6, 3, 2, 0}, {31, 28, 25, 20, 
  18, 14, 9, 8, 7, 6, 0}, {31, 30, 28, 27, 26, 24, 23, 21, 20, 19, 16,
   14, 9, 8, 7, 6, 5, 4, 3, 1, 0}, {31, 28, 25, 24, 23, 22, 20, 19, 
  18, 16, 15, 13, 12, 11, 8, 7, 5, 3, 2, 1, 0}, {31, 28, 27, 26, 24, 
  23, 22, 21, 20, 19, 18, 17, 15, 14, 12, 10, 9, 5, 0}, {31, 29, 26, 
  24, 23, 22, 18, 17, 16, 15, 11, 10, 8, 6, 3, 1, 0}, {31, 26, 24, 22,
   20, 19, 16, 15, 11, 3, 0}, {31, 27, 26, 23, 22, 21, 19, 18, 17, 16,
   13, 12, 11, 10, 9, 8, 7, 6, 5, 1, 0}, {31, 28, 25, 23, 22, 20, 19, 
  16, 15, 14, 6, 5, 3, 2, 0}, {31, 28, 27, 25, 24, 23, 19, 17, 14, 12,
   10, 7, 5, 2, 0}, {31, 27, 25, 24, 20, 19, 18, 16, 15, 14, 7, 6, 4, 
  2, 0}, {31, 30, 29, 28, 24, 20, 18, 14, 12, 11, 5, 3, 0}, {31, 29, 
  24, 23, 22, 21, 18, 17, 16, 14, 13, 11, 9, 6, 4, 3, 2, 1, 0}, {31, 
  27, 26, 25, 24, 23, 19, 18, 15, 14, 13, 12, 11, 10, 9, 8, 4, 3, 
  0}, {31, 24, 23, 22, 21, 19, 17, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 
  2, 0}, {31, 29, 28, 27, 23, 22, 21, 18, 17, 15, 13, 10, 9, 8, 7, 5, 
  4, 3, 2, 1, 0}, {31, 30, 29, 27, 26, 25, 24, 23, 18, 15, 12, 11, 10,
   4, 0}, {31, 24, 23, 22, 19, 18, 17, 12, 11, 7, 6, 5, 4, 3, 0}, {31,
   27, 26, 24, 23, 20, 18, 17, 15, 14, 12, 11, 10, 9, 8, 3, 0}, {31, 
  30, 27, 26, 25, 22, 20, 18, 17, 16, 15, 14, 13, 12, 10, 6, 4, 3, 
  0}, {31, 28, 27, 24, 23, 22, 20, 17, 12, 8, 6, 5, 4, 3, 0}, {31, 27,
   26, 25, 22, 21, 12, 11, 9, 8, 6, 1, 0}, {31, 29, 26, 20, 18, 15, 6,
   1, 0}, {31, 29, 27, 26, 25, 23, 20, 19, 18, 17, 15, 14, 13, 10, 8, 
  5, 3, 1, 0}, {31, 28, 27, 23, 21, 20, 19, 15, 14, 13, 11, 7, 6, 1, 
  0}, {31, 29, 27, 25, 24, 23, 21, 15, 14, 12, 11, 10, 9, 7, 3, 2, 
  0}, {31, 26, 23, 22, 21, 15, 14, 13, 12, 11, 8, 4, 2, 1, 0}, {31, 
  27, 25, 24, 23, 22, 21, 20, 19, 14, 11, 10, 9, 8, 7, 6, 4, 2, 
  0}, {31, 26, 23, 22, 21, 20, 14, 10, 7, 4, 0}, {31, 29, 28, 27, 23, 
  21, 19, 18, 16, 15, 13, 11, 8, 7, 5, 4, 3, 1, 0}, {31, 30, 27, 25, 
  24, 23, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 8, 2, 0}, {31, 27, 
  26, 20, 16, 9, 8, 5, 3, 2, 0}, {31, 28, 26, 22, 21, 15, 13, 12, 10, 
  7, 6, 5, 4, 3, 2, 1, 0}, {31, 30, 28, 27, 26, 25, 24, 22, 17, 12, 6,
   5, 2, 1, 0}, {31, 26, 25, 21, 16, 14, 13, 10, 6, 1, 0}, {31, 28, 
  23, 21, 20, 19, 16, 14, 13, 7, 2, 1, 0}, {31, 29, 28, 27, 25, 23, 
  21, 20, 18, 14, 13, 12, 10, 8, 7, 5, 4, 3, 0}, {31, 25, 23, 21, 17, 
  16, 15, 14, 13, 12, 11, 8, 7, 6, 5, 1, 0}, {31, 23, 22, 21, 17, 14, 
  13, 12, 11, 10, 7, 6, 5, 4, 3, 2, 0}, {31, 30, 25, 18, 17, 15, 10, 
  8, 5, 4, 0}, {31, 29, 26, 24, 23, 22, 21, 20, 19, 17, 15, 13, 12, 
  11, 5, 4, 3, 1, 0}, {31, 28, 26, 25, 23, 21, 17, 13, 12, 11, 10, 5, 
  3, 2, 0}, {31, 30, 29, 28, 26, 25, 24, 22, 18, 14, 11, 10, 8, 6, 5, 
  4, 0}, {31, 28, 26, 24, 22, 20, 19, 18, 16, 13, 12, 10, 9, 7, 6, 5, 
  4, 2, 0}, {31, 30, 29, 28, 26, 24, 23, 20, 19, 17, 14, 13, 12, 11, 
  9, 8, 7, 5, 4, 2, 0}, {31, 28, 26, 24, 23, 22, 21, 19, 18, 17, 13, 
  10, 5, 2, 0}, {31, 29, 28, 27, 26, 21, 20, 16, 13, 12, 9, 6, 4, 3, 
  2, 1, 0}, {31, 28, 26, 25, 24, 22, 17, 13, 12, 11, 9, 4, 3, 2, 
  0}, {31, 27, 25, 23, 21, 20, 19, 18, 17, 15, 14, 12, 11, 10, 6, 4, 
  3, 2, 0}, {31, 27, 24, 23, 20, 19, 15, 10, 9, 8, 7, 4, 3, 1, 
  0}, {31, 30, 29, 20, 19, 18, 11, 7, 4, 3, 0}, {31, 29, 28, 27, 26, 
  24, 21, 20, 19, 18, 17, 16, 15, 14, 13, 11, 10, 9, 8, 6, 5, 3, 
  0}, {31, 28, 26, 24, 23, 21, 18, 16, 14, 12, 10, 7, 4, 3, 0}, {31, 
  29, 28, 27, 25, 23, 21, 20, 19, 18, 17, 16, 15, 11, 9, 8, 7, 6, 5, 
  4, 3, 1, 0}, {31, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 
  13, 12, 11, 10, 9, 6, 4, 2, 1, 0}, {31, 28, 26, 25, 23, 22, 21, 20, 
  15, 13, 12, 9, 8, 4, 3, 1, 0}, {31, 27, 26, 23, 22, 18, 16, 11, 10, 
  9, 6, 3, 2, 1, 0}, {31, 29, 28, 27, 26, 24, 21, 18, 14, 13, 11, 9, 
  7, 3, 0}, {31, 30, 28, 26, 25, 24, 22, 21, 19, 18, 15, 14, 13, 11, 
  10, 9, 6, 5, 2, 1, 0}, {31, 27, 25, 23, 22, 20, 18, 17, 16, 15, 14, 
  13, 12, 10, 6, 5, 2, 1, 0}, {31, 29, 28, 27, 26, 25, 23, 21, 20, 19,
   17, 13, 12, 11, 10, 9, 8, 5, 4, 1, 0}, {31, 27, 26, 25, 23, 21, 20,
   18, 15, 13, 12, 1, 0}, {31, 28, 27, 26, 20, 18, 13, 11, 9, 5, 4, 1,
   0}, {31, 27, 26, 25, 23, 19, 16, 15, 11, 10, 9, 8, 7, 6, 5, 2, 
  0}, {31, 30, 28, 27, 26, 23, 20, 17, 16, 12, 11, 7, 5, 4, 0}, {31, 
  27, 23, 22, 21, 20, 19, 16, 15, 13, 12, 11, 9, 6, 4, 2, 0}, {31, 26,
   25, 19, 15, 14, 13, 11, 7, 4, 2, 1, 0}, {31, 30, 28, 27, 26, 25, 
  24, 23, 22, 21, 19, 14, 12, 10, 8, 3, 0}, {31, 29, 28, 24, 23, 22, 
  19, 16, 15, 14, 11, 10, 9, 8, 7, 4, 2, 1, 0}, {31, 26, 22, 21, 20, 
  19, 18, 13, 11, 8, 3, 1, 0}, {31, 29, 28, 27, 23, 21, 19, 16, 14, 
  12, 8, 7, 6, 5, 3, 2, 0}, {31, 29, 28, 27, 23, 21, 19, 18, 15, 14, 
  12, 6, 3, 2, 0}, {31, 30, 29, 24, 22, 21, 20, 15, 13, 11, 10, 8, 7, 
  1, 0}, {31, 30, 29, 27, 26, 25, 17, 16, 15, 12, 11, 10, 9, 7, 4, 3, 
  0}, {31, 29, 25, 23, 22, 19, 18, 17, 16, 14, 13, 11, 9, 6, 5, 3, 
  0}, {31, 30, 29, 27, 24, 21, 18, 16, 13, 12, 8, 7, 6, 1, 0}, {31, 
  28, 27, 26, 25, 23, 22, 21, 20, 15, 14, 9, 7, 6, 4, 3, 0}, {31, 29, 
  25, 24, 22, 20, 19, 18, 14, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 
  0}, {31, 30, 29, 28, 25, 24, 23, 21, 19, 18, 17, 16, 13, 11, 10, 7, 
  4, 1, 0}, {31, 29, 28, 27, 26, 25, 21, 20, 19, 18, 14, 13, 12, 9, 8,
   7, 6, 3, 0}, {31, 23, 22, 21, 19, 18, 16, 14, 13, 12, 11, 9, 7, 2, 
  0}, {31, 30, 29, 28, 26, 22, 21, 20, 19, 18, 16, 15, 11, 6, 5, 1, 
  0}, {31, 25, 21, 16, 13, 12, 11, 7, 4, 3, 0}, {31, 24, 23, 22, 17, 
  16, 15, 11, 10, 9, 8, 7, 6, 5, 4, 3, 0}, {31, 29, 28, 27, 26, 24, 
  23, 21, 19, 18, 17, 15, 6, 4, 3, 2, 0}, {31, 28, 27, 26, 21, 20, 19,
   18, 17, 16, 15, 12, 8, 7, 6, 1, 0}, {31, 30, 28, 27, 26, 22, 20, 
  19, 18, 16, 14, 13, 11, 6, 4, 3, 2, 1, 0}, {31, 29, 28, 27, 26, 19, 
  17, 16, 14, 13, 7, 4, 3, 1, 0}, {31, 27, 26, 25, 22, 21, 19, 16, 15,
   14, 12, 10, 9, 7, 5, 1, 0}, {31, 30, 29, 28, 27, 25, 22, 20, 18, 
  17, 13, 12, 10, 9, 8, 4, 0}, {31, 21, 19, 18, 14, 13, 9, 8, 6, 5, 4,
   3, 0}, {31, 29, 27, 26, 22, 21, 20, 18, 15, 14, 11, 9, 8, 7, 6, 5, 
  3, 2, 0}, {31, 30, 26, 24, 19, 17, 15, 14, 11, 9, 8, 7, 4, 3, 2, 1, 
  0}, {31, 28, 27, 19, 18, 17, 7, 5, 3, 1, 0}, {31, 24, 23, 22, 21, 
  12, 11, 10, 7, 6, 5, 2, 0}, {31, 29, 27, 26, 25, 22, 21, 19, 15, 8, 
  4, 1, 0}, {31, 29, 28, 25, 24, 22, 19, 17, 16, 13, 12, 11, 8, 7, 5, 
  3, 2, 1, 0}, {31, 28, 25, 24, 23, 20, 19, 18, 17, 16, 13, 12, 8, 7, 
  3, 1, 0}, {31, 30, 29, 25, 21, 20, 19, 17, 14, 13, 11, 6, 4, 3, 2, 
  1, 0}, {31, 28, 27, 26, 24, 23, 20, 18, 17, 15, 14, 13, 10, 7, 6, 2,
   0}, {31, 30, 29, 27, 25, 24, 22, 21, 15, 13, 12, 10, 9, 7, 3, 2, 
  0}, {31, 30, 29, 25, 22, 21, 17, 16, 14, 12, 9, 7, 6, 1, 0}, {31, 
  28, 26, 25, 21, 20, 19, 17, 13, 10, 9, 8, 7, 5, 3, 2, 0}, {31, 29, 
  25, 23, 22, 15, 14, 13, 12, 11, 10, 9, 6, 4, 3, 1, 0}, {31, 30, 29, 
  28, 27, 25, 24, 19, 18, 16, 15, 14, 12, 10, 9, 8, 7, 3, 2, 1, 
  0}, {31, 28, 25, 24, 19, 16, 15, 14, 12, 11, 9, 7, 5, 3, 0}, {31, 
  29, 25, 24, 22, 21, 19, 13, 10, 4, 3, 2, 0}, {31, 29, 28, 27, 23, 
  22, 21, 20, 17, 16, 11, 10, 9, 7, 6, 4, 2, 1, 0}, {31, 29, 27, 26, 
  25, 23, 22, 16, 12, 10, 9, 7, 5, 4, 3, 1, 0}, {31, 28, 27, 25, 24, 
  23, 22, 20, 19, 17, 16, 15, 13, 11, 9, 7, 5, 4, 3, 1, 0}, {31, 29, 
  27, 24, 20, 18, 17, 15, 14, 12, 11, 9, 8, 6, 4, 1, 0}, {31, 28, 27, 
  26, 24, 23, 19, 18, 16, 15, 14, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 
  0}, {31, 30, 29, 27, 23, 21, 20, 19, 17, 16, 15, 11, 10, 9, 8, 7, 6,
   5, 4, 3, 0}, {31, 25, 23, 20, 19, 16, 14, 13, 12, 9, 8, 5, 2, 1, 
  0}, {31, 30, 28, 25, 21, 20, 19, 16, 14, 13, 11, 9, 8, 7, 4, 1, 
  0}, {31, 29, 28, 27, 26, 25, 23, 14, 10, 9, 7, 6, 4, 3, 0}, {31, 26,
   25, 22, 21, 18, 13, 12, 11, 3, 0}, {31, 29, 27, 26, 22, 21, 16, 13,
   12, 8, 6, 5, 0}, {31, 27, 26, 25, 23, 19, 18, 14, 13, 7, 6, 5, 2, 
  1, 0}, {31, 29, 28, 27, 26, 23, 22, 20, 19, 17, 14, 12, 10, 9, 8, 6,
   3, 1, 0}, {31, 29, 26, 25, 16, 15, 14, 11, 7, 2, 0}, {31, 26, 23, 
  22, 19, 17, 16, 14, 13, 10, 8, 5, 4, 1, 0}, {31, 29, 27, 25, 22, 20,
   19, 17, 16, 15, 14, 13, 12, 10, 9, 8, 6, 4, 2, 1, 0}, {31, 30, 29, 
  27, 26, 25, 24, 22, 21, 20, 15, 14, 13, 12, 10, 9, 7, 6, 5, 4, 3, 1,
   0}, {31, 29, 27, 23, 22, 21, 19, 16, 15, 13, 12, 11, 10, 6, 5, 3, 
  0}, {31, 27, 19, 17, 15, 14, 11, 10, 9, 7, 6, 5, 4, 3, 2, 1, 
  0}, {31, 30, 28, 26, 25, 23, 20, 17, 16, 14, 13, 10, 9, 7, 4, 3, 
  0}, {31, 29, 28, 27, 26, 25, 24, 21, 20, 17, 16, 14, 13, 12, 11, 10,
   8, 7, 6, 5, 3, 1, 0}, {31, 30, 29, 26, 25, 23, 22, 14, 13, 12, 11, 
  7, 6, 5, 4, 2, 0}, {31, 28, 27, 26, 25, 24, 22, 15, 14, 13, 12, 10, 
  9, 8, 2, 1, 0}, {31, 26, 24, 21, 20, 19, 18, 17, 14, 12, 10, 9, 7, 
  6, 5, 4, 3, 1, 0}, {31, 30, 27, 26, 25, 23, 20, 18, 17, 14, 13, 10, 
  7, 6, 5, 4, 3, 2, 0}, {31, 26, 24, 22, 19, 17, 16, 15, 14, 12, 11, 
  8, 7, 5, 0}, {31, 28, 27, 26, 25, 24, 22, 21, 19, 18, 16, 13, 12, 
  11, 10, 7, 5, 4, 2, 1, 0}, {31, 27, 25, 21, 19, 18, 17, 16, 14, 12, 
  10, 9, 7, 6, 5, 3, 2, 1, 0}, {31, 30, 26, 24, 23, 22, 18, 16, 15, 
  11, 7, 5, 3, 1, 0}, {31, 29, 27, 23, 21, 20, 18, 15, 11, 10, 9, 7, 
  6, 4, 3, 1, 0}, {31, 27, 23, 21, 19, 15, 14, 11, 10, 8, 6, 5, 3, 1, 
  0}, {31, 24, 22, 21, 20, 19, 18, 14, 10, 9, 8, 2, 0}, {31, 29, 25, 
  23, 20, 19, 18, 15, 12, 5, 0}, {31, 30, 29, 27, 26, 23, 22, 21, 19, 
  18, 16, 12, 11, 8, 7, 5, 0}, {31, 29, 28, 26, 23, 20, 13, 12, 11, 9,
   4, 3, 2, 1, 0}, {31, 30, 23, 22, 20, 17, 14, 12, 8, 5, 3, 1, 
  0}, {31, 30, 27, 26, 23, 22, 20, 19, 18, 16, 12, 6, 5, 4, 0}, {31, 
  28, 27, 26, 25, 24, 23, 21, 20, 18, 17, 14, 10, 9, 7, 6, 5, 3, 
  0}, {31, 30, 22, 18, 17, 15, 13, 12, 10, 9, 7, 5, 4, 2, 0}, {31, 29,
   28, 26, 25, 24, 22, 21, 19, 16, 14, 13, 12, 9, 8, 7, 6, 2, 0}, {31,
   29, 28, 26, 25, 24, 22, 21, 20, 17, 15, 11, 7, 6, 4, 2, 0}, {31, 
  28, 27, 26, 25, 21, 17, 16, 13, 9, 8, 2, 0}, {31, 29, 28, 27, 26, 
  23, 20, 18, 17, 16, 12, 11, 8, 7, 6, 5, 3, 1, 0}, {31, 28, 26, 22, 
  19, 17, 16, 15, 14, 12, 9, 6, 3, 1, 0}, {31, 30, 29, 25, 23, 19, 18,
   17, 15, 13, 12, 11, 10, 5, 4, 2, 0}, {31, 29, 25, 23, 22, 19, 18, 
  17, 15, 12, 11, 9, 8, 7, 4, 3, 0}, {31, 29, 27, 26, 24, 22, 21, 19, 
  17, 12, 11, 10, 7, 5, 3, 2, 0}, {31, 27, 26, 24, 23, 17, 15, 14, 12,
   11, 8, 7, 6, 4, 3, 1, 0}, {31, 28, 27, 26, 23, 20, 18, 17, 14, 12, 
  10, 9, 8, 3, 0}, {31, 30, 29, 28, 24, 21, 20, 19, 18, 17, 16, 12, 
  11, 10, 9, 8, 5, 1, 0}, {31, 30, 29, 27, 25, 21, 19, 16, 15, 14, 13,
   10, 8, 7, 6, 1, 0}, {31, 29, 24, 23, 18, 9, 7, 6, 5, 3, 2, 1, 
  0}, {31, 27, 26, 22, 18, 16, 13, 11, 10, 8, 7, 6, 4, 1, 0}, {31, 26,
   25, 22, 21, 19, 17, 14, 6, 3, 0}, {31, 27, 26, 25, 19, 12, 11, 9, 
  6, 3, 0}, {31, 30, 28, 27, 26, 25, 21, 19, 16, 15, 13, 10, 8, 7, 6, 
  5, 2, 1, 0}, {31, 30, 29, 27, 26, 24, 23, 22, 18, 15, 5, 4, 0}, {31,
   29, 27, 26, 20, 18, 16, 14, 11, 8, 7, 6, 5, 3, 2, 1, 0}, {31, 29, 
  28, 27, 24, 20, 19, 18, 16, 13, 12, 10, 5, 2, 0}, {31, 30, 26, 24, 
  23, 22, 21, 19, 16, 8, 7, 6, 4, 3, 2, 1, 0}, {31, 26, 23, 20, 19, 
  18, 17, 16, 13, 11, 10, 6, 4, 2, 0}, {31, 30, 28, 27, 24, 21, 19, 
  18, 14, 13, 11, 10, 7, 6, 4, 3, 2, 1, 0}, {31, 29, 28, 22, 21, 20, 
  18, 14, 13, 9, 7, 6, 3, 1, 0}, {31, 30, 29, 27, 26, 25, 24, 23, 22, 
  21, 20, 18, 17, 16, 14, 13, 10, 5, 3, 2, 0}, {31, 28, 27, 25, 24, 
  23, 21, 20, 11, 10, 9, 7, 3, 1, 0}, {31, 29, 27, 21, 20, 17, 15, 13,
   11, 9, 7, 6, 0}, {31, 27, 23, 22, 21, 19, 16, 13, 12, 11, 10, 9, 8,
   6, 5, 1, 0}, {31, 30, 29, 27, 26, 25, 24, 21, 20, 16, 15, 14, 7, 5,
   4, 3, 2, 1, 0}, {31, 29, 27, 26, 22, 20, 19, 16, 13, 12, 9, 8, 7, 
  6, 3, 2, 0}, {31, 30, 29, 25, 24, 23, 21, 20, 17, 16, 11, 10, 8, 7, 
  5, 1, 0}, {31, 29, 24, 22, 15, 14, 13, 11, 10, 9, 8, 1, 0}, {31, 29,
   26, 23, 22, 21, 20, 19, 17, 16, 15, 13, 11, 9, 6, 3, 0}, {31, 30, 
  26, 23, 19, 15, 12, 11, 9, 8, 7, 6, 5, 1, 0}, {31, 29, 27, 25, 24, 
  23, 22, 21, 18, 16, 14, 12, 8, 5, 3, 2, 0}, {31, 29, 28, 27, 25, 21,
   20, 19, 17, 15, 14, 12, 10, 7, 4, 3, 2, 1, 0}, {31, 30, 28, 25, 24,
   23, 21, 20, 19, 16, 14, 13, 12, 11, 10, 9, 7, 6, 4, 3, 2, 1, 
  0}, {31, 29, 28, 25, 23, 20, 19, 16, 15, 13, 10, 5, 0}, {31, 30, 28,
   26, 24, 23, 22, 21, 20, 19, 17, 16, 15, 14, 13, 11, 10, 9, 5, 1, 
  0}, {31, 30, 28, 27, 26, 24, 23, 21, 19, 18, 16, 13, 11, 8, 7, 2, 
  0}, {31, 29, 26, 24, 19, 18, 17, 16, 15, 12, 11, 10, 9, 7, 6, 5, 4, 
  2, 0}, {31, 30, 29, 28, 26, 22, 21, 20, 19, 18, 17, 13, 12, 9, 7, 6,
   5, 2, 0}, {31, 30, 28, 27, 23, 17, 16, 15, 12, 9, 4, 1, 0}, {31, 
  29, 26, 23, 22, 21, 19, 17, 14, 12, 11, 5, 3, 1, 0}, {31, 30, 28, 
  27, 26, 25, 24, 22, 21, 18, 15, 14, 12, 11, 7, 6, 5, 4, 3, 1, 
  0}, {31, 30, 28, 27, 24, 23, 21, 18, 17, 15, 14, 13, 12, 8, 5, 4, 2,
   1, 0}, {31, 29, 27, 25, 24, 22, 21, 18, 17, 15, 11, 10, 8, 1, 
  0}, {31, 30, 27, 26, 25, 23, 21, 20, 19, 15, 11, 8, 7, 5, 3, 2, 
  0}, {31, 29, 25, 22, 16, 15, 12, 11, 10, 9, 7, 4, 3, 1, 0}, {31, 29,
   23, 21, 20, 15, 14, 13, 11, 10, 8, 7, 6, 3, 0}, {31, 30, 29, 25, 
  23, 22, 19, 17, 14, 13, 12, 11, 10, 9, 8, 2, 0}, {31, 30, 29, 27, 
  25, 23, 22, 21, 17, 13, 11, 10, 0}, {31, 30, 29, 28, 24, 22, 21, 17,
   16, 15, 14, 13, 12, 10, 8, 7, 6, 3, 0}, {31, 30, 29, 23, 22, 15, 
  14, 8, 7, 5, 2, 1, 0}, {31, 26, 25, 18, 16, 13, 12, 10, 9, 7, 4, 1, 
  0}, {31, 30, 27, 26, 24, 21, 19, 16, 15, 10, 9, 8, 6, 3, 0}, {31, 
  30, 29, 28, 26, 24, 23, 22, 19, 18, 16, 15, 13, 9, 7, 4, 0}, {31, 
  27, 26, 25, 23, 22, 21, 16, 15, 14, 13, 12, 10, 9, 8, 7, 3, 1, 
  0}, {31, 30, 29, 27, 26, 25, 22, 19, 18, 15, 14, 12, 10, 8, 6, 4, 3,
   1, 0}, {31, 30, 29, 27, 26, 23, 22, 20, 18, 16, 15, 14, 13, 12, 11,
   7, 4, 1, 0}, {31, 24, 23, 22, 19, 13, 9, 4, 3, 1, 0}, {31, 28, 26, 
  23, 22, 21, 20, 18, 14, 13, 12, 11, 10, 7, 0}, {31, 28, 25, 22, 20, 
  15, 13, 10, 9, 6, 5, 4, 0}, {31, 25, 23, 20, 19, 18, 15, 11, 10, 9, 
  7, 3, 2, 1, 0}, {31, 29, 25, 23, 22, 19, 18, 16, 9, 8, 5, 4, 3, 1, 
  0}, {31, 29, 26, 25, 24, 22, 21, 20, 19, 17, 15, 14, 12, 11, 10, 9, 
  8, 6, 5, 4, 0}, {31, 30, 29, 25, 20, 19, 14, 11, 10, 9, 8, 7, 4, 2, 
  0}, {31, 29, 28, 26, 25, 23, 21, 18, 17, 15, 14, 13, 12, 9, 7, 6, 4,
   3, 0}, {31, 28, 27, 24, 21, 19, 17, 16, 14, 13, 12, 10, 7, 5, 4, 3,
   0}, {31, 28, 27, 26, 25, 23, 22, 19, 18, 17, 16, 15, 14, 12, 11, 9,
   4, 3, 2, 1, 0}, {31, 29, 28, 27, 23, 22, 21, 20, 19, 17, 16, 15, 
  14, 13, 12, 11, 10, 9, 7, 6, 5, 3, 0}, {31, 28, 27, 26, 24, 23, 20, 
  15, 14, 11, 10, 9, 7, 3, 0}, {31, 28, 27, 26, 24, 22, 17, 9, 8, 7, 
  6, 5, 4, 1, 0}, {31, 29, 27, 25, 24, 21, 20, 16, 13, 11, 10, 8, 7, 
  4, 3, 1, 0}, {31, 26, 24, 22, 19, 15, 13, 9, 2, 1, 0}, {31, 28, 27, 
  26, 25, 23, 22, 18, 13, 12, 10, 9, 8, 7, 4, 3, 0}, {31, 30, 29, 28, 
  20, 16, 15, 13, 10, 8, 7, 5, 3, 2, 0}, {31, 28, 25, 22, 21, 18, 13, 
  8, 7, 5, 3, 2, 0}, {31, 29, 28, 24, 23, 21, 20, 16, 15, 13, 9, 7, 6,
   2, 0}, {31, 30, 29, 24, 23, 20, 19, 18, 17, 16, 14, 13, 12, 9, 7, 
  6, 2, 1, 0}, {31, 30, 26, 20, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9,
   5, 4, 0}, {31, 28, 27, 26, 25, 22, 20, 19, 18, 17, 15, 14, 11, 10, 
  9, 8, 7, 6, 4, 2, 0}, {31, 30, 29, 28, 26, 25, 24, 23, 16, 13, 12, 
  10, 8, 7, 6, 5, 2, 1, 0}, {31, 29, 26, 22, 19, 17, 13, 11, 10, 8, 7,
   3, 0}, {31, 26, 25, 24, 23, 21, 20, 18, 16, 15, 14, 13, 7, 6, 4, 1,
   0}, {31, 27, 24, 23, 22, 21, 20, 19, 16, 15, 14, 13, 11, 10, 7, 5, 
  4, 3, 0}, {31, 29, 27, 25, 24, 22, 18, 14, 13, 10, 8, 7, 5, 2, 
  0}, {31, 28, 27, 24, 22, 21, 20, 18, 16, 14, 13, 12, 11, 9, 8, 7, 3,
   1, 0}, {31, 27, 26, 24, 23, 22, 18, 17, 16, 15, 12, 11, 9, 8, 7, 6,
   4, 1, 0}, {31, 30, 29, 28, 27, 25, 24, 21, 17, 16, 15, 14, 10, 7, 
  4, 1, 0}, {31, 30, 28, 27, 26, 25, 23, 17, 14, 13, 8, 3, 0}, {31, 
  24, 23, 22, 21, 20, 19, 17, 14, 13, 12, 11, 10, 9, 8, 7, 5, 3, 
  0}, {31, 29, 26, 23, 22, 19, 16, 13, 10, 9, 8, 7, 6, 1, 0}, {31, 28,
   27, 26, 25, 23, 22, 21, 20, 19, 17, 16, 10, 8, 6, 5, 4, 3, 0}, {31,
   30, 29, 27, 26, 23, 22, 21, 19, 14, 13, 12, 10, 8, 7, 6, 5, 4, 2, 
  1, 0}, {31, 28, 26, 25, 24, 23, 22, 21, 19, 18, 17, 16, 12, 10, 9, 
  5, 4, 2, 0}, {31, 25, 20, 19, 17, 16, 15, 14, 12, 10, 9, 6, 5, 4, 3,
   2, 0}, {31, 30, 29, 28, 27, 25, 20, 19, 18, 17, 14, 13, 9, 1, 
  0}, {31, 27, 25, 23, 22, 21, 20, 19, 13, 12, 9, 6, 5, 4, 3, 2, 
  0}, {31, 26, 25, 22, 21, 20, 17, 16, 15, 11, 10, 8, 6, 5, 0}, {31, 
  25, 24, 22, 21, 20, 19, 14, 10, 3, 0}, {31, 28, 26, 24, 21, 18, 16, 
  12, 8, 6, 4, 3, 0}, {31, 27, 25, 22, 17, 15, 12, 11, 8, 6, 4, 3, 
  0}, {31, 29, 23, 22, 21, 18, 17, 15, 13, 12, 11, 10, 9, 7, 3, 1, 
  0}, {31, 30, 28, 27, 26, 25, 24, 21, 20, 19, 18, 15, 14, 13, 12, 9, 
  6, 5, 2, 1, 0}, {31, 28, 26, 25, 21, 17, 14, 12, 10, 9, 8, 7, 6, 1, 
  0}, {31, 29, 27, 25, 23, 22, 21, 20, 19, 18, 16, 15, 14, 13, 11, 8, 
  5, 4, 2, 1, 0}, {31, 28, 27, 26, 24, 23, 22, 21, 20, 18, 17, 16, 15,
   13, 11, 10, 9, 8, 3, 1, 0}, {31, 30, 27, 23, 22, 20, 18, 16, 15, 
  13, 11, 7, 6, 5, 2, 1, 0}, {31, 29, 28, 27, 26, 25, 23, 22, 21, 19, 
  18, 16, 14, 11, 10, 8, 5, 4, 2, 1, 0}, {31, 28, 24, 22, 20, 15, 14, 
  11, 10, 9, 8, 7, 6, 4, 0}, {31, 30, 27, 26, 22, 20, 18, 14, 13, 11, 
  10, 9, 8, 4, 3, 1, 0}, {31, 27, 26, 25, 24, 23, 22, 21, 20, 19, 16, 
  15, 12, 10, 5, 4, 3, 1, 0}, {31, 30, 29, 28, 27, 26, 25, 22, 21, 16,
   13, 11, 9, 7, 2, 1, 0}, {31, 27, 26, 25, 23, 21, 20, 19, 18, 16, 
  10, 8, 7, 6, 5, 3, 2, 1, 0}, {31, 28, 27, 24, 23, 18, 16, 13, 12, 
  11, 8, 7, 4, 2, 0}, {31, 28, 25, 24, 22, 21, 17, 16, 14, 11, 7, 4, 
  2, 1, 0}, {31, 30, 29, 27, 25, 23, 19, 18, 17, 10, 5, 1, 0}, {31, 
  30, 28, 26, 25, 24, 23, 19, 17, 13, 12, 10, 9, 7, 6, 3, 2, 1, 
  0}, {31, 28, 27, 24, 22, 21, 20, 19, 16, 15, 13, 11, 8, 7, 4, 3, 
  0}, {31, 30, 27, 26, 23, 19, 18, 17, 15, 14, 12, 11, 9, 8, 7, 4, 
  0}, {31, 30, 27, 26, 25, 24, 21, 20, 19, 18, 15, 14, 13, 12, 11, 6, 
  4, 1, 0}, {31, 30, 29, 28, 27, 25, 20, 19, 18, 17, 13, 9, 5, 4, 3, 
  2, 0}, {31, 29, 27, 26, 25, 22, 21, 20, 18, 15, 14, 13, 12, 7, 6, 3,
   2, 1, 0}, {31, 25, 24, 23, 22, 20, 17, 16, 15, 14, 9, 8, 6, 4, 2, 
  1, 0}, {31, 29, 27, 25, 22, 21, 19, 18, 17, 13, 10, 9, 7, 6, 5, 4, 
  2, 1, 0}, {31, 27, 26, 25, 23, 21, 20, 17, 15, 14, 4, 3, 2, 1, 
  0}, {31, 29, 28, 24, 21, 19, 18, 15, 14, 13, 12, 11, 9, 6, 5, 4, 3, 
  1, 0}, {31, 30, 29, 28, 25, 24, 22, 21, 20, 19, 18, 17, 14, 13, 12, 
  9, 8, 2, 0}, {31, 28, 27, 25, 24, 23, 21, 19, 18, 16, 15, 13, 12, 
  11, 8, 7, 6, 5, 2, 1, 0}, {31, 28, 27, 26, 20, 16, 14, 12, 11, 10, 
  9, 8, 7, 6, 2, 1, 0}, {31, 28, 27, 26, 23, 22, 18, 16, 14, 13, 12, 
  8, 7, 6, 4, 3, 0}, {31, 30, 27, 18, 16, 13, 12, 11, 10, 4, 2, 1, 
  0}, {31, 28, 27, 26, 25, 23, 20, 19, 18, 16, 15, 13, 10, 8, 3, 1, 
  0}, {31, 29, 28, 25, 24, 23, 22, 21, 20, 17, 14, 12, 7, 6, 5, 3, 2, 
  1, 0}, {31, 30, 29, 27, 25, 22, 21, 20, 17, 14, 9, 7, 4, 3, 0}, {31,
   30, 20, 17, 10, 9, 8, 7, 5, 4, 3, 2, 0}, {31, 28, 27, 26, 24, 21, 
  19, 16, 15, 14, 13, 11, 10, 7, 6, 4, 3, 2, 0}, {31, 25, 20, 18, 17, 
  16, 15, 12, 7, 6, 5, 3, 2, 1, 0}, {31, 27, 22, 21, 19, 18, 17, 15, 
  14, 12, 11, 10, 9, 8, 4, 1, 0}, {31, 29, 28, 23, 22, 19, 15, 14, 12,
   10, 9, 6, 5, 3, 2, 1, 0}, {31, 30, 24, 19, 18, 17, 16, 15, 14, 13, 
  7, 6, 4, 1, 0}, {31, 30, 29, 26, 25, 22, 20, 15, 14, 13, 9, 8, 5, 3,
   0}, {31, 14, 12, 11, 9, 8, 3, 2, 0}, {31, 30, 29, 28, 27, 26, 24, 
  20, 19, 17, 16, 15, 14, 12, 6, 4, 3, 2, 0}, {31, 30, 28, 27, 26, 25,
   23, 22, 21, 18, 17, 16, 15, 12, 11, 10, 9, 8, 7, 4, 2, 1, 0}, {31, 
  30, 28, 27, 25, 24, 20, 19, 18, 16, 14, 11, 9, 8, 7, 6, 5, 2, 
  0}, {31, 27, 23, 21, 18, 13, 10, 7, 6, 5, 4, 3, 2, 1, 0}, {31, 29, 
  27, 25, 23, 22, 20, 19, 18, 15, 13, 11, 7, 4, 0}, {31, 29, 28, 27, 
  26, 20, 19, 18, 17, 16, 15, 14, 12, 11, 7, 5, 2, 1, 0}, {31, 30, 29,
   24, 23, 22, 21, 17, 16, 15, 14, 12, 11, 9, 7, 4, 3, 1, 0}, {31, 30,
   29, 28, 26, 24, 23, 22, 21, 20, 15, 14, 12, 11, 10, 9, 8, 6, 5, 2, 
  0}, {31, 30, 28, 27, 26, 24, 23, 17, 16, 15, 12, 11, 9, 8, 6, 5, 4, 
  3, 0}, {31, 30, 25, 24, 23, 22, 21, 20, 17, 16, 14, 13, 12, 11, 10, 
  9, 2, 1, 0}, {31, 29, 27, 25, 24, 23, 22, 20, 19, 15, 14, 8, 7, 5, 
  3, 1, 0}, {31, 28, 25, 24, 22, 21, 20, 18, 17, 16, 14, 11, 9, 7, 6, 
  5, 4, 1, 0}, {31, 30, 28, 25, 23, 19, 17, 14, 11, 8, 6, 5, 4, 3, 
  0}, {31, 28, 25, 20, 19, 17, 16, 13, 11, 10, 8, 6, 5, 4, 3, 2, 
  0}, {31, 26, 24, 23, 22, 18, 15, 14, 13, 11, 9, 8, 7, 3, 0}, {31, 
  30, 28, 24, 23, 22, 21, 18, 17, 16, 15, 14, 12, 8, 3, 2, 0}, {31, 
  30, 28, 26, 25, 23, 22, 21, 20, 19, 18, 14, 13, 12, 11, 10, 7, 6, 4,
   1, 0}, {31, 25, 24, 17, 16, 14, 12, 11, 5, 3, 2, 1, 0}, {31, 29, 
  26, 24, 17, 16, 15, 14, 11, 10, 8, 7, 6, 4, 0}, {31, 29, 28, 27, 20,
   18, 15, 14, 13, 12, 11, 10, 7, 4, 0}, {31, 30, 26, 25, 22, 19, 18, 
  13, 10, 9, 6, 5, 3, 2, 0}, {31, 28, 25, 22, 19, 18, 17, 8, 2, 1, 
  0}, {31, 30, 28, 24, 20, 18, 16, 15, 14, 12, 11, 10, 9, 8, 7, 6, 5, 
  2, 0}, {31, 30, 29, 26, 24, 23, 22, 21, 20, 19, 18, 15, 13, 11, 9, 
  7, 4, 2, 0}, {31, 29, 27, 26, 25, 24, 23, 19, 16, 14, 12, 10, 7, 1, 
  0}, {31, 30, 29, 26, 25, 23, 22, 20, 19, 17, 16, 15, 13, 11, 10, 9, 
  7, 6, 5, 4, 3, 1, 0}, {31, 30, 29, 26, 23, 22, 21, 20, 18, 17, 16, 
  6, 5, 4, 3, 1, 0}, {31, 29, 21, 18, 15, 13, 12, 11, 5, 2, 0}, {31, 
  29, 27, 24, 21, 19, 17, 16, 15, 13, 12, 11, 10, 9, 8, 5, 4, 3, 
  0}, {31, 28, 26, 25, 23, 20, 19, 18, 16, 15, 14, 12, 10, 9, 8, 7, 3,
   1, 0}, {31, 30, 25, 23, 19, 18, 17, 16, 10, 9, 5, 4, 0}, {31, 30, 
  29, 28, 21, 19, 17, 16, 11, 6, 4, 2, 0}, {31, 30, 29, 27, 25, 20, 
  19, 17, 10, 9, 7, 6, 5, 4, 0}, {31, 30, 29, 28, 27, 26, 25, 23, 20, 
  19, 16, 15, 14, 13, 12, 11, 9, 8, 0}, {31, 30, 29, 28, 27, 25, 24, 
  23, 21, 20, 17, 16, 15, 14, 13, 8, 7, 6, 4, 3, 2, 1, 0}, {31, 30, 
  29, 27, 23, 22, 17, 15, 10, 9, 7, 6, 5, 3, 0}, {31, 30, 29, 27, 26, 
  18, 17, 16, 12, 11, 10, 8, 7, 6, 5, 4, 2, 1, 0}, {31, 27, 25, 22, 
  20, 17, 15, 14, 13, 12, 11, 9, 8, 7, 6, 4, 0}, {31, 30, 28, 24, 23, 
  22, 20, 15, 12, 11, 6, 5, 4, 3, 0}, {31, 30, 29, 27, 26, 25, 17, 12,
   11, 9, 7, 5, 2, 1, 0}, {31, 29, 27, 26, 21, 20, 19, 18, 17, 12, 8, 
  3, 2, 1, 0}, {31, 29, 26, 24, 21, 19, 18, 12, 11, 9, 5, 4, 2, 1, 
  0}, {31, 26, 22, 20, 19, 13, 12, 11, 10, 9, 8, 7, 5, 2, 0}, {31, 28,
   25, 21, 20, 18, 15, 14, 12, 10, 8, 7, 3, 1, 0}, {31, 30, 23, 22, 
  21, 20, 19, 17, 16, 15, 14, 11, 10, 8, 5, 1, 0}, {31, 29, 26, 24, 
  23, 22, 19, 15, 14, 13, 12, 11, 10, 9, 7, 6, 4, 2, 0}, {31, 30, 28, 
  27, 25, 23, 21, 20, 19, 17, 16, 15, 13, 12, 11, 9, 8, 6, 5, 4, 3, 1,
   0}, {31, 30, 26, 25, 23, 15, 14, 8, 7, 6, 4, 2, 0}, {31, 30, 28, 
  26, 23, 22, 21, 19, 18, 17, 16, 13, 12, 9, 7, 6, 5, 1, 0}, {31, 28, 
  25, 23, 19, 18, 17, 16, 14, 12, 10, 9, 8, 7, 4, 1, 0}, {31, 30, 29, 
  28, 27, 26, 24, 23, 20, 19, 17, 16, 15, 14, 12, 10, 5, 2, 0}, {31, 
  29, 26, 25, 24, 21, 17, 16, 15, 14, 13, 11, 10, 9, 8, 1, 0}, {31, 
  28, 25, 23, 19, 18, 17, 13, 12, 11, 5, 4, 0}, {31, 27, 26, 25, 22, 
  21, 20, 17, 16, 14, 13, 12, 9, 8, 7, 4, 3, 2, 0}, {31, 27, 23, 22, 
  21, 20, 19, 18, 16, 14, 9, 8, 6, 4, 2, 1, 0}, {31, 26, 25, 24, 23, 
  20, 17, 16, 14, 11, 6, 5, 3, 1, 0}, {31, 30, 28, 26, 20, 19, 18, 17,
   16, 15, 13, 12, 11, 10, 9, 8, 6, 5, 4, 1, 0}, {31, 30, 29, 28, 27, 
  23, 21, 19, 16, 12, 11, 9, 7, 6, 5, 4, 3, 2, 0}, {31, 30, 29, 27, 
  24, 22, 20, 19, 17, 15, 14, 9, 8, 7, 6, 4, 3, 1, 0}, {31, 30, 29, 
  28, 25, 24, 21, 20, 18, 17, 11, 9, 8, 1, 0}, {31, 30, 29, 28, 26, 
  20, 19, 18, 17, 13, 12, 11, 9, 7, 6, 5, 3, 1, 0}, {31, 28, 27, 25, 
  22, 21, 20, 19, 18, 17, 15, 9, 6, 5, 4, 3, 2, 1, 0}, {31, 29, 28, 
  27, 25, 24, 23, 22, 21, 19, 17, 16, 14, 12, 10, 6, 5, 4, 2, 1, 
  0}, {31, 27, 25, 24, 15, 12, 11, 7, 5, 3, 2, 1, 0}, {31, 29, 27, 25,
   24, 23, 22, 21, 17, 16, 13, 9, 7, 6, 5, 4, 2, 1, 0}, {31, 30, 29, 
  28, 27, 26, 25, 24, 23, 20, 18, 10, 7, 6, 0}, {31, 29, 26, 25, 24, 
  22, 20, 19, 16, 12, 11, 8, 7, 5, 3, 1, 0}, {31, 26, 24, 16, 14, 11, 
  10, 5, 4, 2, 0}, {31, 29, 26, 24, 22, 21, 19, 16, 13, 11, 9, 8, 7, 
  2, 0}, {31, 30, 29, 23, 21, 15, 14, 13, 12, 11, 9, 6, 4, 1, 0}, {31,
   30, 28, 25, 24, 23, 21, 19, 18, 14, 9, 7, 5, 1, 0}, {31, 28, 26, 
  22, 19, 16, 15, 13, 11, 10, 9, 6, 5, 3, 2, 1, 0}, {31, 30, 29, 27, 
  24, 21, 20, 19, 18, 17, 13, 12, 10, 8, 7, 4, 3, 2, 0}, {31, 27, 19, 
  18, 16, 15, 9, 6, 5, 1, 0}, {31, 30, 28, 26, 25, 23, 21, 20, 18, 15,
   14, 9, 8, 7, 6, 3, 0}, {31, 26, 23, 22, 19, 18, 16, 15, 11, 10, 9, 
  8, 7, 4, 3, 1, 0}, {31, 30, 27, 26, 25, 24, 21, 20, 19, 15, 10, 8, 
  5, 4, 3, 1, 0}, {31, 30, 28, 27, 26, 25, 24, 21, 19, 17, 16, 15, 12,
   11, 7, 5, 4, 3, 2, 1, 0}, {31, 29, 28, 26, 25, 24, 22, 20, 19, 17, 
  14, 13, 11, 5, 4, 1, 0}, {31, 30, 28, 27, 25, 22, 20, 17, 16, 12, 
  10, 7, 6, 5, 4, 3, 0}, {31, 28, 26, 23, 22, 21, 20, 19, 18, 17, 16, 
  15, 14, 12, 11, 10, 6, 5, 4, 2, 0}, {31, 30, 29, 27, 21, 19, 16, 14,
   13, 11, 10, 9, 8, 7, 3, 1, 0}, {31, 29, 28, 26, 25, 24, 22, 21, 19,
   16, 15, 13, 9, 8, 5, 4, 3, 1, 0}, {31, 29, 28, 26, 23, 20, 17, 16, 
  14, 13, 12, 11, 10, 7, 6, 5, 0}, {31, 30, 28, 26, 21, 18, 14, 13, 
  11, 10, 6, 3, 2, 1, 0}, {31, 30, 27, 25, 24, 21, 19, 18, 17, 16, 15,
   13, 11, 7, 6, 3, 0}, {31, 30, 29, 28, 26, 25, 24, 22, 19, 18, 17, 
  11, 10, 9, 5, 4, 2, 1, 0}, {31, 29, 26, 25, 20, 19, 17, 16, 15, 12, 
  8, 7, 6, 4, 3, 2, 0}, {31, 29, 28, 25, 23, 22, 20, 19, 18, 15, 13, 
  11, 6, 3, 0}, {31, 30, 29, 28, 27, 25, 23, 14, 13, 11, 10, 6, 
  0}, {31, 30, 29, 27, 26, 25, 23, 21, 17, 14, 10, 8, 7, 1, 0}, {31, 
  30, 24, 23, 22, 20, 19, 18, 16, 10, 9, 7, 6, 4, 3, 1, 0}, {31, 29, 
  27, 24, 22, 21, 20, 19, 18, 15, 13, 11, 10, 9, 7, 4, 3, 1, 0}, {31, 
  30, 28, 27, 22, 20, 19, 18, 17, 15, 12, 11, 9, 8, 7, 4, 3, 2, 
  0}, {31, 29, 28, 25, 22, 20, 19, 18, 15, 14, 13, 10, 4, 2, 0}, {31, 
  28, 26, 24, 21, 18, 17, 16, 15, 14, 12, 7, 6, 4, 3, 2, 0}, {31, 30, 
  27, 24, 23, 22, 20, 14, 12, 11, 10, 9, 7, 2, 0}, {31, 30, 29, 26, 
  24, 23, 18, 16, 14, 12, 11, 10, 9, 6, 5, 3, 2, 1, 0}, {31, 30, 28, 
  26, 25, 24, 23, 21, 20, 18, 15, 9, 8, 6, 5, 2, 0}, {31, 28, 27, 26, 
  24, 22, 20, 19, 16, 15, 13, 10, 9, 7, 5, 4, 3, 2, 0}, {31, 29, 28, 
  24, 21, 16, 11, 3, 0}, {31, 30, 27, 23, 21, 18, 16, 13, 9, 8, 4, 1, 
  0}, {31, 30, 29, 28, 26, 24, 22, 21, 18, 16, 15, 14, 10, 8, 7, 6, 5,
   4, 3, 1, 0}, {31, 30, 28, 25, 24, 23, 22, 20, 17, 16, 15, 11, 8, 7,
   5, 3, 0}, {31, 30, 24, 21, 20, 18, 17, 15, 14, 12, 10, 8, 3, 2, 
  0}, {31, 29, 28, 27, 26, 25, 24, 18, 16, 15, 13, 12, 10, 5, 4, 1, 
  0}, {31, 29, 27, 25, 24, 23, 22, 20, 19, 17, 16, 14, 12, 10, 8, 6, 
  4, 1, 0}, {31, 29, 26, 24, 22, 17, 16, 15, 14, 11, 10, 9, 8, 5, 4, 
  1, 0}, {31, 30, 28, 27, 26, 25, 18, 16, 15, 14, 13, 8, 6, 5, 4, 2, 
  0}, {31, 30, 29, 27, 26, 23, 21, 20, 18, 15, 9, 7, 5, 3, 0}, {31, 
  30, 28, 27, 26, 25, 23, 21, 17, 11, 5, 1, 0}, {31, 28, 27, 26, 23, 
  21, 19, 17, 16, 15, 11, 9, 6, 4, 0}, {31, 27, 21, 20, 19, 12, 8, 6, 
  3, 1, 0}, {31, 30, 27, 25, 24, 23, 21, 17, 16, 15, 14, 12, 9, 8, 6, 
  4, 3, 2, 0}, {31, 30, 29, 28, 27, 26, 22, 21, 20, 19, 18, 16, 15, 
  13, 12, 10, 8, 7, 3, 2, 0}, {31, 30, 28, 27, 26, 23, 19, 15, 14, 12,
   4, 3, 0}, {31, 30, 27, 26, 24, 22, 21, 16, 14, 8, 7, 6, 5, 2, 
  0}, {31, 29, 28, 27, 26, 25, 24, 23, 22, 17, 14, 11, 9, 8, 7, 6, 5, 
  4, 3, 1, 0}, {31, 30, 28, 24, 23, 16, 15, 13, 12, 11, 10, 6, 
  0}, {31, 30, 26, 25, 24, 23, 22, 19, 14, 12, 7, 6, 5, 3, 0}, {31, 
  30, 28, 27, 26, 25, 23, 22, 21, 20, 18, 15, 11, 9, 8, 7, 6, 5, 4, 1,
   0}, {31, 29, 28, 25, 24, 23, 22, 21, 18, 17, 13, 8, 7, 1, 0}, {31, 
  30, 28, 27, 26, 22, 19, 17, 16, 15, 14, 11, 9, 7, 5, 3, 2, 1, 
  0}, {31, 27, 25, 21, 19, 18, 14, 13, 12, 11, 9, 7, 4, 3, 0}, {31, 
  29, 28, 24, 23, 22, 15, 14, 12, 10, 7, 5, 3, 1, 0}, {31, 30, 29, 28,
   26, 23, 22, 21, 19, 17, 13, 11, 5, 4, 3, 1, 0}, {31, 30, 29, 26, 
  25, 23, 21, 19, 16, 15, 13, 12, 11, 8, 7, 6, 4, 2, 0}, {31, 30, 29, 
  25, 24, 23, 19, 18, 16, 13, 11, 9, 8, 4, 3, 1, 0}, {31, 30, 29, 27, 
  26, 25, 24, 23, 21, 20, 19, 17, 15, 13, 9, 8, 7, 5, 4, 3, 0}, {31, 
  29, 28, 26, 25, 24, 16, 15, 13, 12, 11, 9, 3, 2, 0}, {31, 30, 29, 
  26, 25, 24, 23, 21, 17, 11, 9, 7, 6, 3, 2, 1, 0}, {31, 30, 27, 26, 
  25, 24, 21, 18, 17, 12, 9, 8, 6, 5, 0}, {31, 29, 28, 24, 23, 22, 16,
   15, 10, 9, 8, 7, 6, 3, 2, 1, 0}, {31, 30, 29, 28, 26, 24, 23, 21, 
  19, 18, 14, 12, 11, 10, 9, 8, 7, 6, 0}, {31, 30, 28, 27, 26, 25, 22,
   21, 19, 16, 15, 14, 13, 12, 9, 5, 4, 2, 0}, {31, 30, 29, 27, 25, 
  23, 22, 21, 20, 16, 15, 14, 12, 11, 8, 7, 6, 4, 3, 1, 0}, {31, 30, 
  29, 28, 26, 25, 23, 19, 17, 14, 13, 12, 10, 9, 7, 6, 5, 1, 0}, {31, 
  30, 29, 27, 25, 23, 22, 21, 20, 18, 17, 15, 14, 13, 12, 9, 8, 7, 6, 
  5, 3, 1, 0}, {31, 30, 28, 27, 24, 20, 18, 15, 12, 10, 7, 6, 5, 4, 
  0}, {31, 30, 29, 28, 27, 26, 22, 19, 18, 17, 16, 12, 10, 9, 5, 1, 
  0}, {31, 30, 27, 26, 25, 24, 21, 20, 19, 18, 14, 12, 11, 10, 8, 7, 
  5, 4, 3, 1, 0}, {31, 29, 23, 22, 19, 17, 16, 10, 9, 8, 6, 5, 2, 1, 
  0}, {31, 30, 29, 28, 27, 26, 24, 23, 17, 16, 14, 13, 11, 9, 8, 6, 4,
   3, 2, 1, 0}, {31, 30, 29, 26, 24, 22, 21, 19, 18, 17, 15, 13, 11, 
  9, 6, 5, 3, 2, 0}, {31, 29, 28, 26, 23, 19, 17, 9, 8, 7, 4, 3, 2, 1,
   0}, {31, 30, 29, 28, 27, 24, 23, 21, 19, 16, 13, 11, 9, 8, 6, 4, 3,
   1, 0}, {31, 26, 22, 21, 18, 17, 16, 14, 12, 11, 7, 6, 3, 2, 
  0}, {31, 29, 28, 26, 25, 23, 10, 9, 7, 5, 2, 1, 0}, {31, 30, 29, 27,
   25, 24, 18, 17, 16, 15, 13, 11, 9, 7, 5, 4, 3, 2, 0}, {31, 30, 28, 
  27, 26, 25, 22, 20, 17, 14, 12, 10, 9, 8, 5, 4, 0}, {31, 29, 23, 19,
   17, 15, 14, 11, 9, 8, 6, 4, 2, 1, 0}, {31, 30, 29, 28, 27, 26, 23, 
  22, 20, 18, 16, 13, 12, 11, 6, 5, 2, 1, 0}, {31, 29, 24, 20, 19, 13,
   12, 10, 8, 6, 4, 3, 2, 1, 0}, {31, 27, 19, 18, 17, 16, 12, 11, 10, 
  9, 8, 7, 5, 4, 0}, {31, 30, 29, 27, 26, 23, 19, 17, 16, 14, 13, 12, 
  6, 4, 3, 1, 0}, {31, 30, 29, 20, 19, 14, 12, 10, 9, 8, 7, 6, 5, 3, 
  0}, {31, 29, 28, 27, 26, 22, 20, 19, 17, 16, 9, 5, 4, 3, 2, 1, 
  0}, {31, 30, 29, 28, 27, 26, 25, 24, 23, 19, 17, 16, 14, 12, 11, 10,
   8, 6, 5, 4, 3, 1, 0}, {31, 28, 27, 23, 21, 20, 18, 17, 16, 15, 13, 
  12, 10, 9, 8, 7, 5, 4, 2, 1, 0}, {31, 24, 20, 18, 12, 9, 8, 4, 3, 1,
   0}, {31, 28, 27, 24, 23, 22, 19, 16, 15, 14, 13, 11, 10, 9, 7, 5, 
  4, 3, 2, 1, 0}, {31, 28, 26, 25, 21, 19, 18, 17, 15, 14, 13, 12, 9, 
  7, 6, 5, 0}, {31, 29, 28, 27, 26, 25, 23, 22, 20, 17, 16, 15, 14, 
  10, 7, 6, 5, 3, 2, 1, 0}, {31, 30, 28, 20, 18, 17, 16, 15, 14, 13, 
  10, 6, 3, 2, 0}, {31, 27, 26, 25, 24, 20, 19, 15, 14, 13, 12, 11, 8,
   2, 0}, {31, 28, 27, 26, 24, 22, 21, 19, 18, 15, 10, 9, 8, 7, 6, 4, 
  3, 1, 0}, {31, 29, 28, 23, 22, 19, 18, 13, 12, 11, 10, 9, 8, 7, 5, 
  3, 2, 1, 0}, {31, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 14, 12, 
  11, 7, 6, 5, 4, 3, 1, 0}, {31, 27, 26, 24, 22, 20, 19, 17, 16, 13, 
  10, 3, 0}, {31, 30, 28, 27, 24, 23, 22, 20, 18, 14, 12, 10, 9, 8, 6,
   4, 3, 1, 0}, {31, 28, 27, 24, 23, 13, 12, 10, 9, 7, 4, 2, 0}, {31, 
  27, 26, 23, 17, 16, 15, 14, 13, 10, 9, 7, 5, 3, 2, 1, 0}, {31, 27, 
  26, 25, 22, 21, 20, 19, 18, 15, 8, 7, 4, 3, 0}, {31, 28, 23, 22, 21,
   20, 19, 18, 15, 14, 8, 6, 4, 3, 2, 1, 0}, {31, 30, 29, 26, 20, 18, 
  14, 13, 10, 8, 2, 1, 0}, {31, 28, 27, 26, 25, 22, 20, 18, 17, 16, 
  15, 13, 11, 9, 8, 6, 4, 1, 0}, {31, 18, 17, 11, 8, 6, 4, 2, 0}, {31,
   30, 26, 25, 24, 22, 19, 18, 14, 13, 12, 11, 9, 8, 2, 1, 0}, {31, 
  28, 27, 26, 25, 24, 21, 16, 15, 14, 13, 11, 5, 3, 0}, {31, 28, 27, 
  24, 21, 20, 19, 16, 15, 14, 12, 11, 10, 7, 6, 2, 0}};
  
buildMSobol[indtab_,dbg_:False] :=
    Module[ {i},
        msobol = Table[getMSobol1d[indtab[[i]], dbg],{i,Length[indtab]}];
        If[ dbg,
            Print["buildMSobol:  msobol=",msobol//mf]
        ];
    ]

sobolseqLength = 32;

getMSobol1d[ind_,dbg_:False] :=
    Module[ {seq,seqlen,i,j,msobol},
        msobol = Table[1,{sobolseqLength}];
        seq = a058947[[ind]]//IntegerDigits;
        seqlen = Length[seq];
        Do[
            msobol[[i]] = ( (2^(i-1)-1)*2 + 1); (* must be even!!! *)
            (*msobol[[i]] = RandomInteger[{0,2^(i-1)-1}]*2 + 1*); (* must be even!!! *)
        ,{i,2,seqlen-1}];
        If[ dbg,
            Print["getMSobol1d:  ind=",ind," seq=",seq," of len=",seqlen -> msobol[[;;seqlen-1]] ]
        ];
        Do[
            msobol[[i]] = BitXor @@ Join[Table[2^(j) seq[[j+1]] msobol[[i-j]],{j,1,seqlen-1}],{msobol[[i-seqlen+1]]}];
            (*Print[i -> seq ->msobol[[;;i-1]] -> {msobol[[i-seqlen+1]]}
                -> Table[2^(j) msobol[[i-j]],{j,1,seqlen-1}]
                -> Table[2^(j) seq[[j+1]] msobol[[i-j]],{j,1,seqlen-1}]
                   -> Table[ seq[[j+1]] ,{j,1,seqlen-1}]
                -> Table[IntegerDigits[2^(j) seq[[j+1]] msobol[[i-j]] ,2,seqlen] ,{j,1,seqlen-1}] 
                ->  (IntegerDigits[#,2,i]& @ msobol[[i-seqlen+1]]) 
                -> (IntegerDigits[#,2,i]& @ msobol[[i]] ) 
                ];*)
        ,{i,seqlen,sobolseqLength}];
        Return[msobol]
    ] (* getMSobol1d *)

sobol1d[nf_,n_] := (* original Sobol's construction *)
    Module[ {i,seq = IntegerDigits[n,2] //Reverse,seqlen,nn},
        seqlen = Length[seq];
        nn = BitXor @@ Table[ seq[[i]] msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}];
        Return[ FromDigits[IntegerDigits[nn,2,seqlen] ,2] / 2^seqlen ]
    ]

sobol2d[n_] :=
    {sobol1d[1,n],sobol1d[2,n]}

rot345[{u_,v_}] :=
    Round[{3 u - 4 v, 4 u + 3 v}/5]
rot51213[{u_,v_}] :=
    Round[{5 u - 12 v, 12 u + 5 v}/13]

digits2str[digits_] :=
    StringJoin[ToString /@ digits] 
str2n[str_] :=
    FromDigits[#, 2] & @ Table[StringTake[str, {i}] // ToExpression, {i, StringLength[str]}]
str2nFIBO[str_] :=
    FIBOF @ Table[StringTake[str, {i}] // ToExpression, {i, StringLength[str]}]




dbgSobol[innlevels_:4, ind1_:1, ind2_:2, dbgTxt_:True ] :=
    Module[ {},
        ptsz = .01;
        nlevels = innlevels;
        buildMSobol[{ind1, ind2}];
        nf = 1; (* x *)
        Print["Sobol dir number ind=",ind1," a058947[[ind1]]=", a058947[[ind1]] -> (IntegerDigits @ a058947[[ind1]])];
        If[ dbgTxt,
            Print["msobol"-> msobol[[1,;;20]]];
            Print["msobol"
                -> mf[ Table[Join[ Table[" ",{20-i}], Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]) ], {i,20}] ] 
                -> mf[ Table[Join[Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]),  Table[" ",{20-i}] ], {i,20}] ] 
                ];
        ];
        Do[
            npts =  2^ilevel;
            npos = Ceiling[Log[2,npts]];
            newtab = Table[
                n = inunmber;
                nf = 1;
                seq = IntegerDigits[n,2] //Reverse;
                seqlen = Length[seq];
                seqpadded = PadRight[#,ilevel]& @ seq;
                nn = BitXor @@ Table[ seq[[i]] msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}];
                nnpadded = PadRight[#,ilevel]& @ (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  );
                newval = FromDigits[ nnpadded ,2];
                If[ dbgTxt,
                    Print[n > Reverse[seqpadded] -> seqpadded 
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (seq[[i]] msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  )
                     -> nnpadded -> newval -> (newval / 2^ilevel)
                     ];
                ];
                {x,y} = {n,npts sobol1d[nf,n]};
                newval
            ,{inunmber,0,npts-1}];
            ptsx = Table[npts sobol1d[nf,i],{i,0,npts-1}];
        ,{ilevel,nlevels}];

(*Abort[]*);
        nf = 2; (* y *)
        Print["Sobol dir number ind=",ind2," a058947[[ind1]]=", a058947[[ind2]] -> (IntegerDigits @ a058947[[ind2]])];
        If[ dbgTxt,
            Print["msobol"-> msobol[[2,;;20]]];
            Print["msobol"
                -> mf[ Table[Join[ Table[" ",{20-i}], Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]) ], {i,20}] ] 
                -> mf[ Table[Join[Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]),  Table[" ",{20-i}] ], {i,20}] ] 
                ];
        ];
        Table[
            npts =  2^ilevel;
            npos = Ceiling[Log[2,npts]];
            gobj = Table[
                n = inunmber;
                nf = 2;
                seq = IntegerDigits[n,2] //Reverse;
                seqlen = Length[seq];
                seqpadded = PadRight[#,ilevel]& @ seq;
                nn = BitXor @@ Table[ seq[[i]] msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}];
                nnpadded = PadRight[#,ilevel]& @ (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  );
                newval = FromDigits[ nnpadded ,2];
                If[ dbgTxt,
                    Print[ilevel,"|",n > Reverse[seqpadded] -> seqpadded 
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (seq[[i]] msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  )
                     -> nnpadded -> newval -> (newval / 2^ilevel)
                     ];
                ];
                {x,y} = {n,npts sobol1d[nf,n]};
                lbl = StringJoin[ToString/@IntegerDigits[n,2]];
                col = If[ seqlen < 6,
                          getColor[n],
                          getColor[seqlen]
                      ];
                {col,PointSize[.02],Point[{x,y}],Black,Text[lbl,{x,y},{-1,-1}]}
            ,{inunmber,0,npts-1}];
            ptsy = Table[npts sobol1d[nf,i],{i,0,npts-1}];
        ,{ilevel,nlevels}];
        {g1,g2} = {getBinaryTree[ptsx,nlevels,"Sobol ind="<>ToString[ind1]], getBinaryTree[ptsy,nlevels,"Sobol ind="<>ToString[ind2]]};
        pts = T[{ptsx,ptsy}];
        scale = Length[pts];
        xcodes = IntegerDigits[#, 2, nlevels]& /@ ptsx;
        ycodes = IntegerDigits[#, 2, nlevels]& /@ ptsy;
        xycodes = {xcodes,ycodes}//T;
        xycodesFIBOSel = Select[xycodes, Max[(ListConvolve[{1, 1}, #] & /@ #)] < 2 &];
        g3 = Graphics[{PointSize[ptsz],Point /@ (pts/scale)
            ,Table[{
                  Text[Style[ToString[(i-1)],24],pts[[i]]/scale,{-1,-1}]
                 ,Text[Style[ToString[IntegerDigits[#,2,nlevels]& @ (i-1)],Red,12],pts[[i]]/scale,{-1,1}]
                },{i,Length[pts]}]   }
            (*,Frame->True,FrameTicks->Automatic,AspectRatio->1,GridLines->{Range[0,npts-1],Range[0,npts-1]}*)
               , PlotRange->{{-eps,1+eps},{-eps,1+eps}} (*{{-eps,2^nlevels+eps},{-eps,2^nlevels+eps}}*)
            ,PlotLabel->"Sobol xy: dir numbers="<>ToString[{ind1,ind2}]];
        {g1,g2}//Print;
        Print[mf@ {ptsx,ptsy} 
            -> (mf @ { ptsx//order2permut0toNminus1,ptsy//order2permut0toNminus1 })
             ];
        Print[(ptsy)
            -> ( mf /@ (Reverse @  ( IntegerDigits[#,2,nlevels] )& /@ (ptsy ) ) )
        ];
        Print[(ptsy//order2permut0toNminus1)
            -> ( mf /@ (Reverse @  ( IntegerDigits[#,2,nlevels] )& /@ (ptsy//order2permut0toNminus1 ) ) )
        ];
        Print[Show[Graphics@getBinaryGrid[nlevels],g3,ImageSize->{1,1}32 2^nlevels] ];
    ] (* dbgSobol *)


showSobol1d[ind1_:1] :=
    Module[ {},
        npts = 16;
        npos = Ceiling[Log[2,npts]];
        Print["Sobol dir number: ",ind1];
        buildMSobol[{ind1, 123}];
        gobj = Table[
            {x,y} = {i,npts sobol1d[1,i]};
            octave = Log[2, i]//Floor;
            lbl = StringJoin[ToString/@IntegerDigits[i,2]];
            col = If[ octave < 6,
                      getColor[i],
                      getColor[octave]
                  ];
            {col,PointSize[.05],Point[{x,y}],Black,Text[lbl,{x,y},{-1,-1}]}
        ,{i,0,npts-1}];
        Graphics[gobj,Frame->True,FrameTicks->Automatic,AspectRatio->1,GridLines->{Range[0,npts-1],Range[0,npts-1]}]//Print;
        ptscodes = IntegerDigits[#,2,npos]& /@ Table[npts sobol1d[1,i],{i,0,npts-1}];
        Print[{Range[0,npts-1],ptscodes, FromDigits[#,2]& /@ ptscodes,FromDigits[Reverse[#],2]& /@ ptscodes}//T//mf];
    (*ptscodes = IntegerDigits[#,2,8]& /@ Table[256 sobol1d[1,i],{i,0,255}];
        Print[{Range[0,255],ptscodes, FromDigits[#,2]& /@ ptscodes,FromDigits[Reverse[#],2]& /@ ptscodes}//T//mf];*)
    ] (* showSobol1d *)

showSobol2D[npts_:16,ind1_:1,ind2_:2] := (* showSobol2D[n,1,2] produces output identical to that of Kuo's sobol.c *)
    Module[ {},
        grid4 = { Thickness[.01],Yellow,Table[{Line[{{0,i},{4,i}}/4],Line[{{i,0},{i,4}}/4]},{i,0,4,1}] };
        grid8 = { Thickness[.005],Yellow,Table[{Line[{{0,i},{8,i}}/8],Line[{{i,0},{i,8}}/8]},{i,0,8,1}] };
        grid16 = { Thickness[.0003],Red,Table[{Line[{{0,i},{16,i}}/16],Line[{{i,0},{i,16}}/16]},{i,0,16,1}] };
        grid16bold = { Thickness[.001],Red,Table[{Line[{{0,i},{16,i}}/16],Line[{{i,0},{i,16}}/16]},{i,0,16,1}] };
        grid64 = { Thickness[.0002],Blue,Table[{Line[{{0,i},{64,i}}/64],Line[{{i,0},{i,64}}/64]},{i,0,64,1}] };
        grid256 = { Thickness[.0002],Cyan,Table[{Line[{{0,i},{256,i}}/256],Line[{{i,0},{i,256}}/256]},{i,0,256,1}] };
        dbgFlag = If[ npts <= 256,
                      True,
                      False
                  ];

        (*Print["Processing showSobol2D ",{npts,{ind1,ind2}}];*)
        buildMSobol[{ind1, ind2},True];
        pts = {};
        gobj = Table[
            {x,y} = {sobol1d[1,i],sobol1d[2,i]};
            AppendTo[pts,{x,y}];
            octave = Log[2, i]//Floor;
            lbl = StringJoin[ToString/@IntegerDigits[i,2,4]];
            col = If[ octave < 6,
                      Gray,
                      getColor[octave]
                  ];
            If[ dbgFlag,
                {(*col,*)Gray,Rectangle[{x,y},{x,y}+1/npts](*,Cyan,Text[lbl,{x,y},{-1,1}]*),Red,Text[i,{x,y},{1,1}]},(*ELSE*)
                {(*col,*)Gray,Rectangle[{x,y},{x,y}+1/npts] }
            ]
        ,{i,0,npts-1}];
        {g1,g2} = Switch[npts
            ,16,{grid4,grid16}
            ,64,{grid8,grid64}
            ,256,{grid16bold,grid256}
            ,_,{grid4,grid16}
        ];
        If[ npts > 256,
            Graphics[{Point/@pts},Frame->True,FrameTicks->None,ImageSize->2{256,256},PlotLabel->"Sobol "<>ToString[{npts,ind1,ind2,discrepancyIndicator2D[npts pts]}]<>" "<>ToString[testHierarchicalStratified2D[npts pts]] ]//Print,(*ELSE*)
            Graphics[{g1,g2,gobj},Frame->True,FrameTicks->None,ImageSize->2{256,256},PlotLabel->"Sobol "<>ToString[{npts,ind1,ind2,discrepancyIndicator2D[npts pts]}]<>" "<>ToString[testHierarchicalStratified2D[npts pts]] ]//Print
        ];
    ] (* showSobol2D *)
(*---------------------- end of Sobol ----------------------*)

(*--------------------------------- pocDweRuKiSobol -does not work!!! -------------------------------*)
pocDweRuKiSobolBase4[innlevels_:4, ind1_:1, ind2_:3, dbgTxt_:False ] :=
    Module[ {},
        ptsz = .005;
        nlevels = innlevels;
        buildMSobol[{ind1, ind2}];
        nf = 1; (* x *)
        Print["Sobol dir number ind=",ind1," a058947[[ind1]]=", a058947[[ind1]] -> (IntegerDigits @ a058947[[ind1]])];
        If[ dbgTxt,
            Print["msobol"-> msobol[[1,;;20]]];
            Print["msobol"
                -> mf[ Table[Join[ Table[" ",{20-i}], Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]) ], {i,20}] ] 
                -> mf[ Table[Join[Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]),  Table[" ",{20-i}] ], {i,20}] ] 
                ];
        ];
        Do[
            npts =  2^ilevel;
            npos = Ceiling[Log[2,npts]];
            newtab = Table[
                n = inunmber;
                nf = 1;
                seq = IntegerDigits[n,2] //Reverse;
                seqlen = Length[seq];
                seqpadded = PadRight[#,ilevel]& @ seq;
                nn = BitXor @@ Table[ seq[[i]] msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}];
                nnpadded = PadRight[#,ilevel]& @ (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  );
                newval = FromDigits[ nnpadded ,2];
                If[ dbgTxt,
                    Print[n > Reverse[seqpadded] -> seqpadded 
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (seq[[i]] msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  )
                     -> nnpadded -> newval -> (newval / 2^ilevel)
                     ];
                ];
                {x,y} = {n,npts sobol1d[nf,n]};
                newval
            ,{inunmber,0,npts-1}];
            ptsx = Table[npts sobol1d[nf,i],{i,0,npts-1}];
        ,{ilevel,nlevels}];
        nf = 2; (* y *)
        Print["Sobol dir number ind=",ind2," a058947[[ind1]]=", a058947[[ind2]] -> (IntegerDigits @ a058947[[ind2]])];
        If[ dbgTxt,
            Print["msobol"-> msobol[[2,;;20]]];
            Print["msobol"
                -> mf[ Table[Join[ Table[" ",{20-i}], Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]) ], {i,20}] ] 
                -> mf[ Table[Join[Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]),  Table[" ",{20-i}] ], {i,20}] ] 
                ];
        ];
        Table[
            npts =  2^ilevel;
            npos = Ceiling[Log[2,npts]];
            gobj = Table[
                n = inunmber;
                nf = 2;
                seq = IntegerDigits[n,2] //Reverse;
                seqlen = Length[seq];
                seqpadded = PadRight[#,ilevel]& @ seq;
                nn = BitXor @@ Table[ seq[[i]] msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}];
                nnpadded = PadRight[#,ilevel]& @ (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  );
                newval = FromDigits[ nnpadded ,2];
                If[ dbgTxt,
                    Print[ilevel,"|",n > Reverse[seqpadded] -> seqpadded 
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (seq[[i]] msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  )
                     -> nnpadded -> newval -> (newval / 2^ilevel)
                     ];
                ];
                {x,y} = {n,npts sobol1d[nf,n]};
                lbl = StringJoin[ToString/@IntegerDigits[n,2]];
                col = If[ seqlen < 6,
                          getColor[n],
                          getColor[seqlen]
                      ];
                {col,PointSize[.02],Point[{x,y}],Black,Text[lbl,{x,y},{-1,-1}]}
            ,{inunmber,0,npts-1}];
            ptsy = Table[npts sobol1d[nf,i],{i,0,npts-1}];
        ,{ilevel,nlevels}];
        pts = T[{ptsx,ptsy}];
        codes = {1+(IntegerDigits[#, 4, nlevels/2] & /@ ptsx), 1+(IntegerDigits[#, 4, nlevels/2] & /@ ptsy)} // T;
        scale = Length[pts];
        g3 = Graphics[{PointSize[ptsz],Point /@ (pts/scale)
            ,Table[{
                  Text[Style[ToString[(i-1)],12],pts[[i]]/scale,{-1,-1}]
                  ,Text[( Style[codes[[i]], 6]),pts[[i]]/scale,{-1,1}]
                 (*,Text[Style[ToString[IntegerDigits[#,4,nlevels/2]& @ (i-1)],Red,12],pts[[i]]/scale,{-1,1}]*)
                },{i,Length[pts]}]   }
            (*,Frame->True,FrameTicks->Automatic,AspectRatio->1,GridLines->{Range[0,npts-1],Range[0,npts-1]}*)
               , PlotRange->{{-eps,1+eps},{-eps,1+eps}} (*{{-eps,2^nlevels+eps},{-eps,2^nlevels+eps}}*)
            ,PlotLabel->"Sobol xy: dir numbers="<>ToString[{ind1,ind2}]];
        If[ dbgTxt,
            Print[mf@ {ptsx,ptsy} -> (mf @ { IntegerDigits[#,4,nlevels/2]& /@ ptsx, IntegerDigits[#,4,nlevels/2]& /@ ptsy }) ]
        ];
        Print[Show[Graphics@getBinaryGridBase4[nlevels/2],g3,ImageSize-> {750,750} ] ];
    
(*------------------------- DweRuKiBase4 -----------------------*)
        xcodes = IntegerDigits[#, 4, nlevels/2]& /@ ptsx;
        ycodes = IntegerDigits[#, 4, nlevels/2]& /@ ptsy;
        xycodes = {xcodes,ycodes}//T;
        labelDweRuKi = "mx4233";
        mx = mx4233;
        mxsz = Length[mx];
        myRandomSampleDir = myRandomSampleInv = Identity;
        init[mx,False, True];
        Table[
                {ix0,iy0} = {ix,iy};
                codes = ({Join[{ix0},#[[1]]],  Join[{iy0},#[[2]]]}& /@ ( (1 + #) & /@xycodes) );
                activeCodes = DweRuKiselectactiveCodes[codes];
                pts = (getFracValueDir /@ #)& /@ activeCodes;
                gl = Table[
                    {Point[pts[[i]]]
                        ,Text[Style[ToString[(i-1)],18],pts[[i]],{-1,-1}]
                        ,Text[( Style[activeCodes[[i]],6]),pts[[i]],{-1,1}]
                    }
                ,{i,Length[activeCodes]}];
                grid = getDweRuKiGrid[nlevels/2,ix0,iy0];
                Graphics[{Opacity[.5],grid,Opacity[1]
                    , PointSize[.005], gl }, ImageSize -> {750,750} 
                    ,PlotLabel->{ix,iy}
                ]
        ,{ix,4},{iy,4}]//Flatten//Print;
    ] (* pocDweRuKiSobolBase4 *)
(*--------------------------------- end of pocDweRuKiSobol -does not work!!! -------------------------------*)

AALDS1dBuildMX[insz_:64, inmxType_:1, inalpha_:2, k_:1] :=
    Module[ {mx},
        {sz,mxType,alpha} = {insz,inmxType,inalpha};
        npow = 10;
        ntrials = 100;
        nmx = 1;
        Print["{sz,mxType,alpha} = ",{sz,mxType,alpha,k}];
    
        (*Parallelize @*)
        Do[
        restab = Sort @ Table[
        Print["trial ", itrial];
        mx = mkAALDSmx[sz, mxType,alpha,k];
        tab = T @ (Total /@ (Table[MatrixPower[mx, i], {i, npow}]));
        mxpow = MatrixPower[mx, npow];
        intevec = Total /@ mxpow;
        evec = N[intevec / Norm[intevec] ];
        evecdiff = Differences[Sort @ evec];
        {evecdiffmin,evecdiffmax} = {Min[evecdiff],Max[evecdiff]};
        {{evecdiffmax,evecdiffmin},mx}
        ,{itrial,ntrials}];
        mx = restab[[1,-1]];
            
            (*mx = BitOr[mx, UpperTriangularize[restab[[-2,-1]]]];*)
        {eval,evecDir,evecInv} = getAALDSmxEV[mx];
        {niceRaster[1 - Reverse[mx], zoom -> Round[128/insz]]
        ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{Min[evecDir],Max[evecDir]},{Min[evecInv],Max[evecInv]}},PlotLabel->imx]
        ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{0,Max[evecDir]},{0,Max[evecInv]}},PlotLabel->imx]}//Print;
        (*fname = "matrices/mx_64x64_lenear_decrease/mx_64."<>ToString[NumberForm[imx, 2, NumberPadding -> "0"]]<>".dat";
        Export[fname,mx];
        Print["mx written into ",fname];*)
        ,{imx,0,nmx-1}];
        ArrayPlot[mx,  Mesh -> True,ImageSize->4{256,256}]//Print;
        Print[mx];
    ] (* AALDS1dBuildMX *)


mkAALDSmx[sz_:16,mxType_:1,alpha_:.01,k_:.1] :=
    Module[ {mx,x,y},
        Switch[mxType
            ,1,
                mx = Table[1,{sz},{sz}];
                Do[
                    nzeros = Ceiling[k y / 2];
                    line = Flatten @ Join[ RandomSample @ Join[ RandomSample /@ Table[{0,1},{nzeros}], Table[{1,1},{sz/2 - nzeros }] ] ];
                    line[[1]] = 1;
                    mx[[y]] = line;
                ,{y,2,sz}];
                (*mx = BitXor[mx, T[mx]]*);
                (*mx = BitAnd[mx, T[mx]]*);
        
            ,2,
                mx = Table[1,{sz},{sz}];
                limit = Min[sz, 2 Round[sz/4/k]];
                (*Print[k -> limit];*)
                Do[
                    Do[
                        m2x2 = If[ (RandomReal[])^k > 2 k y / sz,
                                   {{1,1},{1,1}},
                                   RandomChoice[{ {{0,1},{1,1}}, {{1,0},{1,1}}, {{1,1},{0,1}}, {{1,1},{1,0}} } ]
                               ];
                        mx[[y;;y+1, x;;x+1]] = m2x2;
                    ,{x,1,y,2}];
                ,{y,1,limit,2}];
                Do[
                    Do[
                        m2x2 = If[ (RandomReal[])^k > k y / sz /2,
                                   RandomChoice[{{{1,1},{1,1}},        {{0,1},{1,1}}, {{1,0},{1,1}}, {{1,1},{0,1}}, {{1,1},{1,0}} } ],
                                   RandomChoice[{ {{1,0},{0,1}}, {{0,1},{1,0}} } ]
                               ];
                        mx[[y;;y+1, x;;x+1]] = m2x2;
                    ,{x,1,y,2}];
                ,{y,limit+1,sz,2}];
                mx[[;;,1]] = 1;
                mx = BitAnd[mx, T[mx]];
        
            ,11,
                mx = Table[1,{sz},{sz}];
                Do[
                    line = Join[{1}, RandomChoice[{alpha (y/sz)^k, 1 - alpha (y/sz)^k} -> {0, 1}, sz-1] ];
                    mx[[y]] = line;
                ,{y,2,sz}];
                mx = BitAnd[mx, T[mx]];
            ,22,
                mx = Table[1,{sz},{sz}];
                (* first pass *)
                modifiers = {Range[2,sz],Range[2,sz]//RandomSample}//Transpose;
                ({ix,iy} = #;
                 mx[[iy,ix]] = 0) & /@ modifiers;
                (* second pass *)
                nskip = Round[alpha sz];
                modifiers = {Range[2,sz],Join[Range[1+nskip,sz],Range[sz-nskip+2,sz]]//RandomSample}//Transpose;
                ({ix,iy} = #;
                 mx[[iy,ix]] = 0) & /@ modifiers;
                mx = BitAnd[mx, T[mx]];
            ,3,
                data = Get["data/L5_BN.dat"];
                set = RandomChoice[data];
                mx = Table[1,{sz},{sz}];
                modifiers = Ceiling[(sz-1)/64 set/16];
                ({ix,iy} = #;
                 If[ ix > 0 && iy > 0 && RandomReal[] < k (iy /(sz-1))^alpha,
                     mx[[1+iy,1+ix]] = 0
                 ]
                    ) & /@ modifiers;
                mx = BitAnd[mx, T[mx]];
            ,4,
                data = Get["data/L5_BN.dat"]; (* 1024 *)
                set = RandomChoice[data];
                mx = Table[1,{sz},{sz}];
                modifiers = Ceiling[(sz-1)/64 set/16];
                ({ix,iy} = #;
                 If[ ix > 0 && iy > 0 && RandomReal[] < k ((ix / 64)^alpha + (iy / 64)^alpha),
                     mx[[1+iy,1+ix]] = 0
                 ]
                    ) & /@ modifiers;
                mx = BitAnd[mx, T[mx]];
            ,5,
                data = Get["data/L6_BN.dat"]; (* 4096 *)
                set = RandomChoice[data];
                mx = Table[1,{sz},{sz}];
                modifiers = Ceiling[(sz-1)/64 set/64];
                ({ix,iy} = #;
                 If[ ix > 0 && iy > 0 && RandomReal[] < k (iy /(sz-1))^alpha,
                     mx[[1+iy,1+ix]] = 0
                 ]
                    ) & /@ modifiers;
                mx = BitAnd[mx, T[mx]];
            ,6,
                data = Get["data/L4_BN.dat"]; (* 256 *)
                set = RandomChoice[data];
                mx = Table[1,{sz},{sz}];
                modifiers = Ceiling[(sz-1)/64 set/4];
                ({ix,iy} = #; 
                    (*If[RandomReal[] < k (iy /(sz-1))^alpha, mx[[1+iy,1+ix]] = 0 ]*)
                 If[ ix > 0 && iy > 0 && RandomReal[] < k ((ix / 64)^alpha + (iy / 64)^alpha),
                     mx[[1+iy,1+ix]] = 0
                 ]
                    ) & /@ modifiers;
                mx = BitAnd[mx, T[mx]];
            ,7,
                 mx = Table[1,{sz},{sz}];
                 Do[
                     line = Join[{1}, RandomChoice[{alpha (y/sz)^k, 1 - alpha (y/sz)^k} -> {0, 1}, sz-1] ];
                     mx[[y]] = line;
                 ,{y,2,sz}];
                (*mx = BitAnd[mx, T[mx]];*)
            ,8,
                mx = Table[1,{sz},{sz}];
                modifiers = Table[{i+1,i},{i,2,sz}];
                ({ix,iy} = #;
                 mx[[iy,ix]] = 0) & /@ modifiers;
                (*modifiers = Table[{2 i+2,2 i},{i,2,sz/2}];
                ({ix,iy} = #; mx[[iy,ix]] = 0) & /@ modifiers;*)
                (*mx[[-1,2]] = 0*);
                mx[[2,4]] = 0;
                modifiers = {{Round[sz/3] 2,Round[sz/3]}};
                ({ix,iy} = #;
                 mx[[iy,ix]] = 0) & /@ modifiers;
            ,10,
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,2;;y]] = RandomChoice[{alpha (y/sz)^k, 1 - alpha (y/sz)^k} -> {0, 1}, y-1];
                ,{y,2,sz}];
            ,1100, (* lower diagonal checkerboard *)
               Print["producing #1100 "];
               checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                        1,
                                        0
                                    ],{iy,sz},{ix,sz}];
               mx = Table[1,{sz},{sz}];
               Do[
                   mx[[y,2;;y]] = checkerboard[[y,2;;y]];
                ,{y,2,sz}];
            ,1101, (* upper diagonal checkerboard *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,y;;]] = checkerboard[[y,y;;]];
                ,{y,2,sz}];
            ,1102, (* upper diagonal Sparse *)
                LshapedSparse = Table[0,{sz},{sz}];
                Do[{iix,iiy} = {2ix-iy,ix+2iy};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       LshapedSparse[[iiy,iix]] = 1
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,y;;]] = LshapedSparse[[y,y;;]];
                ,{y,2,sz}];
            ,1103, (* upper diagonal Dense *)
                LshapedDense = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {2ix-iy,ix+2iy};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       LshapedDense[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,y;;]] = LshapedDense[[y,y;;]];
                ,{y,2,sz}];
            ,1111, (* upper diagonal checkerboard convex*)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    x = Round[ Sqrt[(sz-1)^2 - (sz-y)^2] ] + 2;
                    mx[[y,x;;]] = checkerboard[[y,x;;]];
                ,{y,2,sz}];
            ,1112, (* upper diagonal checkerboard concave*)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    x = sz - Round[ Sqrt[(sz-1)^2 - (y-2)^2] ] + 1;
                    mx[[y,x;;]] = checkerboard[[y,x;;]];
                ,{y,2,sz}];
            ,1201, (* symm checkerboard *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[sz-y+2,y;;]] = checkerboard[[y,y;;]];
                ,{y,2,sz}];
            ,1202, (* symm Sparse mx *)
                LshapedSparse = Table[0,{sz},{sz}];
                Do[{iix,iiy} = {2ix-iy,ix+2iy};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       LshapedSparse[[iiy,iix]] = 1
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[sz-y+2,y;;]] = LshapedSparse[[y,y;;]];
                ,{y,2,sz}];
            ,1203, (* symm Dense mx *)
                LshapedDense = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {2ix-iy,ix+2iy};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       LshapedDense[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[sz-y+2,y;;]] = LshapedDense[[y,y;;]];
                ,{y,2,sz}];
            ,1204, (* symm checkerboard randomized *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[sz-y+2,y;;]] = RandomSample @ checkerboard[[y,y;;]];
                ,{y,2,sz}];
            ,1300, (* pure disk, symm *)
                mx = Table[If[ Mod[ix+iy,2] == 1,
                               1,
                               0
                           ],{iy,sz},{ix,sz}]; (* checkerboard *)
                mx = Table[1,{sz},{sz}];
                disk = DiskMatrix[sz-1][[sz+1;;,sz+1;;]];
                Do[
                    mx[[y,2;;]] = disk[[y-1,;;]];
                ,{y,2,sz}];
            ,1301, (* convex symm, checkerboard*)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    x = Round[ Sqrt[(sz-1)^2 - (y-2)^2] ] + 2;
                    mx[[y,x;;]] = checkerboard[[y,x;;]];
                ,{y,2,sz}];
            ,1302, (* concave symm, checkerboard*)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    x = sz - Round[ Sqrt[(sz-1)^2 - (sz - y)^2] ] + 1;
                    mx[[y,x;;]] = checkerboard[[y,x;;]];
                ,{y,2,sz}];
            ,1401, (* lower diagonal 1/3 *)
                sparsemx = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {ix+iy,2 iy-ix};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       sparsemx[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,;;y]] = sparsemx[[y,;;y]];
                ,{y,2,sz}];
                mx[[-1,-1]] = mx[[1,1]] = 1;
            ,1402, (* upper diagonal 1/3 *)
                sparsemx = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {2ix+iy,iy-ix};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       sparsemx[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,y;;]] = sparsemx[[y,y;;]];
                ,{y,2,sz}];
        
            ,1403, (* upper diagonal 1/3 random *)
                sparsemx = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {2ix+iy,iy-ix};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       sparsemx[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    len = sz - y + 1;
                    start = y;
                    nones = Round[len/3];
                    nzeros = len - nones;
                    line = Join[Table[0,{nzeros}],Table[1,{nones}]]//RandomSample;
                    mx[[y,y;;]] = line;
                ,{y,2,sz}];
            ,1404, (* upper diagonal 1/3 random *)
                sparsemx = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {2ix+iy,iy-ix};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       sparsemx[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    len = sz - y + 1;
                    start = y;
                    nones = Round[len 2/3];
                    nzeros = len - nones;
                    line = Join[Table[0,{nzeros}],Table[1,{nones}]]//RandomSample;
                    mx[[y,y;;]] = line;
                ,{y,2,sz}];
            ,1405, (* symm diagonal 1/3 *)
                sparsemx = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {2ix+iy,iy-ix};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       sparsemx[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[sz-y+2,y;;]] = sparsemx[[y,y;;]];
                ,{y,2,sz}];
            ,1406, (* symm diagonal 1/3 *)
                sparsemx = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {ix+iy,2 iy-ix};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       sparsemx[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[sz-y+2,y;;]] = sparsemx[[y,y;;]];
                ,{y,2,sz}];
            ,1501, (* linear random 1/2 *)
                mx = Table[1,{sz},{sz}];
                zeros = {Range[2, sz], RandomSample@Range[2, sz]} // T;
                ({ix,iy} = #;
                 mx[[iy,ix]] = 0) & /@ zeros;
                Do[
                    len = sz - 1;
                    start = 2;
                    nones = Ceiling[sz/2 + (sz - y-1) 1/2];
                    nzeros = len - nones;
                    line = Join[Table[0,{nzeros}],Table[1,{nones}]]//RandomSample;
                    mx[[y,2;;]] = Table[Min[line[[i]],mx[[y,i+1]]],{i,Length[line]}];
                ,{y,2,sz}];
            ,1502, (* linear random 2/3 *)
                mx = Table[1,{sz},{sz}];
                zeros = {Range[2, sz], RandomSample@Range[2, sz]} // T;
                ({ix,iy} = #;
                 mx[[iy,ix]] = 0) & /@ zeros;
                Do[
                    len = sz - 1;
                    start = 2;
                    nones = Ceiling[sz 2/3 + (sz - y-1) 1/3];
                    nzeros = len - nones;
                    line = Join[Table[0,{nzeros}],Table[1,{nones}]]//RandomSample;
                    mx[[y,2;;]] = Table[Min[line[[i]],mx[[y,i+1]]],{i,Length[line]}];
                ,{y,2,sz}];
            ,1503, (* linear random 3/4 *)
                mx = Table[1,{sz},{sz}];
                Do[
                    len = sz - 1;
                    start = 2;
                    nones = Ceiling[sz 3/4 + (sz - y-1) 1/4];
                    nzeros = len - nones;
                    line = Join[Table[0,{nzeros}],Table[1,{nones}]]//RandomSample;
                    mx[[y,2;;]] = line;
                ,{y,2,sz}];
            ,1601, (* lower diagonal checkerboard *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         0,
                                         1
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,;;y]] = checkerboard[[y,;;y]];
                ,{y,2,sz}];
                mx[[-1,-1]] = 1;
            ,1602, (* lower diagonal checkerboard, randomized *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,;;y]] = RandomSample @ checkerboard[[y,;;y]];
                ,{y,2,sz}];
                mx[[-1,-1]] = 1;
            ,1603,  (* convex symm, checkerboard*)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    x = Round[ Sqrt[(sz-1)^2 - (sz- y)^2] ];
                    mx[[y,;;x]] = checkerboard[[y,;;x]];
                ,{y,2,sz}];
            ,1604,  (* convex symm, checkerboard, randimized *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    x = Round[ Sqrt[(sz-1)^2 - (sz- y)^2] ];
                    mx[[y,;;x]] = RandomSample @ checkerboard[[y,;;x]];
                ,{y,2,sz}];
            ,1605,  (*  *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    x = Round[ Sqrt[(sz-1)^2 - (sz- y)^2] ];
                    nones = Power[Count[ checkerboard[[y,;;x]], 1 ], 1.05] // Round;
                    nzeros = x - nones;
                    line = Join[Table[0,{nzeros}],Table[1,{nones}]]//RandomSample;
                    mx[[y,;;x]] = line;
                ,{y,2,sz}];
            ,1606,  (*  *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    x = Round[ Sqrt[(sz-1)^2 - (sz- y)^2] ];
                    nones = Round @ (Count[ checkerboard[[y,;;x]], 1 ]  3/4);
                    nzeros = x - nones;
                    line = Join[Table[0,{nzeros}],Table[1,{nones}]]//RandomSample;
                    mx[[y,;;x]] = line;
                ,{y,2,sz}];
            ,1607,  (*  *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    x = Round[ Sqrt[(sz-1)^2 - (sz- y)^2] ];
                    nones = Round @ (Count[ checkerboard[[y,;;x]], 1 ]  3/2);
                    nzeros = x - nones;
                    line = Join[Table[0,{nzeros}],Table[1,{nones}]]//RandomSample;
                    mx[[y,;;x]] = line;
                ,{y,2,sz}];
            ,1608, (* lower diagonal Sparse *)
                LshapedSparse = Table[0,{sz},{sz}];
                Do[{iix,iiy} = {2ix-iy,ix+2iy};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       LshapedSparse[[iiy,iix]] = 1
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,;;y]] = LshapedSparse[[y,;;y]];
                ,{y,2,sz}];
                mx[[-1,-1]] = mx[[1,1]] = 1;
            ,1609, (* lower diagonal 1/3 *)
                sparsemx = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {ix+iy,2 iy-ix};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       sparsemx[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,;;y]] = sparsemx[[y,;;y]];
                ,{y,2,sz}];
                mx[[-1,-1]] = mx[[1,1]] = 1;
            ,1610, (* lower diagonal 1/3 randomized *)
                sparsemx = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {ix+iy,2 iy-ix};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       sparsemx[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,;;y]] = RandomSample @ sparsemx[[y,;;y]];
                ,{y,2,sz}];
                mx[[-1,-1]] = mx[[1,1]] = 1;
            ,1900, (* lower diagonal pure checkerboard spread = 1/2 *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         0,
                                         1
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,;;y]] = checkerboard[[y,;;y]];
                ,{y,2,sz}];
                mx[[;;,-1]] = 1;
            ,1901, (* lower diagonal k = spread *)
                mx = Table[1,{sz},{sz}];
                Do[
                    nzeros = Ceiling[k y];
                    zeros = (RandomSample @ Range[y-1])[[;;nzeros]];
                    (mx[[y,#]] =  0)& /@ zeros;
                ,{y,2,sz}];
                mx[[;;,-1]] = 1;
            ,2000, (* ... *)
                mx = Table[1,{sz},{sz}];
                Do[
                    nzeros = Ceiling[y/2.];
                    zeros = Ceiling[# sz]& /@ Table[RandomVariate[TriangularDistribution[{0, 1}, 0]],{nzeros}];
                    (mx[[y,#]] =  0)& /@ zeros;
                ,{y,2,sz}];
            ,2001, (* ... *)
        (*                mx = Table[1,{sz},{sz}];
                Do[
                    nzeros = Ceiling[y/2.];
                    zeros = Ceiling[sz #] & /@ Table[1/4 RandomVariate[ChiSquareDistribution[.5]],{nzeros}];
                    zeros = Ceiling[sz #] & /@ Table[1/2 RandomVariate[FRatioDistribution[2,10]],{nzeros}];
                    zeros = Ceiling[sz #] & /@ Table[1 RandomVariate[ChiDistribution[.5]],{nzeros}];
                    If[# < sz, mx[[y,#]] =  0]& /@ zeros;
                ,{y,2,sz}];
        *)
                mx = Table[1,{sz},{sz}];
                Do[
                    nzeros = Ceiling[y/2.];
                    zeros = Ceiling[# sz y/sz]& /@ Table[RandomVariate[TriangularDistribution[{0, 1}, 0]],{nzeros}];
                    (mx[[y,#]] =  0)& /@ zeros;
                ,{y,2,sz}];
        ];
        Return[mx]
    ] (* mkAALDSmx *)
    
(**************** AALDS routines ******************)

getAALDSmxEV[mx_] :=
    Module[ {mxpow,mxpowPlusOne,pow = 100,rows,cols},
        mxpow = MatrixPower[mx,pow];
        mxpowPlusOne = mxpow.mx;
        rows = Total/@ mxpow;
        cols = Total/@ Transpose[mxpow];
        {    Total[Total /@ mxpowPlusOne]/Total[Total /@ mxpow] // N    (* eigen value *)
            ,N[rows/Total[rows]]    (*  eigen vectors *)
            ,N[cols/Total[cols]]    (*  eigen vectors *)
             }
    ] (* getAALDSmxEV *)
    
(*----------------------------------- Omega 1d basic routines -----------------------------------*)

disambiguateMx[mx_] :=
    Module[ {mxSz,pr,thisentry,rules,ruleno,symbols,substitutions,newrules,equivalentmxSz,equivalentmx},
        mxSz = Length[mx];
        pr = Table[thisentry = mx[[i]];
                   Table[Table[j, {thisentry[[j]]}], {j, Length[thisentry]}] // Flatten
                , {i, mxSz}];
        rules = {};
        Do[
            Do[
                ruleno = pr[[i, j]];
                AppendTo[rules, {ruleno,  #} & /@ Range[pr[[ruleno]]//Length]]
            ,{j, Length[pr[[i]]]}];
        , {i, mxSz}];
        symbols = Flatten[rules, 1] // Union;
        substitutions = (#[[1]] -> #[[2]]) & /@ ({symbols, Range[Length[symbols]]} // T);
        newrules = rules /. substitutions;
        equivalentmxSz = Total[Total[mx]];
        equivalentmx = Table[0, {equivalentmxSz}, {equivalentmxSz}];
        Do[equivalentmx[[i, newrules[[i]]]] = 1, {i, equivalentmxSz}];
        equivalentmx
    ]

getIntValueDir[word_] :=
    Total @ getIntValueTabDir[word]
getIntValueTabDir[word_] :=
    Module[ {i, len = Length[word] },
        Join[
            Table[basicSeqCumulDir[[Mod[i+1,orderTabLength,1],word[[i]],word[[i+1]],len-i ]],{i,len-1}] 
            ]
    ] (* getIntValueTabDir *)

getFracValueDir[word_] :=
    Total @ getFracValueTabDir[word]
getFracValueTabDir[word_] :=
    Module[ {i, len = Length[word] },
        (*Total[evecDir]/Total[Union[evecDir]]*)
        Join[
        Table[basicSeqFracCumulDir[[Mod[i+1,orderTabLength,1],word[[i]],word[[i+1]], i ]],{i,len-1}]
        ]
    ] (* getFracValueTabDir *)


getIntValueInv[word_] :=
    Total @ getIntValueTabInv[word]
getIntValueTabInv[inword_] :=
    Module[ {i, len = Length[inword], word = Join[{1},inword] },
        Join[
            Table[basicSeqCumulInv[[Mod[i+1,orderTabLength,1],word[[i]],word[[i+1]],len-i ]],{i,len-1}] 
            ]
    ] (* getIntValueTabInv *)

getFracValueInv[word_] :=
    Total @ getFracValueTabInv[word]
getFracValueTabInv[inword_] :=
    Module[ {i, len = Length[inword], word = Join[{1},inword] },
        Join[
            Table[basicSeqFracCumulInv[[Mod[i+1,orderTabLength,1],word[[i]],word[[i+1]], i ]],{i,len-1}] 
            ]
    ] (* getIntValueTabInv *)

applyProductionRules[word_] :=
    Module[ {res,lastSybbol,newSymbols},
        lastSybbol = If[ Length[word] == 0,
                         1,
                         word[[-1]]
                     ];
        newSymbols = productionRulesDir[[lastSybbol]];
        res = (Append[word, #] & /@ newSymbols);
        Return[res]
    ] (* applyProductionRules *)


buildRandomOrderTab[showDBG_:True] :=
    Module[ {},
        orderZeroDir = myRandomSampleDir[Range[mxSz] ];
        orderZeroInv = myRandomSampleInv[Range[mxSz] ];
        Do[
            orderDir[[ilevel]] = myRandomSampleDir /@ productionRulesDir;
            orderInv[[ilevel]] = myRandomSampleInv /@ productionRulesInv; (* myRandomSample /@ productionRulesInv; *)
            (*If[ showDBG,
                (*Print["buildRandomOrderTab -------------------------------------------------- level ",ilevel];*)
                Print["level = ",ilevel," Dir: orderDir[[ilevel]]=",orderDir[[ilevel]]//mf,ToString[myRandomSampleDir]];
                Print["level = ",ilevel," Inv: orderInv[[ilevel]]=",orderInv[[ilevel]]//mf,ToString[myRandomSampleInv]];
                
            ];*)
        ,{ilevel,orderTabLength}];
    ] (* buildRandomOrderTab*)


buildBasicSeqCumul[dbg_:False] :=
    Module[ {},
        If[ dbg,
            Print["orderDir=",mf/@orderDir];
            Print["orderInv=",mf/@orderInv];
        ];
        (* ------------------------ Dir ------------------------ *)
        (* finding basicSeqFracCumulZeroDir and  *)
        basicSeqCumulDir = Table[zeros, {orderTabLength},{mxSz}, {mxSz}];
        Do[
            Do[
                indlst = orderDir[[ilevel,i]];
                tmp = basicSeqDir[[indlst ]];
                           (*Print[{ilevel,i},indlst," -> ",tmp]*);
                basicSeqCumulDir[[ilevel,i,indlst]] = Join[{zeros}, Table[Take[tmp, i] // Total, {i, Length[tmp] - 1}]];
            ,{i,mxSz}];
        ,{ilevel,orderTabLength}];
        
        (* finding basicSeqFracCumulZeroDir and basicSeqFracCumulDir *)
        basicSeqFracCumulDir = Table[zeros, {orderTabLength},{mxSz}, {mxSz}];
        Do[
            Do[
                indlst = orderDir[[ilevel,i]];
                tmp = basicSeqFracDir[[indlst ]];
                   (*Print[{ilevel,i},indlst," -> ",tmp]*);
                basicSeqFracCumulDir[[ilevel,i,indlst]] = Join[{zeros}, Table[Take[tmp, i] // Total, {i, Length[tmp] - 1}]];
            ,{i,mxSz}];
        ,{ilevel,orderTabLength}];
 
        (* ------------------------ Inv ------------------------ *)
        (* finding basicSeqFracCumulZeroInv and basicSeqCumulInv *)
        basicSeqCumulInv = Table[zeros, {orderTabLength},{mxSz}, {mxSz}];
        Do[
            Do[
                indlst = orderInv[[ilevel,i]];
                tmp = basicSeqInv[[indlst ]];
                           (*Print[{ilevel,i},indlst," -> ",tmp];*)
                basicSeqCumulInv[[ilevel,i,indlst]] = Join[{zeros}, Table[Take[tmp, i] // Total, {i, Length[tmp] - 1}]];
            ,{i,mxSz}];
        ,{ilevel,orderTabLength}];
        
        (* finding basicSeqFracCumulZeroInv and basicSeqFracCumulInv *)
        basicSeqFracCumulInv = Table[zeros, {orderTabLength},{mxSz}, {mxSz}];
        Do[
            Do[
                indlst = orderInv[[ilevel,i]];
                tmp = basicSeqFracInv[[indlst ]];
                   (*Print[{ilevel,i},indlst," -> ",tmp];*)
                basicSeqFracCumulInv[[ilevel,i,indlst]] = Join[{zeros}, Table[Take[tmp, i] // Total, {i, Length[tmp] - 1}]];
            ,{i,mxSz}];
        ,{ilevel,orderTabLength}];
    ] (* buildBasicSeqCumul *)

randomSampleButFirst[seq_] :=
    Join[{First[seq]},RandomSample[Drop[seq,1]] ]

(*Do[
     mx = getMyFamilyRadixInvertible[sz];
     cp = CharacteristicPolynomial[mx, x];
     (*init[mx,True];*)
     findAnalyticalEigenSystem[mx];
     Print["================= sz=", sz -> cp];
 , {sz, 2, 10}]*)
 

init[mx_,showDBG_:True, buildRandomOrderTabFlag_:True] :=
    Module[ {npow = 20, tab},
        mxDir = mx;
        seqSize = 100;
        If[ !known[orderTabLength],
            orderTabLength = 1
        ];
        If[ !known[myRandomSampleDir],
            myRandomSampleDir = myRandomSampleInv = randomSampleButFirst
        ]; (* randomSampleButFirst or Identity *)
        zeros = Table[0, {seqSize}];
        If[ Min[mx] < 0,
            Print["invalid mx:",mx//mf];
            Abort[]
        ];
        (*If[Max[mx] > 1, Print["Converting to 0/1 matrix..."]; mxDir = disambiguateMx[mx] ];*)
        mxInv = mxT = mxDir//Transpose;
        mxRank = MatrixRank[mxDir];
        mxSz = nProductionRules = Length[mxDir];
        productionRulesDir = Table[Flatten[Position[mxDir[[i]], 1]], {i, mxSz}];
        productionRulesInv = Table[Flatten[Position[mxInv[[i]], 1]], {i, mxSz}];        

        (*{evals, evecs} = N[Eigensystem[mxDir] ];*)
        tab = T @ (Total /@ (Table[MatrixPower[mx//T, i], {i, npow}]));
        evec = evecDir = (Last /@ tab)/Total[Last /@ tab] // N;
        eval = areaScale = lambda = maxEVal = N[Total[#[[-1]] & /@ tab]/Total[#[[-2]] & /@ tab]]; (*evals /. {(x_ /; Im[x] != 0) -> 0} // Max;*)
        tab = T @ (Total /@ (Table[MatrixPower[mx, i], {i, npow}]));
        evecInv = (Last /@ tab)/Total[Last /@ tab] // N;

        (*----------------------- building basicSeqDir and basicSeqInv ----------------------- *)
        basicSeqDirT = Table[{}, {seqSize}];
        cvec = Table[1, {mxSz}];
        Do[
            basicSeqDirT[[i]] = cvec;
            cvec = mxDir.cvec
        , {i, seqSize}];
        basicSeqInvT = Table[{},{seqSize}];
        cvec = Table[1,{mxSz}];
        Do[
          basicSeqInvT[[i]] = cvec;
          cvec = mxInv.cvec
        ,{i,seqSize}];
        basicSeqDir = Transpose[basicSeqDirT];
        basicSeqInv = Transpose[basicSeqInvT];
        totalLength = basicSeqDir // Total;
        totalLengthInv = basicSeqDir // Total;
        lambda = N[totalLength[[-1]]/totalLength[[-2]]];
        ratio = N[Max[Last /@ basicSeqDir]/Min[Last /@ basicSeqDir]];
        ratioInv = N[Max[Last /@ basicSeqInv]/Min[Last /@ basicSeqInv]];

        (*----------------------- building basicSeqFracDir and basicSeqFracInv ----------------------- *)
        basicSeqFracDirT = Table[{}, {seqSize}];
        basicSeqFracDirT[[1]] = evecDir/Total[evecDir];
        Do[
            basicSeqFracDirT[[i]] = basicSeqFracDirT[[i-1]]/lambda;
        ,{i,2,seqSize}];
        basicSeqFracDir = basicSeqFracDirT//T;
        basicSeqFracInvT = Table[{}, {seqSize}];
        basicSeqFracInvT[[1]] = evecInv/Total[evecInv];
        rTabDir = (basicSeqFracDir/PI)//Sqrt;
        Do[
            basicSeqFracInvT[[i]] = basicSeqFracInvT[[i-1]]/lambda;
        ,{i,2,seqSize}];
        basicSeqFracInv = basicSeqFracInvT//T;
        evecDirNormSum = evecDir/Total[evecDir];
        evecDirNorm1 = evecDir/Max[evecDir];
        evecDirNormFirst = evecDir(*/evecDir[[1]]*);
        evecDirUnion = Union[evecDir];
        evecDirUnionInv = Union[evecInv];
            (*ratio = If[First[evecDirUnion] == 0., Last[evecDirUnion]/evecDirUnion[[2]], Last[evecDirUnion]/evecDirUnion[[1]] ];
            ratioInv = If[First[evecDirUnionInv] == 0., Last[evecDirUnionInv]/evecDirUnionInv[[2]], Last[evecDirUnionInv]/evecDirUnionInv[[1]] ];*)
        scaleAreaTab = Table[lambda^i, {i, 0, seqSize}];
        If[ showDBG,
            tmp1 = evecDir // DeleteDuplicates;
            symbols = Table[FromCharacterCode[96 + i], {i, Length[tmp1]}];
            substitutions = (#[[1]] -> #[[2]]) & /@ ({tmp1, symbols} // T);
            tmp3 = evecDir /. substitutions;
            colors = Table[getColorSolid[ Position[productionRulesDir // DeleteDuplicates, i][[1, 1]]], {i, mxSz}];
            tmp4 = Table[Style[Subscript[tmp3[[i]],i],colors[[i]] ],{i,mxSz}];
            colors = Table[ getColorSolid[Position[productionRulesDir // DeleteDuplicates ,i][[1,1]] ],{i,mxSz}];
            tmp5 = Table[Style[Subscript[tmp3[[i]],i],getColorSolid[Position[symbols,tmp3[[i]]][[1,1]]] ],{i,mxSz}];
            numTab1 = Join[{Mod[#,10]&/@Range[mxSz]},{tmp4},{Table["|",{mxSz}]}];
            numTab2 = Join[{Mod[#,10]&/@Range[mxSz]},{tmp4},{Table["-",{mxSz}]}];
            numTab3 = Join[{Mod[#,10]&/@Range[mxSz]},{tmp5},{Table["|",{mxSz}]}];
            numTab4 = Join[{Mod[#,10]&/@Range[mxSz]},{tmp5},{Table["-",{mxSz}]}];
            Print[">>>>>>>>>>>>>>>>>>>>>> lambda=",lambda];
            Print[">>>> ratio:",{ratio,ratioInv}];
            Print[
              Join[
                Join[{{"mx"},{"Dir"},{""}}//T,         {{""},{""},{""}}//T,    {{""},{""},{""}}//T,    numTab1//T] //T,
                Join[numTab2,    mxDir] //T
              ]  //T//mf, "  ",
              Join[
                Join[{{"mx"},{"Inv"},{""}}//T,         {{""},{""},{""}}//T,    {{""},{""},{""}}//T,    numTab1//T] //T,
                Join[numTab2,    mxInv] //T
              ]  //T//mf,"   ",
              Join[
                Join[{{"mx"},{"Dir"},{""}}//T,         {{""},{""},{""}}//T,    {{""},{""},{""}}//T,    numTab3//T] //T,
                Join[numTab4,    mxDir] //T
              ]  //T//mf, "  ",
              Join[
                Join[{{"mx"},{"Inv"},{""}}//T,         {{""},{""},{""}}//T,    {{""},{""},{""}}//T,    numTab3//T] //T,
                Join[numTab4,    mxInv] //T
              ]  //T//mf
              
            ];
            x = .;
            Print["mx"<>StringJoin@(ToString/@(Total/@mx))<>" = ",mx,"; (* normevecDir:",normevecDir," lambda:",lambda," ratio:",ratio," CharacteristicPolynomial: ",CharacteristicPolynomial[mx, x] ," factorized CharacteristicPolynomial: ", CharacteristicPolynomial[mx, x]//Factor," *)"];
            Print[">>>> ratio:",ratio];
            Print[">>>>>>>>>>>>>>>>>>>>>> rank:",(*seedmx//mf,*)MatrixRank[seedmx]];
            Print[">>>>>>>>>>>>>>>>>>>>>> evecInv:",evecInv];
            Print["dir:",(*{evecDir/Max[evecDir]}//T//mf,*)mx//mf," -> Total",Transpose[{Total/@mx}]//mf,(*{Total/@mx//Min,Total/@mx//Max},*)
                    " inv:",Transpose[mx]//mf," -> Total",Transpose[{Total/@Transpose[mx]}]//mf];
            Print["evec:",evecDir,"  Union[[evec}:",Union[evecDir]," -> ",Length[Union[evecDir]]];
            Print[" MatrixRank[mx] == Length[mx] ---> ", MatrixRank[mx] == Length[mx]," ",{MatrixRank[mx],Length[mx],Length[Union[evecDir]]}];
            Print["basicSeqDir + totalLength :"];
            Print[Join[basicSeqDir,{Table["-",{seqSize}]},{totalLength}]//mf];
            Print["basicSeqInv  + totalLength :"];
            Print[Join[basicSeqInv,{Table["-",{seqSize}]},{basicSeqInv // Total}]//mf];
            Print["pow:",mf /@ Table[{{i},{mf@MatrixPower[mx,i]},{mf@T[{Total/@MatrixPower[mx,i]}]}},{i,1,10}] ];
            {(*niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]] ]*)
                            MatrixPlot[mx, Mesh -> True, FrameTicks -> Range[Length[mx]]] (* or ArrayPlot *)
            ,ListPlot[{evecDir, evecInv}//T//Sort,Joined->False,PlotRange->{{Min[evec],Max[evec]},{Min[evec],Max[evec]}}]
            ,ListPlot[{evecDir, evecInv}//T//Sort,Joined->False,PlotRange->{{0,Max[evec]},{0,Max[evec]}}]} //Print;
        ]; (* If[ showDBG, *)
        orderDir = orderInv = Table[{},{orderTabLength}];
        If[ buildRandomOrderTabFlag,
            buildRandomOrderTab[showDBG];
            buildBasicSeqCumul[showDBG];
        ];
    ] (* init *)
    
(*----------------------------------- 1d routines -----------------------------------*)
        (*mx = {{1,1,1,1},{1,1,0,1},{1,0,1,0},{1,1,0,0}};
        orderDir = {{{1,3,2,4},{1,4,2},{1,3},{1,2}}};
        orderInv = {{{1,3,2,4},{1,2,4},{1,3},{1,2}}};
        mx = {{1,1,1,1,1,1,1,1},{1,0,0,1,0,0,1,1},{1,0,1,0,1,1,1,1},{1,1,0,1,1,0,0,0},{1,0,1,1,0,1,1,1},{1,0,1,0,1,0,1,0},{1,1,1,0,1,1,1,1},{1,1,1,0,1,0,1,0}};
                (* CharacteristicPolynomial: -4 x-16 x^2+2 x^3+38 x^4+13 x^5-14 x^6-4 x^7+x^8 *)

            mx = {{1,1,1,1,1,1,1,1},{1,1,1,1,0,1,1,1},{1,1,0,1,1,1,0,1},{1,1,1,1,1,1,1,0},{1,1,0,1,0,1,1,1},{1,1,1,0,0,1,1,1},{1,0,0,0,1,1,1,1},{1,0,1,1,1,0,1,0}};
            orderDir = {{{1,6,3,5,7,2,8,4},{1,7,6,4,2,3,8},{1,6,4,8,5,2},{1,5,6,3,4,7,2},{1,2,7,8,4,6},{1,2,8,7,3,6},{1,8,7,6,5},{1,5,3,4,7}}};
            orderInv = {{{1,6,4,2,5,7,8,3},{1,3,2,5,4,6},{1,2,8,4,6},{1,4,8,2,5,3},{1,4,3,7,8},{1,3,5,2,7,6,4},{1,4,6,2,7,8,5},{1,7,6,3,2,5}}};*)
        (* my family in matrices_myFamily_sz1-64.dat *)
        (*mx = {{0, 1, 1}, {1, 0, 0}, {0, 1, 0}};
        mx = {{1,0,0,0,1},{1,0,0,0,0},{0,1,0,0,0},{0,0,1,0,0},{0,0,0,1,0}};
        mx = {{1,0,0,0,0,1},{1,0,0,0,0,0},{0,1,0,0,0,0},{0,0,1,0,0,0},{0,0,0,1,0,0},{0,0,0,0,1,0}};
        mx = {{1,0,0,0,0,0,1},{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0}};
        mx = {{1,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0},{0,0,1,0,0,0,0,0},{0,0,0,1,0,0,0,0},{0,0,0,0,1,0,0,0},{0,0,0,0,0,1,0,0},{0,0,0,0,0,0,1,0}};
        mx = {{1,0,0,1},{1,0,0,0},{0,1,0,0},{0,0,1,0}};*)
            
        (*mx = mkAALDSmx[8,1201];*)
        
        (*mx = getMyFamilyNew[sz];*)

(*getAALDS1dTilesGL[tiles_]:=Module[{gl,h = .02, col},
    gl = {};
    Table[
        {fcode,{start,stop}} = tiles[[i]];
        type = Last@fcode;
        col = getLightColorSolid[type];
        center = (start+stop)/2;
        AppendTo[gl,{Opacity[.5],
            {col,Rectangle[{start,-h},{stop,h}]},Black,Line[{{start,-h},{start,h},{stop,h},{stop,-h},{start,-h}}]
            ,Text[getIntValueInv@(Reverse@fcode) (*{getIntValueDir@fcode, getIntValueInv@(Reverse@fcode)}*),{center,0},{0,-1}],Text[fcode ,{center,0},{0,1}]
        }]l
    ,{i,Length[tiles]}];
    gl
] (* getAALDS1dTilesGL *)
*)


AALDS1dSubdivideTileRandom[tile_] :=
    Module[ {fcode,start,stop,lastSybbol,newSymbols,newLengths,newLengthsCumuls,starts,ends},
        frandom :=
            RandomSample; (* RandomSample or randomSampleButFirst *)
        {fcode,{start,stop}} = tile;
        lastSybbol = Last @ fcode;
        newSymbols = frandom @ productionRulesDir[[lastSybbol]];
        newLengths = evec[[newSymbols]] / eval^(Length[fcode]-1);
        newLengthsCumuls = Join[{0},Accumulate[newLengths] ];
        starts = Plus[#,start]& /@ Drop[newLengthsCumuls, -1];
        ends = Plus[#,start]& /@ Drop[newLengthsCumuls, 1];
        {(Append[fcode, #] & /@ newSymbols), {starts, ends} // T} // T
    ]

AALDS1dSubdivideTile[tile_] :=
    Module[ {fcode,start,stop,lastSybbol,newSymbols,newLengths,newLengthsCumuls,starts,ends},
        frandom :=
            Identity; (* RandomSample or randomSampleButFirst *)
        {fcode,{start,stop}} = tile;
        lastSybbol = Last @ fcode;
        newSymbols = frandom @ productionRulesDir[[lastSybbol]];
        newLengths = evec[[newSymbols]] / eval^(Length[fcode]-1);
        newLengthsCumuls = Join[{0},Accumulate[newLengths] ];
        starts = Plus[#,start]& /@ Drop[newLengthsCumuls, -1];
        ends = Plus[#,start]& /@ Drop[newLengthsCumuls, 1];
        {(Append[fcode, #] & /@ newSymbols), {starts, ends} // T} // T
    ]

getAALDS1dTilesGL[fcodes_] :=
    Module[ {gl,h = .02, col},
        gl = {};
        Table[
            {fcode,{start,stop}} = tiles[[i]];
            type = Last@fcode;
            col = getLightColorSolid[type];
            center = (start+stop)/2;
            AppendTo[gl,{Opacity[.5],
                {col,Rectangle[{start,-h},{stop,h}]},Black,Line[{{start,-h},{start,h},{stop,h},{stop,-h},{start,-h}}]
                ,Text[getIntValueInv@(Reverse@fcode) (*{getIntValueDir@fcode, getIntValueInv@(Reverse@fcode)}*),{center,0},{0,-1}],Text[fcode ,{center,0},{0,1}]
            }]
        ,{i,Length[tiles]}];
        gl
    ] (* getAALDS1dTilesGL *)


getAALDS1dGL[wordsDir_] :=
    Module[ {gl,h = .02, level, col, wordDir},
        level = Length[wordsDir[[1]] ] - 2;
        gl = {};
        wordsInv = (Reverse/@wordsDir );
        intValueDir = getIntValueDir/@wordsDir;
        fracValueDir = getFracValueDir/@wordsDir;
        intValueInv = getIntValueInv/@wordsInv;
        fracValueInv = getFracValueInv/@wordsInv;
        Table[
            wordDir = wordsDir[[i]];
            type = Last@wordDir;
            col = getLightColorSolid[type];
            start = fracValueDir[[i]];
            stop = start + evecDir[[type]] lambda^(-level);
            center = (start+stop)/2;
            AppendTo[gl,{Opacity[.5],
                {col,Rectangle[{start,-h},{stop,h}]},Black,Line[{{start,-h},{start,h},{stop,h},{stop,-h},{start,-h}}]
               (* ,Text[getIntValueInv@(Reverse@wordDir),{center,0},{0,-1}],Text[{{intValueDir[[i]],intValueInv[[i]]}}//T,{center,0},{0,1}]*)
            }]
        ,{i,Length[wordsDir]}];
        gl
    ] (* getAALDS1dGL *)

AALDS1dDemo[nlevels_:3,inmxsz_:4] :=
    Module[ {},
        mxsz = inmxsz;
        orderTabLength = 1;
        myRandomSampleDir = randomSampleButFirst;
        myRandomSampleInv = randomSampleButFirst;  (* RandomSample or randomSampleButFirst or Identity *)
        myRandomSampleDir = Identity;
        myRandomSampleInv = Identity;  (* RandomSample or randomSampleButFirst or Identity *)
        fouriertabsz =  64 1024;
        imagesize = {2 1024,Automatic};
        Switch[mxsz
            ,3,    labelDweRuKi = "mx321";
                   mx = mx321;
            ,4, labelDweRuKi = "mx4233";
                mx = mx4233;
            ,8, labelDweRuKi = "mx86665757";
                mx = mx85765667;
        ];
        Switch[mxsz
        ,4,
            init[mx,True, False];
            orderDir[[1]] = Table[Select[getRandomGoodPerms4[], MemberQ[productionRulesDir[[i]], #] &], {i,4}];
            orderInv[[1]] = productionRulesDir;
            buildBasicSeqCumul[True];
        ,_,
            init[mx,True, True];
        ];
        Print["orderDir:",mf@orderDir];
        Print["orderInv:",mf@orderInv];
        wordsDir = {{1}};
        (*tiles = { {{1},{0,1}} };*)
        Do[
            gl = getAALDS1dGL[wordsDir];
            Graphics[{gl}, ImageSize -> imagesize, AspectRatio->.05, PlotRange->{{-.01,1.01},Automatic}, Axes->False]//Print;
            (*tiles = Flatten[#, 2] &@{AALDS1dSubdivideTile /@ tiles};*)
            wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};        
        ,{ilevel,nlevels}];
    ] (* AALDS1dDemo *)


AALDS2dPOC[nlevels_:4,ntrials_:1,mxType_:1101,mxsz_:4,dbg_:True] :=
    Module[ {},
        dbgGraphics = False;
        orderTabLength = 1;
        myRandomSampleDir = myRandomSampleInv = Identity; (* randomSampleButFirst or Identity *)
        imagesize = {2 1024,Automatic};
        grid = {Yellow,Table[{Line[{{0,i},{12,i}}],Line[{{i,0},{i,12}}]},{i,0,12}],
            Cyan, Line[{{0,0},{12,0}}], Line[{{0,4},{12,4}}], Line[{{0,6},{12,6}}], Line[{{0,9},{12,9}}], Line[{{0,12},{12,12}}]
            , Line[{{0,0},{0,12}}], Line[{{4,0},{4,12}}], Line[{{6,0},{6,12}}], Line[{{9,0},{9,12}}], Line[{{12,0},{12,12}}] };
        mx = {{1,1,1,1,1},{1,1,0,0,1},{1,0,0,1,1},{1,0,1,1,1},{1,1,1,1,0}};
        mx = {{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1}};
        mx = {{1,1},{1,1}};
        mx = {{1,1,1},{1,1,0},{1,0,0}};
        mx = {
            {1,1,1,1,1,1,1,1,1},
            {1,1,0,1,1,0,1,1,0},
            {1,0,0,1,0,0,1,0,0},
            {1,1,1,1,1,1,0,0,0},
            {1,1,0,1,1,0,0,0,0},
            {1,0,0,1,0,0,0,0,0},
            {1,1,1,0,0,0,0,0,0},
            {1,1,0,0,0,0,0,0,0},
            {1,0,0,0,0,0,0,0,0}
            };
        init[mx,dbg,True];
        buildBasicSeqCumul[True];
        slen = basicSeqDir[[1,nlevels]];
        fouriertabsz =   8 slen;
        fsum = Table[0,{fouriertabsz}];
        wordsDir = Partition[Range[mxSz],1];
        wordsDir = {{1}};
                (*wordsInv = (Reverse/@wordsDir );*)
        gtab = Table[
            wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};
            wordsInv = (*PadRight[#,16,1]& /@*) (Reverse/@wordsDir );
            If[ dbgGraphics,
                {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
                ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{Min[evec],Max[evec]},{Min[evec],Max[evec]}}]
                ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{0,Max[evec]},{0,Max[evec]}}]}//Print;
            ];
            If[ dbg,
                valuesDir = getIntValueDir/@ wordsDir;
                valuesInv = getIntValueInv/@ wordsInv;
                valuesFracDir = getFracValueDir/@wordsDir;
                valuesFracInv = getFracValueInv/@wordsInv;
                Print["--------------------------------",{ilevel,Length[wordsDir]}];
                Print[MatrixForm[wordsDir],MatrixForm[valuesDir],MatrixForm[getIntValueTabDir/@wordsDir],MatrixForm[valuesDir//Sort]
                    ,"f", MatrixForm[valuesFracDir],MatrixForm[getFracValueTabDir/@wordsDir]
                    ,"i", MatrixForm[wordsInv],MatrixForm[valuesInv//Union],MatrixForm[valuesInv],    MatrixForm[getIntValueTabInv/@wordsInv](*,MatrixForm[myPadRightInv/@wordsInv]*)
                    ,"fi",                                            MatrixForm[valuesFracInv],MatrixForm[getFracValueTabInv/@wordsInv]
                ];
                Print["valuesDir, valuesFracInv"];
                {valuesInv, valuesFracDir}//T//Sort//T//mf//Print;
            ];
                    (*Print["========================" > ilevel,"/",nlevels -> mf[{wordsDir}] -> {Length[wordsDir],Length[wordsDir]}];*)
            If[ dbg,
                getAALDS1dGL @ wordsDir
            ]
        ,{ilevel,nlevels}];
        xvals = getFracValueInv/@wordsInv;
        If[ dbg,
            valuesDir = getIntValueDir/@ wordsDir;
            valuesInv = getIntValueInv/@ wordsInv;
            pts = Sort[{valuesDir,valuesInv}//T];
            (Graphics[#, ImageSize -> imagesize, AspectRatio->.05, PlotRange->{{-.01,1.01},Automatic}, Axes->False]& /@ gtab)//Print;
        (*Graphics[{grid,PointSize[.01],Point/@pts},PlotRange->All, ImageSize->{512,512}]//Print;*)
                ];
(*Abort[]*);
        mx = {{1,1,1,1},{1,0,0,1},{1,0,1,1},{1,1,1,0}};
        mx = {{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}};
        mx = {{1,1,1},{1,1,1},{1,1,1}};
        mx = {{1,1},{1,0}};
        mx = {
            {1,1,1,1,1,1,1,1,1},
            {1,1,0,1,1,0,1,1,0},
            {1,0,0,1,0,0,1,0,0},
            {1,1,1,1,1,1,0,0,0},
            {1,1,0,1,1,0,0,0,0},
            {1,0,0,1,0,0,0,0,0},
            {1,1,1,0,0,0,0,0,0},
            {1,1,0,0,0,0,0,0,0},
            {1,0,0,0,0,0,0,0,0}
            };
        init[mx,dbg,True];
        orderDir = {{{1,2,3,4,5,6,7,8,9},{1,2,4,5,7,8},{1,4,7},{1,2,3,4,5,6},{1,2,4,5},{1,4},{1,2,3},{1,2},{1}}};
        orderInv = {{{1,2,3,4,5,6,7,8,9},{1,2,4,5,7,8},{1,4,7},{1,2,3,4,5,6},{1,2,4,5},{1,4},{1,2,3},{1,2},{1}}};
        orderDir = {{{1,2,3,4,5,6,7,8,9},{1,2,4,5,7,8},{1,4,7},{1,2,3,4,5,6},{1,2,4,5},{1,4},{1,2,3},{1,2},{1}}};
        orderInv = {{{1,4,7,2,5,8,3,6,9},{1,4,7,2,5,8},{1,4,7},{1,4,2,5,3,7},{1,4,2,5},{1,4},{1,2,3},{1,2},{1}}};
        buildBasicSeqCumul[True];
        slen = basicSeqDir[[1,nlevels]];
        fouriertabsz =   8 slen;
        fsum = Table[0,{fouriertabsz}];
        wordsDir = Partition[Range[mxSz],1];
        wordsDir = {{1}};
        wordsInv = (Reverse/@wordsDir );
        gtab = Table[
            wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};
            wordsInv = (*PadRight[#,16,1]& /@*) (Reverse/@wordsDir );
            If[ dbgGraphics,
                {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
                ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{Min[evec],Max[evec]},{Min[evec],Max[evec]}}]
                ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{0,Max[evec]},{0,Max[evec]}}]}//Print;
            ];
            If[ dbg,
                valuesDir = getIntValueDir/@ wordsDir;
                valuesInv = getIntValueInv/@ wordsInv;
                valuesFracDir = getFracValueDir/@wordsDir;
                valuesFracInv = getFracValueInv/@wordsInv;
                Print["--------------------------------",{ilevel,Length[wordsDir]}];
                Print[MatrixForm[wordsDir],MatrixForm[valuesDir],MatrixForm[getIntValueTabDir/@wordsDir],MatrixForm[valuesDir//Sort]
                    ,"f", MatrixForm[valuesFracDir],MatrixForm[getFracValueTabDir/@wordsDir]
                    ,"i", MatrixForm[wordsInv],MatrixForm[valuesInv//Union],MatrixForm[valuesInv],    MatrixForm[getIntValueTabInv/@wordsInv](*,MatrixForm[myPadRightInv/@wordsInv]*)
                    ,"fi",                                            MatrixForm[valuesFracInv],MatrixForm[getFracValueTabInv/@wordsInv]
                ];
                Print["valuesDir, valuesFracInv"];
                {valuesInv, valuesFracDir}//T//Sort//T//mf//Print;
            ];
                    (*Print["========================" > ilevel,"/",nlevels -> mf[{wordsDir}] -> {Length[wordsDir],Length[wordsDir]}];*)
            If[ dbg,
                getAALDS1dGL @ wordsDir
            ]
        ,{ilevel,nlevels}];
        yvals = getFracValueInv/@wordsInv;
        If[ dbg,
            valuesDir = getIntValueDir/@ wordsDir;
            valuesInv = getIntValueInv/@ wordsInv;
            pts = Sort[{valuesDir,valuesInv}//T];
            (Graphics[#, ImageSize -> imagesize, AspectRatio->.05, PlotRange->{{-.01,1.01},Automatic}, Axes->False]& /@ gtab)//Print;
        (*Graphics[{grid,PointSize[.01],Point/@pts},PlotRange->All, ImageSize->{512,512}]//Print;*)
                ];
        len = Min[xvals // Length, yvals // Length];
        xyvals = {Take[xvals,len], Take[yvals,len]}//T//Sort;
        Graphics[{PointSize[.1/nlevels/4],Point/@xyvals},PlotRange->{{0,1},{0,1}}, ImageSize->{512,512}2, Frame->True,PlotLabel->{nlevels,Length[xyvals]}]//Print
    ] (* AALDS2dPOC *)


AALDS2dSameBasisPermuts[nlevels_:2,ntrials_:1,mxType_:1101,mxsz_:4,dbg_:True] :=
    Module[ {},
        dbgGraphics = False;
        imagesize = {2 1024,Automatic};
        mx = {{1,1,1,1},{1,0,0,1},{1,0,1,1},{1,1,1,0}};
        ttab = Tuples[{Permutations[{1, 2, 3, 4}], Permutations[{1, 4}], Permutations[{1, 3, 4}], Permutations[{1, 2, 3}]}];
        grid = {Yellow,Table[{Line[{{0,i},{12,i}}],Line[{{i,0},{i,12}}]},{i,0,12}],
            Cyan, Line[{{0,0},{12,0}}], Line[{{0,4},{12,4}}], Line[{{0,6},{12,6}}], Line[{{0,9},{12,9}}], Line[{{0,12},{12,12}}]
            , Line[{{0,0},{0,12}}], Line[{{4,0},{4,12}}], Line[{{6,0},{6,12}}], Line[{{9,0},{9,12}}], Line[{{12,0},{12,12}}] };
        myRandomSampleDir = myRandomSampleInv = Identity;
        init[mx,dbg,True];
        Do[
            Print[iy];
            (*Parallelize @ *)
            Table[
            (*Print[{ix,iy}];*)
            xorderInv = orderInv[[1]] = ttab[[ix]];
            buildBasicSeqCumul[True];
            slen = basicSeqDir[[1,nlevels]];
            fouriertabsz =   8 slen;
            fsum = Table[0,{fouriertabsz}];
            wordsDir = Partition[Range[mxSz],1];
            wordsDir = {{1}};
            wordsInv = (Reverse/@wordsDir );
            gtab = Table[
                If[ dbgGraphics,
                    {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
                    ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{Min[evec],Max[evec]},{Min[evec],Max[evec]}}]
                    ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{0,Max[evec]},{0,Max[evec]}}]}//Print;
                ];
                If[ dbg,
                    valuesDir = getIntValueDir/@ wordsDir;
                    valuesInv = getIntValueInv/@ wordsInv;
                    valuesFracDir = getFracValueDir/@wordsDir;
                    valuesFracInv = getFracValueInv/@wordsInv;
                    Print["--------------------------------",{ilevel,Length[wordsDir]}];
                    Print[MatrixForm[wordsDir],MatrixForm[valuesDir],MatrixForm[getIntValueTabDir/@wordsDir],MatrixForm[valuesDir//Sort]
                        ,"f", MatrixForm[valuesFracDir],MatrixForm[getFracValueTabDir/@wordsDir]
                        ,"i", MatrixForm[wordsInv],MatrixForm[valuesInv//Union],MatrixForm[valuesInv],    MatrixForm[getIntValueTabInv/@wordsInv](*,MatrixForm[myPadRightInv/@wordsInv]*)
                        ,"fi",                                            MatrixForm[valuesFracInv],MatrixForm[getFracValueTabInv/@wordsInv]
                    ];
                    Print["valuesDir, valuesFracInv"];
                    {valuesInv, valuesFracDir}//T//Sort//T//mf//Print;
                ];
                wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};
                wordsInv = (*PadRight[#,16,1]& /@*) (Reverse/@wordsDir );
                    (*Print["========================" > ilevel,"/",nlevels -> mf[{wordsDir}] -> {Length[wordsDir],Length[wordsDir]}];*)
                getAALDS1dGL @ wordsDir
            ,{ilevel,nlevels}];
            valuesDir = getIntValueDir/@ wordsDir;
            valuesInv = getIntValueInv/@ wordsInv;
            pts = Sort[{valuesDir,valuesInv}//T];
            xvals = Last /@ pts;
            If[ dbg,
                (Graphics[#, ImageSize -> imagesize, AspectRatio->.05, PlotRange->{{-.01,1.01},Automatic}, Axes->False]& /@ gtab)//Print;
                Graphics[{grid,PointSize[.01],Point/@pts},PlotRange->All, ImageSize->{512,512}]//Print;
            ];
            yorderInv = orderInv[[1]] = ttab[[iy]];
            buildBasicSeqCumul[True];
            slen = basicSeqDir[[1,nlevels]];
            fouriertabsz =   8 slen;
            fsum = Table[0,{fouriertabsz}];
            wordsDir = Partition[Range[mxSz],1];
            wordsDir = {{1}};
            wordsInv = (Reverse/@wordsDir );
            gtab = Table[
                If[ dbgGraphics,
                    {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
                    ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{Min[evec],Max[evec]},{Min[evec],Max[evec]}}]
                    ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{0,Max[evec]},{0,Max[evec]}}]}//Print;
                ];
                If[ dbg,
                    valuesDir = getIntValueDir/@ wordsDir;
                    valuesInv = getIntValueInv/@ wordsInv;
                    valuesFracDir = getFracValueDir/@wordsDir;
                    valuesFracInv = getFracValueInv/@wordsInv;
                    Print["--------------------------------",{ilevel,Length[wordsDir]}];
                    Print[MatrixForm[wordsDir],MatrixForm[valuesDir],MatrixForm[getIntValueTabDir/@wordsDir],MatrixForm[valuesDir//Sort]
                        ,"f", MatrixForm[valuesFracDir],MatrixForm[getFracValueTabDir/@wordsDir]
                        ,"i", MatrixForm[wordsInv],MatrixForm[valuesInv//Union],MatrixForm[valuesInv],    MatrixForm[getIntValueTabInv/@wordsInv](*,MatrixForm[myPadRightInv/@wordsInv]*)
                        ,"fi",                                            MatrixForm[valuesFracInv],MatrixForm[getFracValueTabInv/@wordsInv]
                    ];
                    Print["valuesDir, valuesFracInv"];
                    {valuesInv, valuesFracDir}//T//Sort//T//mf//Print;
                ];
                wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};
                wordsInv = (*PadRight[#,16,1]& /@*) (Reverse/@wordsDir );
                    (*Print["========================" > ilevel,"/",nlevels -> mf[{wordsDir}] -> {Length[wordsDir],Length[wordsDir]}];*)
                getAALDS1dGL @ wordsDir
            ,{ilevel,nlevels}];
            valuesDir = getIntValueDir/@ wordsDir;
            valuesInv = getIntValueInv/@ wordsInv;
            pts = Sort[{valuesDir,valuesInv}//T];
            yvals = Last /@ pts;
            If[ dbg,
                (Graphics[#, ImageSize -> imagesize, AspectRatio->.05, PlotRange->{{-.01,1.01},Automatic}, Axes->False]& /@ gtab)//Print;
                Graphics[{grid,PointSize[.01],Point/@pts},PlotRange->All, ImageSize->{512,512}]//Print;
            ];
            xyvals = {xvals,yvals}//T//Sort;
            test = Sort[myMod /@ (Last /@ xyvals[[;;4]])] == {0,1,2,3};
            If[ test,
                Print[">>>>>>>>>>>>>>>>>>>>>>>>>" -> {xorderInv,yorderInv}];
                Graphics[{grid,PointSize[.01],Point/@xyvals},PlotRange->All, ImageSize->{512,512}/2]//Print
            ]
            ,{ix,Length[ttab]}]
        ,{iy,Length[ttab]}];
    ] (* AALDS2dSameBasisPermuts *)

myMod[i_] :=
    Which[0 <= i < 4, 0, 4 <= i < 6, 1, 6 <= i < 9, 2, 9 <= i < 12, 3] 

AALDS1dFourierTest[nlevels_:4,ntrials_:10,mxType_:1101,mxsz_:64,dbg_:False] :=
    Module[ {},
        dbgGraphics = False;
        (*mx = {{1,1,1},{1,1,0},{1,0,0}};*) (* normevec:{0.736976,0.591009,0.327985} lambda:2.24698 ratio:2.24698 CharacteristicPolynomial: -1+x+2 x^2-x^3 factorized CharacteristicPolynomial: -1+x+2 x^2-x^3 *)
         (* analytical eval: (2 + 7^(2/3)/((1 + 3*Sqrt[3])/2)^(1/3) + ((7*(1 + 3*Sqrt[3]))/2)^(1/3))/3 *)

        (*mx = {{1,1,1,1},{1,1,0,1},{1,0,1,0},{1,1,0,0}};*) (* normevec:{0.655496,0.542155,0.33507,0.405119} lambda:2.9563 ratio:1.9563 CharacteristicPolynomial: 1+3 x-x^2-3 x^3+x^4 factorized CharacteristicPolynomial: 1+3 x-x^2-3 x^3+x^4 *)
         (* 
            analytical eval: (3 + Sqrt[5] + Sqrt[6*(5 + Sqrt[5])])/4
            analyticalevec: {2 - (3*(3 + Sqrt[5] + Sqrt[6*(5 + Sqrt[5])])^2)/16 + (3 + Sqrt[5] + Sqrt[6*(5 + Sqrt[5])])^3/64, -2 + (3 + Sqrt[5] + Sqrt[6*(5 + Sqrt[5])])/4 + (3*(3 + Sqrt[5] + Sqrt[6*(5 + Sqrt[5])])^2)/16 - (3 + Sqrt[5] + Sqrt[6*(5 + Sqrt[5])])^3/64, -2 + (-3 - Sqrt[5] - Sqrt[6*(5 + Sqrt[5])])/2 + (3 + Sqrt[5] + Sqrt[6*(5 + Sqrt[5])])^2/16, 1}         
            normalized normalized; {(1 + Sqrt[5])/Sqrt[30 - 2 Sqrt[75 - 30 Sqrt[5]]], 1/2 Sqrt[1 + 1/Sqrt[5] - 1/5 Sqrt[2/3 (5 - Sqrt[5])]], 
                     1/2 Sqrt[1 - 1/Sqrt[5] - 1/5 Sqrt[2/3 (25 - 11 Sqrt[5])]], 
                     2/Sqrt[30 - 2 Sqrt[75 - 30 Sqrt[5]]]}
         *)
        
        (*Parallelize @*)
        Do[
        (*mx = {{1,1,1,1},{1,1,0,1},{1,0,1,0},{1,1,0,0}};
        mx = {{1,1,1,1,1,1,1,1},{1,0,0,1,0,0,1,1},{1,0,1,0,1,1,1,1},{1,1,0,1,1,0,0,0},{1,0,1,1,0,1,1,1},{1,0,1,0,1,0,1,0},{1,1,1,0,1,1,1,1},{1,1,1,0,1,0,1,0}};
        (* CharacteristicPolynomial: -4 x-16 x^2+2 x^3+38 x^4+13 x^5-14 x^6-4 x^7+x^8 *)
        (*mx = {{1,1,1,1,1,1,1,1},{1,1,1,1,0,1,1,1},{1,1,0,1,1,1,0,1},{1,1,1,1,1,1,1,0},{1,1,0,1,0,1,1,1},{1,1,1,0,0,1,1,1},{1,0,0,0,1,1,1,1},{1,0,1,1,1,0,1,0}}*);
        (*mx = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1},{1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1},{1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1},{1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,0,1},{1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,0,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1},{1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},{1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1},{1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1},{1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,1,0,0,1,1,0,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1},{1,1,0,1,1,1,0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1},{1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,0,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1},{1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1},{1,1,1,1,1,0,1,0,1,1,1,0,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,1,0,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1},{1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0},{1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,0,1,1,0,1,1,1,1,0,1,1},{1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1},{1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1},{1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0},{1,1,0,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,0,0,1},{1,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,1,1,0,0,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,1,1,0,1,1,0,1},{1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1},{1,0,1,1,0,1,1,1,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1},{1,1,0,1,0,1,1,0,0,1,0,0,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0},{1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,0,1,0,1,0,0,0,1,1,0,1,1,0,0,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,0,1,0,0,1,0,1},{1,1,0,1,1,1,0,1,1,1,0,0,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0},{1,0,1,1,0,1,1,0,1,1,1,0,0,0,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1},{1,0,1,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,0,0,1,0,1,1,1,0,1,1,1,1,0,0,1,0,0,1,1,1,1,0,0,0,1,1,0,1,0,1,0,1,0,1,1,0,0,1},{1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,1,1,1,1,1,1,0,1,0,0,1,0,0,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,0,0,0,0},{1,0,1,0,1,1,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,0,0,1,0,1,1,1,0,1,1,1,1,0,1,0,0,1,0,0,1,0,1},{1,1,1,1,0,0,1,1,1,1,1,1,0,1,0,0,1,0,1,1,0,1,0,1,0,1,1,1,0,0,1,1,0,1,1,0,1,0,0,1,1,0,1,1,1,1,1,0,0,1,1,0,1,0,1,1,1,1,0,1,1,1,0,1},{1,1,1,1,1,0,1,0,0,0,0,1,1,1,1,1,0,1,0,0,1,0,1,1,1,0,1,0,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0},{1,0,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1},{1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,0,0,1,1},{1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,1,0,0,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,0,1,0,0,1,0,0,1,1,1,1,0,0,0,1,1,1,0},{1,0,1,0,1,1,1,0,1,0,0,0,1,0,0,1,0,1,1,1,0,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,0,0,1,0,0,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1},{1,1,0,1,0,1,0,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,1,0,0,1,1,0,1,0,0,1,1,1,0,1,0,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,0},{1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,1,0,1,1,0,0,0,1,0,0,0,1,0,1,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1},{1,1,1,1,0,1,0,0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,1,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,1,1,1,1,0,1,0,1,0,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,0,1,0,1,0,1,0,1},{1,0,0,1,1,1,0,1,1,1,0,1,0,0,1,1,1,0,1,0,1,0,0,0,1,0,1,1,1,0,1,1,0,1,1,1,1,0,0,0,0,1,1,0,1,0,0,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,1},{1,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,0,1,1,0,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,0,1,1,1},{1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,1},{1,0,0,1,0,0,1,1,0,0,0,1,1,0,0,0,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,0,1,0,0,1,1,1,0,0,1,0,1,0,1},{1,1,0,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,1,0,0,1,1,0,1,1,1,0,1,0,0,0,1,1,0,1,0,1,1,0,0,0,1,0,1,0,1,1},{1,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,1,1,0,1,1,0,0,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,0},{1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,1,0,0,1,0,1,0,0,1,0},{1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,1,0,0,1,1,0,0,0,1,0,1,1,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,1,0,1,0,0,1},{1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,0,1,0,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,0,1,0,0,0,0,1,1,0,0,1,0,1}}*);
        fname = "matrices/mx_64x64_medium/mx_64."<>ToString[NumberForm[imx, 2, NumberPadding -> "0"]]<>".dat";
        fname = "matrices/mx_64x64_lenear_decrease/mx_64."<>ToString[NumberForm[imx, 2, NumberPadding -> "0"]]<>".dat";            
        mx = Import[fname];
        Print[itrial,"============= Reading ",fname -> Dimensions[mx]];*)
        (*mx = Get["matrices/omegaSymmMatrices8x8_minones4.dat"][[10]];*)
        
        mx = mkAALDSmx[mxsz,mxType];
            (*Get["matrices/omegaSymmMatrices8x8_minones4.dat"];*)
        init[mx,dbg,True];
        slen = basicSeqDir[[1,nlevels]];
        fouriertabsz =   8 slen;
        Print["mx of sz=",mxsz," seq len=",slen," fouriertabsz=",fouriertabsz];
        {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
        ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{Min[evecDir],Max[evecDir]},{Min[evecInv],Max[evecInv]}}]
        ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{0,Max[evecDir]},{0,Max[evecInv]}},PlotLabel->imx]}//Print;
        fsum = Table[0,{fouriertabsz}];
        Do[
            init[mx,dbg,True];
            If[ dbgGraphics,
                {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
                ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{Min[evec],Max[evec]},{Min[evec],Max[evec]}}]
                ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{0,Max[evec]},{0,Max[evec]}}]}//Print;
            ];
            wordsDir = {{1}};
            wordsInv = (Reverse/@wordsDir );
            Do[
                (*wd = fwd /@ wordsDir;
                wi = fwi /@ wordsInv;*)
                
                wd = wordsDir;
                wi = wordsInv;
                If[ dbg,
                    valuesDir = getIntValueDir/@ wd;
                    valuesInv = getIntValueInv/@ wi;
                    valuesFracDir = getFracValueDir/@wd;
                    valuesFracInv = getFracValueInv/@wi;
                    Print["--------------------------------",{ilevel,Length[wd]}];
                    Print[MatrixForm[wd],MatrixForm[valuesDir],MatrixForm[getIntValueTabDir/@wd],MatrixForm[valuesDir//Sort]
                        ,"f", MatrixForm[valuesFracDir],MatrixForm[getFracValueTabDir/@wd]
                        ,"i", MatrixForm[wi],MatrixForm[valuesInv//Union],MatrixForm[valuesInv],    MatrixForm[getIntValueTabInv/@wi](*,MatrixForm[myPadRightInv/@wi]*)
                        ,"fi",                                            MatrixForm[valuesFracInv],MatrixForm[getFracValueTabInv/@wi]
                    ];
                    Print["valuesDir, valuesFracInv"];
                    {valuesInv, valuesFracDir}//T//Sort//T//mf//Print;
                ];
                If[ ilevel!=nlevels,
                    wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};
                    wordsInv = (*PadRight[#,16,1]& /@*) (Reverse/@wordsDir );
                ];
                (*Print[ilevel,"/",nlevels -> {Length[wd],Length[wordsDir]}];*)
            ,{ilevel,nlevels}];
            Print[imx,"   ",itrial,"/",ntrials -> Length[wordsDir]];
            valuesFracDir = getFracValueDir/@wd;
            fsum += getFourier1D[Ceiling[eps + (fouriertabsz valuesFracDir)],fouriertabsz];
        
            (*If[dbgGraphics,
                ListPlot[(valuesDir)//Sort,PlotLabel->"valuesDir: ",Joined->True]//Print;
                ListPlot[(valuesInv)//Sort,PlotLabel->"valuesInv: ",Joined->True]//Print;
                ListPlot[(valuesFracDir)//Sort,PlotLabel->"valuesFracDir: ",Joined->True]//Print;
                ListPlot[(valuesFracInv)//Sort,PlotLabel->"valuesFracInv: ",Joined->True]//Print;
            ];*)
        
        ,{itrial,ntrials}];
        fsum = fsum / ntrials;
        fsum[[1]] = 0;
        ListPlot[fsum[[;;fouriertabsz/2]], Joined->True,PlotLabel->{imx,ntrials}, ImageSize -> { 2 600,Automatic},PlotRange->{0,1}]//Print;
        (*ListPlot[fsum[[;;10000]], Joined->True,PlotLabel->{imx,ntrials}, ImageSize -> { 2 600,Automatic},PlotRange->{0,1}]//Print;
        ListPlot[fsum[[;;1000]], Joined->True,PlotLabel->{imx,ntrials}, ImageSize -> { 2 600,Automatic},PlotRange->{0,1}]//Print;*)
        ,{imx,0, 0 7}]
    ] (* AALDS1dFourierTest *)


AALDS1dFourierTestRandomMake[nlevels_:4,ntrials_:100,mxType_:1602,mxsz_:16,k_:1/2,number_:1] :=
    Module[ {npow = 10},
        dbgGraphics = True;
        dbg = False;
        restab = Sort @ Table[
            mx = mkAALDSmx[mxsz,mxType,0,k];
            tab = T @ (Total /@ (Table[MatrixPower[mx, i], {i, npow}]));
            mxpow = MatrixPower[mx, npow];
            intevec = Total /@ mxpow;
            evec = N[intevec / Norm[intevec] ];
            evecdiff = Differences[Sort @ evec];
            {evecdiffmin,evecdiffmax} = {Min[evecdiff],Max[evecdiff]};
            {{evecdiffmax,evecdiffmin},mx}
        ,{ii,1}];
        mx = restab[[1,-1]];
        init[mx,dbg,True];
        Print[Factor[CharacteristicPolynomial[#, x] & @ mx]];
        slen = basicSeqDir[[1,nlevels]];
        fouriertabsz =   8 slen;
        Print["mx of sz=",mxsz," seq len=",slen," fouriertabsz=",fouriertabsz];
        {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
        ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{Min[evecDir],Max[evecDir]},{Min[evecInv],Max[evecInv]}}]
        ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{0,Max[evecDir]},{0,Max[evecInv]}},PlotLabel->imx]}//Print;
        fsum = Table[0,{fouriertabsz}];
        Do[
            init[mx,dbg,True];
                (*If[dbgGraphics,
                    {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
                    ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{Min[evecDir],Max[evecDir]},{Min[evecInv],Max[evecInv]}}]
                        ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{0,Max[evecDir]},{0,Max[evecInv]}},PlotLabel->imx]}//Print;
                ];*)
            tiles = { {{1},{0,1}} };
            Do[
                If[ ilevel!=nlevels,
                    tiles = Flatten[#, 2] &@{AALDS1dSubdivideTileRandom /@ tiles};
                ];
                    (*Print[ilevel,"/",nlevels -> {Length[wd],Length[wordsDir]}];*)
                ,{ilevel,nlevels}];
            Print[itrial,"/",ntrials -> Length[tiles]];
            valuesFracDir = First /@ (Last /@ tiles);
            fsum += getFourier1D[Ceiling[eps + (fouriertabsz valuesFracDir)],fouriertabsz];
        ,{itrial,ntrials}];
        fsum = fsum / ntrials;
        fsum[[1]] = 0;
        Put[mx,"tmp/mx_"<>ToString[mxsz]<>"_"<>ToString[mxType]<>"_"<>ToString[number]<>"_"<>".dat"];
        Put[fsum,"tmp/fsum_"<>ToString[mxsz]<>"_"<>ToString[mxType]<>"_"<>ToString[number]<>"_"<>".dat"];
        If[ dbgGraphics,
            ListPlot[fsum[[;;fouriertabsz/2]], Joined->True,PlotLabel->{imx,ntrials}, ImageSize -> { 2 600,Automatic},PlotRange->{0,1}]//Print;
        ];
    ] (* AALDS1dFourierTestRandomMake *)

AALDS1dFourierTestRandomVisualize[nlevels_:4,ntrials_:100,mxType_:1502,mxsz_:64] :=
    Module[ {},
        dbgGraphics = dbg = False;
        Do[
            fname1 = "tmp/mx_"<>ToString[mxsz]<>"_"<>ToString[mxType]<>"_"<>ToString[number]<>"_"<>".dat";
            fname2 = "tmp/fsum_"<>ToString[mxsz]<>"_"<>ToString[mxType]<>"_"<>ToString[number]<>"_"<>".dat";
            If[ FileExistsQ[fname1] && FileExistsQ[fname2],
                mx = Get[fname1];
                fsum = Get[fname2];
                init[mx,dbg,True];
                slen = basicSeqDir[[1,nlevels]];
                fouriertabsz =   8 slen;
                Print[fname1 -> "==================== ",number," mx of sz=",mxsz," seq len=",slen," fouriertabsz=",fouriertabsz];
                {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
                ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{Min[evecDir],Max[evecDir]},{Min[evecInv],Max[evecInv]}}]
                ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{0,Max[evecDir]},{0,Max[evecInv]}},PlotLabel->imx]}//Print;
                ListPlot[fsum[[;;fouriertabsz/2]], Joined->True,PlotLabel->{imx,ntrials}, ImageSize -> { 2 600,Automatic},PlotRange->{0,1}]//Print;
                Print[Factor[CharacteristicPolynomial[#, x] & @ mx]];
            ];
        ,{number, 8}];
    ] (* AALDS1dFourierTestRandom *)

AALDS1dFourierTestRandomCharacteristicPolynomial[nlevels_:4,ntrials_:100,mxType_:1502,mxsz_:64] :=
    Module[ {},
        dbgGraphics = dbg = False;
        mxtab = Table[
            fname1 = "matrices/mx_"<>ToString[mxsz]<>"_"<>ToString[mxType]<>"_"<>ToString[number]<>"_"<>".dat";
            fname2 = "matrices/fsum_"<>ToString[mxsz]<>"_"<>ToString[mxType]<>"_"<>ToString[number]<>"_"<>".dat";
            mx = Get[fname1];
            fsum = Get[fname2];
            init[mx,dbg,True];
            slen = basicSeqDir[[1,nlevels]];
            fouriertabsz =   8 slen;
            Print[fname1 -> "==================== ",number," mx of sz=",mxsz," seq len=",slen," fouriertabsz=",fouriertabsz];
            {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
            ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{Min[evecDir],Max[evecDir]},{Min[evecInv],Max[evecInv]}}]
            ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{0,Max[evecDir]},{0,Max[evecInv]}},PlotLabel->imx]}//Print;
            ListPlot[fsum[[;;fouriertabsz/2]], Joined->True,PlotLabel->{imx,ntrials}, ImageSize -> { 2 600,Automatic},PlotRange->{0,1}]//Print;
            Print[Factor[CharacteristicPolynomial[#, x] & @ mx]];
            mx
        ,{number, 16}];
        chPolynomials = CharacteristicPolynomial[#, x] & /@ mxtab;
        tab = Table[Factor[ chPolynomials[[i]]/chPolynomials[[j]]],{i,16},{j,16}];
        Do[
            Print["====================",i];
            Print[
                {Range[16],tab[[i]]}//T // mf
            ];
        ,{i,16}];
    ] (* AALDS1dFourierTestRandomCharacteristicPolynomial *)


AALDSpoc2d[ntrials_:10] :=
    Module[ {},
        dbgGraphics = False;
        fouriertabsz = 1024;
        fsum = Table[0,{fouriertabsz},{fouriertabsz}];
        fname = "data/mx_64x64_0.10-0.15/mx_64."<>ToString[NumberForm[0, 2, NumberPadding -> "0"]]<>".dat";
        mx1 = Import[fname];
        fname = "data/mx_64x64_0.10-0.15/mx_64."<>ToString[NumberForm[1, 2, NumberPadding -> "0"]]<>".dat";
        mx2 = Import[fname];
        Print[itrial,"============= Reading ",fname -> Dimensions[mx2]];
        Do[
            init[mx1,dbg];
            wordsDir = {{1}};
            wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};
            wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};
            wordsInv = (Reverse/@wordsDir );
            Print["   ",itrial,"/",ntrials -> Length[wordsDir]];
            xvals = getFracValueInv/@wordsInv;
            init[mx2,dbg];
            wordsDir = {{1}};
            wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};
            wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};
            wordsInv = (Reverse/@wordsDir );
            Print["   ",itrial,"/",ntrials -> Length[wordsDir]];
            yvals = getFracValueInv/@wordsInv;
            len = Min[Length[xvals], Length[yvals]];
            pts = {xvals[[;; len]], yvals[[;; len]]} // T;
            If[ itrial == 1,
                Graphics[Point /@ pts]//Print
            ];
            fsum += getFourier2D[Ceiling[(fouriertabsz pts)],fouriertabsz];
        ,{itrial,ntrials}];
        fsum[[1,1]] = 0;
        fsum = Reorg[fsum] / ntrials;
        ListDensityPlot[fsum, ImageSize -> {1024,1024}]//Print;
    ] (* AALDSpoc2d *)

mkAllSymmMatrices4x4[] :=
    Module[ {},
        npow = 20;
        tup = Tuples[{0, 1}, 6];
        len = Length[tup];
        res = {};
        count = 1;
        Do[
            t = tup[[i]];
            mx = Table[1,{4},{4}];
            mx[[2,2;;]] = mx[[2;;,2]] = t[[1;;3]];
            mx[[3,3;;]] = mx[[3;;,3]] = t[[4;;5]];
            mx[[4,4;;]] = mx[[4;;,4]] = t[[6;;]];
            mxpow = MatrixPower[mx, npow];
            intevec = Total /@ mxpow;
            If[ Length[Union[intevec]] == 4,
                AppendTo[res,mx];
                Print[{i,count}," adding ",mf@mx];
                init[mx,True,True];
                count++;
            ]
        ,{i,len}];
    (*Put[res,"matrices/omegaSymmMatrices4x4.dat"];*)
    ]

mkAllSymmMatrices8x8[ind_:50000000] :=
    Module[ {}, (* non-parallel version *)
        npow = 10;
        tup = Tuples[{0, 1}, 1+2+3+4+5+6+7];
        len = Length[tup];
        res4 = res5 = res6 = {};
        count = 1;
        {min,max} = {0,0.024158};
        {min,max} = {0.01,.04};
        {min,max} = {0.005,.05};
        {min,max} = {0.001,.1};
        ratiolimit = 1.6;
        from = ind;
        (*Parallelize @*)
        Do[
        If[ Mod[imx,1000000]==0,
            Print[imx,"/",len -> {min,max}];
        (*Put[res4,"matrices/omegaSymmMatrices8x8_minones4.dat"];*)
        ];
        t = tup[[imx]];
        mx = Table[1,{8},{8}];
        mx[[2,2;;]] = mx[[2;;,2]] = t[[1;;7]];
        mx[[3,3;;]] = mx[[3;;,3]] = t[[8;;13]];
        mx[[4,4;;]] = mx[[4;;,4]] = t[[14;;18]];
        mx[[5,5;;]] = mx[[5;;,5]] = t[[19;;22]];
        mx[[6,6;;]] = mx[[6;;,6]] = t[[23;;25]];
        mx[[7,7;;]] = mx[[7;;,7]] = t[[26;;27]];
        mx[[8,8;;]] = mx[[8;;,8]] = t[[28;;28]];
        If[ Min[Count[#, 1] & /@ mx] < 4,
            Continue[]
        ];
        mxpow = MatrixPower[mx, npow];
        intevec = Total /@ mxpow;
        If[ (Length[Union[intevec]] != 8),
            Continue[]
        ];
        evec = Sort @ N[intevec / Norm[intevec] ];
        evecdiff = Differences[evec];
        ratio = Max[intevec]/Min[intevec] // N;
        If[ Min[ListConvolve[{1, 1}, #] & /@ mx] == 0,
            Continue[]
        ];
        (*init[mx,True,True]*);
        (*Abort[];*)
        {evecdiffmin,evecdiffmax} = {Min[evecdiff],Max[evecdiff]};
        (*If[evecdiffmin > min,
            min = evecdiffmin;
            Print[fname ->imx,"/",len," min = ",min, {evecdiffmin,evecdiffmax} -> {min,max}];
        ];*)
        If[ evecdiffmax < max && evecdiffmin > min && ratio < ratiolimit,
            min = evecdiffmin;
            max = evecdiffmax;
            Print[fname -> imx,"/",len" max = ",max, {evecdiffmin,evecdiffmax} -> {min,max}];
            AppendTo[res4,mx];
            Print[Length[res4] -> imx,"/",len," adding ", count++];
            Put[res4,"matrices/omegaSymmMatrices8x8_minones4"<>pid<>".dat"];
        ];
        
        ,{imx,from,len,1}];
    ]


exploreSymmMatrices8x8[infname_] :=
    Module[ {},
        npow = 10;
        fname = "matrices/omegaSymmMatrices8x8_minones6.dat";
        fname = "matrices/omegaSymmMatrices8x8_minones5.dat";
        fname = "matrices/omegaSymmMatrices8x8_minones4.dat";
        fname = "matrices/omegaSymmMatrices8x8_minones4_pid8273_kid0.dat";
        fname = infname;
        mxset = Get[fname];
        Print["reading ",fname];
        count = 1;
        len = Length[mxset];
        {min,max} = {0,1};
        Do[
            mx = mxset[[imx]];
            If[ Mod[imx,100]==0,
                Print[imx,"/",len]
            ];
            If[ Min[ListConvolve[{1, 1}, #] & /@ mx] == 0,
                Continue[]
            ];
            tab = T @ (Total /@ (Table[MatrixPower[mx, i], {i, npow}]));
            mxpow = MatrixPower[mx, npow];
            intevec = Total /@ mxpow;
            evec = N[intevec / Norm[intevec] ];
            evecdiff = Differences[Sort @ evec];
            {evecdiffmin,evecdiffmax} = {Min[evecdiff],Max[evecdiff]};
            (*If[evecdiffmin > min,
                min = evecdiffmin;
                Print[fname ->imx,"/",len" min = ",min, {evecdiffmin,evecdiffmax} -> {min,max}];
            ];
            If[evecdiffmax < max,
                max = evecdiffmax;
                Print[fname -> imx,"/",len" max = ",max, {evecdiffmin,evecdiffmax} -> {min,max}];
            ];*)
            If[ Mod[imx,1]==0,
                Print[imx,"/",len,mf[Total/@mx], mf[T@{evec}]
                (*,niceRaster[1 - Reverse[mx], zoom -> 8]*)
                ,MatrixPlot[mx, Mesh -> True, FrameTicks -> Range[Length[mx]]]
                ,MatrixPlot[ListConvolve[{1,1},#]& /@ mx, Mesh -> True, FrameTicks -> Range[Length[mx]]]
                ,MatrixPlot[ListConvolve[{1,1,1},#]& /@ mx, Mesh -> True, FrameTicks -> Range[Length[mx]]]
                ,BarChart[Total/@mx]
                ,BarChart[Differences@(Total/@mx)]
                (*,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{Min[evec],Max[evec]},{Min[evec],Max[evec]}}]*)
                ,ListPlot[{evec, evec}//T//Sort,PlotLabel->{evecdiffmin,evecdiffmax},Joined->False,PlotRange->{{0,Max[evec]},{0,Max[evec]}}]
                ]
            ];
            (*Abort[];*)
            (*init[mx,True];*)
        ,{imx,len}];
    ]
    

mkAllMatrices4x4[] :=
    Module[ {},
        npow = 10;
        tup = Tuples[{0, 1}, 12];
        len = Length[tup];
        res = {};
        count = 1;
        Do[
            t = tup[[i]];
            mx = Table[1,{4},{4}];
            mx[[2,;;]] = t[[1;;4]];
            mx[[3,;;]] = t[[5;;8]];
            mx[[4,;;]] = t[[9;;12]];
            mxT = mx//T;
            mxpow = MatrixPower[mx, npow];
            mxTpow = MatrixPower[mxT, npow];
            intevec = Total /@ mxpow;
            intevecT = Total /@ mxTpow;
            If[ Length[Union[intevec]] == 4 && Length[Union[intevecT]] == 4,
                If[ MemberQ[mxT,{1,1,1,1}],
                    ratio = Max[intevec]/Min[intevec];
                    ratioT = Max[intevecT]/Min[intevecT];
                    If[ ratio > 5 || ratioT > 1.5,
                        Continue[]
                    ];
                    AppendTo[res,mx];
                    Print[{i,count}," adding ",mf@mx -> mf[mxpow] -> mf[mxTpow] -> ({intevec/Norm[intevec],intevecT/Norm[intevecT]}//N//T//mf) -> ({ratio,ratioT}//N//mf)];
                    count++;
                ];
            ]
        ,{i,len}];
    (*Put[res,"matrices/omegaSymmMatrices4x4.dat"];*)
    ] (* mkAllMatrices4x4 *)


FIBOshowAllPermutTrees[inlevel_:4, initfrom_:1] := (* level5 : no solution! *)
    Module[ {},
        {col1,col2,col3} = {Yellow,Red,Cyan(*Lighter@(Lighter@LightGray)*)};
        level = inlevel;
        found = {};
        If[ level != 6,
            permuttab = Tuples[ Table[Tuples[{0, 1}, Fibonacci[i]], {i,level}] ];
            Print["FIBOshowAllPermutTrees level=",level -> Length[permuttab]];
            codetab = Table[
                permuts = permuttab[[ipermut]];
                If[ Mod[ipermut,1000] == 0,
                    Print[{ipermut,permuttab//Length}(* -> mf[permuts]*) ]
                ];
                nodes = {{0}};
                Do[
                    zeroind = 1;
                    newnodes = Table[
                        node = nodes[[in]];
                        If[ Last[node] == 0,
                            permut = permuts[[il,zeroind]];
                            zeroind++
                        ];
                        subdivFIBOWithPermut[node,permut]
                    ,{in,Length[nodes]}];
                    nodes =  Flatten[#,1]& @ newnodes;
                ,{il,level}];
                codes = (Reverse/@(Drop[#, 1] & /@ nodes));
                order = FIBOF /@ codes;
                poslst = order2permut0toNminus1 @ order;
                codes
            ,{ipermut, Length[permuttab] }];(*Put[codetab,"data/FIBO_codetab_L"<>ToString[level]<>".dat"];
            Put[permuttab,"data/FIBO_permuttab_L"<>ToString[level]<>".dat"];*)
        ,(*ELSE*)
            codetab = Get["data/FIBO_codetab_L6.dat"];
            permuttab = Get["data/FIBO_permuttab_L6.dat"];
        ];
        Print["FIBOshowAllPermutTrees level=",level -> Length[permuttab] -> "done."];
        to = Length[codetab];
        fromx = If[ level == 6,
                    initfrom,
                    1
                ];
        Do[
            fromy = ix+1;
            Print[ix,"/",to];
            (*Parallelize @*)
            Do[
            If[ Mod[iy,100000] == 0,
                Print[{ix,iy}]
            ];
            codes = (*Sort @*) T[{codetab[[ix]],codetab[[iy]]}];
            If[ goodFIBOSetQ[codes],
                Print["found " -> {ix,iy} -> codes];
                AppendTo[found, codes];
                FIBOGrid = getFIBOGridNEW[level,codes,{ix,iy}];
                {FIBOGrid,getFIBOTreePermuts[permuttab[[ix]]],getFIBOTreePermuts[permuttab[[iy]]]}//Print;
            ];
            ,{iy,fromy,to,1}]
        ,{ix, fromx,to,1}];
    ] (* FIBOshowAllPermutTrees *)



goodFIBOSetQ[codes_] := (* old version *)
    Module[ {level,testTuples,dx,dy,xodes,ycodes},
        level = Length[First@(First@codes)];
        testTuples = {Range[0, level], level - Range[0, level]} // T;
        And @@ Table[
            {dx,dy} = testTuples[[i]];
            Length[Union[({xodes,ycodes} = #;
                          {Take[xodes,dx],Take[ycodes,dy]} & /@ #) & /@ codes]] == Fibonacci[level + 2]
        ,{i,Length[testTuples]}]
    ] (* goodFIBOSetQ *)

goodFIBOSetQHorizontalOrVerticalRectangles[codes_] := (* old version *)
    Module[ {level,testTuples,dx,dy,xodes,ycodes},
        level = Length[First@(First@codes)];
        testTuples = {Range[0, level], level - Range[0, level]} // T;
        And @@ Table[
            {dx,dy} = testTuples[[i]];
            Length[Union[({xodes,ycodes} = #;
                          {Take[xodes,dx],Take[ycodes,dy]} & /@ #) & /@ codes]] == Fibonacci[level + 1]
        ,{i,Length[testTuples]}]
    ] (* goodFIBOSetQ10 *)

goodFIBOSetQSmallSquares[codes_] := (* old version *)
    Module[ {level,testTuples,dx,dy,xodes,ycodes},
        level = Length[First@(First@codes)];
        testTuples = {Range[0, level], level - Range[0, level]} // T;
        And @@ Table[
            {dx,dy} = testTuples[[i]];
            Length[Union[({xodes,ycodes} = #;
                          {Take[xodes,dx],Take[ycodes,dy]} & /@ #) & /@ codes]] == Fibonacci[level]
        ,{i,Length[testTuples]}]
    ] (* goodFIBOSetQ10 *)

getFIBOGridNEW[nlevels_:2,codes_,{iix_,iiy_}] :=
    Module[ {gl,symbols, coltab ,deltax,deltay,curx,cury,numbers,lbl},
        coltab = {Yellow, Lighter@Cyan, Lighter@Blue, Black,Red};
        numbers = FIBOFxy /@ codes;
        symbols = {{0}};
        gl = {PointSize[1/1.6^(nlevels+1)], getFIBOGrid[nlevels]};
        Do[
             symbols = Flatten[#,1]& @ (subdivFIBO /@ symbols);
        ,{ilevel,nlevels}];
        cury = 0;
        Do[
            deltay = If[ Last[symbols[[iy]]]==0,
                         phi,
                         1
                     ]/phi^(nlevels+1);
            curx = 0;
            Do[
                deltax = If[ Last[symbols[[ix]]]==0,
                             phi,
                             1
                         ]/phi^(nlevels+1);
                If[ MemberQ[numbers,{ix-1,iy-1}],
                    lbl = FIBOF @ (Reverse @ (Drop[#, 1] & @ symbols[[ix]]) );
                    lbl =  Drop[#,1]& /@ {symbols[[ix]],symbols[[iy]]};
                    lbl = Position[codes,Drop[#,1]& /@{symbols[[ix]],symbols[[iy]]}][[1,1]];
                    AppendTo[gl, {
                        LightGray,Rectangle[{curx,cury},{curx+deltax,cury+deltay}]
                        ,Black, Point[{curx,cury}],Text[Style[ToString[lbl(*Position[numbers,{ix-1,iy-1}][[1,1]]-1*) ],Large],{curx,cury},{-1,-1}]
                         } ];
                ];
                curx += deltax;
            ,{ix,Length[symbols]}];
            cury += deltay;
        ,{iy,Length[symbols]}];
        Graphics[gl,Axes->False,PlotLabel->Style[ToString[{iix,iiy} -> T[numbers]], Tiny],ImageSize->If[ nlevels > 3,
                                                                                                         1.61^nlevels{32,32},
                                                                                                         {200,200}
                                                                                                     ] ]
    ] (* getFIBOGridNEW *)


tstFIBOPermutTrees[] :=
    Module[ {},
        {col1,col2,col3} = {Yellow,Red,Cyan(*Lighter@(Lighter@LightGray)*)};
        ntrials = 1000;
        Do[    
            permuttab = {
                {
                    Table[RandomChoice[{0,1}],{1}]
                    ,Table[RandomChoice[{0,1}],{1}]
                    ,Table[RandomChoice[{0,1}],{2}]
                    ,Table[RandomChoice[{0,1}],{3}]
                    (*,Table[RandomChoice[{0,1}],{5}]
                    ,Table[RandomChoice[{0,1}],{8}]*)
                }, {
                    Table[RandomChoice[{0,1}],{1}]
                    ,Table[RandomChoice[{0,1}],{1}]
                    ,Table[RandomChoice[{0,1}],{2}]
                    ,Table[RandomChoice[{0,1}],{3}]
                    (*,Table[RandomChoice[{0,1}],{5}]
                    ,Table[RandomChoice[{0,1}],{8}]*)
                }
            };
            level = Length[permuttab[[1]]];
            codetab = Table[
                permuts = permuttab[[ipermut]];
                If[ Mod[ipermut,1000] == 0,
                    Print[{ipermut,permuttab//Length}(* -> mf[permuts]*) ]
                ];
                nodes = {{0}};
                Do[
                    zeroind = 1;
                    newnodes = Table[
                        node = nodes[[in]];
                        If[ Last[node] == 0,
                            permut = permuts[[il,zeroind]];
                            zeroind++
                        ];
                        subdivFIBOWithPermut[node,permut]
                    ,{in,Length[nodes]}];
                    nodes =  Flatten[#,1]& @ newnodes;
                ,{il,level}];
                codes = (Reverse/@(Drop[#, 1] & /@ nodes));
                order = FIBOF /@ codes;
                poslst = order2permut0toNminus1 @ order;
                codes
            ,{ipermut, Length[permuttab] }];
            sel = {};
            Do[
                Do[
                    codes = (*Sort @*) T[{codetab[[ix]],codetab[[iy]]}];
                    If[ level >= 4,
                        first4pos = (Take[#, 4] & /@ #) & /@ codes
                    ];
                    AppendTo[sel, {codes,{ix,iy},getFIBOTreePermuts[permuttab[[ix]]],getFIBOTreePermuts[permuttab[[iy]]]} ];
                    (*AppendTo[sel, {codes,{ix,iy},getFIBOTreePermuts[permuttab[[ix]]],getFIBOTreePermuts[permuttab[[iy]]]} ];*)
                ,{iy,ix+1,Length[codetab]}]
            ,{ix, Length[codetab]}];
            Do[
                (*Print[{i,Length[sel]}];*)
                    codes = selxy = sel[[i,1]];
                    {ix,iy} = sel[[i,2]];
                    count = Length[Union[(Take[#, level/2] & /@ #) & /@ codes]];
                    goodQ = goodFIBOSetQ[codes];
                    If[ goodQ,
                        Print[i ->  (mf /@ selxy) -> count];
                        FIBOGrid = getFIBOGridNEW[level,selxy,sel[[i,2]]];
                        {FIBOGrid,sel[[i,-2]],sel[[i,-1]]}//Print;
                    ];
            ,{i, Length[sel]}];
        ,{itrial,ntrials}]
    ] (* tstFIBOPermutTrees *)


(*                    If[goodFIBOSetQ[codes],
                            Print["found " -> {ix,iy} -> codes];
                            FIBOGrid = getFIBOGridNEW[level,codes,{ix,iy}];
                             {FIBOGrid,getFIBOTreePermuts[permuttab[[ix]]],getFIBOTreePermuts[permuttab[[iy]]]}//Print;
                        
                    ];
*)
tstFIBORadInverse[inlevel_:2] :=
    Module[ {},
        {col1,col2,col3} = {Yellow,Red,Cyan(*Lighter@(Lighter@LightGray)*)};
        level = inlevel;
        permuttab = {{{0}, {1}, {1,0}, {1,1,0}},                                  {{1}, {0}, {0,1}, {0,0,1}}};
        permuttab = {{{0}, {1}, {0,0}, {0,1,1}},                                  {{1}, {0}, {1,1}, {1,0,0}}};
        permuttab = {{{0}, {1} },                                  {{1}, {0} }};
        permuttab = {{{0}, {1}, {1,0}, {0,1,1}, {0,1,0,0,0} }, {{1}, {0}, {0,1}, {1,0,1}, {1,1,0,1,1} }};
        permuttab = {{{0}, {0}, {0,0}, {0,0,0}, {0,0,0,0,0}, {0,0,0,0,0,0,0,0}}, {{0}, {0}, {0,0}, {0,0,0}, {0,1,0,1,0}, {0,1,1,1,0,1,0,0}}};
        permuttab = {
            {
                Table[RandomChoice[{0,1}],{1}]
                ,Table[RandomChoice[{0,1}],{1}]
                ,Table[RandomChoice[{0,1}],{2}]
                ,Table[RandomChoice[{0,1}],{3}]
                ,Table[RandomChoice[{0,1}],{5}]
                ,Table[RandomChoice[{0,1}],{8}]
            }, {
                Table[RandomChoice[{0,1}],{1}]
                ,Table[RandomChoice[{0,1}],{1}]
                ,Table[RandomChoice[{0,1}],{2}]
                ,Table[RandomChoice[{0,1}],{3}]
                ,Table[RandomChoice[{0,1}],{5}]
                ,Table[RandomChoice[{0,1}],{8}]
            }
        };
        level = Length[permuttab[[1]]];
        codetab = Table[
            permuts = permuttab[[ipermut]];
            If[ Mod[ipermut,1000] == 0,
                Print[{ipermut,permuttab//Length}(* -> mf[permuts]*) ]
            ];
            nodes = {{0}};
            Do[
                zeroind = 1;
                newnodes = Table[
                    node = nodes[[in]];
                    If[ Last[node] == 0,
                        permut = permuts[[il,zeroind]];
                        zeroind++
                    ];
                    subdivFIBOWithPermut[node,permut]
                ,{in,Length[nodes]}];
                nodes =  Flatten[#,1]& @ newnodes;
            ,{il,level}];
            codes = (Reverse/@(Drop[#, 1] & /@ nodes));
            order = FIBOF /@ codes;
            poslst = order2permut0toNminus1 @ order;
            codes
        ,{ipermut, Length[permuttab] }];
        
        (*codes = getFIBOCodes1d[level+1];
        codetab = {codes, Reverse /@ codes};*)
        codetab[[1]] = Reverse /@ codetab[[2]];
        
        
        
(*Abort[]*);
        sel = {};
        Do[
            Do[
                codes = (*Sort @*) T[{codetab[[ix]],codetab[[iy]]}];
                If[ level >= 4,
                    first4pos = (Take[#, 4] & /@ #) & /@ codes
                ];
                AppendTo[sel, {codes,{ix,iy},{},{}} ];
                (*AppendTo[sel, {codes,{ix,iy},getFIBOTreePermuts[permuttab[[ix]]],getFIBOTreePermuts[permuttab[[iy]]]} ];*)
            ,{iy,ix+1,Length[codetab]}]
        ,{ix, Length[codetab]}];
        Do[
            (*Print[{i,Length[sel]}];*)
                codes = selxy = sel[[i,1]];
                {ix,iy} = sel[[i,2]];
                count = Length[Union[(Take[#, level/2] & /@ #) & /@ codes]];
                Print[i -> goodFIBOSetQ[codes] -> (mf /@ selxy) -> count];
                FIBOGrid = getFIBOGridNEW[level,selxy,sel[[i,2]]];
                {FIBOGrid,sel[[i,-2]],sel[[i,-1]]}//Print;
                 
        ,{i, Length[sel]}];
    ] (* tstFIBOPermutTrees *)

second[lst_] :=
    lst[[2]]
third[lst_] :=
    lst[[3]]


getFIBOTreePermuts[permuts_] :=
    Module[ {egdeLabels,svlst,sedges,level = Length[permuts],col1,col2,col3,nodes,edges,zeroind,newnodes,node,permut,nodesaftersubdiv},
        {col1,col2,col3} = {Yellow,Red,Cyan(*Lighter@(Lighter@LightGray)*)};
        nodes = {{0}};
        edges = sedges = svlst = egdeLabels = {};
        Do[
            zeroind = 1;
            newnodes = Table[
                node = nodes[[in]];
                If[ Last[node] == 0,
                    permut = permuts[[il,zeroind]];
                    zeroind++
                ];
                nodesaftersubdiv = subdivFIBOWithPermut[node,permut];
                    (*AppendTo[vlst,node];*)
                AppendTo[edges,{node,#}]& /@ nodesaftersubdiv;
                AppendTo[egdeLabels, If[ Last[node] == 0,
                                         If[ permut == 0,
                                             digits2str[node] -> col1,
                                             digits2str[node] -> col2
                                         ],
                                         digits2str[node] -> col3
                                     ] ];
                nodesaftersubdiv
            ,{in,Length[nodes]}];
            nodes =  Flatten[#,1]& @ newnodes;
        ,{il,level}];
        egdeLabels = Join[egdeLabels,(digits2str[#] -> If[ Last[#] == 0,
                                                           col1,
                                                           col3
                                                       ]) & /@ nodes ];
        svlst = digits2str /@ ( Last /@ edges );
        sedges = Flatten @ ({digits2str[First[#]] \[DirectedEdge] digits2str[Last[#]]}& /@ (edges) );
        TreeGraph[svlst,sedges
            , GraphLayout -> {"LayeredEmbedding"}
            , VertexStyle -> egdeLabels
            , VertexSize -> 0.3
             , VertexLabels ->  Table[svlst[[i]] -> Placed[
                         Switch[StringLength[svlst[[i]]] 
                             ,0, ""
                             ,level+1,Style[Rotate[(StringTake[#,-(level)]& @ svlst[[i]]) <>" = "<> ToString[str2nFIBO[svlst[[i]]]] ,-Pi/2]]
                             ,_, (StringTake[#,-1]& @svlst[[i]]) ]
                     , Below], {i,Length[svlst]}]
            , PlotLabel-> ToString[(*"permuts" -> *)permuts]
            , PlotRangePadding -> {{0,0},{1,0}}
            , ImageSize->{1.61^level 32, Automatic} ]
    ] (* getFIBOTreePermuts *)


getBinaryTree[inpts_,level_,lbl_:"Sobol"] :=
    Module[ {col1,col2,col3},
        vlst = {};
        edges = {};
        {col1,col2,col3} = {Yellow,Red,Cyan};
        (*pts = ((ptsx+1)//order2permut)-1;*)
        pts = inpts;
        ptsDigits = IntegerDigits[#,2,level]& /@ pts;
        positions = IntegerDigits[#,2,level]& /@ Range[0,2^level-1];
        tab = {positions,ptsDigits}//T//Sort;
        prevLevelNodes = Last /@ tab;
        AppendTo[vlst,prevLevelNodes];
        Do[
            nodes = prevLevelNodes;
            prevLevelNodes = Partition[#,2]& @ (Drop[#,1]& /@ nodes);
            verif = And @@((#[[1]] == #[[2]])& /@ prevLevelNodes);
            If[ !verif,
                Print["something wrong:",nodes->prevLevelNodes];
                Abort[]
            ];
            prevLevelNodes = First /@ prevLevelNodes;
            dstnodes = Partition[#,2]& @ nodes;
            AppendTo[edges, Table[{prevLevelNodes[[i]] \[DirectedEdge] dstnodes[[i,1]], prevLevelNodes[[i]] \[DirectedEdge] dstnodes[[i,2]] },{i,Length[prevLevelNodes]}] ];
            AppendTo[vlst,prevLevelNodes];
            (*Print[ilevel," vlst=",vlst];
            Print[ilevel," edges=",edges];*)
         ,{ilevel,level}];
        el = Flatten[#, 1] & @ edges;
        vertices = Union[Last /@ Flatten[el]];
        egdeLabels = (digits2str[#] -> If[ First[#] == 0,
                                           col1,
                                           col3
                                       ]) & /@ vertices;
        egdeLabels = Join[egdeLabels, Table[ If[ el[[i,;;,2,1]] == {1,0},
                                                 digits2str[ el[[i,1,1]] ] -> col2
                                             ] ,{i,Length[el]}]];
        vlst = Flatten[#, 1] &@vlst;
        svlst = digits2str /@ vlst;
        sedges = Flatten @ ({digits2str[First[#]] \[DirectedEdge] digits2str[Last[#]]}& /@ (Flatten[#] &@edges) );
        tg = TreeGraph[svlst,sedges
            , GraphLayout -> {"LayeredEmbedding"}
            , VertexStyle -> egdeLabels
            , VertexSize -> 0.3
            , EdgeStyle -> Arrowheads[.005]
            , VertexLabels ->  Table[svlst[[i]] -> Placed[
                        Switch[StringLength[svlst[[i]]] 
                            ,0, ""
                            (*,level,Style[Rotate[ToString[str2n[svlst[[i]]]] <>"="<>svlst[[i]],Pi/2]]*)
                            ,level,Style[Rotate[ToString[str2n[svlst[[i]]]]<>" = "<>svlst[[i]] ,Pi/2]]
                            ,_, (StringTake[#,1]& @svlst[[i]]) ]
                    , Below], {i,Length[svlst]}]
            , PlotLabel-> "Level="<>ToString[level]<>" "<>lbl
            , PlotRangePadding -> {{0,0},{1,0}}
            , ImageSize->{32 2^level,Automatic} ];
        tg
    ] (* getBinaryTree *)
    
testFIBOOK[level_,codes_] :=
    Module[ {codesYsorted,xCode1,yCode1,xCode2,yCode2,xCode1Ysorted,yCode1Ysorted,xCode2Ysorted,yCode2Ysorted,test1,test2,nodes},
        codesYsorted = Reverse /@ (Sort@(Reverse /@ codes));
        nodes = {{}};
        Do[
            nodes = Flatten[#,1]& @ (subdivFIBO /@ nodes);
        ,{level}];
        And @@ Table[
            If[ nodes[[i,-2;;-1]] == {0,0} && nodes[[i+1,-2;;-1]] == {0,1},
                {xCode1,yCode1} = codes[[i]];
                {xCode2,yCode2} = codes[[i+1]];
                {xCode1Ysorted,yCode1Ysorted} = codesYsorted[[i]];
                {xCode2Ysorted,yCode2Ysorted} = codesYsorted[[i+1]];
                test1 = (First[yCode1] != First[yCode2]);
                test2 = First[xCode1Ysorted] != First[xCode2Ysorted];
                (*Print[{i,i+1} -> mf[{codes[[i]],codes[[i]]}]-> mf[{codesYsorted[[i]],codesYsorted[[i]]}] -> {test1,test2}];*)
                test1 && test2,
                True
            ]
        ,{i,Length[nodes]-1}]
    ] (* testFIBOOK *)

countFIBOOK[level_,codes_] :=
    Module[ {codesYsorted,xCode1,yCode1,xCode2,yCode2,xCode1Ysorted,yCode1Ysorted,xCode2Ysorted,yCode2Ysorted,test1,test2,nodes},
        codesYsorted = Reverse /@ (Sort@(Reverse /@ codes));
        nodes = {{}};
        Do[
            nodes = Flatten[#,1]& @ (subdivFIBO /@ nodes);
        ,{level}];
        Count[#,True]& @ Table[
            If[ nodes[[i,-2;;-1]] == {0,0} && nodes[[i+1,-2;;-1]] == {0,1},
                {xCode1,yCode1} = codes[[i]];
                {xCode2,yCode2} = codes[[i+1]];
                {xCode1Ysorted,yCode1Ysorted} = codesYsorted[[i]];
                {xCode2Ysorted,yCode2Ysorted} = codesYsorted[[i+1]];
                test1 = (First[yCode1] != First[yCode2]);
                test2 = First[xCode1Ysorted] != First[xCode2Ysorted];
                (*Print[{i,i+1} -> mf[{codes[[i]],codes[[i]]}]-> mf[{codesYsorted[[i]],codesYsorted[[i]]}] -> {test1,test2}];*)
                test1 && test2
            ]
        ,{i,Length[nodes]-1}]
    ] (* testFIBOOK *)

    




getBinaryGridWithMarks[nlevels_:2,sel_,{iix_,iiy_}] :=
    Module[ {gl,symbols, coltab, delta,deltax,deltay,cur,curx,cury},
        coltab = {Yellow, Red, Cyan, Blue, Magenta, Green, Black, Red, Cyan, Blue, Magenta, Green, Black};
        symbols = {{0}};
        gl = {};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[1/2^(1.2 ilevel+4)]}];
            symbols = Flatten[#,1]& @ (subdivBinary /@ symbols);
            cur = 0;
            Do[
                delta = 1/2^(ilevel);
                AppendTo[gl, {Line[{{0,cur},{1,cur}}], Line[{{0,cur+delta},{1,cur+delta}}]}];
                AppendTo[gl, {Line[{{cur,0},{cur,1}}], Line[{{cur+delta,0},{cur+delta,1}}]}];
                cur += delta;
            ,{i,Length[symbols]}]
        ,{ilevel,nlevels}];
        cury = 0;
        Do[
            deltay = 1/2^(nlevels);
            curx = 0;
            Do[
                deltax = 1/2^(nlevels);
                If[ MemberQ[sel,{ix-1,iy-1}],
                    AppendTo[gl, {Gray,Rectangle[{curx,cury},{curx+deltax,cury+deltay}] } ]
                ];
                curx += deltax;
            ,{ix,Length[symbols]}];
            cury += deltay;
        ,{iy,Length[symbols]}];
        Graphics[gl,Axes->False,PlotLabel->Style[ToString[{iix,iiy} -> T[sel] ], If[ nlevels > 3,
                                                                                     Medium,
                                                                                     Tiny
                                                                                 ] ],ImageSize->If[ nlevels > 3,
                                                                                                    4,
                                                                                                    1
                                                                                                ] {150,150} ]
    ]

showAllBinaryPermutTrees[level_:2] :=
    Module[ {},
        {col1,col2,col3} = {Yellow,Red,Lighter@(Lighter@LightGray)};
        permuttab = Tuples[ Table[Tuples[{0, 1}, 2^(i-1)], {i,level}] ];
 
        (*permuttab = Select[permuttab, And @@ ((First[#] == 0) & /@ #) &];*) (* select only Sobol-likeones *)
        postab = Table[
            permuts = permuttab[[ipermut]];
            (*Print[{ipermut,permuttab//Length} -> mf[permuts] ];*)
            nodes = vlst = {{0}};
            edges = sedges = svlst = egdeLabels = {};
            Do[
                zeroind = 1;
                newnodes = Table[
                    node = nodes[[in]];
                    permut = permuts[[il,zeroind]];
                    zeroind++;
                    nodesaftersubdiv = subdivBinaryWithPermut[node,permut];
                    (*AppendTo[vlst,node];*)
                    AppendTo[vlst,#]& /@ nodesaftersubdiv;
                    AppendTo[edges,{node,#}]& /@ nodesaftersubdiv;
                    AppendTo[egdeLabels, If[ permut == 0,
                                             digits2str[node] -> col1,
                                             digits2str[node] -> col2
                                         ] ];
                    nodesaftersubdiv
                ,{in,Length[nodes]}];
                nodes =  Flatten[#,1]& @ newnodes;
            ,{il,level}];
            svlst = digits2str /@ vlst;
            sedges = Flatten @ ({digits2str[First[#]] \[DirectedEdge] digits2str[Last[#]]}& /@ (edges) );
            If[ level < 4 || (level == 4 && (ipermut == 1 || ipermut == 16)),
                tg = TreeGraph[svlst,sedges
                     , GraphLayout -> {"LayeredEmbedding"}
                     , VertexStyle -> egdeLabels
                     , VertexSize -> 0.3
                     , VertexLabels ->  Table[svlst[[i]] -> Placed[
                                 Switch[StringLength[svlst[[i]]] 
                                     ,level+1,Style[Rotate[
                                         (StringTake[#,-1]& @svlst[[i]]) <>"  "<>svlst[[i]] <> " = " <> ToString[FromDigits[Reverse@vlst[[i,2;;]],2]]
                                         ,-Pi/2]]
                                     ,_, (StringTake[#,-1]& @svlst[[i]]) ]
                             , Below], {i,Length[svlst]}]
                     , PlotLabel-> ToString[ipermut -> permuts]
                     , PlotRangePadding -> {{0,0},{1,0}}
                     , ImageSize->{850,400}/2 ];
                tg//Print;
            ];
            order = FromDigits[Reverse[#],2]& /@ (Drop[#, 1] & /@ nodes);
            poslst = order2permut0toNminus1 @ order;
            If[ level < 4 || Mod[ipermut,1000]==0,
                Print[ipermut,"/",Length[permuttab]->order -> poslst]
            ];
            poslst
        ,{ipermut, 1 Length[permuttab] }];
        gtab = {};
        Do[
            posx = postab[[ix]];
            Do[
                posy = postab[[iy]];
                sel = {order2permut0toNminus1 @ posx, order2permut0toNminus1 @ posy}//T;
                codes = IntegerDigits[#, 2, level] & /@ sel;
                FIBOGrid = getBinaryGridWithMarks[level,sel,{ix,iy}];
                If[ goodBinarySetQ[codes],
                    If[ level > 3,
                        FIBOGrid//Print,
                        AppendTo[gtab,FIBOGrid];
                    ];
                ];
            ,{iy,ix+1,Length[postab]}]
        ,{ix,Length[postab]}];
        Print[gtab];
        ordtabDir = Table[
            permuts = permuttab[[ipermut]];
            nodes = vlst = {{0}};
            edges = sedges = svlst = egdeLabels = {};
            Do[
                zeroind = 1;
                newnodes = Table[
                    node = nodes[[in]];
                    permut = permuts[[il,zeroind]];
                    zeroind++;
                    nodesaftersubdiv = subdivBinaryWithPermut[node,permut];
                    nodesaftersubdiv
                ,{in,Length[nodes]}];
                nodes =  Flatten[#,1]& @ newnodes;
            ,{il,level}];
            order = FromDigits[#,2]& /@ (Drop[#, 1] & /@ nodes);
            order
        ,{ipermut, 1 Length[permuttab] }];
        ordtabInv = Table[
            permuts = permuttab[[ipermut]];
            nodes = vlst = {{0}};
            edges = sedges = svlst = egdeLabels = {};
            Do[
                zeroind = 1;
                newnodes = Table[
                    node = nodes[[in]];
                    permut = permuts[[il,zeroind]];
                    zeroind++;
                    nodesaftersubdiv = subdivBinaryWithPermut[node,permut];
                    nodesaftersubdiv
                ,{in,Length[nodes]}];
                nodes =  Flatten[#,1]& @ newnodes;
            ,{il,level}];
            order = FromDigits[Reverse[#],2]& /@ (Drop[#, 1] & /@ nodes);
            order
        ,{ipermut, 1 Length[permuttab] }];
        postab = Table[
            permuts = permuttab[[ipermut]];
            nodes = vlst = {{0}};
            edges = sedges = svlst = egdeLabels = {};
            Do[
                zeroind = 1;
                newnodes = Table[
                    node = nodes[[in]];
                    permut = permuts[[il,zeroind]];
                    zeroind++;
                    nodesaftersubdiv = subdivBinaryWithPermut[node,permut];
                    nodesaftersubdiv
                ,{in,Length[nodes]}];
                nodes =  Flatten[#,1]& @ newnodes;
            ,{il,level}];
            order = FromDigits[Reverse[#],2]& /@ (Drop[#, 1] & /@ nodes);
            order2permut0toNminus1 @ order
        ,{ipermut, 1 Length[permuttab] }];
    ] (* showAllBinaryPermutTrees *)
    
tstBinary[] :=
    Module[ {},
        permuts12 = {
            {{0},{0,0},{0,0,0,0}},
            {{0},{0,0},{0,0,1,1}}
        };
        permuts12 = {
            {{0},{0,0},{0,0,0,0},{0,0,0,0,0,0,0,0}},
            {{0},{0,0},{0,0,1,1},{0,0,1,1,1,0,0,1}}
        };
        permuts12 = {
            {{0},{0,0},{0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},
            {{0},{0,0},{0,0,1,1},{0,0,1,1,1,0,0,1},{0,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0}}
        };
        permuts12 = {
            {{0},{0,0},{0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},
            {{0},{0,0},{0,0,1,1},{0,0,1,1,1,0,0,1},{0,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0},{0,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0,  0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0}}
        };
        permuts12 = {
            {{0},{0,0},{0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},
            {{0},{0,0},{0,0,1,1},{0,0,1,1,1,0,0,1},{0,0,1,1,1,0,0,1 ,1,0,0,0,0,0,0,1},{0,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0,  0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0}}
        };
        {col1,col2,col3} = {Yellow,Red,Lighter@(Lighter@LightGray)};
        permuts = permuts12[[1]];
        level = permuts // Length;
        nodes = vlst = {{0}};
        edges = sedges = svlst = egdeLabels = {};
        Do[
            zeroind = 1;
            newnodes = Table[
                node = nodes[[in]];
                permut = permuts[[il,zeroind]];
                zeroind++;
                nodesaftersubdiv = subdivBinaryWithPermut[node,permut];
                    (*AppendTo[vlst,node];*)
                AppendTo[vlst,#]& /@ nodesaftersubdiv;
                AppendTo[edges,{node,#}]& /@ nodesaftersubdiv;
                AppendTo[egdeLabels, If[ permut == 0,
                                         digits2str[node] -> col1,
                                         digits2str[node] -> col2
                                     ] ];
                nodesaftersubdiv
            ,{in,Length[nodes]}];
            nodes =  Flatten[#,1]& @ newnodes;
        ,{il,level}];
        svlst = digits2str /@ vlst;
        sedges = Flatten @ ({digits2str[First[#]] \[DirectedEdge] digits2str[Last[#]]}& /@ (edges) );
        tg = TreeGraph[svlst,sedges
             , GraphLayout -> {"LayeredEmbedding"}
             , VertexStyle -> egdeLabels
             , VertexSize -> 0.3
             , VertexLabels ->  Table[svlst[[i]] -> Placed[
                         Switch[StringLength[svlst[[i]]] 
                             ,level+1,Style[Rotate[
                                 (StringTake[#,-1]& @svlst[[i]]) <>"  "<>svlst[[i]] <> " = " <> ToString[FromDigits[Reverse@vlst[[i,2;;]],2]]
                                 ,-Pi/2]]
                             ,_, (StringTake[#,-1]& @svlst[[i]]) ]
                     , Below], {i,Length[svlst]}]
             , PlotLabel-> ToString[ipermut -> permuts]
             , PlotRangePadding -> {{0,0},{1,0}}
             , ImageSize->2 {850,400} ];
        tg//Print;
        order = FromDigits[Reverse[#],2]& /@ (Drop[#, 1] & /@ nodes);
        poslst1 = order2permut0toNminus1 @ order;
        Print[order -> poslst1];
        permuts = permuts12[[2]];
        Do[
            Print["===========",iii];
            pattern = IntegerDigits[iii,2, 8 ];
            permuts[[-1,17;;17+7]] = Reverse @ pattern;
            permuts[[-1,17+8;;]] = pattern;
            nodes = vlst = {{0}};
            edges = sedges = svlst = egdeLabels = {};
            Do[
                zeroind = 1;
                newnodes = Table[
                    node = nodes[[in]];
                    permut = permuts[[il,zeroind]];
                    zeroind++;
                    nodesaftersubdiv = subdivBinaryWithPermut[node,permut];
                    (*AppendTo[vlst,node];*)
                    AppendTo[vlst,#]& /@ nodesaftersubdiv;
                    AppendTo[edges,{node,#}]& /@ nodesaftersubdiv;
                    AppendTo[egdeLabels, If[ permut == 0,
                                             digits2str[node] -> col1,
                                             digits2str[node] -> col2
                                         ] ];
                    nodesaftersubdiv
                ,{in,Length[nodes]}];
                nodes =  Flatten[#,1]& @ newnodes;
            ,{il,level}];
            svlst = digits2str /@ vlst;
            sedges = Flatten @ ({digits2str[First[#]] \[DirectedEdge] digits2str[Last[#]]}& /@ (edges) );
            tg = TreeGraph[svlst,sedges
                 , GraphLayout -> {"LayeredEmbedding"}
                 , VertexStyle -> egdeLabels
                 , VertexSize -> 0.3
                 , VertexLabels ->  Table[svlst[[i]] -> Placed[
                             Switch[StringLength[svlst[[i]]] 
                                 ,level+1,Style[Rotate[
                                     (StringTake[#,-1]& @svlst[[i]]) <>"  "<>svlst[[i]] <> " = " <> ToString[FromDigits[Reverse@vlst[[i,2;;]],2]]
                                     ,-Pi/2]]
                                 ,_, (StringTake[#,-1]& @svlst[[i]]) ]
                         , Below], {i,Length[svlst]}]
                 , PlotLabel-> ToString[ipermut -> permuts]
                 , PlotRangePadding -> {{0,0},{1,0}}
                 , ImageSize->2 {850,400} ];
            tg//Print;
            order = FromDigits[Reverse[#],2]& /@ (Drop[#, 1] & /@ nodes);
            poslst2 = order2permut0toNminus1 @ order;
            Print[order -> poslst2];
            posx = poslst1;
            posy = poslst2;
            sel = {order2permut0toNminus1 @ posx, order2permut0toNminus1 @ posy}//T;
            FIBOGrid = getBinaryGridWithMarks[level,sel,{ix,iy}];
            FIBOGrid//Print;
        ,{iii,0,256}];
    ] (* tstBinary *)

(*------------------------------------------------------*)

(*----------------------- FIBO -----------------------*)
(*FIBOF[symbols_] := Total@Table[Fibonacci[i ] symbols[[i]], {i, Length[symbols]}]
FIBOFxy[symbols_]:=FIBOF/@symbols
(*subdivx[symbol_,permut_]:=Switch[Last[symbol]
    ,0, If[permut == 0, {Join[symbol,{0}],Join[symbol,{1}]},  {Join[symbol,{1}],Join[symbol,{0}]}  ]
    ,1, {Join[symbol,{0}]}
]*)
(*subdivy[symbol_,permut_]:=Switch[Last[symbol]
    ,0, If[permut == 1, {Join[symbol,{0}],Join[symbol,{1}]},  {Join[symbol,{1}],Join[symbol,{0}]}  ]
    ,1, {Join[symbol,{0}]}
]*)
toto[] :=
    Module[ {},
        nlevels = 5;
        permuts = Table[RandomChoice[{0, 1}, Fibonacci[i+1]], {i, nlevels}];
        Print[mf@permuts];
        xsymbols = {{0}};
        Do[
            xsymbols = Flatten[#,1]& @ Table[subdivx[xsymbols[[isymble]],permuts[[ilevel,isymble]]],{isymble,Length[xsymbols]}];
            (*Print["xsymbols" -> ilevel -> mf[xsymbols]];*)
        ,{ilevel,nlevels}];
        ysymbols = {{0}};
        Do[
            ysymbols = Flatten[#,1]& @ Table[subdivy[ysymbols[[isymble]],permuts[[ilevel,isymble]]],{isymble,Length[ysymbols]}];
            (*Print["ysymbols" -> ilevel -> mf[ysymbols]];*)
        ,{ilevel,nlevels}];
        xysymbols = {xsymbols, ysymbols}//T;
        sz = Length[xysymbols];
        
        xy = FIBOFxy /@ xysymbols;
        grid = {{Thickness[.001],Cyan,Table[{Line[{{i,sz},{i,0}}],Line[{{sz,i},{0,i}}]},{i,0,sz}] }};
        Graphics[{grid,Rectangle[#,#+{1,1}]& /@ xy},ImageSize->{1024,1024}]//Print;
    ]
*)


(*

Abort[];
        
(* FIBO-Sobol *)
        xx = Reverse /@ (IntegerDigits[#, 2, nlevels] & /@ ptsx);
        xxFIBO = FIBOF /@ (Select[xx, Max[ListConvolve[{1, 1}, #]] < 2 &]);
        
        yy = Reverse /@ (IntegerDigits[#, 2, nlevels] & /@ ptsy);
        yyFIBO = FIBOF /@ (Select[yy, Max[ListConvolve[{1, 1}, #]] < 2 &]);
        
        npts = Length[xxFIBO];
        Graphics[{PointSize[.01],Point/@T[{xxFIBO,yyFIBO}]},Frame->True,FrameTicks->Automatic,AspectRatio->1,GridLines->{Range[0,npts-1],Range[0,npts-1]}
            ,ImageSize->{650,650}
            ,PlotLabel->"FIBO-Sobol xy: dir numbers="<>ToString[{ind1,ind2}]]//Print;
        Print[{xxFIBO, yyFIBO} // mf];
        Print[mf @ { ptsx//order2permut0toNminus1,ptsy//order2permut0toNminus1 }]*)
(* *) 
 


subdivFIBO[symbol_] :=
    If[ symbol === {},
        {{0}, {1}},
        Switch[Last[symbol]
            ,0, {Join[symbol,{0}],Join[symbol,{1}]}
            ,1, {Join[symbol,{0}]}
        ]
    ]
subdivFIBOWithPermut[symbol_,permut_] :=
    Switch[Last[symbol]
    ,0, If[ permut == 0,
            {Join[symbol,{0}],Join[symbol,{1}]},
            {Join[symbol,{1}],Join[symbol,{0}]}
        ]
    ,1, {Join[symbol,{0}]}
    ]


getFIBOGridWithMarks[nlevels_:2,sel_,{iix_,iiy_}] :=
    Module[ {gl,symbols, coltab, delta,deltax,deltay,cur,curx,cury},
        coltab = {Yellow, Lighter@Cyan, Lighter@Blue, Black,Red};
        symbols = {{0}};
        gl = {};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[1/phi^(1.5 ilevel+4)]}];
            symbols = Flatten[#,1]& @ (subdivFIBO /@ symbols);
            cur = 0;
            Do[
                delta = If[ Last[symbols[[i]]]==0,
                            phi,
                            1
                        ]/phi^(ilevel+1);
                AppendTo[gl, {Line[{{0,cur},{1,cur}}], Line[{{0,cur+delta},{1,cur+delta}}]}];
                AppendTo[gl, {Line[{{cur,0},{cur,1}}], Line[{{cur+delta,0},{cur+delta,1}}]}];
                cur += delta;
            ,{i,Length[symbols]}]
        ,{ilevel,nlevels}];
        cury = 0;
        Do[
            deltay = If[ Last[symbols[[iy]]]==0,
                         phi,
                         1
                     ]/phi^(nlevels+1);
            curx = 0;
            Do[
                deltax = If[ Last[symbols[[ix]]]==0,
                             phi,
                             1
                         ]/phi^(nlevels+1);
                If[ MemberQ[sel,{ix-1,iy-1}],
                    AppendTo[gl, {LightGray,Rectangle[{curx,cury},{curx+deltax,cury+deltay}] } ]
                ];
                curx += deltax;
            ,{ix,Length[symbols]}];
            cury += deltay;
        ,{iy,Length[symbols]}];
        Graphics[gl,Axes->False,PlotLabel->Style[ToString[{iix,iiy} -> T[sel]], Tiny],ImageSize->If[ nlevels >3,
                                                                                                     2,
                                                                                                     1
                                                                                                 ]{150,150} ]
    ] (* getFIBOGridWithMarks *)

digits2strColor[digits_] :=
    StringJoin[ToString /@ digits] 

getFIBOGrid[nlevels_:2,imgsz_:{600,600}] :=
    Module[ {gl(*,symbols*)},
        hlevels = Floor[nlevels/2];
        coltab = {Orange(*Yellow*), Cyan, Blue,Gray, Darker@Red, Orange,Blue,Red,Yellow};
        txtcoltab = {Red, Blue, Green, Orange, Gray,Red};
        symbols = {{}};
        If[ nlevels == 0,
            Return[{Red,Line[{{0,0},{0,1},{1,1},{1,0},{0,0}}] }]
        ];
        gl = {(*Opacity[.75]*)};
        Do[
            gl = Join[gl,{coltab[[Mod[ilevel,Length[coltab],1]]],Thickness[1/phi^(1.5 ilevel+4)]}];
            symbols = Flatten[#,1]& @ (subdivFIBO /@ symbols);
            zvals = FIBOPhi /@ symbols;
            AppendTo[gl, {
                    Line[{{0,1},{1,1}}],Line[{{1,0},{1,1}}] 
                    , {Line[{{0,#},{1,#}}],Line[{{#,0},{#,1}}] }& /@ zvals
             } ];
        ,{ilevel, nlevels}];
        symbols1 = #[[;;hlevels]]& /@ symbols;
        symbols2 = #[[hlevels+1;;]]& /@ symbols;
        AppendTo[gl, {Black,Opacity[1]
            ,Table[
                    Text[ Column[Join[{
                             Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"        " ,Pi/2],Bold,Black]
                            }
                            ,Reverse@Table[Style[  Rotate[ToString@symbols1[[i,j]],Pi/2] ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                        ]
                    ], {FIBOPhi@symbols[[i]],0},{0,1}]
                , {i,Length[symbols]}]
        
        
            ,Table[
                    
                    Text[ Row[Join[
                            Table[Style[  ToString[symbols1[[i,j]]]<>" " ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                             ,{ Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"       " ,0],Bold,Black]
                    } ] ], {0,FIBOPhi@symbols[[i]]},{1,0}]
                , {i,Length[symbols]}]
        
             } ];

       (*Graphics[gl,Axes->False,(*PlotLabel->"FIBO "<>ToString[{nlevels,Length[symbols]}],*)ImageSize -> imgsz]*)
        gl
    ]

getFIBOGridAB[nlevels_:2,imgsz_:{600,600}] :=
    Module[ {gl(*,symbols*)},
        hlevels = Floor[nlevels/2];
        coltab = {Orange, Cyan, Blue,Gray, Darker@Red, Orange,Blue,Red,Yellow};
        txtcoltab = {Red, Blue, Green, Orange};
        symbols = {{}};
        gl = {(*Opacity[.75]*)};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[1/phi^(1.5 ilevel+4)]}];
            prevsymbols = symbols;
            prevzvals = FIBOPhi /@ prevsymbols;
            symbols = Flatten[#,1]& @ (subdivFIBO /@ symbols);
            zvals = FIBOPhi /@ symbols;
            AppendTo[gl, {
                    Line[{{0,1/phi},{1,1/phi}}],Line[{{1,0},{1,1/phi}}] 
                    , {Line[{{#,0},{#,1/phi}}] }& /@ zvals
                    , {Line[{{0,#/phi},{1,#/phi}}] }& /@ prevzvals
             } ];
        ,{ilevel,nlevels}];
        symbols1 = #[[;;hlevels]]& /@ symbols;
        symbols2 = #[[hlevels+1;;]]& /@ symbols;
        AppendTo[gl, {Black,Opacity[1]
            ,Table[
                    Text[ Column[Join[{
                             Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"        " ,Pi/2],Bold,Black]
                            }
                            ,Reverse@Table[Style[  Rotate[ToString@symbols1[[i,j]],Pi/2] ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                        ]
                    ], {FIBOPhi@symbols[[i]],0},{0,1}]
                , {i,Length[symbols]}]
        
        
            ,Table[
                    
                    Text[ Row[Join[
                            Table[Style[  symbols1[[i,j]] ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                             ,{ " "
                            ,Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"       " ,0],Bold,Black]
                    } ] ], {0,FIBOPhi@symbols[[i]]},{1,0}]
                , {i,Length[prevsymbols]}]
        
             } ];
        gl
    ]

getFIBOGridBA[nlevels_:2,imgsz_:{600,600}] :=
    Module[ {gl(*,symbols*)},
        hlevels = Floor[nlevels/2];
        coltab = {Orange, Cyan, Blue,Gray, Darker@Red, Orange,Blue,Red,Yellow};
        txtcoltab = {Red, Blue, Green, Orange};
        symbols = {{}};
        gl = {(*Opacity[.75]*)};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[1/phi^(1.5 ilevel+4)]}];
            prevsymbols = symbols;
            prevzvals = FIBOPhi /@ prevsymbols;
            symbols = Flatten[#,1]& @ (subdivFIBO /@ symbols);
            zvals = FIBOPhi /@ symbols;
            AppendTo[gl, {
                    Line[{{0,1},{1/phi,1}}],Line[{{1/phi,0},{1/phi,1}}] 
                    , {Line[{{#/phi,0},{#/phi,1}}] }& /@ prevzvals
                    , {Line[{{0,#},{1/phi,#}}] }& /@ zvals
             } ];
        ,{ilevel,nlevels}];
        symbols1 = #[[;;hlevels]]& /@ symbols;
        symbols2 = #[[hlevels+1;;]]& /@ symbols;
        AppendTo[gl, {Black,Opacity[1]
            ,Table[
                    Text[ Column[Join[{
                             Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"        " ,Pi/2],Bold,Black]
                            }
                            ,Reverse@Table[Style[  Rotate[ToString@symbols1[[i,j]],Pi/2] ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                        ]
                    ], {FIBOPhi@symbols[[i]],0},{0,1}]
                , {i,Length[prevsymbols]}]
        
        
            ,Table[
                    
                    Text[ Row[Join[
                            Table[Style[  symbols1[[i,j]] ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                             ,{ " "
                            ,Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"       " ,0],Bold,Black]
                    } ] ], {0,FIBOPhi@symbols[[i]]},{1,0}]
                , {i,Length[symbols]}]
        
             } ];
        gl
    ]

prepFIBOGrids[] :=
    Module[ {},
        tab = Table[Graphics[{getFIBOGrid[i]},ImageSize -> {750,750}],{i,6}];
    (*Table[Graphics[{getFIBOGridAB[i]},ImageSize -> {128,128}],{i,8}]//Print;
        Table[Graphics[{getFIBOGridBA[i]},ImageSize -> {128,128}],{i,8}]//Print;*)
        gg = GraphicsGrid[Partition[tab,3]];
        gg//Print;
        Export["prep-figs/FIBOprepGrids.pdf",gg];
    ]

(*prepFIBOGrids[] :=
    Module[ {},
        (*Table[Graphics[{getFIBOGrid[i]},ImageSize -> { 1.5^i 32,Automatic}],{i,2,8,2}]//Print;
        *)Table[Graphics[{getFIBOGridAB[i]},ImageSize -> { 1.5^i 32,Automatic}],{i,2,8,2}]//Print;
        Table[Graphics[{getFIBOGridBA[i]},ImageSize -> {Automatic, 1.5^i 32}],{i,2,8,2}]//Print;
    ]
*)

(* primitive polynomialsfrom http://mathworld.wolfram.com/notebooks/Algebra/PrimitivePolynomial.nb *)
PolynomialOrder[p_, x_] :=
    Module[ {n = 1},
        While[
         PolynomialRemainder[x^n + 1, p, x, Modulus -> 2] =!= 0, n++];
        n
    ]

PrimitiveQ[p_, x_] :=
    PolynomialOrder[p, x] == 2^Exponent[p, x] - 1

Polynomial[l_List, x_] :=
    Fold[x #1 + #2 &, 0, l]

polys[1] :=
    {x + 1}
polys[n_] :=
    (Expand[Polynomial[Join[{1}, #, {1}], x]]) & /@ 
    Flatten[Outer[List, Sequence @@ Table[{0, 1}, {n - 1}]], n - 2]
  
(*Table[Select[polys[n], PrimitiveQ[#, x] &], {n, 10}]*)
(*
Select[IntegerDigits /@ a058947, Length[#] > 1 && Max[ListConvolve[{1, 1}, #]] < 2 &]
Select[IntegerDigits /@ a058947, Length[#] > 2 &&  Max[ListConvolve[{1, 1, 1}, #]] < 2 &]
Select[IntegerDigits /@ a058947, Length[#] > 3 &&  Max[ListConvolve[{1, 1, 1, 1}, #]] < 2 &]

{{1,0,0,1,0,1},{1,0,1,0,0,1},{1,0,0,0,1,0,0,1},{1,0,0,1,0,0,0,1},{1,0,0,0,0,1,0,0,0,1},{1,0,0,0,1,0,0,0,0,1},{1,0,1,0,0,1,0,1,0,1},{1,0,1,0,1,0,0,1,0,1},{1,0,0,0,0,0,0,1,0,0,1},{1,0,0,1,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,1,0,1},{1,0,0,0,1,0,0,1,0,1,0,1},{1,0,0,0,1,0,1,0,1,0,0,1},{1,0,0,1,0,0,1,0,0,1,0,1},{1,0,0,1,0,0,1,0,1,0,0,1},{1,0,0,1,0,1,0,0,0,1,0,1},{1,0,0,1,0,1,0,0,1,0,0,1},{1,0,0,1,0,1,0,1,0,0,0,1},{1,0,1,0,0,0,0,0,0,0,0,1},{1,0,1,0,0,0,0,1,0,1,0,1},{1,0,1,0,0,0,1,0,1,0,0,1},{1,0,1,0,0,1,0,0,1,0,0,1},{1,0,1,0,1,0,0,0,0,1,0,1},{1,0,1,0,1,0,0,1,0,0,0,1},{1,0,0,0,0,0,1,0,1,0,0,1,0,1},{1,0,0,0,0,1,0,0,0,1,0,1,0,1},{1,0,0,0,0,1,0,0,1,0,1,0,0,1},{1,0,0,0,1,0,0,0,1,0,0,1,0,1},{1,0,0,0,1,0,1,0,0,0,1,0,0,1},{1,0,0,1,0,0,0,0,1,0,0,1,0,1},{1,0,0,1,0,0,0,0,1,0,1,0,0,1},{1,0,0,1,0,0,0,1,0,1,0,0,0,1},{1,0,0,1,0,1,0,0,0,0,1,0,0,1},{1,0,0,1,0,1,0,0,1,0,0,0,0,1},{1,0,0,1,0,1,0,1,0,1,0,1,0,1},{1,0,1,0,0,0,0,1,0,0,0,1,0,1},{1,0,1,0,0,0,1,0,0,0,0,1,0,1},{1,0,1,0,0,1,0,0,0,0,1,0,0,1},{1,0,1,0,0,1,0,0,0,1,0,0,0,1},{1,0,1,0,0,1,0,1,0,0,0,0,0,1},{1,0,1,0,0,1,0,1,0,1,0,1,0,1},{1,0,1,0,1,0,0,0,1,0,0,0,0,1},{1,0,1,0,1,0,1,0,1,0,0,1,0,1},{1,0,1,0,1,0,1,0,1,0,1,0,0,1}}
{{1,0,0,0,1,0,0,1},{1,0,0,1,0,0,0,1},{1,0,0,0,0,1,0,0,0,1},{1,0,0,0,1,0,0,0,0,1},{1,0,0,0,0,0,0,1,0,0,1},{1,0,0,1,0,0,0,0,0,0,1}}
{{1,0,0,0,0,1,0,0,0,1},{1,0,0,0,1,0,0,0,0,1}}


sel = Select[IntegerDigits /@ a058947, 
   Length[#] > 1 && Max[ListConvolve[{1, 1}, #]] < 2 &];
Print[Position[IntegerDigits /@ a058947, #][[1, 1]] & /@ sel]
{8,9,21,23,54,56,66,68,102,108,162,172,174,184,185,188,189,190,204,207,208,209,214,215,491,500,501,520,528,560,561,563,577,580,584,644,647,657,659,664,666,682,691,692}

sel = Select[IntegerDigits /@ a058947, 
   Length[#] > 2 && Max[ListConvolve[{1, 1, 1}, #]] < 2 &];
Print[Position[IntegerDigits /@ a058947, #][[1, 1]] & /@ sel]
{21,23,54,56,102,108}

sel = Select[IntegerDigits /@ a058947, 
   Length[#] > 3 && Max[ListConvolve[{1, 1, 1, 1}, #]] < 2 &];
Print[Position[IntegerDigits /@ a058947, #][[1, 1]] & /@ sel]
{54,56}
*)


digits2str[digits_] :=
    StringJoin[ToString /@ digits] 

str2digits[str_] :=
    Table[ToExpression[StringTake[str,{i,i}]],{i,StringLength[str]}]

(*

            If[ind1 == 1,
                msobol[[1,2]] = 1+2;
                msobol[[1,3]] = 1+2;
                msobol[[1,7]] = 1+2;
                msobol[[1,6]] = 1+2;
                msobol[[1,10]] = 1+2;
                msobol[[1,11]] = 1+2;
            ];
            If[ind1 == 1,
                msobol[[1,2]] = 1+2;
                msobol[[1,3]] = 1+2+4;
                msobol[[1,7]] = 1+2;
                msobol[[1,6]] = 1+2;
                msobol[[1,10]] = 1+2;
                msobol[[1,11]] = 1+2;
            ];

*)

dbgFIBOSobol[nlevels_:5, ind1_:1, ind2_:1111, dbgTxt_:True ] :=
    Module[ {},
        rules = {
             "111111111111111" -> "101010101010101",  (* 15 ones *)
             "11111111111111" -> "10101010101001",  (* 14 ones *)
             "1111111111111" -> "1010101010101",  (* 13 ones *)
             "111111111111" -> "101010101001",  (* 12 ones *)
             "11111111111" -> "10101010101",  (* 11 ones *)
             "1111111111" -> "1010101001",  (* 10 ones *)
             "111111111" -> "101010101",  (* 9 ones *)
             "11111111" -> "10101001", (* 8 ones *)
             "1111111" -> "1010101", (* 7 ones *)
             "111111" -> "101001", (* 6 ones *)
             "11111" -> "10101", (* 5 ones *)
             "1111" -> "1001", (* 4 ones *)
             "111" -> "101", (* 3 ones *)
             "11" -> "10"}; (* 2 ones *)
        buildMSobol[{ind1, ind2},dbgTxt];

(*-------------------- x ---------------------*)
        Print["-------------------- x: Sobol dir number ind=",ind1," a058947[[ind1]]=", a058947[[ind1]] -> (IntegerDigits @ a058947[[ind1]])];
        nf = 1;
        Print["init msobol"-> msobol[[nf,;;20]]];
        If[ ind1 == 2,
            Do[ msobol[[nf,i]] = 1+2^(i-1),{i,4,32}];
        ];
        If[ ind1 == 3,
            Do[ msobol[[nf,i]] = 1+2^(i-1),{i,5,32}];
        ];
        If[ ind1 == 999,
            Do[ msobol[[nf,i]] = 2^i-1,{i,1,32}];
        ];
        Print["new  msobol"-> msobol[[nf,;;20]]];
        Print["msobol"
            -> mf[ Table[Join[ Table[" ",{20-i}], Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]) ], {i,20}] ] 
            -> mf[ Table[Join[Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]),  Table[" ",{20-i}] ], {i,20}] ] 
            ];
        symbols = {{0},{1}};
        Do[
            symbols = Flatten[#,1]& @ (subdivFIBO /@ symbols);
        ,{ilevel,nlevels}];
        npts =  Length[symbols];
        fcodetab = Table[
            seq = symbols[[inunmber]] //Reverse;
            seqlen = Length[seq];
            nn = BitXor @@ Table[ seq[[i]] msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}];
            oldseq = newseq = (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  );
            newseq =  (str2digits @ StringReplace[digits2str[newseq], rules]);
            newseq =  (str2digits @ StringReplace[digits2str[newseq], rules]);
            newseq =  (str2digits @ StringReplace[digits2str[newseq], rules]);
            newseqcorrected = newseq;
            newnumber = FIBOF[newseqcorrected];
            If[ dbgTxt,
                Print[(inunmber-1) -> Reverse[seq] -> seq
                 -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                 -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (seq[[i]] msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                
                 -> oldseq -> newseqcorrected
                 -> newnumber
                
                 ];
            ];
            newseqcorrected
        ,{inunmber,npts}];
        inttab = FIBOF /@ fcodetab;
        xtab = FIBOPhi /@ fcodetab;
        xcodetab = fcodetab;
        Print["-------------" -> nlevels -> Sort[inttab] -> (Sort[inttab]  == Range[0,Fibonacci[nlevels+3]-1 ])];

(*-------------------- y ---------------------*)
        nf = 2;


        (* this works until L4 *)
        msobol[[nf,;;5]] = {1,3,5,8+1,1+4+16};
        rules = {
              "11111111111111" -> "10101010101001",  (* 14 ones *)
              "1111111111111" -> "1010101010101",  (* 13 ones *)
              "111111111111" -> "101010101001",  (* 12 ones *)
              "11111111111" -> "10101010101",  (* 11 ones *)
              "1111111111" -> "1010101001",  (* 10 ones *)
              "111111111" -> "101010101",  (* 9 ones *)
              "11111111" -> "10101001", (* 8 ones *)
              "1111111" -> "1010101", (* 7 ones *)
              "111111" -> "101001", (* 6 ones *)
              "11111" -> "10101", (* 5 ones *)
                 "1111" -> "1001", (* 4 ones *)
              "111" -> "101", (* 3 ones *)     
              "11" -> "01" (* 2 ones *)     
              }; (* 2 ones *)
        Print["-------------------- y: Sobol dir number ind=",ind2," a058947[[ind2]]=", a058947[[ind2]] -> (IntegerDigits @ a058947[[ind2]])];
        Print["init msobol"-> msobol[[nf,;;20]]];
            (*If[ind2 == 2,
                Do[ msobol[[nf,i]] = 1+2^(i-1),{i,4,32}];
            ];
            If[ind2 == 3,
                Do[ msobol[[nf,i]] = 1+2^(i-1),{i,5,32}];
            ];
            If[ind2 == 999,
                Do[ msobol[[nf,i]] = 2^i-1,{i,1,32}];
            ];*)
        Print["new  msobol"-> msobol[[nf,;;20]]];
        Print["msobol"
            -> mf[ Table[Join[ Table[" ",{20-i}], Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]) ], {i,20}] ] 
            -> mf[ Table[Join[Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]),  Table[" ",{20-i}] ], {i,20}] ] 
            ];
        symbols = {{0},{1}};
        Do[
            symbols = Flatten[#,1]& @ (subdivFIBO /@ symbols);
        ,{ilevel,nlevels}];
        npts =  Length[symbols];
        fcodetab = Table[
            seq = symbols[[inunmber]] //Reverse;
            seqlen = Length[seq];
            nn = BitXor @@ Table[ seq[[i]] msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}];
            oldseq = newseq = (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  );
            newseq =  (str2digits @ StringReplace[digits2str[newseq], rules]);
            newseq =  (str2digits @ StringReplace[digits2str[newseq], rules]);
            newseq =  (str2digits @ StringReplace[digits2str[newseq], rules]);
            newseqcorrected = newseq;
            newnumber = FIBOF[newseqcorrected];
(*                If[dbgTxt,
                    Print[(inunmber-1) -> seq 
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (seq[[i]] msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
        
                     -> oldseq -> newseqcorrected
                     -> newnumber -> "|" -> (FIBOF @ (Reverse @ newseqcorrected) ) 
                     -> "{x,y}=" -> {FIBOF @ ( oldseq),newnumber }
                     -> "delta=" -> Abs[(FIBOF @ ( seq) )-newnumber]

                     ];
                ];
                newseqcorrected
            ,{inunmber,npts}];
            
            inttab = FIBOF /@ fcodetab;
*)
            If[ dbgTxt,
                Print[(inunmber-1) -> Reverse[seq] -> seq
                 -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                 -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (seq[[i]] msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                
                 -> oldseq -> newseqcorrected
                 -> newnumber
                
                 ];
            ];
            newseqcorrected
        ,{inunmber,npts}];
        inttab = FIBOF /@ fcodetab;
        ytab = FIBOPhi /@ fcodetab;
        Print["-------------" -> nlevels -> Sort[inttab] -> (Sort[inttab]  == Range[0,Fibonacci[nlevels+3]-1 ])];
        ycodetab = fcodetab;
        xytab = {xtab,ytab}//T;
        xycodetab = {xcodetab,ycodetab}//T;
        grid = getFIBOGrid[nlevels+1];
        Graphics[{{Opacity[.5],grid}, 
            Table[{ptsz,col} = If[ i <= 3,
                                   {.03,Blue},
                                   If[ i <= 8,
                                       {.025,Red},
                                       {0.02,Black}
                                   ]
                               ];
                  {col,PointSize[ptsz], Point @xytab[[i]] ,
                  Text[Style[i-1,36],xytab[[i]],{-1,-1}]}
                ,{i,Length[xytab]}]
            }, ImageSize -> {630,630}]//Print;
        tab = Table[
                {xycodetab[[i,1]],xycodetab[[i,2]],FIBOFinv @ xycodetab[[i,1]],Reverse@xycodetab[[i,1]],Reverse@xycodetab[[i,2]],FIBOF @ xycodetab[[i,1]]}
        ,{i,Length[xycodetab]}];
        Print[tab // mf];
        Print[Sort[tab] // mf];
    (*nodes = 
            egdeLabels = Join[egdeLabels,(digits2str[#] -> If[Last[#] == 0, col1, col3]) & /@ nodes];
            svlst = digits2str /@ vlst;
            sedges = Flatten @ ({digits2str[First[#]] \[DirectedEdge] digits2str[Last[#]]}& /@ (edges) );
             

             tg = TreeGraph[svlst,sedges
                 , GraphLayout -> {"LayeredEmbedding"}
                 , VertexStyle -> egdeLabels
                 , VertexSize -> 0.3
                 , VertexLabels ->  Table[svlst[[i]] -> Placed[
                             Switch[StringLength[svlst[[i]]] 
                                 ,level+1,Style[Rotate[
                                     (StringTake[#,-1]& @svlst[[i]]) <>"  "<>svlst[[i]] <> " = " <> ToString[FIBOstr2nInv[svlst[[i]]]]
                                     ,-Pi/2]]
                                 ,_, (StringTake[#,-1]& @svlst[[i]]) ]
                         , Below], {i,Length[svlst]}]
                 , PlotLabel-> ToString[ipermut -> permuts]
                 , PlotRangePadding -> {{0,0},{1,0}}
                 , ImageSize->{Automatic,400} ];
*)
   ] (* dbgFIBOSobol *)



 (*            (*,"101010" -> "010101"
             ,"101001" -> "100001"
             ,"100101" -> "000001"
             ,"100010" -> "001010"
             ,"100001" -> "101001"
             ,"010101" -> "101010"
             ,"010010" -> "000010"
             ,"010001" -> "010001"
             ,"001010" -> "100010"
             ,"001001" -> "000101"
             ,"000101" -> "001001"
             ,"000010" -> "010010"
             ,"000001" -> "100101"*)

                ,"101010" -> "010001"
             ,"101001" -> "100001"
             ,"100101" -> "000001"
             ,"100010" -> "001010"
             ,"100001" -> "101001"
             ,"010101" -> "010101"
             ,"010010" -> "000010"
             ,"010001" -> "101010"
             ,"001010" -> "100010"
             ,"001001" -> "000101"
             ,"000101" -> "001001"
             ,"000010" -> "010010"
             ,"000001" -> "100101"

             ,"1010" -> "0001"
             ,"1001" -> "1001"
             ,"0101" -> "0010"
             ,"0010" -> "0101"
             ,"0001" -> "1010"

                ,"01" -> "10"
             ,"10" -> "01"

            (* ,"1010" -> "1010"
             ,"1001" -> "0001"
             ,"0101" -> "0010"
             ,"0010" -> "0101"
             ,"0001" -> "1001"

                ,"01" -> "01"
             ,"10" -> "10"*)
*)

(* substitutions *)

            (* ,"0001" -> "1010"
             ,"0010" -> "0010"
             ,"0101" -> "0101"
             ,"1001" -> "1001"
             ,"1010" -> "0001"
             
             (*,"0001" -> "0101"
             ,"0101" -> "0001"
             ,"1001" -> "1001"
             
             ,"001" -> "101"
             ,"101" -> "001"*)
             
             (*,"0001" -> "1001"
             ,"0101" -> "0101"
             ,"1001" -> "0001"
             
             ,"001" -> "001"
             ,"101" -> "101"*)
             
             
              
                ,"01" -> "10"
             ,"10" -> "01"*)

(*
mx = {{0, 1, 1, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}, {1, 0, 0, 0}}    usefulEVecDir/Max[usefulEVecDir] -> {1., 0.5497, 0.671044, 0.819173}
mx = {{2, 1, 1, 1}, {1, 1, 1, 0}, {0, 1, 2, 1}, {1, 0, 1, 2}}     usefulEVecDir/Max[usefulEVecDir] -> {1., 0.5497, 0.671044, 0.819173}
mx = {{1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 0, 1, 1, 0}, {0, 0, 1, 2, 1}, {1, 0, 0, 1, 2}}     usefulEVecDir/Max[usefulEVecDir] -> {1., 1., 0.5497, 0.671044, 0.819173}
mx = {{1,1,1,0,1},{1,1,0,0,0},{1,1,1,1,0},{1,1,1,2,1},{1,1,0,1,2}} usefulEVecDir/Max[usefulEVecDir] -> {0.50494, 0.166103, 0.5497, 1., 0.819173}
mx = {{1,1,1,0,0,1},{1,1,0,0,0,0},{1,1,1,1,0,0},{1,1,1,1,1,1},{1,1,1,1,1,1},{1,1,0,1,0,2}} usefulEVecDir/Max[usefulEVecDir] -> {0.50494, 0.166103, 0.5497, 1., 1., 0.819173}
mx = {{1,1,1,1,1,1},{1,1,1,1,1,1},{1,0,1,1,1,0},{0,0,1,1,1,1},{0,0,0,1,1,0},{1,0,0,1,1,2}} usefulEVecDir/Max[usefulEVecDir] -> {1., 1., 0.5497, 0.50494, 0.166103, 0.819173}

mx = {{1,1,1,1,1,1,0},{1,1,1,1,1,1,0},{1,0,1,1,1,0,0},{0,0,1,1,1,1,0},{0,0,0,1,1,0,0},{1,0,0,1,1,1,1},{1,0,0,1,1,1,1}} usefulEVecDir/Max[usefulEVecDir] -> {1., 1., 0.5497, 0.50494, 0.166103, 0.819173, 0.819173}


prodKenyon2tiles[tiles_] :=
    Module[ {i, res = {}, type, refPt},
        Do[{type, refPt} = tiles[[i]];
           Switch[type
               , typeAB, res = Join[res, {{typeBC, sc refPt}}]
            , typeAC, res = Join[res, {{typeBD, sc refPt}}]
            , typeAD, res = Join[res, {{typeAB, sc refPt - avec}}];(*AA skipped*)
            , typeBC, res = Join[res, {{typeCD, sc refPt}}]
            , typeBD, res = Join[res, {{typeBC, sc refPt + sc dvec}}];
                        res = Join[res, {{typeAC, sc refPt + sc avec + sc dvec}}];
            ,typeCD, res = Join[res, {{typeBD, sc refPt + sc dvec}}];
                        res = Join[res, {{typeAD, sc refPt + sc avec + sc dvec}}];];, {i, 
        Length[tiles]}];
        res
    ]
mx = {
    {0, 0, 0, 1, 0, 0}, 
    {0, 0, 0, 0, 1, 0}, 
    {1, 0, 0, 0, 0, 0}, 
    {0, 0, 0, 0, 0, 1},
    {0, 1, 0, 1, 0, 0}, 
    {0, 0, 1, 0, 1, 0}};
z[v_] := (res = mx.v; Print[res -> Total[v]]; res)
w[v_] := (res = T[mx].v; Print[res -> Total[v]] res)
v = {1, 1, 1, 1, 2, 1};
v = z[v];
v = z[v];
v = z[v];
v = z[v];
v = z[v];
v = z[v];
v = z[v];
v = z[v];
v = {1, 1, 1, 1, 2, 1};
v = w[v];
v = w[v];
v = w[v];
v = w[v];
v = w[v];
v = w[v];
v = w[v];
v = w[v];*)



aa1Type = 11;
aa2Type = 12;
aa3Type = 13;
aa4Type = 14;
ab1Type = 21;
ab2Type = 22;
ba1Type = 31;
ba2Type = 32;
bb1Type = 41;

subdivideTile[tile_] :=
    Module[ {(*sz,xPermuts,yPermuts,foursets,x,y,i,ix,iy, newx, newy*)},
        {tileType, level, tileRefPt, tileSamplingPts} = tile;
        Switch[tileType
            ,ba1Type,
                tileRefPtBL = {};
        ]
    ] (* subdivideTile *)

getFIBOTiles2D[level_] :=
    Module[ {(*sz,xPermuts,yPermuts,foursets,x,y,i,ix,iy, newx, newy*)},
        If[ level == 0,
            Return[{ {{0,0}} }]
        ];
        {level,tileRefPt,tileRefPt} = tile;
        If[ level == 0,
            Return[{ {xyType}, {{0,0}} }]
        ];
        foursets = Table[getFibpSet2D[level-1,randomizeFlag], {iy,2}, {ix,2}];
        sz = Length[ foursets[[1,1]] ];
        {xPermuts,yPermuts} = RandomChoice @ {
                (*{Flatten @ Table[RandomChoice[{{1,1},{1,1}}],{sz}], Flatten @ Table[RandomChoice[{{1,1},{1,1}}],{sz}]},*)
                (*{Flatten @ Table[RandomChoice[{{1,1},{1,1}}],{sz}], Flatten @ Table[RandomChoice[{{0,0},{0,0}}],{sz}]},*)
                {Flatten @ Table[RandomChoice[{{0,0},{0,0}}],{sz}], Flatten @ Table[RandomChoice[{{1,1},{1,1}}],{sz}]}
        };
        Flatten[#,2]& @ Table[
             {x,y} = foursets[[iy,ix,i]];
             newx = 2(ix-1) sz + 2 IntegerPart[x] + BitXor[xPermuts[[(ix-1) sz + IntegerPart[x] + 1]] , (iy-1)];
             newy = 2(iy-1) sz + 2 IntegerPart[y] + BitXor[yPermuts[[(iy-1) sz + IntegerPart[y] + 1]], (ix-1)];
             If[ randomizeFlag,
                 {newx,newy} + {RandomReal[],RandomReal[]},
                 {newx,newy}
             ]
        ,{iy,2}, {ix,2}, {i,sz}]
    ] (* getFibpSet2D *)

getFIBOLDS2Dgl[level_,tiles_] :=
    Module[ {},
        codeTileSamplingPtsX = First /@ Flatten[(Last /@ tiles), 1];
        codeTileSamplingPtsY = Last /@ Flatten[(Last /@ tiles), 1];
        ptsXY = {FIBOPhi[#[[1]]],FIBOPhi[#[[2]]]}& /@ T[{codeTileSamplingPtsX, codeTileSamplingPtsY}];
        {
            getFIBOGrid[2 level  ]
            ,PointSize[.05]
            ,Point /@ ptsXY
        }
    ] (* getFIBOLDS2Dgl *)

demoFIBOLDS2D[] :=
    Module[ {(*sz,xPermuts,yPermuts,foursets,x,y,i,ix,iy, newx, newy*)},
    
    (*tiles = {
        {aa1Type, level, {{0},{0}}, {{0},{0}} }
    };*)
        level = 1;
        tiles = {
            {aa1Type, level, {{0,0},{0,0}}, {{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}}} }
        };
        Graphics[
            getFIBOLDS2Dgl[level,tiles]
            , ImageSize -> {1024,1024}
        ]//Print;
    ] (* demoFIBOLDS2D *)

(*---------------------------- binaryAALDS -------------------------*)

getDiscrepancy2Dexact[pts_] :=
    Module[ {execString},
        Export["tmp/tmp"<>pid<>".dat",N[pts]];
        execString = Switch[systemID
			,"Mac", "stk-discrepancy -i tmp/tmp"<>pid<>".dat -o tmp/res"<>pid<>".dat -m star -I 1 > /dev/null"
			,_, 	"discrepancy -i tmp/tmp"<>pid<>".dat -o tmp/res"<>pid<>".dat -d 2 > /dev/null" (* "Linux" : OpenMP version *)
		];
        Run[execPrefix<>execString];
        Last @ (Flatten@Import["tmp/res"<>pid<>".dat"])
    ] (* getDiscrepancy2Dexact *)

subdivBinary[symbol_] :=
    {Join[symbol,{0}],Join[symbol,{1}]}

subdivBinaryWithPermut[symbol_,permut_] :=
    If[ permut == 0,
        {Join[symbol,{0}],Join[symbol,{1}]},
        {Join[symbol,{1}],Join[symbol,{0}]}
    ]

getBinaryFrac[code_] :=
    FromDigits[code, 2]/2^Length[code]

getBinaryFracXY[xycode_] :=
    {FromDigits[xycode[[1]], 2]/2^Length[xycode[[1]]],FromDigits[xycode[[2]], 2]/2^Length[xycode[[2]]]}
getBinaryIntXY[xycode_] :=
    {FromDigits[xycode[[1]], 2],FromDigits[xycode[[2]], 2]}

getBinaryGrid[nlevels_:2] :=
    Module[ {gl,symbols, coltab, delta,deltax,deltay,cur,curx,cury,symbols1,symbols2,txtcoltab,hlevels},
        hlevels = Floor[nlevels/2];
        coltab = {(*Orange*)Yellow, Cyan, Blue,Gray, Darker@Red, Orange,Blue,Red,Yellow};
        coltab = {Yellow, Red, Cyan, Blue, Magenta, Green, Black, Red, Cyan, Blue, Magenta, Green, Black};
        txtcoltab = {Red, Blue, Green, Orange};
        symbols = {{}};
        gl = {};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[1/2^(1.2 ilevel+4)]}];
            symbols = Flatten[#,1]& @ (subdivBinary /@ symbols);
            cur = 0;
            Do[
                delta = 1/2^(ilevel);
                AppendTo[gl, {Line[{{0,cur},{1,cur}}], Line[{{0,cur+delta},{1,cur+delta}}]}];
                AppendTo[gl, {Line[{{cur,0},{cur,1}}], Line[{{cur+delta,0},{cur+delta,1}}]}];
                cur += delta;
            ,{i,Length[symbols]}]
        ,{ilevel,nlevels}];
        cury = 0;
        Do[
            deltay = 1/2^(nlevels);
            curx = 0;
            Do[
                deltax = 1/2^(nlevels);
                curx += deltax;
            ,{ix,Length[symbols]}];
            cury += deltay;
        ,{iy,Length[symbols]}];
        If[ hlevels < 4,
            symbols1 = #[[;;hlevels]]& /@ symbols;
            symbols2 = #[[hlevels+1;;]]& /@ symbols;
            AppendTo[gl, {Black,Opacity[1]
                ,Table[
                        Text[ Column[Join[{
                                 Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"        " ,Pi/2],Bold,Black]
                                }
                                ,Reverse@Table[Style[  Rotate[ToString@symbols1[[i,j]],Pi/2] ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                            ]
                        ], {getBinaryFrac@symbols[[i]],0},{0,1}]
                    , {i,Length[symbols]}]
            
            
                ,Table[
                        
                        Text[ Row[Join[
                                Table[Style[  ToString[symbols1[[i,j]]]<>" " ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                                 ,{ Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"       " ,0],Bold,Black]
                        } ] ], {0,getBinaryFrac@symbols[[i]]},{1,0}]
                    , {i,Length[symbols]}]
            
                 } ];
        ];
        (*Graphics[gl,Axes->False(*,ImageSize->If[nlevels > 2, 2^nlevels{20,20}, {150,150}]*)  ]*)
        gl
    ] (* getBinaryGrid*)

goodBinarySetQ[codes_] :=
    Module[ {level,testTuples,dx,dy,xodes,ycodes},
        level = Length[First@(First@codes)];
        testTuples = {Range[0, level], level - Range[0, level]} // T;
        And @@ Table[
            {dx,dy} = testTuples[[i]];
            Length[Union[({xodes,ycodes} = #;
                          {Take[xodes,dx],Take[ycodes,dy]} & /@ #) & /@ codes]] == 2^level
        ,{i,Length[testTuples]}]
    ]

getBasicSubdivTypeBinary[] :=
    Module[ {},
        grid2 = { Thickness[.03],Orange,Table[{Line[{{0,i},{2,i}}/2],Line[{{i,0},{i,2}}/2]},{i,0,2,1}] };
        grid4 = { Thickness[.01],LightGray,Table[{Line[{{0,i},{4,i}}/4],Line[{{i,0},{i,4}}/4]},{i,0,4,1}] };
        grid8 = { Thickness[.01],Orange,Table[{Line[{{0,i},{8,i}}/8],Line[{{i,0},{i,8}}/8]},{i,0,8,1}] };
        grid16 = { Thickness[.003],Red,Table[{Line[{{0,i},{16,i}}/16],Line[{{i,0},{i,16}}/16]},{i,0,16,1}] };
        grid32 = { Thickness[.003],Orange,Table[{Line[{{0,i},{32,i}}/32],Line[{{i,0},{i,32}}/32]},{i,0,32,1}] };
        grid64 = { Thickness[.001],Blue,Table[{Line[{{0,i},{64,i}}/64],Line[{{i,0},{i,64}}/64]},{i,0,64,1}] };
        grid256 = { Thickness[.0002],Cyan,Table[{Line[{{0,i},{256,i}}/256],Line[{{i,0},{i,256}}/256]},{i,0,256,1}] };
        tup = Tuples[IntegerDigits[#, 2, 2] & /@ Range[0, 3], 2];
        t = Tuples[tup, 4];
        sel = Union@(Union/@Select[t, goodBinarySetQ[#] &]);
        tab = Table[
            codes = sel[[i]];
            pts = (getBinaryIntXY /@ codes);
            pts
        ,{i,Length[sel]}];
        basicSubdivTabBinary = Table[
            Select[tab,MemberQ[#,{ix,iy}]& ];
        ,{ix,0,3},{iy,0,3}];
        basicSubdivTabBinaryCodes = Table[
            sel = Select[tab,MemberQ[#,{ix,iy}]& ];
            Table[    ({IntegerDigits[#[[1]],2,2],IntegerDigits[#[[2]],2,2]})& /@ sel[[i]]
                ,{i,Length[sel]}]
        ,{ix,0,3},{iy,0,3}];
        Do[
            codes = basicSubdivTabBinary[[iy+1,ix+1]];
            Table[
                grect = Rectangle[#/4,#/4+1/4] & /@ codes[[i]];
                Graphics[{grid2,grid4,Gray, grect}, ImageSize->{100,100},PlotLabel->{ix,iy} -> {ix,iy}+1] 
            ,{i,Length[codes]}]//Print;
        ,{iy,0,3},{ix,0,3}];
    ]

showbasicSubdivTabBinary[] :=
    Do[
        codes = basicSubdivTabBinary[[iy+1,ix+1]];
        Table[
            grect = Rectangle[#/4,#/4+1/4] & /@ codes[[i]];
            Graphics[{getBinaryGrid[2],Gray, grect}, ImageSize->{100,100},PlotLabel->{ix,iy} -> {ix,iy}+1] 
        ,{i,Length[codes]}]//Print;
    ,{ix,0,3},{iy,0,3}]
        
basicSubdivTabBinary =
    {{  {{{0,0},{1,2},{2,1},{3,3}},{{0,0},{1,2},{2,3},{3,1}},{{0,0},{1,3},{2,1},{3,2}},{{0,0},{1,3},{2,2},{3,1}}},
        {{{0,1},{1,2},{2,0},{3,3}},{{0,1},{1,2},{2,3},{3,0}},{{0,1},{1,3},{2,0},{3,2}},{{0,1},{1,3},{2,2},{3,0}}},
        {{{0,2},{1,0},{2,1},{3,3}},{{0,2},{1,0},{2,3},{3,1}},{{0,2},{1,1},{2,0},{3,3}},{{0,2},{1,1},{2,3},{3,0}}},
        {{{0,3},{1,0},{2,1},{3,2}},{{0,3},{1,0},{2,2},{3,1}},{{0,3},{1,1},{2,0},{3,2}},{{0,3},{1,1},{2,2},{3,0}}}},
        {{{{0,2},{1,0},{2,1},{3,3}},{{0,2},{1,0},{2,3},{3,1}},{{0,3},{1,0},{2,1},{3,2}},{{0,3},{1,0},{2,2},{3,1}}},
        {{{0,2},{1,1},{2,0},{3,3}},{{0,2},{1,1},{2,3},{3,0}},{{0,3},{1,1},{2,0},{3,2}},{{0,3},{1,1},{2,2},{3,0}}},
        {{{0,0},{1,2},{2,1},{3,3}},{{0,0},{1,2},{2,3},{3,1}},{{0,1},{1,2},{2,0},{3,3}},{{0,1},{1,2},{2,3},{3,0}}},
        {{{0,0},{1,3},{2,1},{3,2}},{{0,0},{1,3},{2,2},{3,1}},{{0,1},{1,3},{2,0},{3,2}},{{0,1},{1,3},{2,2},{3,0}}}},
        {{{{0,1},{1,2},{2,0},{3,3}},{{0,1},{1,3},{2,0},{3,2}},{{0,2},{1,1},{2,0},{3,3}},{{0,3},{1,1},{2,0},{3,2}}},
        {{{0,0},{1,2},{2,1},{3,3}},{{0,0},{1,3},{2,1},{3,2}},{{0,2},{1,0},{2,1},{3,3}},{{0,3},{1,0},{2,1},{3,2}}},
        {{{0,0},{1,3},{2,2},{3,1}},{{0,1},{1,3},{2,2},{3,0}},{{0,3},{1,0},{2,2},{3,1}},{{0,3},{1,1},{2,2},{3,0}}},
        {{{0,0},{1,2},{2,3},{3,1}},{{0,1},{1,2},{2,3},{3,0}},{{0,2},{1,0},{2,3},{3,1}},{{0,2},{1,1},{2,3},{3,0}}}},
        {{{{0,1},{1,2},{2,3},{3,0}},{{0,1},{1,3},{2,2},{3,0}},{{0,2},{1,1},{2,3},{3,0}},{{0,3},{1,1},{2,2},{3,0}}},
        {{{0,0},{1,2},{2,3},{3,1}},{{0,0},{1,3},{2,2},{3,1}},{{0,2},{1,0},{2,3},{3,1}},{{0,3},{1,0},{2,2},{3,1}}},
        {{{0,0},{1,3},{2,1},{3,2}},{{0,1},{1,3},{2,0},{3,2}},{{0,3},{1,0},{2,1},{3,2}},{{0,3},{1,1},{2,0},{3,2}}},
        {{{0,0},{1,2},{2,1},{3,3}},{{0,1},{1,2},{2,0},{3,3}},{{0,2},{1,0},{2,1},{3,3}},{{0,2},{1,1},{2,0},{3,3}}}}};
basicSubdivTabBinaryCodes =
    {{{{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,1}}}},
    {{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,0}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,0}}}},
    {{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{1,1}},{{1,1},{0,0}}}},
    {{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{1,0}},{{1,1},{0,1}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{1,0}},{{1,1},{0,0}}}}},
    {{{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{1,0}},{{1,1},{0,1}}}},
    {{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{1,1}},{{1,1},{0,0}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{1,0}},{{1,1},{0,0}}}},
    {{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,0}}}},
    {{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,1}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,0}}}}},
    {{{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,0}}}},
    {{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,0}}}},
    {{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,1}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,0}}},{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{1,0}},{{1,1},{0,1}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{1,0}},{{1,1},{0,0}}}},
    {{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,0}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{1,1}},{{1,1},{0,0}}}}},
    {{{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,0}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,0}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{1,1}},{{1,1},{0,0}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{1,0}},{{1,1},{0,0}}}},
    {{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,1}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{1,0}},{{1,1},{0,1}}}},
    {{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,0}}}},
    {{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}}}}};

allSubdivTabBinaryCodes =
    {{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,1}}},
    {{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,0}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,0}}},
       {{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{1,1}},{{1,1},{0,0}}},
    {{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{1,0}},{{1,1},{0,1}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{1,0}},{{1,1},{0,0}}}};

    
basicPatterns4x4 =
    {{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,1}}},
    {{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,0}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,0}}},
    {{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{1,1}},{{1,1},{0,0}}},
    {{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{1,0}},{{1,1},{0,1}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{1,0}},{{1,1},{0,0}}}};
basicPatterns4x4base4 = {{{0,0},{1,2},{2,1},{3,3}},{{0,0},{1,2},{2,3},{3,1}},{{0,0},{1,3},{2,1},{3,2}},{{0,0},{1,3},{2,2},{3,1}},{{0,1},{1,2},{2,0},{3,3}},{{0,1},{1,2},{2,3},{3,0}},{{0,1},{1,3},{2,0},{3,2}},
    {{0,1},{1,3},{2,2},{3,0}},{{0,2},{1,0},{2,1},{3,3}},{{0,2},{1,0},{2,3},{3,1}},{{0,2},{1,1},{2,0},{3,3}},{{0,2},{1,1},{2,3},{3,0}},{{0,3},{1,0},{2,1},{3,2}},{{0,3},{1,0},{2,2},{3,1}},{{0,3},{1,1},{2,0},{3,2}},{{0,3},{1,1},{2,2},{3,0}}};


(*getBasicSetRandomX2[{xCode_,yCode_}]:=basicSubdivTabBinaryCodes[[2 FromDigits[xCode,2]+1,2 FromDigits[yCode,2]+1,RandomChoice[{1, 2, 3, 4}]]]*)
getBasicSetRandom[{xCode_,yCode_}] :=
    basicSubdivTabBinaryCodes[[FromDigits[xCode,2]+1,FromDigits[yCode,2]+1,    1]]
getBasicSetFirst[{xCode_,yCode_}] :=
    basicSubdivTabBinaryCodes[[FromDigits[xCode,2]+1,FromDigits[yCode,2]+1,RandomChoice[{1, 2, 3, 4}]]]
codes2int[{xCode_,yCode_}] :=
    {FromDigits[xCode,2],FromDigits[yCode,2]}
codes2xy[{xCode_,yCode_}] :=
    {FromDigits[xCode,2],FromDigits[yCode,2]} / 2^Length[xCode]

getRandomBasicPattern4x4[] :=
    RandomChoice@basicPatterns4x4
getRandomBasicPattern4x4[{xCode_,yCode_}] :=
    basicSubdivTabBinaryCodes[[FromDigits[xCode,2]+1,FromDigits[yCode,2]+1,RandomChoice[{1, 2, 3, 4}]]]

(*subdivBinary2D[{xCode_,yCode_},n_] :=
    Module[ {len, halflen,patternindx,patternindy,extraCodes,extraCodesx,extraCodesy,xFirstHalf,yFirstHalf,restx,resty,newxCode,newyCode,xshiftind,yshiftind,xshiftval,yshiftval},
        {newxCode,newyCode} = {Join[xCode,{0,0}],Join[yCode,{0,0}]};
        len = Length[xCode];
        halflen = len/2;
        {patternindx,patternindy} = Take[#,{halflen+1,halflen+2}]& /@ {newxCode,newyCode};
        extraCodes = getBasicSetRandom[{patternindx,patternindy}];
        Table[
            
Switch[halflen
,1,
            {extraCodesx,extraCodesy} = extraCodes[[i]];
            xFirstHalf = Join[Take[newxCode,(halflen)], extraCodesx]; 
            yFirstHalf = Join[Take[newyCode,(halflen)], extraCodesy];
             {xshiftind,yshiftind} = (1+ FromDigits[#,2]&@ (Take[ #,-(halflen+2)])) & /@ {xFirstHalf,yFirstHalf};
            {xshiftval,yshiftval} = {xshiftmask[[xshiftind]],yshiftmask[[yshiftind]]};
            restx = IntegerDigits[#,2,(halflen)]& @ BitXor[FromDigits[#,2]&@Take[Reverse@yCode,-(halflen)], xshiftval ];
            resty = IntegerDigits[#,2,(halflen)]& @ BitXor[FromDigits[#,2]&@Take[Reverse@xCode,-(halflen)], yshiftval ];
,_,
            {extraCodesx,extraCodesy} = extraCodes[[i]];
            xFirstHalf = Join[Take[newxCode,(halflen)], extraCodesx]; 
            yFirstHalf = Join[Take[newyCode,(halflen)], extraCodesy];
             {xshiftind,yshiftind} = (1+ 2 FromDigits[#,2]&@ (Take[ #,-(halflen+2)])) & /@ {xFirstHalf,yFirstHalf};
            {xshiftval,yshiftval} = {xshiftmask[[xshiftind]],yshiftmask[[yshiftind]]};
            restx = IntegerDigits[#,2,(halflen)]& @ BitXor[FromDigits[#,2]&@Take[Reverse@yCode,-(halflen)], xshiftval ];
            resty = IntegerDigits[#,2,(halflen)]& @ BitXor[FromDigits[#,2]&@Take[Reverse@xCode,-(halflen)], yshiftval ];
            (*restx = resty =Table[0,{halflen}]*);

];

            Print[{n,i} -> halflen -> (mf@{xCode,yCode}) -> (mf@{xFirstHalf,yFirstHalf}) -> (mf@{Join[xFirstHalf,restx],Join[yFirstHalf,resty]}) 
                -> {xshiftind,yshiftind}
                -> {xshiftval,yshiftval}
                -> {Take[Reverse@yCode,-(halflen)],FromDigits[#,2]&@Take[Reverse@yCode,-(halflen)], xshiftval}
                -> (mf@{restx,resty})];
            
            {Join[xFirstHalf,restx],Join[yFirstHalf,resty]}
        ,{i,Length[extraCodes]}]
    ] (* subdivBinary2DVar1 *)
*)

(*subdivBinary2D[{xCode_,yCode_},n_] :=
    Module[ {len, halflen,patternindx,patternindy,extraCodes,extraCodesx,extraCodesy,xFirstHalf,yFirstHalf,restx,resty,newxCode,newyCode,res},
        {newxCode,newyCode} = {Join[xCode,{0,0}],Join[yCode,{0,0}]};
        len = Length[xCode];
        halflen = len/2;
        {patternindx,patternindy} = Take[#,{halflen+1,halflen+2}]& /@ {newxCode,newyCode};
        (*extraCodes = getBasicSetRandom[{patternindx,patternindy}];*)
        extraCodes = getRandomBasicPattern4x4[];
        Table[
            {extraCodesx,extraCodesy} = extraCodes[[i]];
            {xFirstHalf,yFirstHalf} = Take[#,halflen]& /@ {xCode,yCode};
            {restx,resty} = Take[Reverse[#],-halflen]& /@ {yCode,xCode};
            res = {Join[xFirstHalf,extraCodesx,restx],Join[yFirstHalf,extraCodesy,resty]};
            (*Print[{n,i} -> halflen -> (mf@{xCode,yCode}) -> (mf@{extraCodesx,extraCodesy}) -> res ];*)
            res
        ,{i,Length[extraCodes]}]
    ] (* subdivBinary2DVar1 *)
pocAALDSBinary2D[nlevels_:3] :=
    Module[ {},
         codes = getBasicSetRandom[{{0,0}, {0,0}}];
        Do[
            showGraphics = If[ilevel <=4, True, False];
            pts = codes2int /@     codes;
            npts = Length[pts];
            npts = 4^ilevel;
            If[showGraphics, Graphics[{
                    getBinaryGrid[2 ilevel]
                        , Black,Rectangle[#,#+1/npts]& /@ (pts/npts)
                        ,Red,Table[Text[Style[i,24],((pts)/npts)[[i]],{-1,-1}],{i,npts}]
                        }
                    ,PlotLabel -> testHierarchicalStratified2D[pts]
                    ,ImageSize -> ilevel/3 {1024,1024} (*{750,750}*)
                    (*, PlotLabel->{ilevel,getptsMinDist12[pts]}*) ]//Print];
            Print[ilevel -> Length[pts] -> Union[Differences[ Sort[First /@ pts]]] -> getDiscrepancy2Dexact[ pts/npts]];

            If[ilevel != nlevels, 
                xshiftmask = Table[FromDigits[#,2]& @ Table[RandomChoice[{1,1}],{ ilevel+1}],{2^(2 ilevel+1)}];
                yshiftmask = Table[FromDigits[#,2]& @ Table[RandomChoice[{1,1}],{ ilevel+1}],{2^(2 ilevel+1)}];
                Do[
                    {xCode,yCode} = codes[[i]];

                    {xshiftind,yshiftind} = (1 + 2 FromDigits[#,2])& /@ {xCode,yCode}; 
                    {xshiftval,yshiftval} = FromDigits[#,2]& /@ (Take[Reverse[#],-ilevel]& /@ {yCode,xCode});
                    {xshiftmask[[xshiftind]],yshiftmask[[yshiftind]]} = {xshiftval,yshiftval};
                    (*Print[i,mf@{xCode,yCode} -> {xshiftind,yshiftind} -> {xshiftval,yshiftval}]*);
                ,{i,Length[codes]}];
                (*Print[mf /@ xshiftmask]*);
                codes = Flatten[#, 1] & @(subdivBinary2D /@ codes)
            ];
        ,{ilevel,1,nlevels}];
    ] (* pocAALDSBinary2D *)
         {lastdigitsindx,lastdigitsindy} = Take[#,-2]& /@ {xCode,yCode};
         lastdigits = getBasicSetRandom[{lastdigitsindx, lastdigitsindy}];
         {newxCode,newyCode} = {Join[xCode,{0,0}],Join[yCode,{0,0}]};
        {patternindx,patternindy} = Take[#,{halflen+1,halflen+2}]& /@ {newxCode,newyCode};
        extraCodes = getBasicSetRandom[{patternindx,patternindy}];
        Table[
            {extraCodesx,extraCodesy} = extraCodes[[i]];
            {lastdigitsx,lastdigitsy} = lastdigits[[i]];
            newxCode[[halflen+1;;halflen+2]] = extraCodesx;
            newyCode[[halflen+1;;halflen+2]] = extraCodesy;
            newxCode[[halflen+3;;]] = Reverse @ yCode;
            newyCode[[halflen+3;;]] = Reverse @ xCode;
            res = {Join[xCode,extraCodesx,restx],Join[yFirstHalf,extraCodesy,resty]};
             Print[(i -> mf@{xCode,yCode}) -> (mf @ {extraCodesx,extraCodesy}) -> (mf @ {lastdigitsx,lastdigitsy}) -> (mf @ {newxCode,newyCode}) ];
             {newxCode,newyCode}
        ,{i,Length[extraCodes]}]

DBGsubdivBinary2D[{xCode_,yCode_}] :=
    Module[ {halflen=Length[xCode]/2,len=Length[xCode],extraCodes,xFirstHalf,yFirstHalf,restx,resty,newxCode,newyCode,patternindx,patternindy,res,resx,resy},
         {newxCode,newyCode} = {Join[xCode,{0,0}],Join[yCode,{0,0}]};
        {patternindx,patternindy} = Take[#,{halflen+1,halflen+2}]& /@ {newxCode,newyCode};
        extraCodes = getBasicSetRandom[{patternindx,patternindy}];
        {xFirstHalf,yFirstHalf} = Take[#,halflen]& /@ {xCode,yCode};
        {restx,resty} = Take[#,-halflen]& /@ {xCode,yCode} ;
        (*res = {Join[xFirstHalf,#[[1]],restx],Join[yFirstHalf,#[[2]],resty]}& /@ extraCodes;   *)
        res = Table[
            {resx,resy} = {newxCode,newyCode};
            resx[[halflen+1;;halflen+2]] = extraCodes[[i,1]];
            resy[[halflen+1;;halflen+2]] = extraCodes[[i,2]];
            (*resx[[len+1;;len+2]] = Reverse @ (BitXor @@ {resy[[;;2]], xshiftmask[[ 1 + FromDigits[resx[[;;len]],2] ]] });
            resy[[len+1;;len+2]] = Reverse @ (BitXor @@ {resx[[;;2]], yshiftmask[[ 1 + FromDigits[resy[[;;len]],2] ]] });*)

            resx[[halflen+3;;len+2]] = Reverse @ resy[[;;halflen]];
            resy[[halflen+3;;len+2]] = Reverse @ resx[[;;halflen]];

            (*Print[i -> resy[[;;halflen]] ->  xshiftmask[[ 1 + FromDigits[resx[[;;len]],2] ]] -> resx[[halflen+3;;len+2]] ];*)
            {resx,resy}
            ,{i,Length[extraCodes]}];   
        res 
     ] (* DBGsubdivBinary2D *)
*)

(* subdivBinary2DVar1[{xCode_,yCode_}] := 
    Module[ {halflen=Length[xCode]/2,extraCodes,xFirstHalf,yFirstHalf,restx,resty},
        {xFirstHalf,yFirstHalf} = Take[#,halflen]& /@ {xCode,yCode};
        (*{restx,resty} = Take[Reverse[#],-halflen]& /@ {yCode,xCode};*)
        {restx,resty} = Take[#,-halflen]& /@ {xCode,yCode} ;
        extraCodes = getRandomBasicPattern4x4[];
        {Join[xFirstHalf,#[[1]],restx],Join[yFirstHalf,#[[2]],resty]}& /@ extraCodes
    ] (* subdivBinary2DVar1 *)*)


(*subdivBinary2D[{order_,{xCode_,yCode_}}] :=
    Module[ {halflen=Length[xCode]/2,extraCodes,xFirstHalf,yFirstHalf,xind,yind,dx,dy,res,newxCode,newyCode,patternindx,patternindy},
         {newxCode,newyCode} = {Join[xCode,{0,0}],Join[yCode,{0,0}]};
        {patternindx,patternindy} = FromDigits[#,2]& /@ (Take[#,{halflen+1,halflen+2}]& /@ {newxCode,newyCode});
        extraCodes = getGoodOrderedPattern[1,patternindx,patternindy];
        {xFirstHalf,yFirstHalf} = Take[#,halflen]& /@ {xCode,yCode};
        (*{restx,resty} = Take[Reverse[#],-halflen]& /@ {yCode,xCode};    (* possibly xor-ring with masks... *)*)
        (*{restx,resty} = Take[#,-halflen]& /@ {xCode,yCode};    (* possibly xor-ring with masks... *)*)
        {dx,dy} = Take[#,-halflen]& /@ {xCode,yCode};
        Table[
            If[halflen == 1,
                xind = Join[xFirstHalf,extraCodes[[i,2,1,1;;1]] ];
                yind = Join[yFirstHalf,extraCodes[[i,2,2,1;;1]] ];
            ,(*ELSE*)
                {xind,yind} = {xCode,yCode};
                xind[[halflen+1;;halflen+2]] = extraCodes[[i,2,1 ]];
                yind[[halflen+1;;halflen+2]] = extraCodes[[i,2,2 ]];
                dx[[halflen - 1;;]] = BitXor@@{xshiftmask[[ 1 + FromDigits[#,2]& @ xind]], Reverse @ (Take[#,2]& @ yFirstHalf)}; 
                dy[[halflen - 1;;]] = BitXor@@{yshiftmask[[ 1 + FromDigits[#,2]& @ yind]], Reverse @ (Take[#,2]& @ xFirstHalf)}; 
                Print[i -> (FromDigits[#,4]& @ order) -> xCode -> xind -> (1 + FromDigits[#,2]& @ xind) -> {xshiftmask[[ 1 + FromDigits[#,2]& @ xind]], Reverse @ (Take[#,2]& @ yFirstHalf)} -> dx ];
                Print[i -> (FromDigits[#,4]& @ order) -> yCode -> yind -> (1 + FromDigits[#,2]& @ yind) -> {yshiftmask[[ 1 + FromDigits[#,2]& @ yind]], Reverse @ (Take[#,2]& @ xFirstHalf)} -> dx ];
            ];
            res = {Join[extraCodes[[i,1]],order], {Join[xFirstHalf,extraCodes[[i,2,1]],dx], Join[yFirstHalf,extraCodes[[i,2,2]],dy]}};
            Print[{order,{xCode,yCode}} -> res];
            res
        ,{i,Length[extraCodes]}]
    ]
*)


(*subdivBinary2D[{order_,{xCode_,yCode_}}] :=
    Module[ {halflen=Length[xCode]/2,extraCodes,xFirstHalf,yFirstHalf,taily,tailx,newxCode,newyCode,patternindx,patternindy,dx,dy,res},
         {newxCode,newyCode} = {Join[xCode,{0,0}],Join[yCode,{0,0}]};
        {patternindx,patternindy} = FromDigits[#,2]& /@ (Take[#,{halflen+1,halflen+2}]& /@ {newxCode,newyCode});
        extraCodes = getGoodOrderedPattern[1,patternindx,patternindy];
        
        {xFirstHalf,yFirstHalf} = Take[#,halflen]& /@ {xCode,yCode};
        (*{tailx,taily} = Take[#,-halflen]& /@ {xCode,yCode};*)
        {tailx,taily} = (Reverse /@ {yFirstHalf,xFirstHalf});
        (*Print[{order,{xCode,yCode}} -> {tailx,taily}];*)
        res = Table[{
            Join[extraCodes[[i,1]],order], 
                {Join[xFirstHalf,extraCodes[[i,2,1]],tailx], 
                 Join[yFirstHalf,extraCodes[[i,2,2]],taily]}
        },{i,Length[extraCodes]}];
        res
    ]
*)


OLDsubdivBinary2D[{order_,{xCode_,yCode_}}] :=
    Module[ {halflen = Length[xCode]/2,extraCodes,maskindx,maskindy,newxCode,newyCode,patternindx,patternindy,res},
        {newxCode,newyCode} = {Join[xCode,{0,0}],Join[yCode,{0,0}]};
(*{zzznewxCode,zzznewyCode} = {newxCode,newyCode};*)
        {patternindx,patternindy} = FromDigits[#,2]& /@ (Take[#,{halflen+1,halflen+2}]& /@ {newxCode,newyCode});
        extraCodes = getGoodOrderedPattern[1,patternindx,patternindy];
        res = Table[
            newxCode[[halflen+1;;halflen+2]] = extraCodes[[i,2,1]];
            newyCode[[halflen+1;;halflen+2]] = extraCodes[[i,2,2]];
            maskindx = 1 + FromDigits[#,2]& @ newxCode[[;;2 halflen]];
            maskindy = 1 + FromDigits[#,2]& @ newyCode[[;;2 halflen]];
(*If[ (FromDigits[#,2]& @ newxCode) < 32 && (FromDigits[#,2]& @ newyCode) < 512,
    Print[i -> (mf /@ {order,{xCode,yCode}}) -> (FromDigits[#,4]& @ order) ->  (mf @ {xshiftmask[[maskindx]], Reverse @ yCode[[ ;; 2]]}) -> (mf @ {zzznewxCode,zzznewyCode}) -> (mf @ {newxCode,newyCode}) -> (mf/@extraCodes)] ;
];*)
            newxCode[[halflen + 3;;]] = BitXor @@ {shiftmask[[maskindx]], Reverse @ (Take[#,halflen]& @ yCode) };
            newyCode[[halflen + 3;;]] = BitXor @@ {shiftmask[[maskindy]], Reverse @ (Take[#,halflen]& @ xCode) };
(*Print[i -> (mf /@ {order,{xCode,yCode}}) -> (BitXor @@ {shiftmask[[maskindx]], Reverse @ (Take[#,halflen]& @ yCode) }) -> newxCode ] ;
*)
            {Join[extraCodes[[i,1]],order], {newxCode,newyCode} }
        ,{i,Length[extraCodes]}];
        (*Print[(mf /@ {order,{xCode,yCode}}) -> (mf /@ res)]*) ;
        res
    ] (* OLDsubdivBinary2D *)


subdivBinary2D[{order_,{xCode_,yCode_}}] :=
    Module[ {halflen = Length[xCode]/2,extraCodes,maskindx,maskindy,newxCode,newyCode,patternindx,patternindy,res},
        {newxCode,newyCode} = {Join[xCode,{0,0}],Join[yCode,{0,0}]};
        {patternindx,patternindy} = FromDigits[#,2]& /@ (Take[#,{halflen+1,halflen+2}]& /@ {newxCode,newyCode});
        extraCodes = getGoodOrderedPattern[1,patternindx,patternindy];
        res = Table[
            newxCode[[halflen+1;;halflen+2]] = extraCodes[[i,2,1]];
            newyCode[[halflen+1;;halflen+2]] = extraCodes[[i,2,2]];
            maskindx = 1 + FromDigits[#,2]& @ newxCode[[ ;; halflen+1 ]];
            maskindy = 1 + FromDigits[#,2]& @ newyCode[[ ;; halflen+1 ]];
            If[ halflen == 1,
                (*newxCode[[2 halflen + 1;;]] = BitXor @@ {shiftmask[[maskindx,maskindy]], newyCode[[1;;2]]};
                newyCode[[2 halflen + 1;;]] = BitXor @@ {shiftmask[[maskindy,maskindx]], newxCode[[1;;2]]};*)
                newxCode[[2 halflen + 1;;]] = shiftmask[[maskindx,maskindy]];
                newyCode[[2 halflen + 1;;]] = shiftmask[[maskindy,maskindx]];,
                (*newxCode[[halflen + 2;;]] = BitXor @@ {shiftmask[[maskindx,maskindy]], (Take[#,halflen+1]& @ newyCode) };
                newyCode[[halflen + 2;;]] = BitXor @@ {shiftmask[[maskindy,maskindx]], (Take[#,halflen+1]& @ newxCode) };*)
                newxCode[[halflen + 2;;]] = shiftmask[[maskindx,maskindy]];
                newyCode[[halflen + 2;;]] = shiftmask[[maskindy,maskindx]];
            ];
(*                Print[i -> (mf /@ {order,{xCode,yCode}}) -> {FromDigits[#,4]& @ order, FromDigits[#,4]& @ Join[extraCodes[[i,1]],order]} ->{maskindx,maskindy} -> shiftmask[[maskindx,maskindy]] -> newxCode ];
*)
            {Join[extraCodes[[i,1]],order], {newxCode,newyCode} }
        ,{i,Length[extraCodes]}];
        (*Print[(mf /@ {order,{xCode,yCode}}) -> (mf /@ res)]*) ;
        res
    ] (* subdivBinary2D *)

pocAALDSBinary2D[nlevels_:4, dbg_:True, generateDiscrepancy_:Last ] :=
    Module[ {},
        (*fname = "data/codes_Binary2D_1M.dat";
        If[ !known[codes1M], codes1M = Get[fname] ];
        Print["Reading ",fanme,": done."];*)
        If[ generateDiscrepancy,
            discrepancyTabBinary2D = Table[{},{nlevels}]
        ];
        codes = Sort @ getGoodOrderedPattern[1]; (* very first version: getBasicSetRandom[{{0},{0,0}, {0,0}}]; *)
        Do[
            showGraphics = If[ ilevel <= 4,
                               True,
                               False
                           ];
            showGraphics = dbg;
            pts = codes2int /@ ((*IntegerDigits[#,2,2 ilevel]& /@ *)(Last /@ codes) );
            npts = Length[pts];
            npts = 4^ilevel;
            If[ generateDiscrepancy,
                ptsXY = pts / npts;
                discrepancy = getDiscrepancy2Dexact[ptsXY];
                discrepancyTabBinary2D[[ilevel]] = { npts, discrepancy};
                Print["discrepancyTabBinary2D" -> ilevel -> Length[codes] -> discrepancy];
                Print[discrepancyTabBinary2D];
            ];
            If[ showGraphics,
                Graphics[{
                Opacity[.5],getBinaryGrid[2 ilevel],Opacity[1]
                , Black,Rectangle[#,#+1/npts]& /@ (pts/npts)
                ,Black,Table[Text[Style[i-1,12],((pts)/npts)[[i]],{-1,-1}],{i,npts}]
                (*,Red,PointSize[.01],Table[Point[(codes2xy @ codes1M[[i,2]]) ],{i,npts}]*)
                }
                (*,PlotLabel -> testHierarchicalStratified2D[pts]*)
                ,ImageSize -> ilevel/2 {1024,1024} (*{750,750}*)
                (*, PlotLabel->{ilevel,getptsMinDist12[pts]}*) ]//Print
            ];
            (*Print[ilevel -> Length[pts] -> testHierarchicalStratified2D[pts,False]];*)
            If[ ilevel != nlevels,
                shiftmask = getShiftMasks[ilevel];
                fname = "data/binary_shiftmask_"<>ToString[ilevel]<>".dat";
                Print[" reading ", fname];
                shiftmask = Get[fname];
                (*Print[(mf @ shiftmask) ];*)
                codes = Sort @ (Flatten[#, 1] & @(subdivBinary2D /@ codes));
            (*Print[mf /@ codes];*)
            ];
        
        ,{ilevel,1,nlevels}];
        If[ generateDiscrepancy,
            discrepancyTabSobol = { (* Sobol 2D Kuo's implementation http://web.maths.unsw.edu.au/~fkuo/sobol/ *)
                    {16, 0.171875},(*pSobol2Dlog1 = discrepancyComplexity[data, (Log[#])/# &, "Discrepancy Sobol 2D N/LogN"]; pSobol2Dlog1 //Print;*)
                     {64, 0.0537109}, 
                     {256, 0.0145874}, 
                     {1024, 0.00429916}, 
                     {4096, 0.00132918}, 
                     {16384, 0.000372991}, 
                     {65536, 0.0000994867},
                     {262144, 0.000027597358}
                 };
            ListPlot[{Log /@ discrepancyTabBinary2D, Log /@ discrepancyTabSobol}, Joined->True,PlotLabel->"log-log discrepancy"]//Print;
        ];
        If[ nlevels == 10,
            fname = "data/codes_Binary2D_1M.dat";
            Put[codes,fname];
            Print["Writing ",fname,": done."];
        ];
    ] (* pocAALDSBinary2D *)

getShiftMasks[nlevels_:1] :=
    Module[ {sz,basicSeq},
        sz = 2^(nlevels + 1);
        basicSeq = Reverse /@ (IntegerDigits[#, 2, (nlevels + 1)] & /@ Range[0, sz - 1]);
        If[ nlevels == 1,
            Return[ Table[(BitXor@@{#,Reverse@basicSeq[[i]]})& /@ basicSeq,{i,sz}] ]
        ];
        Table[
            If[ OddQ[i],
                (BitXor@@{#,Reverse@basicSeq[[(i+1)/2]]})& /@ basicSeq,(*ELSE*)
                (BitXor@@{#,basicSeq[[Mod[(i+4)/2 ,sz,1] ]]})& /@ basicSeq
            ]
        ,{i,sz}]
    ] (* getShiftMasks *)

ZZZgetShiftMasks[nlevels_:1] :=
    Module[ {last,len},
        If[ nlevels == 1,
            Return[{{0},{1},{0},{1}}]
        ];
        last = Flatten @ getShiftMasks[1];
        Do[last = Flatten[#, 1] &@({last, (1 - last), last, (1 - last)}), {nlevels-1}];
        len = Length[last];
        Reverse /@ (Join[{last},Table[
            last = Take[#,len]& @ Flatten[T[{last, last}] ]
        ,{ilevel,nlevels-1}] ]//T)
    ] (* ZZZgetShiftMasks *)


ZZZsubdivBinary2D[{order_,{xCode_,yCode_}}] :=
    Module[ {halflen = Length[xCode]/2,extraCodes,maskindx,maskindy,newxCode,newyCode,patternindx,patternindy,res},
        {newxCode,newyCode} = {Join[xCode,{0,0}],Join[yCode,{0,0}]};
        {zzznewxCode,zzznewyCode} = {newxCode,newyCode};
        {patternindx,patternindy} = FromDigits[#,2]& /@ (Take[#,{halflen+1,halflen+2}]& /@ {newxCode,newyCode});
        extraCodes = getGoodOrderedPattern[1,patternindx,patternindy];
        res = Table[
            newxCode[[halflen+1;;halflen+2]] = extraCodes[[i,2,1]];
            newyCode[[halflen+1;;halflen+2]] = extraCodes[[i,2,2]];
            maskindx = 1 + FromDigits[#,2]& @ newxCode[[;;2 halflen]];
            maskindy = 1 + FromDigits[#,2]& @ newyCode[[;;2 halflen]];
(*If[ (FromDigits[#,2]& @ newxCode) < 32 && (FromDigits[#,2]& @ newyCode) < 512,
    Print[i -> (mf /@ {order,{xCode,yCode}}) -> (FromDigits[#,4]& @ order) ->  (mf @ {xshiftmask[[maskindx]], Reverse @ yCode[[ ;; 2]]}) -> (mf @ {zzznewxCode,zzznewyCode}) -> (mf @ {newxCode,newyCode}) -> (mf/@extraCodes)] ;
];*)
            If[ halflen > 1,
                newxCode[[2 halflen + 1;;]] = BitXor @@ {xshiftmask[[maskindx]], Reverse @ yCode[[ ;; 2]] };
                newyCode[[2 halflen + 1;;]] = BitXor @@ {yshiftmask[[maskindy]], Reverse @ xCode[[ ;; 2]]};,(*ELSE*)
                newxCode[[2 halflen + 2;;]] = BitXor @@ {xshiftmask[[maskindx,2;
                                                                              2]], yCode[[1;;1]]};
                newyCode[[2 halflen + 2;;]] = BitXor @@ {yshiftmask[[maskindy,2;
                                                                              2]], xCode[[1;;1]]};
            (*Print[i,(mf /@ {order,{xCode,yCode}}) -> (maskindx-1) -> {xshiftmask[[maskindx,2;;2]], Reverse @ yCode[[1;;1]]} ];*)
            ];
(*If[ (FromDigits[#,2]& @ newxCode) < 32 && (FromDigits[#,2]& @ newyCode) < 512,
    Print[i -> (mf /@ {order,{xCode,yCode}}) -> (FromDigits[#,4]& @ order) -> (FromDigits[#,4]& @ Join[extraCodes[[i,1]],order]) -> (mf @ {xshiftmask[[maskindx]], Reverse @ yCode[[ ;; 2]]}) -> (mf @ {newxCode,newyCode}) -> (FromDigits[#,2]&/@{newxCode,newyCode})] ;
];*)
            {Join[extraCodes[[i,1]],order], {newxCode,newyCode} }
        ,{i,Length[extraCodes]}];
        (*Print[(mf /@ {order,{xCode,yCode}}) -> (mf /@ res)]*) ;
        res
    ]


PREPpocAALDSBinary2D[nlevels_:6, generateDiscrepancy_:False ] :=
    Module[ {},
        (*fname = "data/codes_Binary2D_1M.dat";
        If[ !known[codes1M], codes1M = Get[fname] ];
        Print["Reading ",fanme,": done."];*)
        If[ generateDiscrepancy,
            discrepancyTabBinary2D = Table[{},{nlevels}]
        ];
        codes = Sort @ getGoodOrderedPattern[1]; (* very first version: getBasicSetRandom[{{0},{0,0}, {0,0}}]; *)
        Do[
            showGraphics = If[ ilevel <= 4,
                               True,
                               False
                           ];
            pts = codes2int /@ ((*IntegerDigits[#,2,2 ilevel]& /@ *)(Last /@ codes) );
            npts = Length[pts];
            npts = 4^ilevel;
            If[ generateDiscrepancy,
                ptsXY = pts / npts;
                discrepancy = getDiscrepancy2Dexact[ptsXY];
                discrepancyTabBinary2D[[ilevel]] = { npts, discrepancy};
                Print["discrepancyTabBinary2D" -> ilevel -> Length[codes] -> discrepancy];
                Print[discrepancyTabBinary2D];
            ];
            If[ showGraphics,
                Graphics[{
                getBinaryGrid[2 ilevel]
                , Gray,Rectangle[#,#+1/npts]& /@ (pts/npts)
                ,Black,Table[Text[Style[i-1,24],((pts)/npts)[[i]],{-1,-1}],{i,npts}]
                (*,Red,PointSize[.01],Table[Point[(codes2xy @ codes1M[[i,2]]) ],{i,npts}]*)
                }
                (*,PlotLabel -> testHierarchicalStratified2D[pts]*)
                ,ImageSize -> ilevel/2 {1024,1024} (*{750,750}*)
                (*, PlotLabel->{ilevel,getptsMinDist12[pts]}*) ]//Print
            ];
            Print[ilevel -> Length[pts] -> testHierarchicalStratified2D[pts]];
            If[ ilevel != nlevels+1,
                xshiftmask = Table[(*FromDigits[#,2]& @*) Table[RandomChoice[{0,0}],{ ilevel}],{2^(2 ilevel)}];
                yshiftmask = Table[(*FromDigits[#,2]& @*) Table[RandomChoice[{0,0}],{ ilevel}],{2^(2 ilevel)}];
                Do[
                    {order,{xCode,yCode}} = codes[[i]];
                    {xshiftind,yshiftind} = (1 + FromDigits[#,2])& /@ {xCode,yCode};
                    {xshiftval,yshiftval} = (*FromDigits[#,2]& /@*)  (Take[Reverse[#],-2]& /@ {yCode,xCode});
                    {xshiftmask[[xshiftind]],yshiftmask[[yshiftind]]} = {xshiftval,yshiftval};
                    (*Print[i-1,mf@{xCode,yCode} -> {xshiftind,yshiftind} -> {xshiftval,yshiftval}];*)
                ,{i,Length[codes]}];
                (*Print[mf @ T[{Range[Length[xshiftmask]],xshiftmask}],mf @ T[{Range[Length[yshiftmask]],yshiftmask}]]*);

                (*cc = Sort[Last /@ codes];
                  tabxy = Table[
                      halflen=ilevel;
                      {xCode,yCode} = cc[[i]];
                      (*Reverse @ (BitXor@@{Take[Reverse @ xCode ,-(halflen)], Take[ yCode ,(halflen)]})*)
                      Reverse @ Take[ yCode ,(halflen)]
                  ,{i,Length[cc]}];
                  Print[mf @ T[{Range[Length[xshiftmask]],xshiftmask}]," xy". ilevel -> Length[cc] -> (mf @ T[{Range[Length[cc]],tabxy}]) ];
                  fname = "data/binary_shiftmask_"<>ToString[ilevel]<>".dat";
                  Print[" writing ", fname];
                Put[tabxy,fname];*)
                codes = Sort @ (Flatten[#, 1] & @(ZZZsubdivBinary2D /@ codes));
                cc = Sort[Last /@ codes];
                tabxy = Table[
                    halflen = ilevel+1;
                    {xCode,yCode} = cc[[i]];
                      (*Reverse @ (BitXor@@{Take[Reverse @ xCode ,-(halflen)], Take[ yCode ,(halflen)]})*)
                    cx = Take[xCode,  (halflen)];
                    cy = Take[yCode,  (halflen)];
                    dx = Take[xCode, -(halflen)];
                    {cx,cy, dx(*BitXor@@{dx,cy}*) }
                ,{i,Length[cc]}]//Sort;
                  (*Print[mf @ T[{Range[Length[xshiftmask]],xshiftmask}]," xy". ilevel -> Length[cc] -> (mf @ T[{Range[Length[cc]],tabxy}]) ];*)
                fname = "data/binary_shiftmask_"<>ToString[ilevel]<>".dat";
                Print[" writing ", fname];
                Put[Partition[#,2^(ilevel+1)]& @ (Last /@ tabxy),fname];
            (*Print[mf /@ codes];*)
            ];
        
        
        ,{ilevel,1,nlevels}];
        If[ generateDiscrepancy,
            discrepancyTabSobol = { (* Sobol 2D Kuo's implementation http://web.maths.unsw.edu.au/~fkuo/sobol/ *)
                    {16, 0.171875},(*pSobol2Dlog1 = discrepancyComplexity[data, (Log[#])/# &, "Discrepancy Sobol 2D N/LogN"]; pSobol2Dlog1 //Print;*)
                     {64, 0.0537109}, 
                     {256, 0.0145874}, 
                     {1024, 0.00429916}, 
                     {4096, 0.00132918}, 
                     {16384, 0.000372991}, 
                     {65536, 0.0000994867},
                     {262144, 0.000027597358}
                 };
            ListPlot[{Log /@ discrepancyTabBinary2D, Log /@ discrepancyTabSobol}, Joined->True,PlotLabel->"log-log discrepancy"]//Print;
        ];
        If[ nlevels == 10,
            fname = "data/codes_Binary2D_1M.dat";
            Put[codes,fname];
            Print["Writing ",fname,": done."];
        ];
    ] (* PREPpocAALDSBinary2D *)

DBGpocAALDSBinary2D[nlevels_:3] :=
    Module[ {},
        codes = getBasicSetRandom[{{0,0}, {0,0}}];
        Do[
            showGraphics = If[ ilevel <= 4,
                               True,
                               False
                           ];
            pts = codes2int /@     codes;
            npts = Length[pts];
            npts = 4^ilevel;
            If[ showGraphics,
                Graphics[{
                getBinaryGrid[2 ilevel]
                , Black,Rectangle[#,#+1/npts]& /@ (pts/npts)
                (*,Red,Table[Text[Style[i,24],((pts)/npts)[[i]],{-1,-1}],{i,npts}]*)
                }
                (*,PlotLabel -> testHierarchicalStratified2D[pts]*)
                ,ImageSize -> ilevel/3 {1024,1024} (*{750,750}*)
                (*, PlotLabel->{ilevel,getptsMinDist12[pts]}*) ]//Print
            ];
            Print[ilevel -> Length[pts] -> testHierarchicalStratified2D[pts] -> getDiscrepancy2Dexact[ pts/npts]];
            If[ ilevel != nlevels,
                xshiftmask = Table[{},{i,Length[codes]}];
                yshiftmask = Table[{},{i,Length[codes]}];
                Do[
                    {xCode,yCode} = codes[[i]];
                    {xshiftval,yshiftval} = Take[#,2]& /@ {yCode,xCode};
                    {xshiftind,yshiftind} = 1 + FromDigits[#,2]& /@ {xCode,yCode};
                    {xshiftmask[[xshiftind]],yshiftmask[[yshiftind]]} = {xshiftval,yshiftval};
                    (*Print[i,mf@{xCode,yCode} -> {xshiftval,yshiftval}];*)
                ,{i,Length[codes]}];
                (*Print[mf /@ xshiftmask];
                Print[mf /@ yshiftmask ];*)
                codes = Flatten[#, 1] & @(subdivBinary2D /@ codes)
            ];
            If[ ilevel == 5,
                set = pts//Sort;
                Graphics[{getBinaryGrid[6]
                            , Black,Point /@ (pts/npts)
                            ,Black,Table[Text[Style[i,10],((pts)/npts)[[i]],{-1,-1}],{i,npts}]
                            }
                        ,ImageSize -> 2 {1024,1024}]//Print;
            ];
            If[ ilevel == 6,
                set = pts//Sort;
                Graphics[{getBinaryGrid[6]
                            , Black,Point /@ (pts/npts)
                            ,Black,Table[Text[Style[i,10],((pts)/npts)[[i]],{-1,-1}],{i,npts}]
                            }
                        ,ImageSize -> 2 {1024,1024}]//Print;
                Graphics[{Black,Point /@ (pts/npts)}
                        ,ImageSize ->
                         {1024,1024}]//Print;
            ];
        
        ,{ilevel,1,nlevels}];
    ] (* DBGpocAALDSBinary2D *)

testHierarchicalStratified2D[set_,dbg_:True] :=
    Module[ {sz,powers,tests,i,tab,gl,stepx,stepy},
        sz = Length[set];
        powers = Table[2^i,{i,0,Log[2,sz]}];
        tests = Select[Tuples[powers, 2], (Times @@ #) == sz &];
        tab = Table[Length[Union[Quotient[#, tests[[i]]] & /@ set]] == sz,{i,Length[tests]}];
        If[ And @@ tab == False,
            Print["testHierarchicalStratified2D: ", Select[{tests,tab}//T,Last[#]==False&]//mf, " -> ", Length[Select[{tests,tab}//T,Last[#]==False&]]  -> Table[Length[Union[Quotient[#, tests[[i]]] & /@ set]] ,{i,Length[tests]}]]
        ];
        If[ dbg,
            Table[
                gl = {};
                {stepx,stepy} = tests[[i]];
                Do[AppendTo[gl,Line[{{ix,0},{ix,sz}}]],{ix,0,sz,stepx}];
                Do[AppendTo[gl,Line[{{sz,iy},{0,iy}}]],{iy,0,sz,stepy}];
                Graphics[{{Cyan,gl},Point/@set }, PlotLabel->tests[[i]]]
            ,{i,Length[tests]}]//Print;
        ];
        And @@ tab
    ] (* testHierarchicalStratified2D *)

preppocAALDSBinary2D[innlevels_:4, ind1_:1, ind2_:2, dbgTxt_:False ] :=
    Module[ {},
        ptsz = .01;
        nlevels = innlevels;
        buildMSobol[{ind1, ind2}];
        (*Print["Sobol dir number ind=",ind1," a058947[[ind1]]=", a058947[[ind1]] -> (IntegerDigits @ a058947[[ind1]])];*)
        If[ dbgTxt,
            Print["msobol"-> msobol[[1,;;20]]];
            Print["msobol"-> mf[ Table[Join[ Table[" ",{20-i}], Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]) ], {i,20}] ] ];
        ];
        Do[
            npts =  2^ilevel;
            npos = Ceiling[Log[2,npts]];
            newtab = Table[
                n = inunmber;
                nf = 1;
                seq = IntegerDigits[n,2] //Reverse;
                seqlen = Length[seq];
                seqpadded = PadRight[#,ilevel]& @ seq;
                nn = BitXor @@ Table[ seq[[i]] msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}];
                nnpadded = PadRight[#,ilevel]& @ (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  );
                newval = FromDigits[ nnpadded ,2];
                If[ dbgTxt,
                    Print[n -> Reverse[seqpadded] -> seqpadded 
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (seq[[i]] msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  )
                     -> nnpadded -> newval -> (newval / 2^ilevel)
                     ];
                ];
                {x,y} = {n,npts sobol1d[nf,n]};
                newval
            ,{inunmber,0,npts-1}];
            ptsx = Table[npts sobol1d[nf,i],{i,0,npts-1}];
        ,{ilevel,nlevels}];

(*Abort[]*);
        (* y *)

        (*Print["Sobol dir number ind=",ind2," a058947[[ind2]]=", a058947[[ind2]] -> (IntegerDigits @ a058947[[ind2]])];*)
        (*If[dbgTxt, 
            Print["msobol"-> msobol[[2,;;20]]];
            Print["msobol"-> mf[ Table[Join[ Table[" ",{20-i}], Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]) ], {i,20}] ] ];
        ];*)
        Table[
            npts =  2^ilevel;
            npos = Ceiling[Log[2,npts]];
            gobj = Table[
                n = inunmber;
                nf = 2;
                seq = IntegerDigits[n,2] //Reverse;
                seqlen = Length[seq];
                seqpadded = PadRight[#,ilevel]& @ seq;
                nn = BitXor @@ Table[ seq[[i]] msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}];
                nnpadded = PadRight[#,ilevel]& @ (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  );
                newval = FromDigits[ nnpadded ,2];
                If[ dbgTxt,
                    Print[n -> seqpadded 
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (seq[[i]] msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  )
                     -> nnpadded -> newval -> (newval / 2^ilevel)
                     ];
                ];
                {x,y} = {n,npts sobol1d[nf,n]};
                lbl = StringJoin[ToString/@IntegerDigits[n,2]];
                col = If[ seqlen < 6,
                          getColor[n],
                          getColor[seqlen]
                      ];
                {col,PointSize[.02],Point[{x,y}],Black,Text[lbl,{x,y},{-1,-1}]}
            ,{inunmber,0,npts-1}];
            ptsy = Table[npts sobol1d[nf,i],{i,0,npts-1}];
        ,{ilevel,nlevels}];
        {g1,g2} = {getBinaryTree[ptsx,nlevels,"Sobol ind="<>ToString[ind1]], getBinaryTree[ptsy,nlevels,"Sobol ind="<>ToString[ind2]]};
        pts = T[{ptsx,ptsy}];
        scale = Length[pts];
        xcodes = IntegerDigits[#, 2, nlevels]& /@ ptsx;
        ycodes = IntegerDigits[#, 2, nlevels]& /@ ptsy;
        xycodes = {xcodes,ycodes}//T;
        xycodesFIBOSel = Select[xycodes, Max[(ListConvolve[{1, 1}, #] & /@ #)] < 2 &];
        g3 = Graphics[{PointSize[ptsz],Rectangle[#,#+1/scale]& /@ (pts/scale)   }
            (*,Frame->True,FrameTicks->Automatic,AspectRatio->1,GridLines->{Range[0,npts-1],Range[0,npts-1]}*)
               , PlotRange->{{-eps,1+eps},{-eps,1+eps}} (*{{-eps,2^nlevels+eps},{-eps,2^nlevels+eps}}*)
            ,PlotLabel->"Sobol xy: dir numbers="<>ToString[{ind1,ind2}]];
        Print[Show[Graphics@getBinaryGrid[nlevels],g3,ImageSize->{750,750} (*{1,1}32 2^nlevels*)] ];
    ] (* preppocAALDSBinary2D *)

(*------------------------- FIBOSobolBadTrials -------------------------------*)
(*FIBOSobolBadTrial[innlevels_:4,ind1_:2, ind2_:3] :=
    Module[ {},
        nlevels = innlevels;
        buildMSobol[{ind1, ind2}];
        xycodes = (IntegerDigits[#, 2, nlevels]& /@ #)& /@ ( 2^nlevels Table[sobol2d[i],{i,0,2^nlevels - 1}] );
        xycodesFIBOSel = Select[xycodes, Max[(ListConvolve[{1, 1}, #] & /@ #)] < 2 &];
        Print["FIBOSobolBadTrial" -> nlevels -> {ind1, ind2} -> Length[xycodesFIBOSel] ];
        pts = FIBOFxy /@ xycodesFIBOSel;
        Print[Graphics[{Point/@pts}] ];
    ]
*)
FIBOSobolBadTrial[innlevels_:4,ind1_:1, ind2_:2] :=
    Module[ {},
        nlevels = innlevels;
        buildMSobol[{ind1, ind2}];
        pts = 2^nlevels Table[sobol2d[i],{i,0,2^nlevels - 1}];
        {ptsx, ptsy} = T@pts;
        {xcodes,ycodes} = T[(IntegerDigits[#, 2, nlevels]& /@ #)& /@ pts];
        {ordx,ordy} = {ptsx//order2permut0toNminus1,ptsy//order2permut0toNminus1 };
        {ordcodesx,ordcodesy} = { (IntegerDigits[#, 2, nlevels])& /@ ordx,  (IntegerDigits[#, 2, nlevels])& /@ ordy };
        (*xcodesFIBOSel = Select[xcodes, Max[ListConvolve[{1, 1}, #] ] < 2 &];
        ycodesFIBOSel = Select[ycodes, Max[ListConvolve[{1, 1}, #] ] < 2 &];
        xycodesFIBOSel = {xcodesFIBOSel,ycodesFIBOSel}//T;
        Print["FIBOSobolBadTrial" -> nlevels -> {ind1, ind2} -> Length[xycodesFIBOSel] ];
        pts = FIBOFxy /@ xycodesFIBOSel;
        Print[Graphics[{Point/@pts}] ];*)
        xcodesFIBOSel = Select[ordcodesx, Max[ListConvolve[{1, 1}, #] ] < 2 &];
        ycodesFIBOSel = Select[ordcodesy, Max[ListConvolve[{1, 1}, #] ] < 2 &];
        xycodesFIBOSel = {xcodesFIBOSel,ycodesFIBOSel}//T;
        xy = T @ (order2permut0toNminus1 /@ (T@(FIBOFxy /@ xycodesFIBOSel)));
        npts = Length[xy];
        (*Print[{ Graphics[{Point/@pts}] , Graphics[{Point/@xy}] } ];*)
        Print[  Graphics[{Point/@xy}]  ];
        (*Print["FIBOSobolBadTrial" -> nlevels -> {ind1, ind2} -> Length[pts] -> getDiscrepancy2Dexact[ pts/Length[pts]] ];*)
        Print["FIBOSobolBadTrial" -> nlevels -> {ind1, ind2} -> Length[xy] -> getDiscrepancy2Dexact[ xy/Length[xy]] ];
    ]

(*

Do[FIBOSobolBadTrial[i,1,2],{i,10,20}]
Do[FIBOSobolBadTrial[i,1,3],{i,10,20}]
Do[FIBOSobolBadTrial[i,1,4],{i,10,20}]
Do[FIBOSobolBadTrial[i,1,5],{i,10,20}]
Do[FIBOSobolBadTrial[i,1,6],{i,10,20}]

Do[FIBOSobolBadTrial[i,2,3],{i,10,20}]
Do[FIBOSobolBadTrial[i,2,4],{i,10,20}]
Do[FIBOSobolBadTrial[i,2,5],{i,10,20}]

Do[FIBOSobolBadTrial[i,3,4],{i,10,20}]
Do[FIBOSobolBadTrial[i,4,5],{i,10,20}]
*)
(*
FIBOSobolBadTrial1[innlevels_:8,inind1_:2, inind2_:3] := (* unfortunately, discrepancy is not good *)
    Module[ {},
        nlevels = innlevels;
        {ind1,ind2} = {inind1,inind2};
        
        
        Do[ If[Fibonacci[i] > 2^nlevels, FIBOlevels=i;Break[] ], {i,1,100}];
        FIBOsymbols = {{0}};
        Do[
             FIBOsymbols = Flatten[#,1]& @ (subdivFIBO /@ FIBOsymbols);
        ,{ilevel,FIBOlevels}]; (* 20 -> 17711  29 ->  30 -> 2178309  31 -> 3524578 *)
        
        (*Put[FIBOsymbols, "data/FIBOsymbols_3524578.dat"]     
        FIBOsymbols = Get["data/FIBOsymbols_3524578.dat"];*)
            
        buildMSobol[{ind1, ind2}];
        ptsSobol = Table[sobol2d[i],{i,0,2^nlevels - 1}];
        xycodes = (Reverse[IntegerDigits[#, 2, nlevels]]& /@ #)& /@ ( 2^nlevels  ptsSobol);
        FIBOpts =  (FromDigits[#,2]& /@ #) & /@ xycodes;
        FIBOcodes = (Reverse[FIBOsymbols[[# + 1]]] & /@ #) & /@ FIBOpts;        
        pts = FIBOPhiXY /@ FIBOcodes;
        {Graphics[{Point/@ptsSobol},ImageSize->{1024,1024}] 
        ,Graphics[{Point/@pts},ImageSize->{1024,1024}] 
        }//Print;
        Print["getDiscrepancy2Dexact sobol " -> getDiscrepancy2Dexact[ptsSobol] ];
        Print["getDiscrepancy2Dexact FIBO-sobol " -> getDiscrepancy2Dexact[pts] ];
    ]
*)    
readHDRImage[fname_] :=
    Module[ {},
        data = Import[fname,"Data"];
        Print[fname -> "dims:",Dimensions[data] -> {Min[data],Max[data]} ];
        image = Import[fname];
        image//Print;
    ]
(* 
readHDRImage["HDR_images/1200x1200/HDRimage1200x1200_000.tif"]
*)
loglog[fname_,shift_:35] :=
    Module[ {},
        data = Import[fname,"Data"];
        xdata = Log /@ (First /@ data);
        ydata = Log /@ (Last /@ data);
        yref =  -2 Log[#] + shift & /@ (First /@ data);
        ListPlot[{ {xdata,ydata}//T, {xdata,yref}//T },Joined->True]//Print
    ]


(* {{1,1,1,1},{1,0,1,0},{1,1,1,0},{1,0,0,1}} (* analytical eval: 1/4 (3+Sqrt[5]+Sqrt[6 (5+Sqrt[5])]) *) *)
visuL210[] :=
    Module[ {},
        fname = "data/L2_10.dat";
        fname = "data/L2_BN_1.1.dat";
        data = Get[fname];
        Print[fname -> Dimensions[data] ];
        {     set = data[[2]];
              Graphics[{getBinaryGrid[6], Gray, Rectangle[#,#+1/16]& /@ (set/16)}]
            ,set = data[[3]];
             Graphics[{getBinaryGrid[4], Gray, Rectangle[#,#+1/16]& /@ (set/16)}]
        }//Print;
        Graphics[{getBinaryGrid[6] }]//Print;
    ]

    
    
(*--------------------- Dec 2015 ---------------------*)
getBinaryFracBase4[code_] :=
    FromDigits[code, 4]/4^Length[code]

(*subdivBinaryBase4[symbols_]:= Join[symbols,#]& /@ {{0},{1},{2},{3}}*)
subdivBinaryBase4[symbols_] :=
    Join[symbols,{#}]& /@ {0,1,2,3}

getBinaryGridBase4[nlevels_:2] :=
    Module[ {(*gl,symbols, coltab, delta,deltax,deltay,cur,curx,cury,symbols1,symbols2,txtcoltab*)},
        coltab = {(*Orange*)Yellow, Cyan, Blue,Gray, Darker@Red, Orange,Blue,Red,Yellow};
        coltab = {Yellow, Red, Cyan, Blue, Magenta, Green, Black, Red, Cyan, Blue, Magenta, Green, Black};
        txtcoltab = {Red, Blue, Green, Orange};
        symbols = {{}};
        gl = {};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[1/4^(1.5 ilevel+2)]}];
            symbols = Flatten[#,1]& @ (subdivBinaryBase4 /@ symbols);
            cur = 0;
            Do[
                delta = 1/4^(ilevel);
                AppendTo[gl, {Line[{{0,cur},{1,cur}}], Line[{{0,cur+delta},{1,cur+delta}}]}];
                AppendTo[gl, {Line[{{cur,0},{cur,1}}], Line[{{cur+delta,0},{cur+delta,1}}]}];
                cur += delta;
            ,{i,Length[symbols]}]
        ,{ilevel,nlevels}];
        cury = 0;
        Do[
            deltay = 1/2^(nlevels);
            curx = 0;
            Do[
                deltax = 1/4^(nlevels);
                curx += deltax;
            ,{ix,Length[symbols]}];
            cury += deltay;
        ,{iy,Length[symbols]}];
        If[ nlevels < 5,
            symbols1 = #[[;;nlevels]]& /@ symbols;
            symbols2 = {{}}& /@ symbols;
            AppendTo[gl, {Black,Opacity[1]
                ,Table[ 
                    Text[Rotate[#,Pi/2]& @ (StringJoin @ Table[ToString[symbols1[[i,j]]]<>" ",{j,nlevels}]), {getBinaryFracBase4@symbols[[i]],0},{-1,1} ]
                , {i,Length[symbols]}]
            
                ,Table[ 
                    Text[ StringJoin @ Table[ToString[symbols1[[i,j]]]<>" ",{j,nlevels}], {0,getBinaryFracBase4@symbols[[i]]},{1,-1} ]
                , {i,Length[symbols]}]
                
            } ];
        ];
        gl
    ] (* getBinaryGridBase4 *)

(*subdivBinary2DBase4[{xCode_,yCode_}] :=
    Module[ { extraCodes, res, extraindx,extraindy,lastdigitindx,lastdigitindy,lastdigitx,lastdigity},
            {extraindx,extraindy} = Flatten @ (Take[#,{-2,-2}]& /@ {xCode,yCode});
            {lastdigitindx,lastdigitindy} = FromDigits[#,4]& /@ (Take[#,-2]& /@ {xCode,yCode});
            (*{lastdigitx,lastdigity} = subdivSchemeTab[[extraindx+1,extraindy+1]];*)
            (*{lastdigitx,lastdigity} = subdivSchemeTab[[extraindx+1,extraindy+1]];*)
            {restx,resty} = Take[Reverse[#],halflen]& /@ {yCode,xCode};
            extraCodes = getBasicSetRandomBase4[{extraindx,extraindy}];
            (*Print[{xCode,yCode} -> {extraindx,extraindy} -> {lastdigitindx,lastdigitindy} -> {lastdigitx,lastdigity} -> extraCodes];*)
            (*res = {Join[Drop[#,-1]&@xCode,{#[[1]]},{lastdigitx}],Join[Drop[#,-1]&@yCode,{#[[2]]},{lastdigity}]} & /@ extraCodes;*)

            res = {Join[Drop[#,-1]&@xCode,{#[[1]]},{restx}],Join[Drop[#,-1]&@yCode,{#[[2]]},{resty}]} & /@ extraCodes;
        res     
    ] (* subdivBinary2DBase4 *)
*)
subdivBinary2DBase4[{xCode_,yCode_}] :=
    Module[ {halflen = Length[xCode]/2,extraCodes,xFirstHalf,yFirstHalf,restx,resty},
        {xFirstHalf,yFirstHalf} = Take[#,halflen]& /@ {xCode,yCode};
        (*{restx,resty} = Take[Reverse[#],-halflen]& /@ {yCode,xCode}/.{1:>2,2:>1};*)
        {restx,resty} = Take[#,-halflen]& /@ {xCode,yCode};
        extraCodes = getRandomBasicPattern4x4Base4[];
        {Join[xFirstHalf,#[[1]],restx],Join[yFirstHalf,#[[2]],resty]}& /@ extraCodes
    ] (* subdivBinary2DBase4 *)

getRandomBasicPattern4x4Base4[] :=
    RandomChoice@basicPatterns4x4

codes2intBase4[{xCode_,yCode_}] :=
    {FromDigits[xCode,4],FromDigits[yCode,4]}

getBasicSetRandomBase4[{indx_,indy_}] :=
    basicSubdivTabBinary[[indx+1,indy+1,RandomChoice[{1, 2, 3, 4}]]]

pocAALDSBinary2DBase4[nlevels_:1] :=
    Module[ {},
        fname = "data/L2_10.dat";
        fname = "data/L2_BN_1.1.dat";
        data = Get[fname];
        Print[fname -> Length[data] ];
        basicPatterns4x4 = (IntegerDigits[#,4,2]& /@ #)& /@ data;
        codes = getRandomBasicPattern4x4Base4[];
        Do[
            showGraphics = If[ ilevel <=3,
                               True,
                               False
                           ];
            pts = codes2intBase4 /@ codes;
            npts = Length[pts];
            If[ showGraphics,
                Graphics[{
                getBinaryGridBase4[2 ilevel]
                , Black,Rectangle[#,#+1/npts]& /@ (pts/npts)
                (*,Black,Table[Text[Style[i,24],((pts+.5)/npts)[[i]]],{i,npts}]*)
                }
                (*,PlotLabel -> {testHierarchicalStratified2D[pts],getDiscrepancy2Dexact[ pts/npts]}*)
                ,ImageSize -> ilevel/3 {1024,1024} (*{750,750}*)
                (*, PlotLabel->{ilevel,getptsMinDist12[pts]}*) ]//Print
            ];
            Print[ilevel -> Length[pts] -> testHierarchicalStratified2D[pts] -> getDiscrepancy2Dexact[ pts/npts]];
            If[ ilevel != nlevels,
                codes = Flatten[#, 1] & @(subdivBinary2DBase4 /@ codes)
            ];
        ,{ilevel,1,nlevels}];
        Graphics[Point/@pts]//Print;
    ] (* pocAALDSBinary2DBase4 *)

(*--------------------------- OMEGA == DweRuKi-----------------------------*)

DweRuKigetIntValueDir[word_] :=
    Total @ DweRuKigetIntValueTabDir[word]
DweRuKigetIntValueTabDir[word_] :=
    With[ {len = Length[word] },
        Join @ Table[basicSeqCumulDir[[1,If[ i==1,
                                             1,
                                             word[[i-1]]
                                         ],word[[i]],len-i+1 ]],{i,len}]
    ] (* DweRuKigetIntValueTabDir *)

DweRuKigetFracValueDir[word_] :=
    Total @ DweRuKigetFracValueTabDir[word]
DweRuKigetFracValueTabDir[word_] :=
    With[ {len = Length[word] },
        Join @ Table[basicSeqFracCumulDir[[1,If[ i==1,
                                                 1,
                                                 word[[i-1]]
                                             ],word[[i]], i ]],{i,len}]
    ] (* DweRuKigetFracValueTabDir *)


DweRuKigetIntValueInv[word_] :=
    Total @ DweRuKigetIntValueTabInv[word]
DweRuKigetIntValueTabInv[word_] :=
    With[ {len = Length[word] },
        Join @ Table[basicSeqCumulInv[[1,If[ i==1,
                                             1,
                                             word[[i-1]]
                                         ],word[[i]],i ]],{i,len}]
    ] (* DweRuKigetIntValueTabInv *)

DweRuKigetFracValueInv[word_] :=
    Total @ DweRuKigetFracValueTabInv[word]
DweRuKigetFracValueTabInv[word_] :=
    With[ {len = Length[word] },
        Join @ Table[basicSeqFracCumulInv[[1,If[ i==1,
                                                 1,
                                                 word[[i-1]]
                                             ],word[[i]], len-i+1 ]],{i,len}]
    ] (* DweRuKigetFracValueTabInv *)

DweRuKiPhiXY[{xword_,yword_}] :=
    DweRuKigetFracValueDir /@ {xword,yword}

DweRuKiapplyProductionRules[word_] :=
    Module[ {res,lastSybbol,newSymbols},
        lastSybbol = If[ Length[word] == 0,
                         1,
                         word[[-1]]
                     ];
        newSymbols = productionRulesDir[[lastSybbol]];
        res = (Append[word, #] & /@ newSymbols);
        Return[res]
    ] (* DweRuKiapplyProductionRules *)

DweRuKigetSubdivWordsDir[nlevels_:2,seed_:1] :=
    Module[ {wordsDir = {{seed}}},
        Do[
            wordsDir = Flatten[#,2]& @ {DweRuKiapplyProductionRules /@ wordsDir}
        ,{i,nlevels}];
        Drop[#,1]& /@ wordsDir
    ]

DweRuKiselectactiveCodesFIBO1d[codes_] :=
    With[ {halflen = Length[codes[[1,1]]]},
        Select[codes, (mx [[ #[[1,halflen]], #[[1,halflen+1]] ]] != 0)  &&  (mx [[ #[[2,halflen]], #[[2,halflen+1]] ]] != 0)  &]
    ]
(*


mxsz = 3
Do[
	Do[
		 DweRuKiShowInflation[15, mxsz, x0,y0, False,False];
		 wt = wordsDir // T;
		 Print[(mf@{{x0,y0},{idbg}}) -> (mf@mx) -> (Count[#, idbg] &  /@ wt)]
	,{idbg, mxsz}]
,{x0,mxsz},{y0,mxsz}]
mxsz = 4
Do[
	Do[
		 DweRuKiShowInflation[15, mxsz, x0,y0, False,False];
		 wt = wordsDir // T;
		 Print[(mf@{{x0,y0},{idbg}}) -> (mf@mx) -> (Count[#, idbg] &  /@ wt)]
	,{idbg, mxsz}]
,{x0,mxsz},{y0,mxsz}]
mxsz = 5
Do[
	Do[
		 DweRuKiShowInflation[15, mxsz, x0,y0, False,False];
		 wt = wordsDir // T;
		 Print[(mf@{{x0,y0},{idbg}}) -> (mf@mx) -> (Count[#, idbg] &  /@ wt)]
	,{idbg, mxsz}]
,{x0,mxsz},{y0,mxsz}]


mxsz = 3
Do[
	Do[
		 DweRuKiShowInflation[15, mxsz, x0,y0, False,True];
		 wt = wordsDir // T;
		 Print[(mf@{{x0,y0},{idbg}}) -> (mf@mx) -> (Count[#, idbg] &  /@ wt)]
	,{idbg, mxsz}]
,{x0,mxsz},{y0,mxsz}]
mxsz = 4
Do[
	Do[
		 DweRuKiShowInflation[15, mxsz, x0,y0, False,True];
		 wt = wordsDir // T;
		 Print[(mf@{{x0,y0},{idbg}}) -> (mf@mx) -> (Count[#, idbg] &  /@ wt)]
	,{idbg, mxsz}]
,{x0,mxsz},{y0,mxsz}]
mxsz = 5
Do[
	Do[
		 DweRuKiShowInflation[15, mxsz, x0,y0, False,True];
		 wt = wordsDir // T;
		 Print[(mf@{{x0,y0},{idbg}}) -> (mf@mx) -> (Count[#, idbg] &  /@ wt)]
	,{idbg, mxsz}]
,{x0,mxsz},{y0,mxsz}]


*)
DweRuKiShowInflation[nlevels_:3,sz_:5,x0_:-1,y0_:1,dbg_:True,firstOnly_:True] :=
    Module[ {},

        (*myRandomSampleDir:= RandomSample;
        myRandomSampleInv:= randomSampleButFirst;*)
        myRandomSampleDir :=
            Identity;
        myRandomSampleInv :=
            Identity;
        (*mx = Switch[sz  (* before: getMyFamilyRadixInvertible[mxsz]; *)
            ,3,    
            	(*{{1,1,0},{0,0,1},{1,0,0}}*) (* normevecDir:normevecDir lambda:1.46557 ratio:2.1479 CharacteristicPolynomial: 1+x^2-x^3 factorized CharacteristicPolynomial: 1+x^2-x^3 *) (* getMyFamilyRadixInvertible[3] *)
				{{0,1,1},{0,0,1},{1,0,0}} (* normusefulEVecDir:{0.726517,0.413999,0.548432} lambda:1.32472 ratio:1.75488 CharacteristicPolynomial: 1+x-x^3 factorized CharacteristicPolynomial: 1+x-x^3 *)
            		(*mx321*)
            ,4, {{0,1,0,1},{0,0,1,0},{0,0,0,1},{1,0,0,0}}
            	(*mx4233*)
            ,5, {{0,1,0,0,0},{0,0,1,1,0},{0,0,0,1,0},{0,0,0,0,1},{1,0,0,0,0}}
            (*,7, {{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,1,0,0,0,0,1},{1,0,0,0,0,0,0}}*)
            ,7, {{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,1,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1},{1,0,0,0,0,0,0}}
            ,9, {{0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0},{0,0,0,1,0,0,1,0,0},{0,0,0,0,1,0,0,0,0},{0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0}}
            ,8, mx87566575
        ];*)
        mx = RotateRight[#,1]& /@ IdentityMatrix[sz];
        mx[[y0,x0]] = 1;
        init[mx,dbg,True];
            (*orderDir[[1]] = Table[Select[getRandomGoodPerms4[], MemberQ[productionRulesDir[[i]], #] &], {i,4}];
            orderInv[[1]] = productionRulesDir; 
            buildBasicSeqCumul[True];*)
            (*orderDir = {{{2, 4, 1, 3}, {3, 1}, {1, 2, 4}, {4, 1, 3}}};
            buildBasicSeqCumul[True];*)
        wordsDir = {{}};
        wordsDir = If[firstOnly,{{1}},Partition[Range[Length[mx]],1]];
        wordsInv = (Reverse/@wordsDir );
        tab = Table[
            (*wd = fwd /@ wordsDir;
            wi = fwi /@ wordsInv;*)
            
            wd = wordsDir;
            wi = wordsInv;
            valuesDir = DweRuKigetIntValueDir /@ wd;
            valuesInv = DweRuKigetIntValueInv /@ wi;
            valuesFracDir = DweRuKigetFracValueDir /@ wd;
            valuesFracInv = DweRuKigetFracValueInv /@ wi;
            valuesTabDir = DweRuKigetIntValueTabDir /@ wd;
            valuesTabInv = DweRuKigetIntValueTabInv /@ wi;
            valuesFracTabDir = DweRuKigetFracValueTabDir /@ wd;
            valuesFracTabInv = DweRuKigetFracValueTabInv /@ wi;
            If[ dbg,
                Print["--------------------------------",{ilevel,Length[wd]}];
                Print[MatrixForm[wd],MatrixForm[valuesDir],MatrixForm[valuesTabDir],MatrixForm[valuesDir//Sort]
                    (*,"f", MatrixForm[valuesFracDir],MatrixForm[valuesFracTabDir]*)
                    ,"i", MatrixForm[valuesInv//Union],MatrixForm[valuesInv],MatrixForm[wi],MatrixForm[valuesTabInv](*,MatrixForm[myPadRightInv/@wi]*)
                   (* ,"fi", MatrixForm[valuesFracInv],MatrixForm[valuesFracTabInv]*)
                    ,"fcode", MatrixForm[wordsDir]
                ];
            ];
            If[ ilevel!=nlevels,
                wordsDir = Flatten[{DweRuKiapplyProductionRules/@wordsDir},2];
                wordsInv = (*PadRight[#,16,1]& /@*) (Reverse/@wordsDir );
            ];
            (*{valuesInv, valuesFracDir}//T//Sort//T//mf//Print;*)
            {valuesInv, valuesFracDir}//T//Sort
        ,{ilevel,nlevels}];
        If[dbg,
	        Print["valuesDir, valuesFracInv"];
	        Print[#//T//mf]& /@ tab;
	        ListPlot[(valuesDir)//Sort,PlotLabel->"valuesDir: "<>ToString[testUnitSteps[Sort[valuesDir]]],Joined->True]//Print;
	        ListPlot[(valuesInv)//Sort,PlotLabel->"valuesInv: "<>ToString[testUnitSteps[Sort[valuesInv]]],Joined->True]//Print;
	        ListPlot[(valuesFracDir)//Sort,PlotLabel->"valuesFracDir",Joined->True]//Print;
	        ListPlot[(valuesFracInv)//Sort,PlotLabel->"valuesFracInv",Joined->True]//Print;
	        pts = {valuesDir,valuesInv}//T;
	        ListPlot[pts,Joined->False,PlotLabel->"{valuesDir,valuesInv}",AspectRatio->1]//Print;
        ];
    (*pts = {valuesFracDir,valuesFracInv}//T;
        ListPlot[pts,Joined->False,PlotLabel->"{valuesFracDir,valuesFracInv}",AspectRatio->1]//Print;
        pts = {valuesDir//Sort,valuesInv//Sort}//T;
        ListPlot[pts,Joined->False,PlotLabel->"{valuesDir,valuesInv} Sorted"]//Print;
        pts = {valuesFracDir//Sort,valuesFracInv//Sort}//T;
        ListPlot[pts,Joined->False,PlotLabel->"{valuesFracDir,valuesFracInv} Sorted"]//Print;*)
    ] (* DweRuKiShowInflation *)


getDweRuKiGrid[nlevels_:2,xType_:1,yType_:1,showSymbols_:True] :=
    Module[ {(*wordsDir,wordsInv,valuesDir,valuesInv,valuesFracDir,valuesFracInv,hlevels,symbols,symbols1,symbols2,gl,coltab,txtcoltab,xsymbols,ysymbols*)},
        coltab = {Orange(*Yellow*), Cyan, Blue,Gray, Darker@Red, Orange,Blue,Red,Yellow};
        txtcoltab = {Red, Blue, Green, Orange, Gray,Red};
        coltab = {Orange, Lighter@Cyan, Lighter@Blue, Black,Red,Cyan, Black,Red,Cyan, Black,Red,Cyan, Black,Red,Cyan};
        gl = {};
        wordsDir = {{xType}};
        {xmax,ymax} = {basicSeqFracDir[[xType, 1]] lambda,basicSeqFracDir[[yType, 1]] lambda};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[.05/lambda^(ilevel)],{Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] }}];
            symbols =  wordsDir = Flatten[{(*DweRuKi*)applyProductionRules/@wordsDir},2];
            wordsInv = (Reverse/@wordsDir );
            valuesDir = (*DweRuKi*) getIntValueDir /@ wordsDir;
            valuesInv = (*DweRuKi*) getIntValueInv /@ wordsInv;
            valuesFracDir = (*DweRuKi*) getFracValueDir /@ wordsDir;
            valuesFracInv = (*DweRuKi*) getFracValueInv /@ wordsInv;
            Do[
                AppendTo[gl, {Line[{{valuesFracDir[[i]],0},{valuesFracDir[[i]],ymax}}]}];
             ,{i,Length[wordsDir]}];
        ,{ilevel,nlevels}];
        xsymbols = Drop[#,1]& /@ symbols;
        hlevels = Floor[nlevels/2];
        symbols1 = #[[;;hlevels]]&         /@ (xsymbols);
        symbols2 = #[[hlevels+1;;]]&     /@ (xsymbols);
        If[ showSymbols,
            AppendTo[gl, {Black,Opacity[1]
                ,Table[
                    Text[ Column[Join[{
                                 Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"        " ,Pi/2],Bold,Black]
                                }
                                ,Reverse@Table[Style[  Rotate[ToString@symbols1[[i,j]],Pi/2] ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                            ]
                        ], {valuesFracDir[[i]],0},{0,1}]
                    , {i,Length[xsymbols]}]
                } ];
        ];
        wordsDir = {{yType}};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[.05/lambda^(ilevel)],{Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] }}];
            symbols =  wordsDir = Flatten[{(*DweRuKi*)applyProductionRules/@wordsDir},2];
            wordsInv = (Reverse/@wordsDir );
            valuesDir = (*DweRuKi*) getIntValueDir /@ wordsDir;
            valuesInv = (*DweRuKi*) getIntValueInv /@ wordsInv;
            valuesFracDir = (*DweRuKi*) getFracValueDir /@ wordsDir;
            valuesFracInv = (*DweRuKi*) getFracValueInv /@ wordsInv;
            Do[
                AppendTo[gl, {Line[{{0,valuesFracDir[[i]]},{xmax,valuesFracDir[[i]]}}]}];
             ,{i,Length[wordsDir]}];
        ,{ilevel,nlevels}];
        ysymbols = Drop[#,1]& /@ symbols;
        symbols1 = #[[;;hlevels]]& /@ (ysymbols);
        symbols2 = #[[hlevels+1;;]]& /@ (ysymbols);
        If[ showSymbols,
            AppendTo[gl, {Black,Opacity[1]
                ,Table[                        
                        Text[ Row[Join[
                                Table[Style[  ToString[symbols1[[i,j]]]<>" " ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                                 ,{ Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"       " ,0],Bold,Black]
                        } ] ], {0,valuesFracDir[[i]]},{1,0}]
                , {i,Length[ysymbols]}]    
            } ];
        ];
        gl
    ] (* getDweRuKiGrid*)

mx22 = {{1,1},{1,1}};
mx333 = {{1,1,1},{1,1,1},{1,1,1}};
mx4444 = {{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}};
mx55555 = {{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1}};
mx88888888 = {{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1}};
mx7777777 = {{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1}};
    
mx21 = {{1,1},{1,0}};
mx321 = {{1, 1, 1}, {1, 1, 0}, {1, 0, 0}};    (* symmetrical >>>> ratio:2.24698 analytical eval: 1/3 (2+7^(2/3)/(1/2 (1+3 I Sqrt[3]))^(1/3)+(7/2 (1+3 I Sqrt[3]))^(1/3)) *)
mx4332 = {{1,1,1,1},{1,1,1,0},{1,1,0,1},{1,0,1,0}};     (* >>>> ratio:1.78572 *)
mx4233 = {{1,1,1,1},{1,0,1,0},{1,1,0,1},{1,0,1,1}};     (* >>>> ratio:1.78572 *)
mx87566575 = {{1,1,1,1,1,1,1,1},{1,1,0,1,1,1,1,1},{1,0,1,1,0,1,0,1},{1,1,1,0,1,0,1,1},{1,1,0,1,0,1,0,1},{1,1,1,0,1,1,1,1},{1,1,0,1,0,1,1,1},{1,1,1,1,1,1,1,0}};    (* >>>> ratio:1.57478 *)
mx87566575 = {{1,1,1,1,1,1,1,1},{1,1,0,1,1,1,1,1},{1,0,1,0,1,0,1,1},{1,1,0,1,1,1,1,0},{1,1,1,1,0,1,0,1},{1,1,0,1,1,0,1,0},{1,1,1,1,0,1,1,1},{1,1,1,0,1,0,1,0}}; (* >>>> ratio:1.61092 *)
mx84675675 = {{1,1,1,1,1,1,1,1},{1,0,1,0,1,0,1,0},{1,1,0,1,0,1,1,1},{1,0,1,1,1,1,1,1},{1,1,0,1,1,0,1,0},{1,0,1,1,0,1,1,1},{1,1,1,1,1,1,0,1},{1,0,1,1,0,1,1,0}}; (* >>>> ratio:1.90463 *)
mx86665757 = {{1,1,1,1,1,1,1,1},{1,0,1,0,1,1,1,1},{1,1,1,1,0,1,0,1},{1,0,1,1,1,0,1,1},{1,1,0,1,0,1,0,1},{1,1,1,0,1,1,1,1},{1,1,0,1,0,1,1,0},{1,1,1,1,1,1,0,1}} (* >>>> ratio:{1.58958,1.58958} *)
mx85765667 = {{1,1,1,1,1,1,1,1},{1,1,0,1,0,1,0,1},{1,0,1,1,1,1,1,1},{1,1,1,0,1,0,1,1},{1,0,1,1,0,1,0,1},{1,1,1,0,1,1,1,0},{1,0,1,1,0,1,1,1},{1,1,1,1,1,0,1,1}}; (* >>>> ratio:1.58958 normevecDir:normevecDir lambda:6.38889 ratio:1.58958 CharacteristicPolynomial: 1+5 x-3 x^2-25 x^3+3 x^4+29 x^5-7 x^6-6 x^7+x^8 factorized CharacteristicPolynomial: 1+5 x-3 x^2-25 x^3+3 x^4+29 x^5-7 x^6-6 x^7+x^8 *)
mx87777777 = {{1,1,1,1,1,1,1,1}
            ,{1,1,1,0,1,1,1,1}
            ,{1,1,1,1,1,0,1,1}
            ,{1,0,1,1,1,1,1,1}
            ,{1,1,1,1,1,1,1,0}
            ,{1,1,1,1,0,1,1,1}
            ,{1,1,0,1,1,1,1,1}
            ,{1,1,1,1,1,1,0,1}};
mx86777776 = {{1,1,1,1,1,1,1,1}
            ,{1,0,1,1,1,1,1,0}
            ,{1,1,1,1,0,1,1,1}
            ,{1,1,1,1,1,1,0,1}
            ,{1,1,0,1,1,1,1,1}
            ,{1,1,1,1,1,1,1,0}
            ,{1,1,1,0,1,1,1,1}
            ,{1,0,1,1,1,0,1,1}};

getGoodOrderedActivePattern[nlevels_:2,x0_:0,y0_:0,tileType_] := (* here nlevels: 2^nlevels *)
    Module[ {},
        getGoodOrderedPattern = getGoodOrderedPattern[nlevels,x0,y0];
    ]

doNothing[] :=
    {}

consolidateBestPatterns[mxsz_:4] :=
    Module[ {},
        mx = Switch[mxsz, 2, mx21, 4, mx4233, 8, mx86777776 ];
        basename = Switch[mxsz, 2, "mx21", 4, "mx4233", 8, "mx86777776" ];
        deltasel = Switch[mxsz, 2, 1. , 4, .01, 8, .001 ];
        myRandomSampleDir = myRandomSampleInv = Identity;
        init[mx,True, True];
        tab = Table[
                fname = "data/prepDweRuKi"<>ToString[mxsz]<>"x"<>ToString[mxsz]<>"BestPatterns_"<>ToString[ix]<>"_"<>ToString[iy]<>".dat";
                data = (*Flatten[#,1]& /@*) Get[fname];
                unifieddata = Reverse @ (Sort @ Complement[Union[Join @@ data], {{}} ]);
                thebest = unifieddata[[1,1]];
                sel = Select[unifieddata, #[[1]] > (thebest-deltasel)&];
                Print["Reading ",fname -> Length[unifieddata] -> Length[sel] ];

                     (*res = {};
                     Do[
                         If[unifieddata[[idata]] === {}, Continue[] ];
                         {pattern,buds} = unifieddata[[idata]];
                         test = And @@ (((mx [[ #[[1,-1]], iy ]] != 0) && (mx [[ #[[2,-1]], ix ]] != 0))& /@ pattern);
                         If[test == True,
                             respattern = ((Drop[#,1]& /@ #)& /@ (Join @@ {pattern, buds}));
                             Print[({ix,iy}-1) -> respattern];
                         ];
                     ,{idata,Length[unifieddata]}];*)
                Table[
                    {mindist, pattern,buds} = sel[[idata]];
                    respattern = ((Drop[#,1]& /@ #)& /@ (Join @@ {pattern, buds}));
                    Print[idata,"/",Length[sel] -> ({ix,iy}-1) -> mindist -> respattern];
                    respattern
                 ,{idata,Length[sel]}]
        ,{iy,mxsz},{ix,mxsz}];
        fname = "data/"<>basename<>"_consolidated.dat";
        Put[tab,fname];
        tab = Table[
                fname = "data/prepDweRuKi"<>ToString[mxsz]<>"x"<>ToString[mxsz]<>"BestPatterns_"<>ToString[ix]<>"_"<>ToString[iy]<>".dat";
                data = (*Flatten[#,1]& /@*) Get[fname];
                unifieddata = Reverse @ (Sort @ Complement[Union[Join @@ data], {{}} ]);
                thebest = unifieddata[[1,1]];
                sel = Select[unifieddata, #[[1]] > (thebest-deltasel)&];
                Print["ActiveOnly Reading ",fname -> Length[unifieddata] -> Length[sel] ];
                Table[
                    {mindist, pattern,buds} = sel[[idata]];
                    respattern = ((Drop[#,1]& /@ #)& /@ pattern);
                    Print[idata,"/",Length[sel] -> ({ix,iy}-1) -> mindist -> respattern];
                    respattern
                 ,{idata,Length[sel]}]
        ,{iy,mxsz},{ix,mxsz}];
        fname = "data/"<>basename<>"_consolidated_ActiveOnly.dat";
        Put[tab,fname];
    ]


(*---------------------- getGoodOrderedPattern ----------------------*)
prepGoodPermsBruteForce[sz_:4, showGraphics_:True] :=
    Module[ {},
        nbits = Log[2,sz];
        ptab = Permutations[Range[0,sz-1]];
        t = ({Range[0,sz-1], #} // T) & /@ ptab;
        sets = Select[t, testHierarchicalStratified2D[#] &];
        If[ showGraphics,
            Do[
               pts = sets[[i]];
               npts = Length[pts];
               Graphics[{
                   getBinaryGrid[nbits]
                       , Black,Rectangle[#,#+1/npts]& /@ (pts/npts)
                       (*,Red,Table[Text[Style[i,24],((pts)/npts)[[i]],{-1,-1}],{i,npts}]*)
                       }
                   ,ImageSize -> 1/4 {1024,1024} ]//Print
             ,{i,Length[sets]}];
        ];
        Plus[#,1]& /@ Union[Last/@(T/@sets)]
    ] (* prepGoodPermsBruteForce *)

prepGoodPerms[insz_:8, showGraphics_:True] :=
    Module[ {},
        sz = insz;
        nbits = Log[2,sz];
        mask =  (IntegerDigits[#, 2, nbits] & /@ Range[0, sz - 1]);
        maskR = Reverse /@ mask;
        basicset = {maskR, mask} // T;
        sets = Table[
            {maskBitXor1,maskBitXor2} = basicset[[i]];
            {BitXor @@ {maskBitXor1,#[[1]]},BitXor @@ {maskBitXor2,#[[2]]} }& /@ basicset
        ,{i,Length[basicset]}]
    ] (* prepGoodPerms *)

        
(*        ptab = Permutations[Range[0,sz-1]];
        t = ({Range[0,sz-1], #} // T) & /@ ptab;
        sets = Select[t, testHierarchicalStratified2D[#] &];
        If[showGraphics,
             Do[
                pts = sets[[i]];
                npts = Length[pts];
                Graphics[{getBinaryGrid[nbits]
                            , Black,Rectangle[#,#+1/npts]& /@ (pts/npts)
                            (*,Red,Table[Text[Style[i,24],((pts)/npts)[[i]],{-1,-1}],{i,npts}]*)
                            }
                ,ImageSize -> 1/4 {1024,1024} ]//Print;
          ,{i, 16 (*Length[sets]*)}];
      ];
      Plus[#,1]& /@ Union[Last/@(T/@sets)]
*)

(*getBayerOrdering[nlevels_:2,dx_:0,dy_:0] :=
     Module[ {res={ {0,{{},{}}} } },
         Do[
             res = Flatten[#,1]& @ ({
                 {4 #[[1]]+0,  {Join[{0},#[[2,1]]],Join[{0},#[[2,2]]]} } ,
                 {4 #[[1]]+1,  {Join[{0},#[[2,1]]],Join[{1},#[[2,2]]]} } ,
                 {4 #[[1]]+2,  {Join[{1},#[[2,1]]],Join[{0},#[[2,2]]]} } ,
                 {4 #[[1]]+3,  {Join[{1},#[[2,1]]],Join[{1},#[[2,2]]]} }
             }& /@ res) ;
         ,{ilevel,nlevels}];
         ({#[[1]], { BitXor@@{FromDigits[#,2]& @ #[[2,1]], dx}, BitXor@@{FromDigits[#,2]& @ #[[2,2]], dy} } }) & /@ res
     ] (* getBayerOrdering *)
*)

getBayerOrdering[nlevels_:2,dx_:0,dy_:0] :=
    Module[ {res = { {0,{{},{}}} } },
        Do[
            res = Flatten[#,1]& @ ({
                {4 #[[1]]+0,  {Join[{0},#[[2,1]]],Join[{0},#[[2,2]]]} } ,
                {4 #[[1]]+2,  {Join[{0},#[[2,1]]],Join[{1},#[[2,2]]]} } ,
                {4 #[[1]]+3,  {Join[{1},#[[2,1]]],Join[{0},#[[2,2]]]} } ,
                {4 #[[1]]+1,  {Join[{1},#[[2,1]]],Join[{1},#[[2,2]]]} }
            }& /@ res);
         ,{ilevel,nlevels}];
        ({#[[1]], { BitXor@@{FromDigits[#,2]& @ #[[2,1]], dx}, BitXor@@{FromDigits[#,2]& @ #[[2,2]], dy} } }) & /@ res
    ] (* getBayerOrdering *)

getGoodOrderedPattern[nlevels_:2,x0_:0,y0_:0] := (* here nlevels: 2^nlevels *)
    Module[ {ntilles1d,resTab,ordering,order,pattenindx,patternindy,pattern},
        ntilles1d = 2^nlevels;
        resTab = Table[{0,{}},{iy,ntilles1d},{ix,ntilles1d}];
        ordering = getBayerOrdering[nlevels, Quotient[x0,ntilles1d], Quotient[y0,ntilles1d]];
        Do[
           {order,{pattenindx,patternindy}} = ordering[[i]];
           resTab[[1+patternindy,1+pattenindx,1]] = {order};
        ,{i,Length[ordering]}];
        pattern = getGoodPattern[2 nlevels, x0, y0];
        Do[
           {pattenindx,patternindy} = (Quotient[#,ntilles1d]& /@ pattern[[i]]);
           resTab[[1+patternindy,1+pattenindx,2]] = {IntegerDigits[#,2,2 nlevels]& @ pattern[[i,1]], IntegerDigits[#,2,2 nlevels]& @ pattern[[i,2]]};
        ,{i,Length[pattern]}];
        Sort[Flatten[#,1]& @ resTab]
    ]

tstGoodOrderedActivePattern[nlevels_:1] :=  (* here nlevels: 2^nlevels *)
    Module[ {},
        ntiles1d = 2^nlevels;
        linearsz = 4^nlevels;
        Do[
            lst = getGoodOrderedPattern[nlevels, ix, iy];
            npts = Length[lst];
            Graphics[{getBinaryGrid[2 nlevels],                      
                        Table[
                            {{order}, {xCode,yCode}} = lst[[i]];
                            {posx,posy} = (FromDigits[#,2]& /@ #)& @ {xCode,yCode};
                            {
                                   {Opacity[.5],Gray,Rectangle[#, # + 1/npts] & @ ({posx,posy}/linearsz)} ,
                                Text[Style[order,24],#,{-1,-1}] & @ ({posx,posy}/linearsz) 
                            }
                        ,{i,Length[lst]}]
                }                
                ,PlotLabel -> {ix,iy}, ImageSize -> 1/2 {1024, 1024}] // Print
        , {iy, 0, linearsz-1 }, {ix, 0, linearsz-1 }]
    ]

tstGoodOrderedPattern[nlevels_:2] :=  (* here nlevels: 2^nlevels *)
    Module[ {},
        ntiles1d = 2^nlevels;
        linearsz = 4^nlevels;
        Do[
            lst = getGoodOrderedPattern[nlevels, ix, iy];
            npts = Length[lst];
            Graphics[{getBinaryGrid[2 nlevels],                      
                        Table[
                            {order, {posx,posy}} = lst[[i]];
                            {
                                   {Opacity[.5],Gray,Rectangle[#, # + 1/npts] & @ ({posx,posy}/linearsz)} ,
                                Text[Style[order,24],#,{-1,-1}] & @ ({posx,posy}/linearsz) 
                            }
                        ,{i,Length[lst]}]
                }                
                ,PlotLabel -> {ix,iy}, ImageSize -> 1/2 {1024, 1024}] // Print
        , {iy, 0, linearsz-1 }, {ix, 0, linearsz-1 }]
    ]

tstGoodPattern[nlevels_:4] :=  (* here nlevels: 2^nlevels *)
    Module[ {},
        sz = 2^nlevels;
        Do[
            pts = getGoodPattern[nlevels, ix, iy];
            npts = Length[pts];
            Graphics[{getBinaryGrid[nlevels], Black, 
               Rectangle[#, # + 1/npts] & /@ (pts/npts)}
                ,PlotLabel -> {ix,iy}, ImageSize -> 1/2 {1024, 1024}] // Print
        , {ix, 0, sz-1}, {iy, 0, sz-1}]
    ]
  

tstBayerOrdering[nlevels_:2] :=
    Module[ {},
        linearsz = 2^nlevels;
        linearsz = 2^nlevels;
        nbits = nlevels;
        Do[
            lst = getBayerOrdering[nlevels, ix, iy];
            npts = Length[lst];
            Graphics[{getBinaryGrid[nbits], 
                        Table[
                            {order, {posx,posy}} = lst[[i]];
                            orderBits = IntegerDigits[#,2,2 nlevels]& @ order;
                            bits1 = Reverse @ Table[orderBits[[i]],{i,1,Length[orderBits], 2}];
                            bits2 = Reverse @ Table[orderBits[[i]],{i,2,Length[orderBits], 2}];
                            {
                                Text[order, # + .5/linearsz, {0,-1}] & @ ({posx,posy}/linearsz) 
                                ,Text[{ Style[#,Red]& @ StringJoin[ToString/@bits1], Style[#,Blue]& @ StringJoin[ToString/@bits2] }, # + .5/linearsz, {0,1}] & @ ({posx,posy}/linearsz) 
                            }
                        ,{i,Length[lst]}]
                }                
                ,PlotLabel -> {ix,iy}, ImageSize -> 2/3 {1024, 1024}] // Print
        , {iy, 0, 0, 1 (*linearsz-1*) }, {ix, 0, 0, 1 (*linearsz-1*) }];
        Graphics[{getBinaryGrid[2 nbits], 
                    
                    masksx = Table[IntegerDigits[#,2,nlevels]& /@ getRandomGoodPermsWithIndex4[ i ], {i,4}];
                    masksy = Table[IntegerDigits[#,2,nlevels]& /@ getRandomGoodPermsWithIndex4[ i ], {i,4}];
                    Table[
                        {order, {posx,posy}} = lst[[i]];
                        {tilexCode, tileyCode} = IntegerDigits[#,2,nlevels]& /@ {posx,posy};
                        orderBits = IntegerDigits[#,2,2 nlevels]& @ order;
                        bits1 =  Table[orderBits[[i]],{i,1,Length[orderBits], 2}];
                        bits2 =  Table[orderBits[[i]],{i,2,Length[orderBits], 2}];
                        maskx = masksx[[1, 1 + Last@tilexCode]];
                        masky = masksy[[1, 1 + Last@tileyCode]];
                        newcodes = {Join[tilexCode, Reverse @ (BitXor@@{tilexCode,tileyCode,maskx})], Join[tileyCode, Reverse @ (BitXor@@{tilexCode,tileyCode,masky}) ]};
                        xy = codes2xy @ newcodes;
                            (*Print[(i-1) -> (mf @ {order, {posx,posy}}) -> orderBits -> (mf @ {bits1,bits2}) -> BitXor@@{bits1,bits2} -> newcodes -> maskx -> masky];*)
                        {    PointSize[.01],
                            Point @ xy
                            ,Text[Style[order,18], #, {-1,-1}] & @ xy 
                            (*,Text[Style[newcodes,18], #, {-1,1}] & @ xy *)
                        }
                    ,{i,Length[lst]}]
            }                
            ,PlotLabel -> {ix,iy}, ImageSize -> 2/3 {1024, 1024}] // Print;
    ] (* tstBayerOrdering *)


(*--------------------------------- pocDweRuKi -------------------------------*)
DweRuKiselectactiveCodes[codes_] :=
    With[ {halflen = (Length[codes[[1,1]]]+1)/2},
        Select[codes, 
                (And @@ Table[(mx [[ #[[1,i]], #[[1,i+1]] ]] != 0),{i,halflen-1}])
             && (And @@ Table[(mx [[ #[[2,i]], #[[2,i+1]] ]] != 0),{i,halflen-1}])
             && (mx [[ #[[1,halflen]], #[[2,halflen]] ]] != 0) 
        &]
    ]

goodPerms2 = {{1,2},{2,1}};
goodPerms4 = {{1,3,2,4},{1,3,4,2},{1,4,2,3},{1,4,3,2},{2,3,1,4},{2,3,4,1},{2,4,1,3},{2,4,3,1},{3,1,2,4},{3,1,4,2},{3,2,1,4},{3,2,4,1},{4,1,2,3},{4,1,3,2},{4,2,1,3},{4,2,3,1}}; (* result of prepGoodPerms[4] *)
(*goodPerms8 = Get["data/goodPerms8.dat"];
*)
getRandomGoodPerms2[] :=
    myRandomChoice @ goodPerms2
getRandomGoodPerms4[] :=
    myRandomChoice @ goodPerms4
selectGoodPerms4[ind_:1] :=
    Select[goodPerms4, First[#] == ind& ];
getRandomGoodPermsWithIndex4[ind_:1] :=
    myRandomChoice @ selectGoodPerms4[ind]

getRandomGoodPerms8[] :=
    myRandomChoice @ goodPerms8
selectGoodPerms8[ind_:1] :=
    Select[goodPerms8, First[#] == ind& ];
getRandomGoodPermsWithIndex8[ind_:1] :=
    myRandomChoice @ selectGoodPerms8[ind]

getGoodPattern[nlevels_:4,x0_:0,y0_:0] := (* here nlevels: 2^nlevels *)
    Module[ {dir,inv,sz = 2^nlevels},
        dir = Range[0, sz - 1];
        inv = FromDigits[#, 2] & /@ Reverse /@ (IntegerDigits[#, 2, nlevels] & /@ dir);
        {BitXor[#, x0] & /@ inv, BitXor[#, y0] & /@ dir} // T
    ]


subdivDweRuKi2D[{xCode_,yCode_},count_:0] :=
    Module[ {len = Length[xCode],halflen,xType,yType,extraCodes,xFirstHalf,yFirstHalf,xExtra,yExtra,xRest,yRest},
        halflen = len/2;
        {xFirstHalf,yFirstHalf} = Take[#,(halflen)]& /@ {xCode,yCode};
        {xType,yType} = #[[halflen]]& /@ {xCode,yCode};
        extraCodes = getRandomGoodPatternDweRuKi[xType,yType];
        Table[
            {xExtra,yExtra} = extraCodes[[i]];
            xBeginning = Join[xFirstHalf,xExtra];
            yBeginning = Join[yFirstHalf,yExtra];
            xBeginningRev = Reverse @ xBeginning;
            yBeginningRev = Reverse @ yBeginning;
            xRest = Table[
                (*xThisDigit = yBeginningRev[[j+2]];*)
                xThisDigit = yBeginningRev[[j+2]];
                xThisPermutType = xBeginningRev[[j]];
                xPermuts[[ xThisPermutType, xThisDigit ]]
            ,{j,halflen}];
            yRest = Table[
                yThisDigit = xBeginningRev[[j+2]];
                yThisPermutType = yBeginningRev[[j]];
                yPermuts[[ yThisPermutType, yThisDigit ]]
            ,{j,halflen}];
            Print[{count,i}," subdivDweRuKi2D",mf[{xCode,yCode}] -> (mf[{xType,yType}])(* -> (mf/@extraCodes) *)-> (mf/@{xBeginningRev,yBeginningRev}) -> {xThisDigit,xThisPermutType->xPermuts[[ xThisPermutType, xThisDigit ]]} -> (mf@ {Join[xBeginning,xRest],Join[yBeginning,yRest]} ) ];
            {Join[xBeginning,xRest],Join[yBeginning,yRest]}
        ,{i,Length[extraCodes]}]
    ] (* subdivDweRuKi2D *)

(*getDweRuKicodes2D[level_:1,x0_:1,y0_:1] :=
    Module[ {bincodes,inttab,basecodes,tilecodes},
        codelen=base/2 (level);
           bincodes = (Last /@ (getGoodOrderedPattern[base/2 (level)]));
           inttab = (FromDigits[#,2]& /@ #)& /@ bincodes;
           basecodes = (1+ IntegerDigits[#,base,codelen]& @ #)& /@ inttab;
           tilecodes =     (Drop[#,-codelen/2]& /@ #)& /@ Select[basecodes, mx[[ #[[1,codelen/2]], #[[2,codelen/2]] ]] != 0 &];
           {xtilecodes,ytilecodes} = {First/@tilecodes,Last/@tilecodes};
           xextracodes = Table[
               lastdigit = xtilecodes[[i,-1]];
               Table[lastdigit=mx[[lastdigit,1]],{codelen/2}]
        ,{i,Length[xtilecodes]}]
    ] (* getDweRuKicodes2D *)*)

DweRuKiBitReverse[word_] :=
    1 + (FromDigits[#,2]& /@ ( Reverse /@ (IntegerDigits[#-1,2,baselog]& /@ word) ) ) (* worksonly for bases 2^n *)


getDweRuKicodes2D[level_:1] :=
    Module[ {(*bincodes,inttab,basecodes,tilecodes,xtilecodes,ytilecodes,codelen*)},
        codelen = base/2 (level);
        bincodes = (Last /@ (getGoodOrderedPattern[base/2 (level)]));
        inttab = (FromDigits[#,2]& /@ #)& /@ bincodes;
        basecodes = (1+ IntegerDigits[#,base,codelen]& @ #)& /@ inttab;
        tilecodes =     (Drop[#,-codelen/2]& /@ #)& /@ Select[basecodes, mx[[ #[[1,codelen/2]], #[[2,codelen/2]] ]] != 0 &];
        {xtilecodes,ytilecodes} = {First/@tilecodes,Last/@tilecodes};
        {xsubtilecodes,ysubtilecodes} = {Reverse@ytilecodes,Reverse@xtilecodes};
        combined = {T[{xtilecodes,ytilecodes}],T[{xsubtilecodes,ysubtilecodes}]}//T;
        sel = Select[combined, mx[[ #[[2,1,codelen/2-1]], #[[2,2,codelen/2-1]] ]] != 0 &];
        tab = Table[
            Print[i -> sel[[i]] ];
            {Join[sel[[i,1,1]], sel[[i,2,1]] ],Join[sel[[i,1,2]], sel[[i,2,2]] ]}
        ,{i,Length[sel]}];
        tab
    ] (* getDweRuKicodes2D *)


xApplyPermut[MSBcodes_,LSBcodes_] :=
    Table[xPermuts[[MSBcodes[[-i]], LSBcodes[[i]]]],{i,Length[MSBcodes]}]
yApplyPermut[MSBcodes_,LSBcodes_] :=
    Table[yPermuts[[MSBcodes[[-i]], LSBcodes[[i]]]],{i,Length[MSBcodes]}]

(*getGoodPattern1d[nlevels_:4] := (* here nlevels: 2^nlevels *)
    Module[ {dir,inv,sz, x0,y0},
        sz = 2^nlevels;
        {x0,y0} = {myRandomChoice@Range[0, sz - 1], myRandomChoice@Range[0, sz - 1]};
        dir = Range[0, sz - 1];
        inv = FromDigits[#, 2] & /@ Reverse /@ (IntegerDigits[#, 2, nlevels] & /@ dir);
        BitXor[#, x0] & /@ inv
    ]
*)


getGoodPattern1d[nlevels_:4] := (* here nlevels: 2^nlevels *)
    Module[ {dir,inv,sz},
        sz = 2^nlevels;
        dir = Range[0, sz - 1];
        inv = (Reverse /@ (IntegerDigits[#, 2, nlevels] & /@ dir));
        FromDigits[#, 2] & /@  inv
    ]

myRandomChoice :=
    RandomChoice (* or First *)

getRandomGoodPatternDweRuKi[ix_:1,iy_:1,xshift_:1,yshift_:1] :=
    goodPatternsDweRuKi[[iy,ix]][[yshift,xshift]]
getRandomGoodPatternDweRuKiActiveOnly[ix_:1,iy_:1,xshift_:1,yshift_:1] :=
    goodPatternsDweRuKi[[iy,ix]][[yshift,xshift]][[1]]


(*recursiveSubdivDweRuKi2D[level_:1,x0_:1,y0_:1] :=
    Module[ {distribBetweenPatterns,x1,x2,y1,y2,prevlevelPattern,newpattern,i,j,xtile,ytile,xType,yType},
        If[level == 1, Return[getRandomGoodPatternDweRuKiActiveOnly[x0,y0] ] ];
        distribBetweenPatterns = getRandomGoodPatternDweRuKi[x0,y0];
           Flatten[#,1]& @ Table[
            {{x1,x2},{y1,y2}} = distribBetweenPatterns[[i]];
            prevlevelPattern = recursiveSubdivDweRuKi2D[level-1,x1,y1];
            newpattern = Table[
                xtile = prevlevelPattern[[j,1,1]];
                ytile = prevlevelPattern[[j,2,1]];
                xType = prevlevelPattern[[j,1,-1]];
                yType = prevlevelPattern[[j,2,-1]];
                x2 = xPermuts[[xType,y1]];
                y2 = yPermuts[[yType,x1]];        
                (*Print[prevlevelPattern[[j]] -> {xtile,ytile} -> {xType,yType} -> xPermuts[[ytile,xType]] -> {Join[{x1},prevlevelPattern[[j,1]],{x2}], Join[{y1},prevlevelPattern[[j,2]],{y2}]}];*)
                {Join[{x1},prevlevelPattern[[j,1]],{x2}], Join[{y1},prevlevelPattern[[j,2]],{y2}]}
            ,{j,Length[prevlevelPattern]}];
            (*Print[prevlevelPattern[[j]] -> {x1,y1}->{x2,y2}->"distribBetweenPatterns"-> (mf/@newpattern)];*)
            (*Select[newpattern, (mx [[ #[[2,-2]], #[[2,-1]] ]] != 0) &]*)
            newpattern
        ,{i,Length[distribBetweenPatterns]}]
    ] (* recursiveSubdivDweRuKi2D *)
*)

recursiveSubdivDweRuKi2D[level_:1,x0_:1,y0_:1] :=
    Module[ {prevlevelActiveCodes,prevlevelBuds,allnewActiveCodes,xcode,ycode,xType,yType,xshift,yshift,newActiveCodes,newBuds,xbaseCode,ybaseCode,allnewBuds,xc,yc,xlastDigit,ylastDigit},
        If[ level == 1,
            Return[getRandomGoodPatternDweRuKi[x0,y0]]
        ];
        {prevlevelActiveCodes,prevlevelBuds} = recursiveSubdivDweRuKi2D[level-1,x0,y0];
        allnewActiveCodes =
        Join[
            Flatten[#,1]& @ Table[
                {xcode,ycode} = prevlevelActiveCodes[[i]];
                {xType,yType} = #[[-2]]& /@ {xcode,ycode};
                {xshift,yshift} = #[[-1]]& /@ {xcode,ycode};
                {newActiveCodes,newBuds} = getRandomGoodPatternDweRuKi[xType,yType,1,1];
                {xbaseCode,ybaseCode} = (Drop[#,-1]& /@ {xcode,ycode});
                Print[i -> {xcode,ycode} -> {xType,yType} -> {xshift,yshift} ];
                Table[
                    {xc,yc} = newActiveCodes[[j]];
                    xlastDigit = xPermuts[[ xc[[-1]], ycode[[1]] ]];
                    ylastDigit = yPermuts[[ yc[[-1]], xcode[[1]] ]];
                    xlastDigit = 1;
                    ylastDigit = 1;

                       (*xlastDigit = xcode[[ -1 ]];
                       ylastDigit = ycode[[ -1 ]];*)
                    {Join[xbaseCode,xc,{xlastDigit}], Join[ybaseCode,yc,{ylastDigit}]}
                ,{j,Length[newActiveCodes]}]
            ,{i,Length[prevlevelActiveCodes]}]
            ,
            Flatten[#,1]& @ Table[
                {xcode,ycode} = prevlevelBuds[[i]];
                {xType,yType} = #[[-2]]& /@ {xcode,ycode};
                {xshift,yshift} = {1,1};
                {newActiveCodes,newBuds} = getRandomGoodPatternDweRuKi[xType,yType,1,1];
                {xbaseCode,ybaseCode} = (Drop[#,-1]& /@ {xcode,ycode});
                Print[i -> {xcode,ycode} -> {xType,yType} -> {xshift,yshift} ];
                Table[
                    {xc,yc} = newActiveCodes[[j]];
                    xlastDigit = xPermuts[[ xc[[-1]], ycode[[1]] ]];
                    ylastDigit = yPermuts[[ yc[[-1]], xcode[[1]] ]];
                    xlastDigit = 1;
                    ylastDigit = 1;

                       (*xlastDigit = xcode[[ -1 ]];
                       ylastDigit = ycode[[ -1 ]];*)
                    {Join[xbaseCode,xc,{xlastDigit}], Join[ybaseCode,yc,{ylastDigit}]}
                ,{j,Length[newActiveCodes]}]
            ,{i,Length[prevlevelBuds]}]
        ];
        allnewBuds = {};
        {allnewActiveCodes,allnewBuds}
    ] (* recursiveSubdivDweRuKi2D *)

pocDweRuKi[innlevels_:1, inmxsz_:3, generateDiscrepancy_:True, generateFourier_:False ] :=
    Module[ {},
        showGraphics = If[ ilevel <= 2,
                           True,
                           False
                       ];
        fouriertabsz = 1024;
        fsum = Table[0,{fouriertabsz},{fouriertabsz}];
        mxsz = inmxsz;
        base = mxsz;
        baselog = Log[2,base];
        nlevels = innlevels;
        mx = Switch[mxsz, 2, mx21, 4, mx4233, 8, mx86777776 ];
        basename = Switch[mxsz, 2, "mx21", 4, "mx4233", 8, "mx86777776" ];

        (*mx = Switch[mxsz, 2, mx22, 4, mx4444, 8, mx88888888 ];*)
        myRandomSampleDir = myRandomSampleInv = Identity;
        orderTabLength = 10;
        init[mx,True, True];
        fname = "data/DweRuKi_"<>basename<>"_BestPatterns.dat";
        goodPatternsDweRuKi = Get[fname];
        discrepancyTabDweRuKi = Table[0,{nlevels}];
        discrepancyTabDweRuKi = Table[0,{nlevels}];
        Switch[mxsz
        ,2,
            xcodePermuts = Table[Select[getRandomGoodPerms2[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
            ycodePermuts = Table[Select[getRandomGoodPerms2[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
        ,4,
            xcodePermuts = Table[Select[getRandomGoodPerms4[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
            ycodePermuts = Table[Select[getRandomGoodPerms4[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
        ,8,
            xcodePermuts = Table[Select[getRandomGoodPerms8[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
            ycodePermuts = Table[Select[getRandomGoodPerms8[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
        ];
        xPermuts = yPermuts = Table[Range[mxsz],{mxsz}];
        Do[ tmp = {productionRulesDir[[i]],xcodePermuts[[i]]};
            xPermuts[[i, tmp[[1]] ]] = tmp[[2]];
        ,{i,mxsz}];
        Do[ tmp = {productionRulesDir[[i]],ycodePermuts[[i]]};
            yPermuts[[i, tmp[[1]] ]] = tmp[[2]];
        ,{i,mxsz}];
        codes = getRandomGoodPatternDweRuKi[];
        activeCodes = getRandomGoodPatternDweRuKiActiveOnly[];
        Do[
            (*codes = recursiveSubdivDweRuKi2D[ilevel];*)
            (*codes = getDweRuKicodes2D[ilevel];*)
            
            (*activeCodes = Reverse /@ (Sort @ (Reverse /@ codes) );*)
            (*activeCodes = codes;*)
            ptsXY = DweRuKiPhiXY /@ activeCodes;
            If[ generateDiscrepancy,
                discrepancy = getDiscrepancy2Dexact[ptsXY];
                discrepancyTabDweRuKi[[ilevel]] = { Length[activeCodes], discrepancy};
                Print[ilevel -> Length[codes]  -> Length[activeCodes]  -> DweRuKinacci[2 ilevel + 2] -> discrepancy];
                Print[discrepancyTabDweRuKi];
            ];
            If[ showGraphics,
                g = Graphics[{{Opacity[.5], getDweRuKiGrid[2 ilevel]} 
                        ,PointSize[.005],Point/@ ptsXY
                        ,Table[Text[Style[(*DweRuKigetIntValueInv@*) activeCodes[[i]],6],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]
                        (*,Table[Text[Style[Mod[i,100],18],ptsXY[[i]],{-1,1}],{i,Length[ptsXY]}]*)
                    } ,ImageSize -> ilevel/3 {1200,1200}   ];
                g//Print;
                Export["g.pdf",g];
            (*Print[mf/@activeCodes[[;;10]]];*)
            ];
            If[ ilevel != nlevels,
                (*codes = Sort @ (Flatten[#, 1] & @ Table[subdivDweRuKi2D[codes[[i]],i], {i,Length[codes]} ] );*)
                {activeCodes,buds} = recursiveSubdivDweRuKi2D[ilevel+1];
                Print[Length[First/@activeCodes] -> (Length@Union[First/@activeCodes])];
                Print[Length[Last/@activeCodes] -> (Length@Union[Last/@activeCodes])];
            ];
        ,{ilevel,1,nlevels}];
        Graphics[{Point/@ptsXY}]//Print;
        If[ generateDiscrepancy,
            discrepancyTabSobol = { (* Sobol 2D Kuo's implementation http://web.maths.unsw.edu.au/~fkuo/sobol/ *)
                    {16, 0.171875},(*pSobol2Dlog1 = discrepancyComplexity[data, (Log[#])/# &, "Discrepancy Sobol 2D N/LogN"]; pSobol2Dlog1 //Print;*)
                     {64, 0.0537109}, 
                     {256, 0.0145874}, 
                     {1024, 0.00429916}, 
                     {4096, 0.00132918}, 
                     {16384, 0.000372991}, 
                     {65536, 0.0000994867},
                     {262144, 0.000027597358}
                 };
            discrepancyTabDweRuKim21 = {{3,0.618034},{5,0.418034},{8,0.27051},{13,0.193678},{21,0.130694},{34,0.0866825},{55,0.0554336},{89,0.0372093},{144,0.0244132},{233,0.0161211},
                {377,0.010242},{610,0.00673888},{987,0.00436806},{1597,0.00285382},{2584,0.00180478},{4181,0.0011745},{6765,0.000755457},{10946,0.000489471},{17711,0.000308601},{28657,0.000199274}};
            ListPlot[{Log[2,#]& /@ discrepancyTabDweRuKi, Log[2,#]& /@ discrepancyTabSobol}, Joined->True
                ,Ticks->{Table[{i,i},{i,20}],Automatic}
                ,PlotLabel->"log-log discrepancy"]//Print;
        ];
        If[ generateFourier,
            fsum += getFourier2D[Ceiling[(fouriertabsz ptsXY)],fouriertabsz];
            fsum[[1,1]] = 0;
            fsum = Reorg[fsum];
            ListDensityPlot[fsum, ImageSize -> {1024,1024}]//Print;
        ];
    ] (*pocDweRuKi*)


xDweRuKiApplyPermut[MSBcodes_,LSBcodes_] :=
    Table[xPermuts[[MSBcodes[[i]], LSBcodes[[i]]]],{i,Length[MSBcodes]}]
yDweRuKiApplyPermut[MSBcodes_,LSBcodes_] :=
    Table[yPermuts[[MSBcodes[[i]], LSBcodes[[i]]]],{i,Length[MSBcodes]}]

prepDweRuKiBestPatterns[mxsz_:4, dbgGraphics_:True] :=
    Module[ {},
        myRandomChoice :=
            RandomChoice;
        ntrials = 1;
        mx = Switch[mxsz, 2, mx21, 4, mx4233, 8, mx86777776 ];
        basename = Switch[mxsz, 2, "mx21", 4, "mx4233", 8, "mx86777776" ];
        myRandomSampleDir = myRandomSampleInv = Identity;
        init[mx, False, True];
        orderInv = Table[
            Table[Select[1+getGoodPattern1d[Log[2,mxsz]], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}]
            ,{orderTabLength}];
        buildBasicSeqCumul[True];
        xTypetileMSBcodes = Table[ (*Partition[#,1]& @*) Select[getRandomGoodPermsWithIndex4[1], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
        yTypetileMSBcodes = Table[ (*Partition[#,1]& @*) Select[getRandomGoodPermsWithIndex4[1], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
        Switch[mxsz
        ,4,
            xcodePermuts = Table[Select[getRandomGoodPermsWithIndex4[i], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
            ycodePermuts = Table[Select[getRandomGoodPermsWithIndex4[i], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
        ];
        xPermuts = yPermuts = Table[Range[mxsz],{mxsz}];
        Do[    tmp = {productionRulesDir[[i]],xcodePermuts[[i]]};
               xPermuts[[i, tmp[[1]] ]] = tmp[[2]];
        ,{i,mxsz}];
        Do[    tmp = {productionRulesDir[[i]],ycodePermuts[[i]]};
               yPermuts[[i, tmp[[1]] ]] = tmp[[2]];
        ,{i,mxsz}];
        res = Table[
            bestPatternsTab = Table[{},{mxsz},{mxsz}];
            mindistTab = Table[0,{mxsz},{mxsz}];
            Do[
            Do[
                Do[
                    (*tuples = Tuples[{xTypetileMSBcodes[[xType]], yTypetileMSBcodes[[yType]]}];*)
                    (*codes = Table[
                        {xtileMSBcode,ytileMSBcode} = tuples[[iTuples]];
                        xtileLSBcodes = xPermuts[[xtileMSBcode,yType]];
                        ytileLSBcodes = yPermuts[[ytileMSBcode,xType]];
                        {Join[{xtileMSBcode},{xtileLSBcodes}], Join[{ytileMSBcode},{ytileLSBcodes}]}
                    ,{iTuples,Length[tuples] }];*)
                    
                    cL2 = DweRuKigetSubdivWordsDir[2];
                    indtab = DweRuKigetIntValueInv /@ cL2;
                    codes = {cL2, cL2[[1 + indtab]]}//T;
                    extendedCodes = ({Join[{xType},#[[1]]],  Join[{yType},#[[2]]]}& /@ codes );
                    activeCodes = DweRuKiselectactiveCodes @ extendedCodes;
                    buds = Complement[extendedCodes,activeCodes];
                    mindist = If[ Length[activeCodes] == 1,
                                  1,
                                  getsetMinDist1[activeCodes]
                              ];
                    pivots = Select[activeCodes,#[[1,-1]] == 1 && #[[2,-1]] == 1 &];
                    (*Abort[];*)
                    indTab = (#[[2]] & /@ #) & /@ pivots;
                    (*Print[{iixshift,iiyshift,iidx,iidy} -> indTab];*)
                    Do[
                        {ix,iy} = indTab[[j]];
                        If[ mindist > mindistTab[[iy,ix]] + eps,
                            mindistTab[[iy,ix]] = mindist;
                            (*bestPatternsTab[[iy,ix]] = ((Drop[#,1]& /@ #)& /@ (Join @@ {activeCodes, buds}));*)
                            bestPatternsTab[[iy,ix]] = {(Drop[#,1]& /@ #)& /@ activeCodes, (Drop[#,1]& /@ #)& /@ buds};
                            Print[(*pivots -> *)itrial -> j -> {xType,yType}," : ", {ix,iy} -> "Updating bestPatternsTab " -> ( Total /@ ((If[ Length[#] > 0,
                                                                                                                                                       1,
                                                                                                                                                       0
                                                                                                                                                   ] & /@ #) & /@ bestPatternsTab) ),"/",mxsz];
                            If[ dbgGraphics,
                                pts = (getFracValueDir /@ #)& /@ activeCodes;
                                grid = getDweRuKiGrid[2,xType,yType];
                                gl = Table[
                                    {    Point[pts[[i]]]
                                        (*,Text[( activeCodes[[i]]),pts[[i]],{-1,-1}]}*)
                                        (*,Text[Style[(i-1),18],pts[[i]],{-1,-1}]*)
                                        }
                                ,{i,Length[activeCodes]}];
                                Graphics[{grid, PointSize[.02], gl }, ImageSize -> {1024,1024}/2]//Print;
                            (*Abort[];*)
                            ];
                        ];
                    ,{j, 1 Length[indTab]}];
                ,{iysubype,mxsz},{ixsubype,mxsz}];
                ,{iiyshift,mxsz},{iixshift,mxsz}]
        ,{itrial,ntrials}];
            Print[{xType,yType} -> ( mindistTab )];
            bestPatternsTab
        ,{yType,mxsz},{xType,mxsz}];
        fname = "data/DweRuKi_"<>basename<>"_BestPatterns.dat";
        Print["writing into",fname];
        Put[res,fname];
    ] (* prepDweRuKiBestPatterns *)

getsetMinDist1PlusFirstDigit[codes_,{xType_,yType_}] :=
    getptsMinDist1[(getFracValueDir /@ #)& /@ ({Join[{xType},#[[1]]],  Join[{yType},#[[2]]]}& /@ codes)]
(*getsetMinDist1[codes_] := First @ ( getptsMinDist12[(getFracValueDir /@ #)& /@ codes] )*)
getsetMinDist1[codes_] :=
    ( getptsMinDist1[(getFracValueDir /@ #)& /@ codes] )


getptsMinDist1[pts_] :=
    Module[ {elem,iElem,len = Length[pts]},
        If[ Length[pts] == 1,
            Return[1]
        ];
        Table[
            elem = pts[[iElem]];
            Sort[euclidlen2[elem-#] & /@ pts][[2;;2]]
        ,{iElem, len}]//Min
    ] (* getptsMinDist1 *)

(*
getptsMinDist12[ptsunsorted_,torFlag_:False] := (* needs triple-checking for toroidal and non-int bases.... *)
    Module[ {pts = Sort[ptsunsorted],firstrow,firstcol,lastrow,lastcol,elem,iElem,len = Length[ptsunsorted],lensq,tab},
        lensq = 2 + Ceiling @ Sqrt[Length[ptsunsorted]];
        If[ torFlag,
            firstrow = (Reverse /@ (Sort[Reverse /@ pts])[[;; lensq]]);
            firstrow = Join[firstrow, {First[Sort[firstrow]]+{len,0}},{Last[Sort[firstrow]]+{-len,0}} ];
            lastrow = (Reverse /@ (Sort[Reverse /@ pts])[[len-lensq+1;;len]]);
            lastrow = Join[lastrow, {First[Sort[lastrow]]+{len,0}},{Last[Sort[lastrow]]+{-len,0}} ];
            firstcol = pts[[;; lensq]];
            lastcol = pts[[len-lensq+1;;len]];
            pts = Join[pts, 
                Plus[#,{0,1}]& /@ firstrow, 
                Plus[#,{1,1}]& /@ firstrow[[1;;1]], 
                Plus[#,{-1,1}]& /@ firstrow[[-1;;-1]], 
                Plus[#,{0,-1}]& /@ lastrow, 
                Plus[#,{1,-1}]& /@ lastrow[[1;;1]], 
                Plus[#,{-1,-1}]& /@ lastrow[[-1;;-1]], 
                Plus[#,{1,0}]& /@ firstcol , 
                Plus[#,{-1,0}]& /@ lastcol 
            ]
        ];
        tab = Table[
            elem = pts[[iElem]];
            Sort[euclidlen2[elem-#] & /@ pts][[2;;3]]
        ,{iElem, len}];
        (*{Min[First/@tab], Min[Total/@tab]}*)
        Round[1000000 (Sort[{#[[1]], Total@#} & /@ tab][[1]])]/1000000.
    ] (* getptsMinDist12 *)
*)

getSetDweRuKiHaltonLike[mx1_,mx2_,nlevels_] :=
    Module[ {xcodes,ycodes,xvals,yvals,len},
        init[mx1,False,True];
        xcodes = {{}};
        Do[ xcodes = Flatten[#,1]& @ (DweRuKiapplyProductionRules /@ xcodes ) ,{nlevels}];
        xvals = DweRuKigetFracValueInv/@xcodes;
        init[mx2,False,True];
        ycodes = {{}};
        Do[ ycodes = Flatten[#,1]& @ (DweRuKiapplyProductionRules /@ ycodes ) ,{nlevels}];
        yvals = DweRuKigetFracValueInv/@ycodes;
        len = Min[xvals // Length, yvals // Length];
        {Take[xvals,len], Take[yvals,len]}//T
    ]
    
    
pocDweRuKiHaltonLike[nlevels_:2] :=  (* does not work !!!!!!!*)
    Module[ {},
        generateDiscrepancy = True;
        generateFourier = False;
        fouriertabsz = 1024;
        fsum = Table[0,{fouriertabsz},{fouriertabsz}];
        discrepancyTabDweRuKi = Table[0,{nlevels}];
        mx1 = mx22;
        mx2 = mx21;
        mx1 = mx87566575;
        mx2 = mx85765667;
        mx1 = mx22;
        mx2 = mx321;
        mx1 = mx55555;
        mx2 = mx333;
        mx1 = mx321;
        mx2 = mx4332;
        Do[
            ptsXY = getSetDweRuKiHaltonLike[mx1,mx2,ilevel];
            If[ generateDiscrepancy,
                discrepancy = getDiscrepancy2Dexact[ptsXY];
                discrepancyTabDweRuKi[[ilevel]] = { Length[ptsXY], discrepancy};
                Print[ilevel -> Length[ptsXY] -> discrepancy];
                Print[discrepancyTabDweRuKi];
            ];
        ,{ilevel,1,nlevels}];
        Graphics[{Point/@ptsXY},AspectRatio->1,Frame->True]//Print;
        If[ generateDiscrepancy,
            discrepancyTabSobol = { (* Sobol 2D Kuo's implementation http://web.maths.unsw.edu.au/~fkuo/sobol/ *)
                    {16, 0.171875},(*pSobol2Dlog1 = discrepancyComplexity[data, (Log[#])/# &, "Discrepancy Sobol 2D N/LogN"]; pSobol2Dlog1 //Print;*)
                     {64, 0.0537109}, 
                     {256, 0.0145874}, 
                     {1024, 0.00429916}, 
                     {4096, 0.00132918}, 
                     {16384, 0.000372991}, 
                     {65536, 0.0000994867},
                     {262144, 0.000027597358}
                 };
            discrepancyTabDweRuKim21 = {{3,0.618034},{5,0.418034},{8,0.27051},{13,0.193678},{21,0.130694},{34,0.0866825},{55,0.0554336},{89,0.0372093},{144,0.0244132},{233,0.0161211},
                {377,0.010242},{610,0.00673888},{987,0.00436806},{1597,0.00285382},{2584,0.00180478},{4181,0.0011745},{6765,0.000755457},{10946,0.000489471},{17711,0.000308601},{28657,0.000199274}};
            ListPlot[{Log[2,#]& /@ discrepancyTabDweRuKi, Log[2,#]& /@ discrepancyTabSobol}, Joined->True
                ,Ticks->{Table[{i,i},{i,20}],Automatic}
                ,PlotLabel->"log-log discrepancy"]//Print;
        ];
        If[ generateFourier,
            fsum += getFourier2D[Ceiling[(fouriertabsz ptsXY)],fouriertabsz];
            fsum[[1,1]] = 0;
            fsum = Reorg[fsum];
            ListDensityPlot[fsum, ImageSize -> {1024,1024}]//Print;
        ];
    ] (* pocDweRuKiHaltonLike *)
(*
mx22 = {{1,1},{1,1}};
mx333 = {{1,1,1},{1,1,1},{1,1,1}};
mx4444 = {{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}};
mx55555 = {{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1}};
mx88888888 = {{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1}};
mx7777777 = {{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1}};
    
mx21 = {{1,1},{1,0}};
mx321 = {{1, 1, 1}, {1, 1, 0}, {1, 0, 0}};    (* symmetrical >>>> ratio:2.24698 analytical eval: 1/3 (2+7^(2/3)/(1/2 (1+3 I Sqrt[3]))^(1/3)+(7/2 (1+3 I Sqrt[3]))^(1/3)) *)
mx4332 = {{1,1,1,1},{1,1,1,0},{1,1,0,1},{1,0,1,0}};     (* >>>> ratio:1.78572 *)
mx4233 = {{1,1,1,1},{1,0,1,0},{1,1,0,1},{1,0,1,1}};     (* >>>> ratio:1.78572 *)
mx87566575 = {{1,1,1,1,1,1,1,1},{1,1,0,1,1,1,1,1},{1,0,1,1,0,1,0,1},{1,1,1,0,1,0,1,1},{1,1,0,1,0,1,0,1},{1,1,1,0,1,1,1,1},{1,1,0,1,0,1,1,1},{1,1,1,1,1,1,1,0}};    (* >>>> ratio:1.57478 *)
mx87566575 = {{1,1,1,1,1,1,1,1},{1,1,0,1,1,1,1,1},{1,0,1,0,1,0,1,1},{1,1,0,1,1,1,1,0},{1,1,1,1,0,1,0,1},{1,1,0,1,1,0,1,0},{1,1,1,1,0,1,1,1},{1,1,1,0,1,0,1,0}}; (* >>>> ratio:1.61092 *)
mx84675675 = {{1,1,1,1,1,1,1,1},{1,0,1,0,1,0,1,0},{1,1,0,1,0,1,1,1},{1,0,1,1,1,1,1,1},{1,1,0,1,1,0,1,0},{1,0,1,1,0,1,1,1},{1,1,1,1,1,1,0,1},{1,0,1,1,0,1,1,0}}; (* >>>> ratio:1.90463 *)
mx86665757 = {{1,1,1,1,1,1,1,1},{1,0,1,0,1,1,1,1},{1,1,1,1,0,1,0,1},{1,0,1,1,1,0,1,1},{1,1,0,1,0,1,0,1},{1,1,1,0,1,1,1,1},{1,1,0,1,0,1,1,0},{1,1,1,1,1,1,0,1}} (* >>>> ratio:{1.58958,1.58958} *)
mx85765667 = {{1,1,1,1,1,1,1,1},{1,1,0,1,0,1,0,1},{1,0,1,1,1,1,1,1},{1,1,1,0,1,0,1,1},{1,0,1,1,0,1,0,1},{1,1,1,0,1,1,1,0},{1,0,1,1,0,1,1,1},{1,1,1,1,1,0,1,1}}; (* >>>> ratio:1.58958 normevecDir:normevecDir lambda:6.38889 ratio:1.58958 CharacteristicPolynomial: 1+5 x-3 x^2-25 x^3+3 x^4+29 x^5-7 x^6-6 x^7+x^8 factorized CharacteristicPolynomial: 1+5 x-3 x^2-25 x^3+3 x^4+29 x^5-7 x^6-6 x^7+x^8 *)

*)



(*-------------------- pocAALDSFIBO2D -----------------------*)
FIBOF[symbols_] :=
    With[ {s = Reverse[symbols]},
        Total@Table[Fibonacci[i+1 ] s[[i]], {i, Length[s]}]
    ]
FIBOFinv[symbols_] :=
    Total@Table[Fibonacci[i+1 ] symbols[[i]], {i, Length[symbols]}]
FIBOFxy[symbols_] :=
    FIBOF/@symbols

FIBOphitab = Table[phi^-i, {i, 32}] // N;
FIBOPhi[s_] := Sum[FIBOphitab[[i]] s[[i]], {i, Length[s]}] 

FIBOPhiXY[s_] := FIBOPhi/@s


FIBOstr2nfromsecondpos[str_] :=
    FIBOF @ Table[ToExpression @ StringTake[str, {i}] , {i, 2,StringLength[str]}]
FIBOstr2n[str_] :=
    FIBOF @ Table[ToExpression @ StringTake[str, {i}] , {i, StringLength[str]}]
FIBOstr2nInv[str_] :=
    FIBOF @ Table[ToExpression @ StringTake[str, {i}] , {i, StringLength[str],2,-1}]

getFIBOCodes1d[nlevels_:1] :=
    Block[ {codes = {{0}}},
        Table[ codes = Flatten[#,1]& @ (subdivFIBO /@ codes),{nlevels-1}];
        Drop[#,1]& /@ codes
    ] (* getFIBOCodes1d *)

getFIBOCodes1dShort[nlevels_:1] :=
    Block[ {codes = {{1}}},
        Table[ codes = Flatten[#,1]& @ (subdivFIBO /@ codes),{nlevels-1}];
        Drop[#,1]& /@ codes
    ] (* getFIBOCodes1dShort *)


subdivFIBO2D[{xCode_,yCode_},count_:0] :=
    Module[ {len = Length[xCode](*,halflen,tyletype,patterntype,extraCodes,xFirstHalf,yFirstHalf,restx,resty,res,reslen*)},
        halflen = len/2;
        {xFirstHalf,yFirstHalf} = Take[#,(halflen)]& /@ {xCode,yCode};
        {restx,resty} = Take[Reverse[#],-halflen]& /@ {yCode,xCode};
        tyletype = #[[halflen]]& /@ {xCode,yCode};
        patterntype = #[[halflen+1]]& /@ {xCode,yCode};
        (*If[patterntype == {{0,1},{0,1}}, Print[">>>>>>>>>>>>>>",tyletype -> patterntype] ];*)
        extraCodes = Switch[tyletype
            ,{0,0},(* tyletype == {0,0} large square *)
                RandomChoice @ {
                    {{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}},
                    {{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}},
                    {{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{0,0}},{{1,1},{1,1}}},
                    {{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}},{{1,1},{1,1}}}
                }
        
            ,{0,1}, (* tyletype == {0,1} hor rect *)
                RandomChoice @ {
                    {{{0,0},{0,0}},{{1,0},{0,1}}},
                    {{{0,0},{0,1}},{{1,0},{0,0}}}
                }
        
            ,{1,0}, (* tyletype == {1,0} vert rect *)
                RandomChoice @ {
                    {{{0,0},{0,0}},{{0,1},{1,0}}},
                    {{{0,0},{1,0}},{{0,1},{0,0}}}
                }                    
            ,_,     { {{0,0},{0,0}} }
        
        ];
        res = {Join[xFirstHalf,#[[1]],restx],Join[yFirstHalf,#[[2]],resty]}& /@ extraCodes;
        reslen = Length[res ];
        If[ Max[(ListConvolve[{1, 1}, #] & /@ #)& /@ (Take[#,Min[3,reslen]]& @ res)] > 1,
            Print["<<<<<<<<<<<<",count," subdivFIBO2D",mf[{xCode,yCode}] -> (mf[tyletype]) -> (mf[patterntype]) -> (mf/@extraCodes)  -> (mf/@res) ]
        ];
        (*Print[count," subdivFIBO2D",mf[{xCode,yCode}] -> (mf[tyletype]) -> (mf[patterntype]) -> (mf/@extraCodes) -> (mf/@res),  If[Max[(ListConvolve[{1, 1}, #] & /@ #)& /@ (Take[#,Min[3,reslen]]& @ res)] > 1, "<<<<<<<<<<<<",""] ]*);
        res
    ] (* subdivFIBO2D *)
    
tstFIBOXor[nlevels_:3] :=
    Module[ {},
        grid = getFIBOGrid[2 nlevels];
        codes = getFIBOCodes1d[nlevels+1];
        count = 0;
        gl = Table[
            xcodes = codes[[ix]];
            ycodes = codes[[iy]];
            xycode = {Join[xcodes,Reverse@ycodes],Join[ycodes,Reverse@xcodes]};
            xy = FIBOPhiXY@xycode;
            If[ Max[(ListConvolve[{1, 1}, #] & /@ xycode)] < 2,
                count++;
                Print[count -> {ix,iy} -> (mf@{xcodes,ycodes}) -> (mf@xycode)];
                {Point[xy],Text[Style[count,24],xy,{-1,-1}]},(*ELSE*)
                Print[">>>>>>>>>>>>" -> {ix,iy} -> (mf@{xcodes,ycodes}) -> (mf@xycode)];
                {}
            ]
        ,{iy,Length[codes]},{ix,Length[codes]}];
        Graphics[{grid,PointSize[.03],gl},ImageSize -> {750,750}]//Print
    ]
    
 tstFIBOShift[nlevels_:6] :=
     Module[ {},
         grid = getFIBOGrid[nlevels];
         codes = getFIBOCodes1d[nlevels+1];
         len = Length[codes];
         Table[
             count = 0;
             gl = Table[
                 xcodes = codes[[ii]];
                 ycodes = Reverse@codes[[ Mod[ii-ishift,len,1] ]];
                 xycode = {Join[xcodes ],Join[ycodes ]};
                 xy = FIBOPhiXY@xycode;
                 If[ Max[(ListConvolve[{1, 1}, #] & /@ xycode)] < 2,
                     count++;
                     (*Print[{ishift,count} -> (mf@{xcodes,ycodes}) -> (mf@xycode)];*)
                     {Point[xy],Text[Style[count,24],xy,{-1,-1}]},(*ELSE*)
                     Print[">>>>>>>>>>>>" -> {ishift,count} -> (mf@{xcodes,ycodes}) -> (mf@xycode)];
                     {}
                 ]
             ,{ii,Length[codes]}];
             Graphics[{grid,PointSize[.03],gl},ImageSize -> {700,700}/2,PlotLabel->{ishift,Length[gl]-Count[gl,{}]}]
         ,{ishift,0,len-1}]//Print;
     ]
    
    
getFIBO2Dmarks[codes_,textMaks_:True] :=
    Module[ {halflen,len,orig,dx,dy,xCode,yCode,col = If[ textMaks,
                                                          Gray,
                                                          Black
                                                      ]},
        Table[
            {xCode,yCode} = codes[[i]];
            len = Length[xCode];
            halflen = len/2;
            orig = FIBOPhiXY[{xCode,yCode}];
            (*Print[{xCode,yCode} -> tyletype -> orig];*)
            {dx,dy} = Last /@ {xCode, yCode};
            {col, Rectangle[orig,orig+{phitab[[len+dx]],phitab[[len+dy]]}]
                , If[ textMaks,
                      {Black, Text[Style[i,24],FIBOPhiXY @ {xCode,yCode} ,{-1,-1}]},
                      {}
                  ]
            }
        ,{i,Length[codes]}]
    ]


selectactiveCodesFIBO[codes_] :=
    With[ {halflen = Length[codes[[1,1]]]/2},
        Select[codes, !((#[[1,halflen]] == 1) && (#[[2,halflen]] == 1)) &]
    ]

pocAALDSFIBO2D[nlevels_:4,textMaks_:True,generateDiscrepancy_:True] :=
    Module[ {},
        fouriertabsz = 4096;
        ntrials = 10;
        codes = {{{0, 0}, {0, 0}}, {{0, 1}, {1, 0}}, {{1, 0}, {0, 1}}, {{1, 1}, {1, 1}}};
        codes = {{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}};
        codes = {{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}};
        discrepancyTabFIBO = Table[0,{nlevels}];
        Do[
            activeCodes = selectactiveCodesFIBO[codes];
            If[ generateDiscrepancy,
                ptsXY = FIBOPhiXY /@ activeCodes;
                discrepancy = getDiscrepancy2Dexact[ptsXY];
                discrepancyTabFIBO[[ilevel]] = { Length[activeCodes], discrepancy};
                Print[ilevel -> Length[codes]  -> Length[activeCodes]  -> Fibonacci[2 ilevel + 2] -> discrepancy];
                Print[discrepancyTabFIBO];
            ];
            len = Length[codes[[1,1]]];
            halflen = len/2;
            permutCodes = getFIBOCodes1d[halflen+2 ];
            permutCodesShort = getFIBOCodes1dShort[halflen+2 ];
            newcodes = {Join[#[[1]],Table[0,{len}]],Join[#[[2]],Table[0,{len}]] } & /@ codes;
            (*Print["permutCodes: ",mf@permutCodes];
            Print["permutCodesShort: ",mf@permutCodesShort];
            Print["newcodes: ",mf/@newcodes];*)
            codesX = Take[#,(halflen+1)]& /@ (First /@ (Sort@newcodes));
            codesY = Take[#,(halflen+1)]& /@ (First/@(Sort@(Reverse/@newcodes)));
            {shifttabx,shifttaby} = { (#[[ilevel+1;;]]& /@(Last/@(Sort[Reverse /@ codes]))),      (#[[ilevel+1;;]]& /@(First@(Sort/@(Reverse@newcodes))))};
            shiftedXcodes = Table[
                    xcode = codesX[[i]];
                    If[ Last[xcode] == 1,
                        RotateRight[permutCodesShort, FIBOF[xcode] ],
                        RotateRight[permutCodes, FIBOF[xcode] ]
                    ]
                    
                    (*RotateRight[permutCodes, FIBOF[If[Last[xcode]==1,Join[xcode,{0}],xcode]] ]*)
                ,{i,Length[codesX]}];
            shiftedYcodes = Table[
                    ycode = codesY[[i]];
                    If[ Last[ycode] == 1,
                        RotateRight[permutCodesShort, FIBOF[ycode] ],
                        RotateRight[permutCodes, FIBOF[ycode] ]
                    ]
                    (*RotateRight[permutCodes, FIBOF[ycode] ]*)
                    (*RotateRight[permutCodes, FIBOF[If[Last[ycode]==1,Join[ycode,{0}],ycode]] ]*)
                ,{i,Length[codesY]}];
            (*Print["shiftedXcodes: ", ilevel -> (mf /@ shiftedXcodes)];
            Print["shiftedYcodes: ", ilevel -> (mf /@ shiftedYcodes)];*)
            showGraphics = If[ ilevel <= 6,
                               True,
                               False
                           ];
            If[ showGraphics,
                Graphics[{{getFIBOGrid[Length[First@(First@codes)] ]}, getFIBO2Dmarks[#,textMaks]& @ activeCodes
                        (*,Point/@ (FIBOPhiXY /@ codes)*)
                    } ,ImageSize -> ilevel/3 {1024,1024}  ]//Print
            ];
            If[ ilevel != nlevels,
                codes = Flatten[#, 1] & @ Table[subdivFIBO2D[codes[[i]],i], {i,Length[codes]} ];
            ];
        ,{ilevel,1,nlevels}];
        If[ generateDiscrepancy,
            discrepancyTabSobol = { (* Sobol 2D Kuo's implementation http://web.maths.unsw.edu.au/~fkuo/sobol/ *)
                    {16, 0.171875},(*pSobol2Dlog1 = discrepancyComplexity[data, (Log[#])/# &, "Discrepancy Sobol 2D N/LogN"]; pSobol2Dlog1 //Print;*)
                     {64, 0.0537109}, 
                     {256, 0.0145874}, 
                     {1024, 0.00429916}, 
                     {4096, 0.00132918}, 
                     {16384, 0.000372991}, 
                     {65536, 0.0000994867},
                     {262144, 0.000027597358}
                 };
            ListPlot[{Log /@ discrepancyTabFIBO, Log /@ discrepancyTabSobol}, Joined->True,PlotLabel->"log-log discrepancy"]//Print;
        ];
        Graphics[{Point /@ ptsXY}]//Print;
    ] (* pocAALDSFIBO2D *)
(*
discrepancyTabFIBO2D = {{3,0.618034},{8,0.27051},{21,0.108351},{55,0.0554336},{144,0.0233996},{377,0.0100185},{987,0.00436806},{2584,0.00180478},{6765,0.000736167},{17711,0.000306409},{46368,0.000127471},{121393,0.000051631}}
*)

prepFIBOBestPatterns[mxsz_:8, xType_:1,yType_:1, dbgGraphics_:False] :=
    Module[ {},
        mx = Switch[mxsz, 2, {{1,1},{1,0}}, 4, mx4233, 8, mx87566575 ];
        mx = Switch[mxsz, 2, {{1,1},{1,0}}, 4, mx4233, 8, mx87777777 ];
        myRandomSampleDir = myRandomSampleInv = Identity;
        init[mx,True, True];
        {permutTabSzX,permutTabSzY} = Length /@ {DweRuKigetSubdivWordsDir[2,xType],DweRuKigetSubdivWordsDir[2,yType]};
        bestPatternsTab = Table[{},{permutTabSzY},{permutTabSzX}];
        mindistTab = Table[0,{permutTabSzY},{permutTabSzX}];
        xTypetileMSBcodes = DweRuKigetSubdivWordsDir[1,xType];
        yTypetileMSBcodes = DweRuKigetSubdivWordsDir[1,yType];
        mindistLimit = Switch[mxsz, 4, .01, 8, .0000001 ]; ;
        xTypetileMSBcodes = DweRuKigetSubdivWordsDir[1,xType];
        yTypetileMSBcodes = DweRuKigetSubdivWordsDir[1,yType];
        ntrials = 10000000;
        Do[
            If[ Mod[itrial, 10000] == 0,
                Print["...",{itrial} -> ( mindistTab )];
                fname = Switch[mxsz
                    ,2, "data/prepDweRuKi2x2BestPatterns_"<>ToString[xType]<>"_"<>ToString[yType]<>".dat"
                    ,4, "data/prepDweRuKi4x4BestPatterns_"<>ToString[xType]<>"_"<>ToString[yType]<>".dat"
                    ,8, "data/prepDweRuKi8x8BestPatterns_"<>ToString[xType]<>"_"<>ToString[yType]<>".dat"
                ];
                Put[bestPatternsTab,fname];
            ];
            Switch[mxsz
            ,2,
                xcodePermuts = Table[Select[getRandomGoodPerms2[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
                ycodePermuts = Table[Select[getRandomGoodPerms2[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
            ,4,
                xcodePermuts = Table[Select[getRandomGoodPerms4[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
                ycodePermuts = Table[Select[getRandomGoodPerms4[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
            ,8,
                xcodePermuts = Table[Select[getRandomGoodPerms8[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
                ycodePermuts = Table[Select[getRandomGoodPerms8[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
            ];
            xPermuts = yPermuts = Table[Range[mxsz],{mxsz}];
            Do[
                tmp = {productionRulesDir[[i]],xcodePermuts[[i]]};
                xPermuts[[i, tmp[[1]] ]] = tmp[[2]];
            ,{i,mxsz}];
            Do[
                tmp = {productionRulesDir[[i]],ycodePermuts[[i]]};
                yPermuts[[i, tmp[[1]] ]] = tmp[[2]];
            ,{i,mxsz}];
            codes = Flatten[#,1]& @ Table[
                xtileMSBcodes = xTypetileMSBcodes[[ix]];
                ytileMSBcodes = yTypetileMSBcodes[[iy]];
                xtileLSBcodes = xDweRuKiApplyPermut[xtileMSBcodes,Reverse@ytileMSBcodes];
                ytileLSBcodes = yDweRuKiApplyPermut[ytileMSBcodes,Reverse@xtileMSBcodes];
                {Join[xtileMSBcodes,xtileLSBcodes], Join[ytileMSBcodes,ytileLSBcodes]}
            ,{iy,Length[yTypetileMSBcodes]},{ix,Length[xTypetileMSBcodes]}];
            extendedCodes = ({Join[{xType},#[[1]]],  Join[{yType},#[[2]]]}& /@ codes );
            activeCodes = DweRuKiselectactiveCodes @ extendedCodes;
            
             (*goodPattern = And @@ (((mx [[ #[[1,-1]], yType ]] != 0) && (mx [[ #[[2,-1]], xType ]] != 0))& /@ activeCodes);
             If[!goodPattern, Continue[] ];*)
            buds = Complement[extendedCodes,activeCodes];
            mindist = If[ Length[activeCodes] == 1,
                          1,
                          getsetMinDist1[activeCodes]
                      ];
            (*Print[">>>>>>",Length/@{extendedCodes,activeCodes,buds},mindist];*)
            If[ mindist < mindistLimit,
                Continue[]
            ];
            indTab = Plus[#,1]& /@ ( (getIntValueDir /@ #)& /@activeCodes);
            Do[
                {ix,iy} = indTab[[i]];
                If[ mindist > mindistTab[[iy,ix]] + eps,
                    mindistTab[[iy,ix]] = mindist;
                    (*bestPatternsTab[[iy,ix]] = ((Drop[#,1]& /@ #)& /@ (Join @@ {activeCodes, buds}));*)
                    bestPatternsTab[[iy,ix]] = {mindist, Sort@activeCodes, Sort@buds};
                    Print[{xType,yType} ->  itrial -> i -> "Updating bestPatternsTab ",{iy,ix} -> ( Total /@ ((If[ Length[#] > 0,
                                                                                                                           1,
                                                                                                                           0
                                                                                                                       ] & /@ #) & /@ bestPatternsTab) ),"/",permutTabSzY];
                    If[ dbgGraphics,
                        pts = (getFracValueDir /@ #)& /@ activeCodes;
                        grid = getDweRuKiGrid[2,xType,yType];
                        gl = Table[
                            {Point[pts[[i]]],Text[( activeCodes[[i]]),pts[[i]],{-1,-1}]}
                        ,{i,Length[activeCodes]}];
                        Graphics[{grid, PointSize[.005], gl }, ImageSize -> {1024,1024}/2]//Print;
                        Abort[];
                    ];
                ];
            ,{i,Length[indTab]}];
        ,{itrial,ntrials}];
    ] (* prepDweRuKiBestPatterns *)
(*-------------------- interesting starts here ----------------------*)
foundFIBOLen8Patterns = (* 34 patterns produced with FIBOshowAllPermutTrees[4] *)
{{{{0,0,0,0},{0,1,0,1}},{{1,0,0,0},{0,0,0,1}},{{0,1,0,0},{1,0,0,1}},{{1,0,1,0},{0,1,0,0}},{{0,0,1,0},{0,0,0,0}},{{1,0,0,1},{1,0,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{1,0,0,0},{0,1,0,1}},{{0,0,0,0},{0,0,0,1}},{{0,1,0,0},{1,0,0,1}},{{0,0,1,0},{0,1,0,0}},{{1,0,1,0},{0,0,0,0}},{{1,0,0,1},{1,0,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{1,0,0,0},{0,1,0,1}},{{0,0,0,0},{1,0,0,1}},{{0,1,0,0},{0,0,0,1}},{{0,0,1,0},{0,1,0,0}},{{1,0,1,0},{0,0,0,0}},{{1,0,0,1},{1,0,0,0}},{{0,0,0,1},{0,0,1,0}},{{0,1,0,1},{1,0,1,0}}}
    ,{{{0,1,0,0},{0,0,1,0}},{{0,0,0,0},{1,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{0,0,1,0},{0,0,0,0}},{{1,0,1,0},{0,1,0,0}},{{0,0,0,1},{0,1,0,1}},{{1,0,0,1},{0,0,0,1}},{{0,1,0,1},{1,0,0,1}}}
    ,{{{0,1,0,0},{0,0,0,1}},{{0,0,0,0},{1,0,0,1}},{{1,0,0,0},{0,1,0,1}},{{0,0,1,0},{0,1,0,0}},{{1,0,1,0},{0,0,0,0}},{{1,0,0,1},{1,0,0,0}},{{0,0,0,1},{0,0,1,0}},{{0,1,0,1},{1,0,1,0}}}
    ,{{{0,1,0,0},{1,0,0,1}},{{0,0,0,0},{0,0,0,1}},{{1,0,0,0},{0,1,0,1}},{{0,0,1,0},{0,1,0,0}},{{1,0,1,0},{0,0,0,0}},{{1,0,0,1},{1,0,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{0,1,0,0},{0,0,1,0}},{{0,0,0,0},{1,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,1,0},{0,0,0,0}},{{0,0,1,0},{0,1,0,0}},{{1,0,0,1},{0,1,0,1}},{{0,0,0,1},{0,0,0,1}},{{0,1,0,1},{1,0,0,1}}}
    ,{{{0,1,0,0},{1,0,1,0}},{{0,0,0,0},{0,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,1,0},{0,0,0,0}},{{0,0,1,0},{0,1,0,0}},{{1,0,0,1},{0,1,0,1}},{{0,0,0,1},{1,0,0,1}},{{0,1,0,1},{0,0,0,1}}}
    ,{{{0,1,0,0},{1,0,0,1}},{{1,0,0,0},{0,0,0,1}},{{0,0,0,0},{0,1,0,1}},{{1,0,1,0},{0,1,0,0}},{{0,0,1,0},{0,0,0,0}},{{1,0,0,1},{1,0,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{0,1,0,0},{0,0,1,0}},{{0,0,0,0},{1,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{0,0,1,0},{0,0,0,0}},{{1,0,1,0},{0,1,0,0}},{{0,1,0,1},{1,0,0,1}},{{1,0,0,1},{0,0,0,1}},{{0,0,0,1},{0,1,0,1}}}
    ,{{{0,1,0,0},{0,0,1,0}},{{0,0,0,0},{1,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,1,0},{0,0,0,0}},{{0,0,1,0},{0,1,0,0}},{{0,1,0,1},{1,0,0,1}},{{0,0,0,1},{0,0,0,1}},{{1,0,0,1},{0,1,0,1}}}
    ,{{{0,1,0,0},{1,0,1,0}},{{0,0,0,0},{0,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,1,0},{0,0,0,0}},{{0,0,1,0},{0,1,0,0}},{{0,1,0,1},{0,0,0,1}},{{0,0,0,1},{1,0,0,1}},{{1,0,0,1},{0,1,0,1}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{0,0,0,0},{1,0,0,1}},{{1,0,0,0},{1,0,0,0}},{{0,1,0,0},{0,0,0,0}},{{1,0,0,1},{0,1,0,0}},{{0,0,0,1},{0,0,1,0}},{{0,1,0,1},{1,0,1,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{0,0,0,0},{1,0,0,1}},{{1,0,0,0},{0,1,0,0}},{{0,1,0,0},{0,0,0,0}},{{1,0,0,1},{1,0,0,0}},{{0,0,0,1},{0,0,1,0}},{{0,1,0,1},{1,0,1,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{1,0,0,0},{1,0,0,1}},{{0,0,0,0},{0,0,0,0}},{{0,1,0,0},{1,0,0,0}},{{1,0,0,1},{0,1,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{1,0,0,0},{1,0,0,1}},{{0,0,0,0},{1,0,0,0}},{{0,1,0,0},{0,0,0,0}},{{1,0,0,1},{0,1,0,0}},{{0,0,0,1},{0,0,1,0}},{{0,1,0,1},{1,0,1,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{1,0,0,0},{1,0,0,1}},{{0,0,0,0},{0,0,1,0}},{{0,1,0,0},{1,0,1,0}},{{1,0,0,1},{0,1,0,0}},{{0,0,0,1},{1,0,0,0}},{{0,1,0,1},{0,0,0,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{1,0,0,0},{1,0,0,1}},{{0,0,0,0},{1,0,1,0}},{{0,1,0,0},{0,0,1,0}},{{1,0,0,1},{0,1,0,0}},{{0,0,0,1},{0,0,0,0}},{{0,1,0,1},{1,0,0,0}}}
    ,{{{1,0,1,0},{0,1,0,1}},{{0,0,1,0},{0,0,0,1}},{{1,0,0,0},{1,0,0,1}},{{0,0,0,0},{1,0,1,0}},{{0,1,0,0},{0,0,1,0}},{{0,0,0,1},{0,1,0,0}},{{1,0,0,1},{0,0,0,0}},{{0,1,0,1},{1,0,0,0}}}
    ,{{{1,0,1,0},{0,1,0,1}},{{0,0,1,0},{0,0,0,1}},{{1,0,0,0},{1,0,0,1}},{{0,0,0,0},{0,1,0,0}},{{0,1,0,0},{1,0,0,0}},{{1,0,0,1},{0,0,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{1,0,0,0},{1,0,0,1}},{{0,0,0,0},{0,0,1,0}},{{0,1,0,0},{1,0,1,0}},{{0,1,0,1},{0,0,0,0}},{{0,0,0,1},{1,0,0,0}},{{1,0,0,1},{0,1,0,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{1,0,0,0},{1,0,0,1}},{{0,0,0,0},{1,0,1,0}},{{0,1,0,0},{0,0,1,0}},{{0,1,0,1},{1,0,0,0}},{{0,0,0,1},{0,0,0,0}},{{1,0,0,1},{0,1,0,0}}}
    ,{{{1,0,1,0},{0,1,0,1}},{{0,0,1,0},{0,0,0,1}},{{1,0,0,0},{1,0,0,1}},{{0,0,0,0},{1,0,1,0}},{{0,1,0,0},{0,0,1,0}},{{0,1,0,1},{1,0,0,0}},{{1,0,0,1},{0,0,0,0}},{{0,0,0,1},{0,1,0,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{0,1,0,0},{1,0,0,1}},{{0,0,0,0},{0,0,0,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,0,1},{0,1,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{0,1,0,0},{1,0,0,1}},{{1,0,0,0},{1,0,0,0}},{{0,0,0,0},{0,0,0,0}},{{1,0,0,1},{0,1,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{0,1,0,0},{1,0,0,1}},{{1,0,0,0},{0,1,0,0}},{{0,0,0,0},{0,0,0,0}},{{1,0,0,1},{1,0,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{1,0,1,0},{0,1,0,1}},{{0,0,1,0},{0,0,0,1}},{{0,1,0,0},{1,0,0,1}},{{0,0,0,0},{0,1,0,0}},{{1,0,0,0},{0,0,0,0}},{{1,0,0,1},{1,0,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{1,0,1,0},{0,1,0,1}},{{0,0,1,0},{0,0,0,1}},{{0,1,0,0},{1,0,0,1}},{{0,0,0,0},{0,1,0,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,0,1},{0,0,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{0,0,0,1},{0,1,0,1}},{{1,0,0,1},{0,0,0,1}},{{0,1,0,1},{1,0,0,1}},{{0,1,0,0},{0,0,1,0}},{{0,0,0,0},{1,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{0,0,1,0},{0,0,0,0}},{{1,0,1,0},{0,1,0,0}}}
    ,{{{1,0,0,1},{0,1,0,1}},{{0,0,0,1},{0,0,0,1}},{{0,1,0,1},{1,0,0,1}},{{0,1,0,0},{0,0,1,0}},{{0,0,0,0},{1,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,1,0},{0,0,0,0}},{{0,0,1,0},{0,1,0,0}}}
    ,{{{1,0,0,1},{0,1,0,1}},{{0,0,0,1},{1,0,0,1}},{{0,1,0,1},{0,0,0,1}},{{0,1,0,0},{1,0,1,0}},{{0,0,0,0},{0,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,1,0},{0,0,0,0}},{{0,0,1,0},{0,1,0,0}}}
    ,{{{0,1,0,1},{0,0,0,1}},{{0,0,0,1},{1,0,0,1}},{{1,0,0,1},{0,1,0,1}},{{0,1,0,0},{1,0,1,0}},{{0,0,0,0},{0,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,1,0},{0,0,0,0}},{{0,0,1,0},{0,1,0,0}}}
    ,{{{0,1,0,1},{1,0,0,1}},{{0,0,0,1},{0,0,0,1}},{{1,0,0,1},{0,1,0,1}},{{0,1,0,0},{0,0,1,0}},{{0,0,0,0},{1,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,1,0},{0,0,0,0}},{{0,0,1,0},{0,1,0,0}}}
    ,{{{0,1,0,1},{1,0,0,1}},{{1,0,0,1},{0,0,0,1}},{{0,0,0,1},{0,1,0,1}},{{0,1,0,0},{0,0,1,0}},{{0,0,0,0},{1,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{0,0,1,0},{0,0,0,0}},{{1,0,1,0},{0,1,0,0}}}};

visuFIBOSet[codes_] :=
    Module[ {level = Length[First@(First@codes)] },
        Graphics[{{getFIBOGrid[level]}, getFIBO2Dmarks[#,True]& @ codes
            ,Point/@ (FIBOPhiXY /@ codes)
            } 
            ,ImageSize -> level/3 {1024,1024} /4  ]
    ]

consolidateFIBOLen8Patterns[dbgGraphics_:False] :=
    Module[ {},
        res = {};
        Do[
            srccodes = Union @ foundFIBOLen8Patterns[[isrcpattern]];
            permuts = IntegerDigits[#,2,6]& /@ Range[0,63];
            Do[
                codes = srccodes;
                If[ permuts[[i,1]] == 1,
                    pos1 = FirstPosition[First/@codes,{0,0,0,0}][[1]];
                    pos2 = FirstPosition[First/@codes,{0,0,0,1}][[1]];
                    codes[[{pos1,pos2},1]] = codes[[{pos2,pos1},1]]
                ];
                If[ permuts[[i,2]] == 1,
                    pos1 = FirstPosition[First/@codes,{0,1,0,0}][[1]];
                    pos2 = FirstPosition[First/@codes,{0,1,0,1}][[1]];
                    codes[[{pos1,pos2},1]] = codes[[{pos2,pos1},1]]
                ];
                If[ permuts[[i,3]] == 1,
                    pos1 = FirstPosition[First/@codes,{1,0,0,0}][[1]];
                    pos2 = FirstPosition[First/@codes,{1,0,0,1}][[1]];
                    codes[[{pos1,pos2},1]] = codes[[{pos2,pos1},1]]
                ];
                If[ permuts[[i,4]] == 1,
                    pos1 = FirstPosition[Last/@codes,{0,0,0,0}][[1]];
                    pos2 = FirstPosition[Last/@codes,{0,0,0,1}][[1]];
                    codes[[{pos1,pos2},2]] = codes[[{pos2,pos1},2]]
                ];
                If[ permuts[[i,5]] == 1,
                    pos1 = FirstPosition[Last/@codes,{0,1,0,0}][[1]];
                    pos2 = FirstPosition[Last/@codes,{0,1,0,1}][[1]];
                    codes[[{pos1,pos2},2]] = codes[[{pos2,pos1},2]]
                ];
                If[ permuts[[i,6]] == 1,
                    pos1 = FirstPosition[Last/@codes,{1,0,0,0}][[1]];
                    pos2 = FirstPosition[Last/@codes,{1,0,0,1}][[1]];
                    codes[[{pos1,pos2},2]] = codes[[{pos2,pos1},2]]
                ];               
                (*xycodesFIBOSel =  Select[activeCodes, Max[(ListConvolve[{1, 1}, #] & /@ #)] < 2 &];*)
                test = goodFIBOSetQ[codes];
                (*Print[{isrcpattern,i} -> test];*)
                If[ test,
                    AppendTo[res,codes],
                    Print[" not conformal pattern : ",codes]
                ];
                If[ dbgGraphics,
                    Graphics[{{getFIBOGrid[4]}
                            ,PointSize[.05],Point/@ (FIBOPhiXY /@ codes)
                            ,Table[Text[Style[i-1,24],FIBOPhiXY@codes[[i]],{-1,-1}],{i,Length[codes]}]    
                        } ,PlotLabel -> {permuts[[i]],test} ,ImageSize -> {1024,1024}/3  ]//Print
                ];
            ,{i,Length[permuts]}];
            AppendTo[res,srccodes];
        ,{isrcpattern,Length[foundFIBOLen8Patterns]}];
        res = res00 = Union[res];
        visuFIBOSet[First@res00]//Print;
        Print["res00 " -> Length[res00] ]; 

         (* Horizontal rect *)
        selected = Table[
                set = res[[i]];
                codes = Select[set, (#[[2,1]] == 0)&]
            ,{i,Length[res]}];
            (* healing horizontal tiles *)
        allgoodx = Select[getFIBOCodes1d[5], #[[-1]] != 1 &];
        healedSelected = {};
        Do[
            sortedcodes = Sort[selected[[i]]];
            {xcodes,ycodes} = {First /@ sortedcodes, Last /@ sortedcodes};
            healedCodes = {allgoodx, ycodes}//T;
            test = goodFIBOSetQHorizontalOrVerticalRectangles[healedCodes];
            If[ test,
                AppendTo[healedSelected,healedCodes],
                Print[i,"/",Length[selected]," not conformal pattern : "]
            ];
        ,{i,Length[selected]}];
        healed01 = Union[healedSelected];
        visuFIBOSet[First@healed01]//Print;
        Print["healed01 " -> Length[healed01] ]; 
         
        (* Vertical rect *)
        selected = Table[
                set = res[[i]];
                Select[set, (#[[1,1]] == 0)&]
            ,{i,Length[res]}];
        allgoodx = Select[getFIBOCodes1d[5], #[[-1]] != 1 &];
        healedSelected = {};
        Do[
            sortedcodes = Reverse /@ Sort[Reverse /@ selected[[i]]];
            {xcodes,ycodes} = {First /@ sortedcodes, Last /@ sortedcodes};
            healedCodes = {xcodes, allgoodx}//T;
            test = goodFIBOSetQHorizontalOrVerticalRectangles[healedCodes];
            If[ test,
                AppendTo[healedSelected,healedCodes],
                Print[i,"/",Length[selected]," not conformal pattern : "]
            ];
        ,{i,Length[selected]}];
        healed10 = Union[healedSelected];
        visuFIBOSet[First@healedSelected]//Print;
        Print["healed10 " -> Length[healed10] ]; 
         
        (* Small Squares rect *)
        selected = Table[
                set = res[[i]];
                Select[set, (#[[1,1]] == 0) && (#[[2,1]] == 0) &]
            ,{i,Length[res]}];
        allgoodx = Select[getFIBOCodes1d[5], #[[-1]] != 1 &&  #[[1]] == 0 &];
        healedSelected = {};
        newselected = Table[
            sortedcodes = Sort[selected[[i]]];
            {xcodes,ycodes} = {First /@ sortedcodes, Last /@ sortedcodes};
            healedCodes = {allgoodx, ycodes}//T
        ,{i,Length[selected]}];
        Do[
            sortedcodes = Reverse /@ Sort[Reverse /@ newselected[[i]]];
            {xcodes,ycodes} = {First /@ sortedcodes, Last /@ sortedcodes};
            healedCodes = {xcodes, allgoodx}//T;
            test = goodFIBOSetQSmallSquares[healedCodes];
            If[ test,
                AppendTo[healedSelected,healedCodes]
            (*, Print[i,"/",Length[selected]," not conformal pattern : "]*) ];
        ,{i,Length[selected]}];
        healed11 = Union[healedSelected];
        visuFIBOSet[First@healedSelected]//Print;
        Print["healed11 " -> Length[healed11] ];
        consolidated = {{res00,healed10},{healed01,healed11}};
        fname = "data/goodFIBOLen8Patterns_consolidated.dat";
        Print["found: " -> {Length[res],Length[healed01],Length[healed10],Length[healed11]} -> " patterns. Writing into " -> fname];
        Put[consolidated,fname];
    ] (* consolidateFIBOLen8Patterns *)

(*goodPatternsFibo = {{{{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}}},{{{{0,0},{0,0}},{{0,1},{1,0}}},{{{0,0},{1,0}},{{0,1},{0,0}}}}},{{{{{0,0},{0,0}},{{1,0},{0,1}}},{{{0,0},{0,1}},{{1,0},{0,0}}}},{{{{0,0},{0,0}}}}}};
getRandomGoodPatternFibo[ix_:0,iy_:0]:= First @ goodPatternsFibo[[iy+1,ix+1]]

recursiveSubdivDweRuKi2DFibo[level_:1,x0_:0,y0_:0] :=
    Module[ {distribBetweenPatterns,x1,x2,y1,y2,prevlevelPattern,newpattern,i,j,xtile,ytile,xType,yType,xlastbit,ylastbit},
        If[level == 1, Return[getRandomGoodPatternsFibo2Di[x0+1,y0+1] ] ];
        distribBetweenPatterns = getRandomGoodPatternFibo[x0,y0];
           Flatten[#,1]& @ Table[
            {{x1,x2},{y1,y2}} = distribBetweenPatterns[[i]];
            prevlevelPattern = recursiveSubdivDweRuKi2DFibo[level-1,x1,y1];
            newpattern = Table[
                xtile = prevlevelPattern[[j,1,1]];
                ytile = prevlevelPattern[[j,2,1]];
                xType = prevlevelPattern[[j,1,-1]];
                yType = prevlevelPattern[[j,2,-1]];
                xlastbit = If[xType == 0 && y1 == 1, 1, 0];
                ylastbit = If[yType == 0 && x1 == 1, 1, 0];
                (*Print[prevlevelPattern[[j]] -> {xtile,ytile} -> {xType,yType} -> {{x1,x2},{y1,y2}} -> {xlastbit,ylastbit} -> {Join[{x1},prevlevelPattern[[j,1]],{xlastbit}], Join[{y1},prevlevelPattern[[j,2]],{ylastbit}]}]*);
                {Join[{x1},prevlevelPattern[[j,1]],{xlastbit}], Join[{y1},prevlevelPattern[[j,2]],{ylastbit}]}
            ,{j,Length[prevlevelPattern]}];
            (*Print[prevlevelPattern[[j]] -> {x1,y1}->{x2,y2}->"distribBetweenPatterns"-> (mf/@newpattern)];*)
            (*Select[newpattern, (mx [[ #[[2,-2]], #[[2,-1]] ]] != 0) &]*)
            newpattern
        ,{i,Length[distribBetweenPatterns]}]
    ] (* recursiveSubdivDweRuKi2DFibo *)
*)

goodPatternsFIBO = {{{{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}}},{{{{0,0},{0,0}},{{0,1},{1,0}}},{{{0,0},{1,0}},{{0,1},{0,0}}}}},{{{{{0,0},{0,0}},{{1,0},{0,1}}},{{{0,0},{0,1}},{{1,0},{0,0}}}},{{{{0,0},{0,0}}}}}};
getRandomGoodPatternFIBO[ix_:0,iy_:0] :=
    First @ goodPatternsFIBO[[iy+1,ix+1]]

FIBOrecursiveSubdiv[level_:1,x0_:0,y0_:0] :=
    Module[ {distribBetweenPatterns,x1,x2,y1,y2,prevlevelPattern,newpattern,i,j,xtile,ytile,xType,yType,xLastDigit,yLastDigit},
        If[ level == 1,
            Return[getRandomGoodPatternsFIBO2Di[x0+1,y0+1] ]
        ];
        distribBetweenPatterns = getRandomGoodPatternFIBO[x0,y0];
        Flatten[#,1]& @ Table[
         {{x1,x2},{y1,y2}} = distribBetweenPatterns[[i]];
         prevlevelPattern = FIBOrecursiveSubdiv[level-1,x1,y1];
         newpattern = Table[
             xtile = prevlevelPattern[[j,1,1]];
             ytile = prevlevelPattern[[j,2,1]];
             xType = prevlevelPattern[[j,1,-1]];
             yType = prevlevelPattern[[j,2,-1]];
             xLastDigit = If[ xType == 0 && y1 == 1,
                              1,
                              0
                          ];
             yLastDigit = If[ yType == 0 && x1 == 1,
                              1,
                              0
                          ];
                (*Print[prevlevelPattern[[j]] -> {xtile,ytile} -> {xType,yType} -> {{x1,x2},{y1,y2}} -> {xLastDigit,yLastDigit} -> {Join[{x1},prevlevelPattern[[j,1]],{xLastDigit}], Join[{y1},prevlevelPattern[[j,2]],{yLastDigit}]}]*);
             {Join[{x1},prevlevelPattern[[j,1]],{xLastDigit}], Join[{y1},prevlevelPattern[[j,2]],{yLastDigit}]}
         ,{j,Length[prevlevelPattern]}];
            (*Print[prevlevelPattern[[j]] -> {x1,y1}->{x2,y2}->"distribBetweenPatterns"-> (mf/@newpattern)];*)
            (*Select[newpattern, (mx [[ #[[2,-2]], #[[2,-1]] ]] != 0) &]*)
         newpattern
        ,{i,Length[distribBetweenPatterns]}]
    ] (* FIBOrecursiveSubdiv *)

getRandomGoodPatternsFIBO2Di[ix_:1,iy_:1] :=
    myRandomChoice @ goodPatternsFIBO2D[[iy,ix]]

myRandomChoice :=
    RandomChoice;

FIBOpoc2DRecursive[innlevels_:2, showGraphics_:False, generateDiscrepancy_:False, generateFourier_:False ] :=
    Module[ {},
        dbg = False;
        mxsz = 2;
        base = mxsz;
        baselog = Log[2,base];
        nlevels = innlevels;
        basename = "goodFIBOLen8Patterns";
        fouriertabsz = 1024;
        fsum = Table[0,{fouriertabsz},{fouriertabsz}];
        discrepancyTabFIBO = Table[0,{nlevels}];
        If[ !known[goodPatternsFIBO2D],
            fname = "data/"<>basename<>"_consolidated.dat";
            goodPatternsFIBO2D = Get[fname];
            Print[fname," : read " -> {goodPatternsFIBO2D[[1, 1]] // Length,goodPatternsFIBO2D[[1, 2]] // Length,goodPatternsFIBO2D[[2, 1]] // Length,goodPatternsFIBO2D[[2, 2]] // Length} ]
        ];
        codes = getRandomGoodPatternsFIBO2Di[];
        Do[
           If[ generateDiscrepancy,
               ptsXY = FIBOPhiXY /@ codes;
               discrepancy = getDiscrepancy2Dexact[ptsXY];
               discrepancyTabFIBO[[ilevel]] = { Length[codes], discrepancy};
               Print[ilevel -> Length[codes]  -> Length[codes]  -> DweRuKinacci[2 ilevel + 2] -> discrepancy];
               Print[discrepancyTabFIBO];
           ];
           If[ showGraphics,
               ptsXY = FIBOPhiXY /@ codes;
               g = Graphics[{{Opacity[.25], getFIBOGrid[2 ilevel +2]} 
                       ,PointSize[.01],Point/@ ptsXY
                       (*,Table[Text[Style[DweRuKigetIntValueInv@ codes[[i,2]],18],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]*)
                       ,Table[Text[Style[Mod[i,100],18],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]
                   } 
                   ,PlotLabel -> goodFIBOSetQ[codes]
                   ,ImageSize -> ilevel/3 {1200,1200}   ];
               g//Print;
                (*Print[Length[First/@codes] -> (Length@Union[First/@codes])];
                Print[Length[Last/@codes] -> (Length@Union[Last/@codes])];*)
               Graphics[{Point/@ptsXY},PlotRange->{{0,1},{0,1}},Frame->True,FrameTicks->None]//Print;
           ];
           If[ ilevel != nlevels,
               codes = FIBOrecursiveSubdiv[ilevel+1];
           ];
        ,{ilevel,1,nlevels}];
        If[ generateDiscrepancy,
            discrepancyTabSobol = { (* Sobol 2D Kuo's implementation http://web.maths.unsw.edu.au/~fkuo/sobol/ *)
                    {16, 0.171875},(*pSobol2Dlog1 = discrepancyComplexity[data, (Log[#])/# &, "Discrepancy Sobol 2D N/LogN"]; pSobol2Dlog1 //Print;*)
                     {64, 0.0537109}, 
                     {256, 0.0145874}, 
                     {1024, 0.00429916}, 
                     {4096, 0.00132918}, 
                     {16384, 0.000372991}, 
                     {65536, 0.0000994867},
                     {262144, 0.000027597358}
                 };
            discrepancyTabFIBOm21 = {{3,0.618034},{5,0.418034},{8,0.27051},{13,0.193678},{21,0.130694},{34,0.0866825},{55,0.0554336},{89,0.0372093},{144,0.0244132},{233,0.0161211},
                {377,0.010242},{610,0.00673888},{987,0.00436806},{1597,0.00285382},{2584,0.00180478},{4181,0.0011745},{6765,0.000755457},{10946,0.000489471},{17711,0.000308601},{28657,0.000199274}};
            discrepancyTabFIBOLen8 = {{8,0.27051},{21,0.120557},{55,0.0501118},{144,0.0230114},{377,0.00982341},{987,0.00427672},{2584,0.00180458},{6765,0.000750238},{17711,0.000306409},{46368,0.000126695}
                ,{121393, 0.0000516168}};
            ListPlot[{Log[2,#]& /@ discrepancyTabFIBO, Log[2,#]& /@ discrepancyTabSobol}, Joined->True
                ,Ticks->{Table[{i,i},{i,20}],Automatic}
                ,PlotLabel->"log-log discrepancy"]//Print;
        ];
        If[ generateFourier,
            ptsXY = FIBOPhiXY /@ codes;
            fsum += getFourier2D[Ceiling[(fouriertabsz ptsXY)],fouriertabsz];
            fsum[[1,1]] = 0;
            fsum = Reorg[fsum];
            ListDensityPlot[fsum, ImageSize -> {1024,1024}]//Print;
        ];
        codes
    ] (*FIBOpoc2DRecursive *)

mkGoodFIBOLen8pointsets[nlevels_:14] :=
    Module[ {},
        Do[
            codes = FIBOpoc2DRecursive[ilevel];
            ptsXY = FIBOPhiXY /@ codes;
            fname = "data/FIBOLen8pointsets/pts_"<>ToString[ Length[ptsXY] ]<>".dat";
            Print[ilevel -> fname];
            Export[fname,ptsXY];
        ,{ilevel,nlevels}];
    ] (* mkGoodFIBOLen8pointsets *)


(* -------------------MU4 -----------------------*)
mxMU2 = mxFibo = {{1,1},{1,0}}; (* fibo 1 level *)
mxMU3 = {{1,1,0},{0,0,1},{1,0,0}} (* MU3 *)
mxMU3POW2 = {{1,1,1},{1,0,0},{1,1,0}}      (* MU3POW2 *)
mxMU4POW3 = {{1,1,1,1},{1,0,0,0},{1,1,0,0},{1,1,1,0}}     (* MU4POW3 *) 
mxMU4 = {{1,1,0,0},{0,0,1,0},{0,0,0,1},{1,0,0,0}}    (* MU4 lambda:1.38028 ratio:2.62966 CharacteristicPolynomial: -1-x^3+x^4  *)
    (*aeval // TeXForm : \begin{multline} \lambda_{\mu} =   \frac{1}{4}+\frac{1}{4} \sqrt{1-16 \sqrt[3]{\frac{2}{3 \left(\sqrt{849}-9\right)}}+2
   \left(\frac{2}{3}\right)^{2/3} \sqrt[3]{\sqrt{849}-9}}+ \\
   \frac{1}{2} \sqrt{\frac{1}{2}+4
   \sqrt[3]{\frac{2}{3 \left(\sqrt{849}-9\right)}}-\frac{\sqrt[3]{\frac{1}{2} \left(\sqrt{849}-9\right)}}{3^{2/3}}+\frac{1}{2 \sqrt{1-16 \sqrt[3]{\frac{2}{3
   \left(\sqrt{849}-9\right)}}+2 \left(\frac{2}{3}\right)^{2/3} \sqrt[3]{\sqrt{849}-9}}}} \approx 1.3802775690976141. \end{multline} *)

lambda = lambdaMU4 = 1.3802775690976141;
lambdaMU4Squared = 1.9051661677540188;
	
MU4basicSeq = {1,2,3,4,5,7,10,14,19,26,36,50,69,95,131,181,250,345,476,657,907,1252,1728,2385,3292,4544,6272,8657,11949,16493,22765,31422,43371,59864,82629,114051,157422,217286,299915,413966,571388,788674,1088589,1502555,
    2073943,2862617,3951206,5453761,7527704,10390321,14341527,19795288,27322992,37713313,52054840,71850128,99173120,136886433,188941273,260791401,359964521,496850954,685792227,946583628,1306548149,1803399103,2489191330,3435774958,
    4742323107,6545722210,9034913540,12470688498,17213011605,23758733815,32793647355,45264335853,62477347458,86236081273,119029728628,164294064481,226771411939,313007493212,432037221840,596331286321,823102698260,1136110191472,
    1568147413312,2164478699633,2987581397893,4123691589365,5691839002677,7856317702310,10843899100203,14967590689568,20659429692245,28515747394555,39359646494758,54327237184326};

MU4basicSeqExtended = (* campatible with seqMU4ClosedForm[] *)
	{0,0,1,0,0,0,1,1,1,1,2,3,4,5,7,10,14,19,26,36,50,69,95,131,181,250,345,476,657,907,1252,1728,2385,3292,4544,6272,8657,11949,16493,22765,31422,43371,59864,82629,114051,157422,217286,299915,413966,571388,788674,1088589,1502555,
    2073943,2862617,3951206,5453761,7527704,10390321,14341527,19795288,27322992,37713313,52054840,71850128,99173120,136886433,188941273,260791401,359964521,496850954,685792227,946583628,1306548149,1803399103,2489191330,3435774958,
    4742323107,6545722210,9034913540,12470688498,17213011605,23758733815,32793647355,45264335853,62477347458,86236081273,119029728628,164294064481,226771411939,313007493212,432037221840,596331286321,823102698260,1136110191472,
    1568147413312,2164478699633,2987581397893,4123691589365,5691839002677,7856317702310,10843899100203,14967590689568,20659429692245,28515747394555,39359646494758,54327237184326};
    
getMU4basicSeqIndex[int_]:=If[int == 1, 1,  (Round[Log[lambda, #]] & @ int) ]

MU4F[symbols_] :=
    With[ {s = Reverse@(symbols//MU4symbols2binCode)},
        Total@Table[MU4basicSeq[[i]] s[[i]], {i, Length[s]}]
    ]
MU4FInv[symbols_] :=
    With[ {s = (symbols//MU4symbols2binCode)},
        Total@Table[MU4basicSeq[[i]] s[[i]], {i, Length[s]}]
    ]
MU4FXY[symbols_] :=
    MU4F/@symbols

phitab = Table[lambdaMU4^-i, {i, 0, 100}] // N;
MU4PhiBin[binsymbols_] :=
    With[ {s = (binsymbols)},
        Sum[phitab[[i+1]] s[[i]], {i, Length[s]}]
    ]
MU4Phi[symbols_] :=
    With[ {s = (symbols//MU4symbols2binCode)},
        Sum[phitab[[i+1]] s[[i]], {i, Length[s]}]
    ]

MU4PhiInv[symbols_] :=MU4Phi[Reverse@symbols]

MU4PhiXY[s_] :=  MU4Phi/@s
MU4PhiXYbin[s_] := MU4PhiBin/@s


MU4symbols2binCode[symbols_] :=  (symbols/.{a:>0,b:>1,c:>0,d:>0})
MU4symbols2index[symbols_] :=  (symbols/.{a:>1,b:>2,c:>3,d:>4})
MU4index2symbols[ind_] :=  (ind/.{1:>a,2:>b,3:>c,4:>d})

MU4getCodes1d[nlevels_:1,initsymbol_:a] :=
    Block[ {codes = {{initsymbol}}},
    	If[nlevels == 0, Return[codes] ];
        Table[ codes = Flatten[#,1]& @ (MU4subdiv1d /@ codes),{nlevels}];
        Drop[#,1]& /@ codes
    ] (* MU4getCodes1d *)


MU4subdiv1d[symbol_] :=
    If[ symbol === {},
        {{a}, {b}},
        Switch[Last[symbol]
            ,a, {Join[symbol,{a}],Join[symbol,{b}]}
            ,b, {Join[symbol,{c}]}
            ,c, {Join[symbol,{d}]}
            ,d, {Join[symbol,{a}]}
            ,_, Print["Houston, we've got a problem"];
                            ]
    ]
MU4subdiv1dWithPermut[symbol_,permut_] :=
    Switch[Last[symbol]
    ,0, If[ permut == 0,
            {Join[symbol,{0}],Join[symbol,{1}]},
            {Join[symbol,{1}],Join[symbol,{0}]}
        ]
    ,1, {Join[symbol,{2}]}
    ,2, {Join[symbol,{3}]}
    ,3, {Join[symbol,{0}]}
    ]

visuConvert :=
    MU4symbols2binCode (* ToString or MU4symbols2binCode*)


MU4getGrid[nlevels_:2,xType_:a,yType_:a,showSymbols_:True] :=
    Module[ {hlevels,symbols1,symbols2,gl = {},coltab,txtcoltab,xSymbols,ySymbols,xvaluesFracDir,yvaluesFracDir,xmax,ymax,xind,yind},
        txtcoltab = {Red, Red,Red, Red,Red, Red,Red, Red};
        coltab = {Green, Red, Lighter@Orange, Black,Red,Blue, Black,Red,Red, Black,Red,Blue, Black,Green,Cyan};
        {xind,yind} = {Switch[xType,a,1,b,4,c,3,d,2],Switch[yType,a,1,b,4,c,3,d,2]};
        {xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[.02/lambdaMU4^(ilevel/1.25)],{Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] }}];
            xSymbols = If[ xType===a,
                           MU4getCodes1d[ilevel,xType],
                           (Drop[#, If[ xType===d,
                                        2,
                                        1
                                    ]] & /@ MU4getCodes1d[ilevel,xType])
                       ];
            ySymbols = If[ yType===a,
                           MU4getCodes1d[ilevel,yType],
                           (Drop[#, If[ yType===d,
                                        2,
                                        1
                                    ]] & /@ MU4getCodes1d[ilevel,yType])
                       ];
            xvaluesFracDir = MU4Phi /@ xSymbols;
            yvaluesFracDir = MU4Phi /@ ySymbols;
            Do[AppendTo[gl, {Line[{{xvaluesFracDir[[i]],0},{xvaluesFracDir[[i]],ymax}}]}],{i,Length[xSymbols]}];
            Do[AppendTo[gl, {Line[{{0,yvaluesFracDir[[i]]},{xmax,yvaluesFracDir[[i]]}}]}],{i,Length[ySymbols]}];
        ,{ilevel,2,nlevels}];
        hlevels = Floor[nlevels/2];
        If[ showSymbols,
            symbols1 = #[[;;hlevels]]&         /@ (xSymbols);
            symbols2 = #[[hlevels+1;;]]&     /@ (xSymbols);
            AppendTo[gl, {Black,Opacity[1]
                ,Table[
                    Text[ Column[Join[{
                                 Style[Rotate[ToString[digits2str[visuConvert/@symbols2[[i]] ]]<>"        " ,Pi/2],Bold,Black]
                                }
                                ,Reverse@Table[Style[  Rotate[visuConvert@symbols1[[i,j]],Pi/2] ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                            ]
                        ], {xvaluesFracDir[[i]],0},{0,1}]
                    , {i,Length[xvaluesFracDir]}]
                } ];
            symbols1 = #[[;;hlevels]]& /@ (ySymbols);
            symbols2 = #[[hlevels+1;;]]& /@ (ySymbols);
            AppendTo[gl, {Black,Opacity[1]
                ,Table[                        
                        Text[ Row[Join[
                                Table[Style[  ToString[visuConvert@symbols1[[i,j]]]<>" " ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                                 ,{ Style[Rotate[ToString[digits2str[visuConvert/@symbols2[[i]] ]]<>"       " ,0],Bold,Black]
                        } ] ], {0,yvaluesFracDir[[i]]},{1,0}]
                , {i,Length[yvaluesFracDir]}]    
            } ];
        ];
        gl
    ] (* MU4getGrid*)

showMU4Grid[] :=
    Module[ {},
        mx = mxMU4POW3;
        init[mx,False];
        Graphics[getDweRuKiGrid[2]]//Print;
        Graphics[MU4getGrid[6,a,b],Axes->True]//Print;
        Graphics[MU4getGrid[6,b,c],Axes->True]//Print;
        Graphics[MU4getGrid[6,c,d],Axes->True]//Print;
        Graphics[MU4getGrid[6,d,a],Axes->True]//Print;
    ]

tstMU4subdiv1d[] :=
    Module[ {},
        symbols = MU4getCodes1d[6];
    ]

(*MU4getRandomGoodPattern[ix_:a,iy_:a] :=
    Module[ {fname},
        If[ !known[MU4goodPatterns],
            MU4goodPatterns = Table[{},{4},{4}];
            Table[
                fname = "data/MU4_L6patterns/MU4_bestTiles_"<>ToString[iix]<>ToString[iiy]<>".dat";
                MU4goodPatterns[[iix,iiy]] = Get[fname];
                Print["Reading ",fname -> Length[MU4goodPatterns[[iix,iiy]]]];
            ,{iiy,4},{iix,4}];
        ];
	    RandomChoice @ MU4goodPatterns[[MU4symbols2index@ix,MU4symbols2index@iy]]
    ]*)

myRandomChoice := RandomChoice

MU4getRandomGoodPattern[ix_:a,iy_:a] := myRandomChoice @ MU4goodPatterns[[MU4symbols2index@ix,MU4symbols2index@iy]]

MU4ActiveBinCodesQ[binCodes_,forbidPatterns_] :=
    And @@ {And @@ (Max[ListConvolve[#, binCodes[[1]]]] < 2 & /@ forbidPatterns),
            And @@ (Max[ListConvolve[#, binCodes[[2]]]] < 2 & /@ forbidPatterns)}

MU4getActiveBinCodes[codes_] :=
    Module[ {codesBin,forbidPatterns},
        forbidPatterns = Switch[Length[codes[[1,1]]],2,{{1,1}} ,3,{{1,1},{1,0,1}}, _,{{1,1},{1,0,1},{1,0,0,1}} ];
        codesBin = MU4symbols2binCode@codes;
        Select[codesBin, MU4ActiveBinCodesQ[#,forbidPatterns]& ]
    ]

MU4getActiveCodes[codes_] :=
    Module[ {codesBin,cc,sel,forbidPatterns},
    	If[Length[codes[[1,1]]] == 0, Return[codes] ];
        forbidPatterns = Switch[Length[codes[[1,1]]],2,{{1,1}} ,3,{{1,1},{1,0,1}}, _,{{1,1},{1,0,1},{1,0,0,1}} ];
        codesBin = MU4symbols2binCode@codes;
        cc = {codes,codesBin}//T;
        sel = Select[cc, MU4ActiveBinCodesQ[#[[2]],forbidPatterns]& ];
        First /@ sel
    ]


MU4recursiveSubdivSIMPLESTRandomized[level_:1,x0_:a,y0_:a] := (* works only for randomization at the last level *)
    Module[ {x1,y1,prevlevelPattern,newpattern,j,xLastDigit,yLastDigit,xprev,yprev,res,xsubdivTileCodes,ysubdivTileCodes,xcode,ycode,xind,yind},
        If[ level == 0,
            Return[{{{},{}}}]
        ];
        {xsubdivTileCodes,ysubdivTileCodes} = {MU4getCodes1d[1,x0], MU4getCodes1d[1,y0]};
        Flatten[#,2]& @ Table[
        	{x1} = xsubdivTileCodes[[ix]];
        	{y1} = ysubdivTileCodes[[iy]];
			prevlevelPattern = MU4recursiveSubdivSIMPLEST[level-1,x1,y1];
			newpattern = Table[
				{xprev,yprev} = prevlevelPattern[[j]];
				{xcode,ycode} = {Join[{x1},xprev], Join[{y1},yprev]};
				{xind,yind} = MU4F /@ {xcode,ycode};
				{xLastDigit,yLastDigit} = {y1,x1};
				If[Total[MU4symbols2binCode/@Take[xcode,-Min[3,Length[xcode]]]] == 0 && Length[ysubdivTileCodes] == 2,
					xLastDigit = If[randomTabX[[level,xind+1]],  MU4index2symbols@iy ,  MU4index2symbols@(3-iy)];
					(*Print[x -> {level,xind} -> randomTabX[[level,xind+1]] -> (mf@{Join[xcode,{xLastDigit}], Join[ycode,{yLastDigit}]}) -> (mf@(MU4symbols2binCode/@{Join[xcode,{xLastDigit}], Join[ycode,{yLastDigit}]}))];*)
				];
				If[Total[MU4symbols2binCode/@Take[ycode,-Min[3,Length[ycode]]]] == 0 && Length[xsubdivTileCodes] == 2,
					yLastDigit = If[randomTabY[[level,yind+1]],  MU4index2symbols@ix ,  MU4index2symbols@(3-ix)];
					(*Print[y -> {level,xind} -> randomTabX[[level,xind+1]] -> (mf@{Join[xcode,{xLastDigit}], Join[ycode,{yLastDigit}]}) -> (mf@(MU4symbols2binCode/@{Join[xcode,{xLastDigit}], Join[ycode,{yLastDigit}]}))];*)
				];
				res = {Join[xcode,{xLastDigit}], Join[ycode,{yLastDigit}]};
				res
	         ,{j,Length[prevlevelPattern]}];
	         newpattern
        ,{iy,Length[ysubdivTileCodes]},{ix,Length[xsubdivTileCodes]}]
    ] (* MU4recursiveSubdivSIMPLESTRandomized *)

MU4recursiveSubdivSIMPLEST[level_:1,x0_:a,y0_:a] := (* used in prepGoodPatterns4MU4pocRecursive[] *)
    Module[ {distribBetweenPatterns,x1,y1,prevlevelPattern,newpattern,i,j,xLastDigit,yLastDigit,xprev,yprev,res,xsubdivTileCodes,ysubdivTileCodes},
        If[ level == 0,
            Return[{{{},{}}}]
        ];
        {xsubdivTileCodes,ysubdivTileCodes} = {MU4getCodes1d[1,x0], MU4getCodes1d[1,y0]};
        distribBetweenPatterns  = Tuples@{xsubdivTileCodes,ysubdivTileCodes};
        Flatten[#,1]& @ Table[
         {{x1},{y1}} = distribBetweenPatterns[[i]];
         prevlevelPattern = MU4recursiveSubdivSIMPLEST[level-1,x1,y1];
         newpattern = Table[
             {xprev,yprev} = prevlevelPattern[[j]];
             {xLastDigit,yLastDigit} = {y1,x1};
             res = {Join[{x1},xprev,{xLastDigit}], Join[{y1},yprev,{yLastDigit}]};
             res
         ,{j,Length[prevlevelPattern]}];
         newpattern
        ,{i,Length[distribBetweenPatterns]}]
    ] (* MU4recursiveSubdivSIMPLEST *)

MU4recursiveSubdivSIMPLE[level_:1,x0_:a,y0_:a] :=
    Module[ {subdivTiles,prevlevelPattern, xSubtilePrefix,ySubtilePrefix },
        If[ level == 1,
            	(*Return[{{{},{}}}]*)
        	If[{x0,y0} === {a,a} || {x0,y0} === {b,d} || {x0,y0} === {c,c} || {x0,y0} === {d,b},
				Return[{{{x0},{y0}}}]
       		,(*ELSE*)
            	Return[{{{},{}}}]
        	];
        ];
        subdivTiles = Tuples@{MU4getCodes1d[1,x0], MU4getCodes1d[1,y0]};
        res = {};
        Do[ 
        	{{xSubtilePrefix},{ySubtilePrefix}} = subdivTiles[[isubtile]];
            prevlevelPattern = MU4recursiveSubdivSIMPLE[level-1,xSubtilePrefix,ySubtilePrefix];
            Print[prevlevelPattern];
            If[ prevlevelPattern =!= {{{},{}}},
	        	AppendTo[res, {Join[{xSubtilePrefix},#[[1]],{ySubtilePrefix}], Join[{ySubtilePrefix},#[[2]],{xSubtilePrefix}]} & /@ prevlevelPattern ];
            ];
        ,{isubtile,Length[subdivTiles]}];
        Flatten[#,1]& @res
    ] (* MU4recursiveSubdivSIMPLE *)


MU4recursiveSubdivCOMPACT[level_:1,x0_:a,y0_:a] :=
    Module[ {subdivTiles,prevlevelPattern, xSubtilePrefix,ySubtilePrefix },
        If[ level == 1, Return[MU4getRandomGoodPattern[x0,y0]] ];
        subdivTiles = Tuples@{MU4getCodes1d[1,x0], MU4getCodes1d[1,y0]};
        Flatten[#,1]& @ Table[ 
        	{{xSubtilePrefix},{ySubtilePrefix}} = subdivTiles[[isubtile]];
            prevlevelPattern = MU4recursiveSubdivCOMPACT[level-1,xSubtilePrefix,ySubtilePrefix];
            {Join[{xSubtilePrefix},#[[1]],{ySubtilePrefix}], Join[{ySubtilePrefix},#[[2]],{xSubtilePrefix}]} & /@ prevlevelPattern
        ,{isubtile,Length[subdivTiles]}]
    ] (* MU4recursiveSubdivCOMPACT *)

MU4recursiveSubdiv[level_:1,x0_:a,y0_:a] :=
    Module[ {subdivTiles,prevlevelPattern, xSubtilePrefix,ySubtilePrefix },
        If[ level <= 1, Return[MU4getRandomGoodPattern[x0,y0]] ];
        subdivTiles = Tuples@{MU4getCodes1d[1,x0], MU4getCodes1d[1,y0]};
        Flatten[#,1]& @ Table[ 
        	{{xSubtilePrefix},{ySubtilePrefix}} = subdivTiles[[isubtile]];
            prevlevelPattern = MU4recursiveSubdivCOMPACT[level-1,xSubtilePrefix,ySubtilePrefix];
            {Join[{xSubtilePrefix},#[[1]],{ySubtilePrefix}], Join[{ySubtilePrefix},#[[2]],{xSubtilePrefix}]} & /@ prevlevelPattern
        ,{isubtile,Length[subdivTiles]}]
    ] (* MU4recursiveSubdiv *)

MU4recursiveSubdivRandomized[level_:1,x0_:a,y0_:a] :=
    Module[ {prevlevelPattern,xsubdivTileCodes,ysubdivTileCodes,newpattern,xprev,yprev,xcode,ycode,xind,yind,x1,y1,xLastDigit,yLastDigit,res},
        If[ level <= 1, Return[MU4getRandomGoodPattern[x0,y0]] ];
        {xsubdivTileCodes,ysubdivTileCodes} = {MU4getCodes1d[1,x0], MU4getCodes1d[1,y0]};
        Flatten[#,2]& @ Table[
        	{x1} = xsubdivTileCodes[[ix]];
        	{y1} = ysubdivTileCodes[[iy]];
			prevlevelPattern = MU4recursiveSubdivRandomized[level-1,x1,y1];
			newpattern = Table[
				{xprev,yprev} = prevlevelPattern[[j]];
				{xcode,ycode} = {Join[{x1},xprev], Join[{y1},yprev]};
				{xind,yind} = MU4F /@ {xcode,ycode};
				{xLastDigit,yLastDigit} = {y1,x1};
				If[Total[MU4symbols2binCode/@Take[xcode,-Min[3,Length[xcode]]]] == 0 && Length[ysubdivTileCodes] == 2,
					xLastDigit = If[randomTabX[[level,xind+1]],  MU4index2symbols@iy ,  MU4index2symbols@(3-iy)];
				];
				If[Total[MU4symbols2binCode/@Take[ycode,-Min[3,Length[ycode]]]] == 0 && Length[xsubdivTileCodes] == 2,
					yLastDigit = If[randomTabY[[level,yind+1]],  MU4index2symbols@ix ,  MU4index2symbols@(3-ix)];
				];
				res = {Join[xcode,{xLastDigit}], Join[ycode,{yLastDigit}]};
				res
	         ,{j,Length[prevlevelPattern]}];
	         newpattern
        ,{iy,Length[ysubdivTileCodes]},{ix,Length[xsubdivTileCodes]}]
    ] (* MU4recursiveSubdivRandomized *)


MU4pocRecursive[innlevels_:2, patternsLevel_:8, x0_:a, y0_:a, showGraphics_:True, generateDiscrepancy_:True, generateFourier_:False ] :=
    Module[ {},
        baselog = Log[2,base];
        nlevels = innlevels;

        basename = "goodFIBOLen8Patterns";
        fouriertabsz = 2 4096 ;
        fsum = Table[0,{fouriertabsz},{fouriertabsz}];
        discrepancyMU4 = Table[{},{nlevels}];
        nPatterns = 64;
        
        MU4goodPatterns = Table[{},{4},{4}];
        Table[
            fname = "data/MU4_L"<>ToString[patternsLevel]<>"_"<>ToString[nPatterns]<>"/MU4_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU4goodPatterns[[ix,iy]] = Get[fname];
            Print["Reading ",fname -> Length[MU4goodPatterns[[ix,iy]]]];
        ,{iy,4},{ix,4}];
		randomTabX = Table[ Table[RandomChoice[{True,False}],{MU4basicSeq[[2+2 (ilevel+patternsLevel)]] }] ,{ilevel,1,nlevels}];
        randomTabY = Table[ Table[RandomChoice[{True,False}],{MU4basicSeq[[2+2 (ilevel+patternsLevel)]] }] ,{ilevel,1,nlevels}];
        
        Do[
        	
            codes = MU4recursiveSubdivRandomized[ilevel, x0, y0];
            ptsXY = MU4PhiXY /@ codes;
            Print[ilevel -> Length[ codes] ];
            If[ generateDiscrepancy,
                discrepancy = getDiscrepancy2Dexact[ptsXY];
                discrepancyMU4[[ilevel]] = { Length[ptsXY], discrepancy};
                Print[ilevel -> Length[codes]  -> Length[ptsXY] -> discrepancy];
                Print[discrepancyMU4];
            ];
            If[ showGraphics,
                If[ ilevel < 4,
                    g = Graphics[{{Opacity[.2], MU4getGrid[ 2 ilevel -1]} 
                            ,PointSize[.03 /lambda^ilevel],Point/@ ptsXY
                            (*,Table[Text[Style[(*MU4symbols2binCode /@ *)codes[[i ]],18],ptsXY[[i]],{-1,1}],{i,Length[ptsXY]}]*)
                            (*,Table[Text[Style[Mod[i,100],24],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]*)
                        } 
                        ,PlotLabel->ilevel
                        ,ImageSize -> ilevel/3 {1200,1200}   ];
                    g//Print;
                    ,(*ELSE*)
	                    If [ilevel < 8,
	                   		g = Graphics[{PointSize[.01],Point/@ptsXY},PlotRange->{{0,1},{0,1}},Frame->True,FrameTicks->None];
	                    	Export["prep-figs/fig-MU4_pts_L"<>ToString[ilevel]<>".pdf",g];
	                    	g//Print
              			  ];
                ];
            (*Print[(mf/@codes) -> (mf/@activeBinCodes)];*)
                (*Abort[];*)
            ];
        ,{ilevel,1,nlevels}];
        If[ generateDiscrepancy,
            discrepancyTabSobol = { (* Sobol 2D Kuo's implementation http://web.maths.unsw.edu.au/~fkuo/sobol/ *)
                    {16, 0.171875},(*pSobol2Dlog1 = discrepancyComplexity[data, (Log[#])/# &, "Discrepancy Sobol 2D N/LogN"]; pSobol2Dlog1 //Print;*)
                     {64, 0.0537109}, 
                     {256, 0.0145874}, 
                     {1024, 0.00429916}, 
                     {4096, 0.00132918}, 
                     {16384, 0.000372991}, 
                     {65536, 0.0000994867},
                     {262144, 0.000027597358}
                 };
            discrepancyTabFIBOm21 = {{3,0.618034},{5,0.418034},{8,0.27051},{13,0.193678},{21,0.130694},{34,0.0866825},{55,0.0554336},{89,0.0372093},{144,0.0244132},{233,0.0161211},
                {377,0.010242},{610,0.00673888},{987,0.00436806},{1597,0.00285382},{2584,0.00180478},{4181,0.0011745},{6765,0.000755457},{10946,0.000489471},{17711,0.000308601},{28657,0.000199274}};
            discrepancyTabFIBOLen8 = {{8,0.27051},{21,0.120557},{55,0.0501118},{144,0.0230114},{377,0.00982341},{987,0.00427672},{2584,0.00180458},{6765,0.000750238},{17711,0.000306409},{46368,0.000126695}
                ,{121393, 0.0000516168}};
            ListPlot[{Log[2,#]& /@ discrepancyMU4, Log[2,#]& /@ discrepancyTabSobol}, Joined->True
                ,Ticks->{Table[{i,i},{i,20}],Automatic}
                ,PlotLabel->"log-log discrepancy"]//Print;
        ];
        If[ generateFourier,
            fsum += getFourier2D[Ceiling[(fouriertabsz ptsXY)],fouriertabsz];
            (*fsum[[1,1]] = 0;*)
            fsum = Reorg[fsum];
            centralPart = (fsum[[fouriertabsz/2-fouriertabsz/16 ;; fouriertabsz/2+fouriertabsz/16, fouriertabsz/2-fouriertabsz/16 ;; fouriertabsz/2+fouriertabsz/16]])^2;
            (*ListDensityPlot[centralPart, ImageSize -> {1024,1024}]//Print;*)
            psprectrum = niceRaster[50000 centralPart /Max[centralPart],zoom->1];
            Print[psprectrum];
            Export["prep-figs/fig-MU4-spectrum.png",psprectrum]
        ];
    ] (*MU4pocRecursive *)

       


MU4makeGoodPatternsWithType[xsz_:4,ysz_:4,dbgGraphics_:True] :=
    Module[ {},
        (*xlimit = Switch[xType,a,4,b,1,c,2,d,3];
        ylimit = Switch[yType,a,4,b,1,c,2,d,3];*)
        res = {};
        Do[
            intcodes = basicPatterns4x4base4[[i]];
            sel = Select[intcodes, (#[[1]] < xsz ) && (#[[2]] < ysz ) &  ];
            If[ Length[sel] == Min[xsz,ysz],
                codes = sel /.{0:>{a,a,a},1:>{a,a,b},2:>{a, b, c}, 3:> {b, c, d} };
                AppendTo[res,codes];
            ]; 
        ,{i,Length[basicPatterns4x4base4]}];
        res = Union[res];
        If[ dbgGraphics,
            Do[
                codes = res[[i]];
                xy = MU4PhiXY /@ codes;
                Graphics[{MU4getGrid[6,a,a], PointSize[.05], Point/@ xy},PlotLabel->{i,{xsz,ysz}} ]//Print;
                codes
            ,{i,Length[res]}];
        ];
        res
    ] (* MU4makeGoodPatternsWithType *)

MU4makeGoodPatterns[dbgGraphics_:True] :=
    Module[ {},
        resTab = Table[
            MU4makeGoodPatternsWithType[ix,iy,dbgGraphics]
        ,{ix,4},{iy,4}];
        resTab[[2,2]] = resTab[[1, 1]];
        Print[resTab];
    ]




prepGoodPatterns4MU4pocRecursive[inxType_:a,inyType_:a,inshowGraphics_:False,innlevels_:4] :=
    Module[ {},
        {xType,yType} = {inxType,inyType};
        nlevels = innlevels;
        showGraphics = inshowGraphics;
        distlimit = .0001;
        
  Switch[nlevels
  	,4,      
        distlimit = Switch[{xType,yType} (* this set for nlevels == 4 *)
        	,{a,a},.019
        	,{a,b},.045
        	,{a,c},.038
        	,{a,d},.022
        	
        	,{b,a},.045
            ,{b,b},.0
            ,{b,c},.038
            ,{b,d},.038

        	,{c,a},.032
            ,{c,b},.038
            ,{c,c},.038
            ,{c,d},.045

        	,{d,a},.029
        	,{d,b},.038
            ,{d,c},.045
            ,{d,d},.038
        ];
        
        
   	,5,      
        distlimit = Switch[{xType,yType} (* this set for nlevels == 5 *)
        	,{a,a},.005(*.0082*)
        	,{a,b},.014
        	,{a,c},.015
        	,{a,d},.0096
        	
        	,{b,a},.014
            ,{b,b},.019
            ,{b,c},.019
            ,{b,d},.022

        	,{c,a},.015
            ,{c,b},.026
            ,{c,c},.018
            ,{c,d},.014

        	,{d,a},.011
        	,{d,b},.022
            ,{d,c},.013
            ,{d,d},.0118
        ];
  ];
        fname = "data/MU4_bestTiles_"<>ToString[MU4symbols2index@xType]<>ToString[MU4symbols2index@yType]<>".dat";

        codes = initcodes = MU4getActiveCodes @ MU4recursiveSubdivSIMPLEST[nlevels,xType,yType];
        npts = Length[codes];
        ptsXY = MU4PhiXY /@ codes;
        Graphics[{{Opacity[.25], MU4getGrid[6,xType,yType]} 
                                ,PointSize[.05],Point/@ ptsXY
                                ,Table[Text[Style[Mod[i,100],36],ptsXY[[i]],{-1,-1}],{i,npts}]
                            } 
                            ,PlotLabel->{"SRC",{xType,yType},npts}
                            ,ImageSize -> 1/3 {1200,1200}   ]//Print;

		npermuts = 10000000;
        rescodes = {};
        count = 1;
        bestval = 0;
		Do[
			If[Mod[ipermut,100000] == 0, Print[ipermut -> bestval]; Print[rescodes] ];
			xnewcodes = (First/@initcodes)[[ RandomSample[Range[npts]] ]];
			ynewcodes = (Last/@initcodes)[[ RandomSample[Range[npts]] ]];
            codes = {xnewcodes,ynewcodes}//T;
            ptsXY = MU4PhiXY /@ codes;
            dist = getptsMinDist1[ptsXY];
            If[ dist > distlimit,
            	If[dist > bestval, bestval = dist];
                AppendTo[rescodes,codes];
        		rescodes = Union[Sort/@rescodes];
        		Print["Writing into ",fname -> Length[rescodes] -> bestval];
        		Put[rescodes,fname];
	            If[ showGraphics,
	                Graphics[{{Opacity[.25], MU4getGrid[7,xType,yType]} 
	                   ,PointSize[.05],Point/@ ptsXY
	                   ,Table[Text[Style[Mod[i,100],36],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]
	                } 
	                ,PlotLabel->{xType,yType}
	                ,ImageSize -> 1/3 {1200,1200}   ]//Print;
	            ];
            ];
            {dist,codes}
        ,{ipermut,npermuts}];

        Do[
            codes = rescodes[[i]];
            ptsXY = MU4PhiXY /@ codes;
            If[ showGraphics,
                Graphics[{{Opacity[.25], MU4getGrid[7,xType,yType]} 
                   ,PointSize[.05],Point/@ ptsXY
                   ,Table[Text[Style[Mod[i,100],36],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]
                } 
                ,PlotLabel->{xType,yType}
                ,ImageSize -> 1/3 {1200,1200}   ]//Print;
            ];
        ,{i,Length[rescodes]}];
    ] (*prepGoodPatterns4MU4pocRecursive *)

(*
prepGoodPatterns4MU4pocRecursive[a,a]
prepGoodPatterns4MU4pocRecursive[a,b]
prepGoodPatterns4MU4pocRecursive[a,c]
prepGoodPatterns4MU4pocRecursive[a,d]
prepGoodPatterns4MU4pocRecursive[b,a]
prepGoodPatterns4MU4pocRecursive[b,b]
prepGoodPatterns4MU4pocRecursive[b,c]
prepGoodPatterns4MU4pocRecursive[b,d]
prepGoodPatterns4MU4pocRecursive[c,a]
prepGoodPatterns4MU4pocRecursive[c,b]
prepGoodPatterns4MU4pocRecursive[c,c]
prepGoodPatterns4MU4pocRecursive[c,d]
prepGoodPatterns4MU4pocRecursive[d,a]
prepGoodPatterns4MU4pocRecursive[d,b]
prepGoodPatterns4MU4pocRecursive[d,c]
prepGoodPatterns4MU4pocRecursive[d,d]
*)

MU4makeDiscrepancy[] :=
    Module[ {},
    	
    	basename = "MU4";
        lentab = Table[MU4basicSeq[[i]], {i, 12, 46, 2}];
        iset = 0;
        discrepancyTab = Table[{0, 0}, {Length[lentab]}];
        Do[
    		len = lentab[[i]];
        	fname = "data/pointsets_MU4/pts_"<>ToString[NumberForm[len, 7, NumberPadding -> "0"]]<>"_"<>ToString[NumberForm[iset, 3, NumberPadding -> "0"]]<>".dat";
         	pts = Import[fname];
        	Print["Reading ",fname];
            discrepancy = getDiscrepancy2Dexact[pts];
            discrepancyTab[[i]] = { len, discrepancy};
            Print[discrepancyTab];
       		Put[discrepancyTab,"results/discrepancy_"<>basename<>".dat"];
        ,{i,Length[lentab]} ];     
    ] (* MU4makeDiscrepancy *)

MU4generatePointSets[innlevels_:16, patternsLevel_:10, nPatterns__:64 ] :=
    Module[ {},
        nlevels = innlevels;
        myRandomChoice := RandomChoice;
        MU4goodPatterns = Table[{},{4},{4}];
        Table[
            fname = "data/MU4_L"<>ToString[patternsLevel]<>"_"<>ToString[nPatterns]<>"/MU4_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU4goodPatterns[[ix,iy]] = Get[fname];
            Print["Reading ",fname -> Length[MU4goodPatterns[[ix,iy]]]];
        ,{iy,4},{ix,4}];
		(*randomTabX = Table[ Table[RandomChoice[{True,False}],{MU4basicSeq[[2+2 (ilevel+patternsLevel)]] }] ,{ilevel,1,nlevels}];
        randomTabY = Table[ Table[RandomChoice[{True,False}],{MU4basicSeq[[2+2 (ilevel+patternsLevel)]] }] ,{ilevel,1,nlevels}];*)


    	nsets = 10;
    	Parallelize @ Do[
	        Do[
				codes = MU4recursiveSubdiv[ilevel,a,a];
				ptsXY = MU4PhiXY /@ codes;
				len = Length[ptsXY];
	        	fname = "data/pointsets_MU4/pts_"<>ToString[NumberForm[len, 7, NumberPadding -> "0"]]<>"_"<>ToString[NumberForm[iset, 3, NumberPadding -> "0"]]<>".dat";
				Print[{ilevel,iset} -> fname];
				Export[fname,ptsXY];
	        ,{ilevel,nlevels}];
	    ,{iset,0,nsets-1}]
    ] (* MU4generatePointSets *)

fzone[{x_, y_}, kzone_] :=
      (Sin[(kzone x)^2 + (kzone y)^2] (*+ 1*))/2;
  
mitchellFilter[x_] := With[{b=1/3,c=1/3},
      Piecewise[{{(12 - 9 b - 6 c) Abs@x^3 + (-18 + 12 b +  6 c) x^2 + (6 - 2 b),  Abs@x < 1}, {(-b - 6 c) Abs@x^3 + (6 b + 30 c) x^2 + (-12 b - 48 c) Abs@x + (8 b + 24 c), 1 <= Abs@x < 2}}, 0]/6
]

mitchellFilterC = (* compiled version *)
  Compile[{{x, _Real}}, Piecewise[{{7 Abs@x^3 + -12 x^2 + 16/3, Abs@x < 1}, {-7/3 Abs@x^3 + 12 x^2 - 20 Abs@x + 32/3, 1 <= Abs@x < 2}}, 0]/6]
  
fzoneC = Compile[{{coord, _Real, 1}, {kzone, _Real}}, (Sin[(kzone coord[[1]])^2 + (kzone coord[[2]])^2] + 1)/2]
	
MU4makeZonePlateFromFile[fname_:"data_discrepancy/pts_grid_L9.dat", samplesPerPixel_:1, filterSz_:2, outputSize_:512, stkFlag_:True] :=
(* it takes about 3 minutes to generate 512x512 output, 1 samples per pixel *)
        Block[ {zoomFactor, kzone, pts, szPts, dupNb, ptsDuplicated, indx, indy, tab, gTab, sz, i, x, y, res, outputfname},
            zoomFactor = 1;
            kzone = 2/(4 Pi);	(*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< here: Sqrt[2.] because our zoneplate goes till f=2 *)
            sz = outputSize;
            If[ !FileExistsQ[fname],
                Print["File does not exist: ",fname];
                Abort[]
            ];
            pts = If[stkFlag, Drop[#,1]& @ Import[fname], Import[fname]] ; (* stk : first line contains meta-information *)
            szPts = Round[Sqrt@(Length@pts)/Sqrt[samplesPerPixel] ];
            pts = pts*szPts;
            (*Graphics[Point/@pts]//Print;*)
            dupNb = Ceiling[2 sz/szPts]; 	(* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<here: 2 because our zoneplate goes till f=2 *)
            ptsDuplicated =  Flatten[Table[# + {x*szPts, y*szPts} & /@ pts, {x, 0, dupNb}, {y, 0, dupNb}], 2];
            Print[samplesPerPixel, " sample per pixel (mean)",mf@{fname,{samplesPerPixel,filterSz,outputSize,szPts}}];
            Print["Image size = ", sz,mf@{fname,{samplesPerPixel,filterSz,outputSize,szPts}}];
            Print[dupNb^2, " duplications of initial point set",mf@{fname,{samplesPerPixel,filterSz,outputSize,szPts}}];
            tab = Table[{}, {sz}, {sz}];
            (indx = Floor@#[[1]] + 1;
             indy = Floor@#[[2]] + 1;
             (*Parallelize @*) Do[ (* parallelization does not work here *)
                If[ (0 < indx + i < sz) && (0 < indy + j < sz),
                    tab[[indx + i, indy + j]] = {tab[[indx + i, indy + j]], 
                        mitchellFilterC[Norm[# - {indx + i, indy + j}]]*fzoneC[#, kzone]};
                ];
    		,{i, -filterSz, filterSz}, {j, -filterSz, filterSz}]) & /@ ptsDuplicated;
            tab = Rescale @ Map[Total@Flatten[#] &, tab, {2}];
            res = niceRaster[tab,zoom->zoomFactor];
	        Print["the result of ",mf@{fname,{samplesPerPixel,filterSz,outputSize,szPts}},":"];	        	
            res//Print;
            outputfname = fname<>"_zoneplate.png";
            Export[outputfname,res,"PNG"];
            Print["Written into ",outputfname];
            (*Return[res]*)
        ] (*makeZonePlateFigure*)


(* exemples: 
*)

MU4makeZonePlates[nSamplesPerPixel_:4] :=
    Module[ {},
        Parallelize @ {
			(*MU4makeZonePlateFromFile["data_discrepancy/pts_grid_L9.dat",nSamplesPerPixel,2,512,False],
			MU4makeZonePlateFromFile["data_discrepancy/pts_Sobol_L9.dat",nSamplesPerPixel,2,512,False], 
			MU4makeZonePlateFromFile["data_discrepancy/pts_halton_L9.dat",nSamplesPerPixel,2,512,False],
			MU4makeZonePlateFromFile["data_discrepancy/pts_MU4_00299915_0000.dat",nSamplesPerPixel,2,512,False],*)
        	
			MU4makeZonePlateFromFile["data_discrepancy/pts_grid_L10.dat",nSamplesPerPixel,2,512,False],
            MU4makeZonePlateFromFile["data_discrepancy/pts_Sobol_L10.dat",nSamplesPerPixel,2,512,False],
            MU4makeZonePlateFromFile["data_discrepancy/pts_halton_L10.dat",nSamplesPerPixel,2,512,False],
			MU4makeZonePlateFromFile["data_discrepancy/pts_MU4_01088589_0000.dat",nSamplesPerPixel,2,512,False]
        };
    ]

getDiscrepancy[fname_] :=
    Module[ {},
    	execstr = "stk-sampler -s "<>method<>" -n "<>ToString[npts]<>" -o data_discrepancy/pts_"<>method<>"_L"<>ToString[ilevel]<>".dat > /dev/null";
        Run[execPrefix<>"stk-discrepancy -i data_discrepancy/pts_"<>method<>"_L"<>ToString[ilevel]<>".dat -o data_discrepancy/discrepancy2D_"<>method<>"_L"<>ToString[ilevel]<>".dat -m star -I 1 > /dev/null"];
    ]

discrepancyAllRefMethods2D[inmethod_:4, fromLevel_:2,toLevel_:10] :=
    Module[ {},
    	imethod = inmethod;
    	Print["imethod = ", imethod];
    	methods = {"whitenoise", "grid", "stratified", "poisson-disk", "sobol", "halton", "ccvt", "fpo"};
    		method = methods[[imethod]];
	        discrepancyTab = {};
	        prevSessionTime = SessionTime[];
	        dtab = {};
	        Do[
	        	npts = 4^ilevel;
				Print[" Processing ",method,{ilevel,npts}];
				execstr = "stk-sampler -s "<>method<>" -n "<>ToString[npts]<>" -o data_discrepancy/pts_"<>method<>"_L"<>ToString[ilevel]<>".dat > /dev/null";
				Run[execPrefix<>execstr];
				Run[execPrefix<>"stk-discrepancy -i data_discrepancy/pts_"<>method<>"_L"<>ToString[ilevel]<>".dat -o data_discrepancy/discrepancy2D_"<>method<>"_L"<>ToString[ilevel]<>".dat -m star -I 1 > /dev/null"];
				curSessionTime = SessionTime[];
				timing = curSessionTime - prevSessionTime; (* about 20secs for 16K; 5mins for 64K; 1h30 for 256K; 24h for 1M *)
				prevSessionTime = curSessionTime; 
	        	Print["-------------- timing ", method,{ilevel,npts} -> timing];
	        	{{npts, d}} = Import["data_discrepancy/discrepancy2D_"<>method<>"_L"<>ToString[ilevel]<>".dat"];
	        	AppendTo[dtab, {npts, d}];
		        Put[dtab,"data_discrepancy/res_discrepancy2D_"<>method<>".dat"];
	        ,{ilevel,fromLevel,toLevel}];
]; (* discrepancyAllRefMethods2D *)

discrepancySobol2D[] :=
    Module[ {},
        {ind1, ind2} = {1,2};
        buildMSobol[{ind1, ind2}];
        discrepancyTabSobol = {};
        prevSessionTime = SessionTime[];
        Do[
        	npts = 4^ilevel;
	        set = pts = Table[ sobol2d[i] //N,{i,0,npts-1}]; 
			Print[" Processing ",{ilevel,Length[set]}];
			d = getDiscrepancy2Dexact[set];
			curSessionTime = SessionTime[];
			timing = curSessionTime - prevSessionTime; (* about 20secs for 16K; 5mins for 64K; 1h30 for 256K; 24h for 1M *)
			prevSessionTime = curSessionTime; 
			AppendTo[discrepancyTabSobol, {npts,d} ];
        	Print[{ilevel,timing}->"discrepancyTabSobol = ",discrepancyTabSobol];
        	Put[discrepancyTabSobol,"data_discrepancy/discrepancyTabSobol2D.dat"];     	
        ,{ilevel,2,10}];
]; (* discrepancySobol2D *)

makeSobol2DPointSets[] :=
    Module[ {},
        {ind1, ind2} = {1,2};
        buildMSobol[{ind1, ind2}];
        discrepancyTabSobol = {};
        prevSessionTime = SessionTime[];
        Do[
        	npts = 4^ilevel;
	        set = pts = Table[ sobol2d[i] //N,{i,0,npts-1}]; 
	        fname = "data_discrepancy/pts_Sobol_L"<>ToString[ilevel]<>".dat";
			Print[" Processing ",{ilevel,Length[set]} -> fname];
			Export[fname,pts];			   	
        ,{ilevel,2,12}];
]; (* discrepancySobol2D *)

a2alpha[symbols_]:=(symbols(*/.{a :> \[Alpha], b :> \[Beta], c :> \[Gamma], d :> \[Delta]}*))

getRefDiscrepancyWhiteNoise[] :=
    Module[ {},
        dataSets = {
        	{{16,0.314206},{17,0.361683},{19,0.324763},{21,0.367469},{23,0.385111},{25,0.272938},{27,0.317383},{29,0.291735},{32,0.268853},{35,0.2751},{38,0.228256},{41,0.275717},{45,0.218552},{49,0.231634},{54,0.195461},{59,0.20018},{64,0.214881},{70,0.166774},{76,0.161318},{83,0.196417},{91,0.166679},{99,0.166301},{108,0.124702},{117,0.129267},{128,0.174662},{140,0.133112},{152,0.127372},{166,0.142506},{181,0.12931},{197,0.13567},{215,0.114599},{235,0.119424},{256,0.0898347},{279,0.112298},{304,0.117502},{332,0.0839468},{362,0.0898855},{395,0.0676464},{431,0.0727197},{470,0.0627747},{512,0.0811781},{558,0.0712065},{609,0.0663039},{664,0.0564692},{724,0.0650008},{790,0.0582582},{861,0.0468823},{939,0.0418301},{1024,0.0538343},{1117,0.0476743},{1218,0.0458253},{1328,0.0500041},{1448,0.0516404},{1579,0.0488674},{1722,0.0313938},{1878,0.0343071},{2048,0.0361999},{2233,0.0407684},{2435,0.0335987},{2656,0.0250872},{2896,0.0260459},{3158,0.0304035},{3444,0.0279987},{3756,0.0311953},{4096,0.024637},{4467,0.0292117},{4871,0.024784},{5312,0.0209973},{5793,0.0182735},{6317,0.0227969},{6889,0.0178808},{7512,0.0177668},{8192,0.0172367},{8933,0.014784},{9742,0.0185697},{10624,0.0159021},{11585,0.0165902},{12634,0.014361},{13777,0.0160662},{15024,0.0122998},{16384,0.0108809},{17867,0.0128424},{19484,0.00964387},{21247,0.0100723},{23170,0.010522},{25268,0.0104429},{27554,0.0156865},{30048,0.00842882},{32768,0.0073129},{35734,0.00900733},{38968,0.00754179},{42495,0.00630477},{46341,0.00669381},{50535,0.00651671},{55109,0.0067463},{60097,0.00678822},{65536,0.0053471},{71468,0.00607325},{77936,0.0042542},{84990,0.0056242},{92682,0.00440922},{101070,0.00475272},{110218,0.00492417},{120194,0.00606374},{131072,0.00402536},{142935,0.00421784},{155872,0.00375433},{169979,0.00446311},{185364,0.00335637},{202141,0.00423944},{220436,0.00363137},{240387,0.00320988},{262144,0.00327757},{285870,0.0026179},{311744,0.00293855},{339959,0.00299044},{370728,0.00247118},{404281,0.00229602},{440872,0.00208082},{480774,0.00280534},{524288,0.00221412},{571740,0.00187867},{623487,0.00175063},{679917,0.00210089}},
{{16, 0.259835134}, {17, 0.237692689}, {19, 0.222032296}, {21, 0.202678841}, 
 {23, 0.237979829}, {25, 0.174489676}, {27, 0.223931199}, {29, 0.199824002}, 
 {32, 0.215704398}, {35, 0.179969615}, {38, 0.175857454}, {41, 0.226807256}, 
 {45, 0.203913499}, {49, 0.126336559}, {54, 0.184389648}, {59, 0.174388718}, 
 {64, 0.159383372}, {70, 0.166774048}, {76, 0.155229397}, {83, 0.120741553}, 
 {91, 0.11917783}, {99, 0.103728387}, {108, 0.100795778}, {117, 0.106289402}, 
 {128, 0.1672179}, {140, 0.0917119187}, {152, 0.0856542698}, 
 {166, 0.0790174907}, {181, 0.0992134851}, {197, 0.110528536}, 
 {215, 0.0791078168}, {235, 0.0964426489}, {256, 0.0752758729}, 
 {279, 0.0687703845}, {304, 0.064261572}, {332, 0.0705985186}, 
 {362, 0.0631329163}, {395, 0.0612270576}, {431, 0.0549375422}, 
 {470, 0.05708444}, {512, 0.0289422919}, {558, 0.0373048445}, 
 {609, 0.0590846511}, {664, 0.0517123587}, {724, 0.0445928314}, 
 {790, 0.0432861745}, {861, 0.0456554349}, {939, 0.0363234696}, 
 {1024, 0.0299974024}, {1117, 0.0411693969}, {1218, 0.0458253385}, 
 {1328, 0.0262736476}, {1448, 0.0329394625}, {1579, 0.0249341095}, 
 {1722, 0.024841406}, {1878, 0.0343071469}, {2048, 0.0270032275}, 
 {2233, 0.0230062493}, {2435, 0.0219650554}, {2656, 0.0190467682}, 
 {2896, 0.0254238174}, {3158, 0.0301799632}, {3444, 0.0232288171}, 
 {3756, 0.0311952568}, {4096, 0.0180109077}, {4467, 0.0256295202}, 
 {4871, 0.0157955229}, {5312, 0.0200834314}, {5793, 0.0171542645}, 
 {6317, 0.0147040189}, {6889, 0.0128254551}, {7512, 0.012108102}, 
 {8192, 0.0118914636}, {8933, 0.0147839737}, {9742, 0.012605762}, 
 {10624, 0.0124605777}, {11585, 0.01629747}, {12634, 0.00976018663}, 
 {13777, 0.00894915817}, {15024, 0.0092140729}, {16384, 0.00995258565}, 
 {17867, 0.0122369288}, {19484, 0.00828082048}, {21247, 0.00976721945}, 
 {23170, 0.00714381419}, {25268, 0.00541503429}, {27554, 0.00976253393}, 
 {30048, 0.00562196073}, {32768, 0.00629326844}, {35734, 0.00677207866}, 
 {38968, 0.00754179288}, {42495, 0.00458476592}, {46341, 0.00669380595}, 
 {50535, 0.00434556824}, {55109, 0.0063226925}, {60097, 0.00678821657}, 
 {65536, 0.00502895453}, {71468, 0.00426183987}, {77936, 0.00342694406}, 
 {84990, 0.00459727458}, {92682, 0.00408255459}, {101070, 0.00309091942}, 
 {110218, 0.00388497388}, {120194, 0.00274081774}, {131072, 0.00290901226}, 
 {142935, 0.00316464902}, {155872, 0.00300421112}, {169979, 0.00261365703}, 
 {185364, 0.00166578743}, {202141, 0.00217227522}, {220436, 0.00260464294}, 
 {240387, 0.00311542416}, {262144, 0.00239423844}, {285870, 0.00200576769}, 
 {311744, 0.00293855391}, {339959, 0.00142451962}, {370728, 0.00149890362}, 
 {404281, 0.00168646474}, {440872, 0.00173198237}, {480774, 0.00139012181}, 
 {524288, 0.00221411716}, {571740, 0.00135944931}, {623487, 0.00120051404}, 
 {679917, 0.00187990253}, {741455, 0.000983745219}, {808563, 0.00116129728}, 
 {881744, 0.00145888989}, {961548, 0.00144358564}, {1048576, 0.0012253757}},
{{16, 0.245565106}, {17, 0.361683224}, {19, 0.324762688}, {21, 0.250305062}, 
 {23, 0.220222441}, {25, 0.254299721}, {27, 0.196029889}, {29, 0.146787898}, 
 {32, 0.175462697}, {35, 0.192788908}, {38, 0.184834884}, {41, 0.168467983}, 
 {45, 0.177818175}, {49, 0.184404976}, {54, 0.16403148}, {59, 0.161786397}, 
 {64, 0.100577355}, {70, 0.15148674}, {76, 0.161317642}, {83, 0.196416903}, 
 {91, 0.116266269}, {99, 0.100111128}, {108, 0.124702319}, 
 {117, 0.129267391}, {128, 0.0970654325}, {140, 0.0721634821}, 
 {152, 0.115094444}, {166, 0.0792680962}, {181, 0.0840044296}, 
 {197, 0.101073155}, {215, 0.0854049263}, {235, 0.0592015909}, 
 {256, 0.0897340675}, {279, 0.0586995979}, {304, 0.117501579}, 
 {332, 0.0768753765}, {362, 0.0737140828}, {395, 0.0657782892}, 
 {431, 0.0348679208}, {470, 0.050984641}, {512, 0.0811781246}, 
 {558, 0.0712065431}, {609, 0.0419681275}, {664, 0.0564692159}, 
 {724, 0.0441554947}, {790, 0.0496435406}, {861, 0.0350234247}, 
 {939, 0.0387410066}, {1024, 0.0396135968}, {1117, 0.0350233013}, 
 {1218, 0.0287506734}, {1328, 0.0436717233}, {1448, 0.0483377957}, 
 {1579, 0.0255028602}, {1722, 0.0313937955}, {1878, 0.0314240858}, 
 {2048, 0.0361998845}, {2233, 0.0281947137}, {2435, 0.0335986675}, 
 {2656, 0.0232947251}, {2896, 0.0183223759}, {3158, 0.0214519511}, 
 {3444, 0.0187547539}, {3756, 0.0219001897}, {4096, 0.016098766}, 
 {4467, 0.0141166107}, {4871, 0.0221973105}, {5312, 0.0173627557}, 
 {5793, 0.0161331137}, {6317, 0.0165950593}, {6889, 0.0150094657}, 
 {7512, 0.0124936942}, {8192, 0.0172367406}, {8933, 0.0131701598}, 
 {9742, 0.00929178846}, {10624, 0.0105292889}, {11585, 0.0098813958}, 
 {12634, 0.0143610229}, {13777, 0.0116325719}, {15024, 0.0122997947}, 
 {16384, 0.00803111604}, {17867, 0.00810306274}, {19484, 0.00817283045}, 
 {21247, 0.00705132421}, {23170, 0.0105219649}, {25268, 0.00978403973}, 
 {27554, 0.0097220109}, {30048, 0.00622640099}, {32768, 0.00715135545}, 
 {35734, 0.00900732754}, {38968, 0.00615943282}, {42495, 0.00449381788}, 
 {46341, 0.00502396349}, {50535, 0.0057004495}, {55109, 0.00442609133}, 
 {60097, 0.00472612214}, {65536, 0.00407513867}, {71468, 0.00607324535}, 
 {77936, 0.00326707423}, {84990, 0.00310562033}, {92682, 0.00333477608}, 
 {101070, 0.00361048628}, {110218, 0.00304523283}, {120194, 0.00281703713}, 
 {131072, 0.00332652941}, {142935, 0.00249190611}, {155872, 0.00282421508}, 
 {169979, 0.00235731753}, {185364, 0.00286819411}, {202141, 0.00207436549}, 
 {220436, 0.00363136904}, {240387, 0.00194041555}, {262144, 0.00327757209}, 
 {285870, 0.00248183879}, {311744, 0.00214573253}, {339959, 0.00243737707}, 
 {370728, 0.00175713506}, {404281, 0.00205717786}, {440872, 0.00188074574}, 
 {480774, 0.00159814659}, {524288, 0.00171160981}, {571740, 0.00166269017}, 
 {623487, 0.00117247637}, {679917, 0.00117814252}, {741455, 0.00146946409}, 
 {808563, 0.000927494791}, {881744, 0.000984925212}, {961548, 0.00118461211}, 
 {1048576, 0.000735002196}},
{{16, 0.187555703}, {17, 0.236109103}, {19, 0.18465493}, {21, 0.246910663}, 
 {23, 0.279022785}, {25, 0.169981308}, {27, 0.192962888}, {29, 0.211400446}, 
 {32, 0.211649224}, {35, 0.152798239}, {38, 0.190057219}, {41, 0.259250093}, 
 {45, 0.166702798}, {49, 0.233679942}, {54, 0.139410385}, {59, 0.202323373}, 
 {64, 0.191649901}, {70, 0.10006871}, {76, 0.124613762}, {83, 0.134043835}, 
 {91, 0.108444072}, {99, 0.160984243}, {108, 0.168207256}, 
 {117, 0.117411943}, {128, 0.110067224}, {140, 0.0901611461}, 
 {152, 0.11034307}, {166, 0.112726108}, {181, 0.0791951489}, 
 {197, 0.0981025364}, {215, 0.0865490304}, {235, 0.0720710291}, 
 {256, 0.0873724494}, {279, 0.0610410531}, {304, 0.054077911}, 
 {332, 0.0643903735}, {362, 0.050169071}, {395, 0.0592955516}, 
 {431, 0.0655067943}, {470, 0.0630382534}, {512, 0.0521476652}, 
 {558, 0.0719844196}, {609, 0.0407780858}, {664, 0.0549020803}, 
 {724, 0.0604883133}, {790, 0.0423181384}, {861, 0.0360150016}, 
 {939, 0.0573160479}, {1024, 0.0400368015}, {1117, 0.0391318688}, 
 {1218, 0.0427630808}, {1328, 0.0246155738}, {1448, 0.0340567949}, 
 {1579, 0.0253524126}, {1722, 0.029462278}, {1878, 0.0232908968}, 
 {2048, 0.02374544}, {2233, 0.0262832684}, {2435, 0.0189895545}, 
 {2656, 0.0201255599}, {2896, 0.0194565758}, {3158, 0.016587908}, 
 {3444, 0.0207836825}, {3756, 0.0222685056}, {4096, 0.0144878516}, 
 {4467, 0.0180791826}, {4871, 0.0128691489}, {5312, 0.0217745764}, 
 {5793, 0.0172680032}, {6317, 0.0174161527}, {6889, 0.0188691963}, 
 {7512, 0.01559659}, {8192, 0.0114322155}, {8933, 0.0103171362}, 
 {9742, 0.0100486336}, {10624, 0.0101083787}, {11585, 0.0099863779}, 
 {12634, 0.00997088898}, {13777, 0.0105205128}, {15024, 0.0127326851}, 
 {16384, 0.00837350393}, {17867, 0.00711794159}, {19484, 0.0106993371}, 
 {21247, 0.00881132553}, {23170, 0.00670422708}, {25268, 0.00632446517}, 
 {27554, 0.00760005023}, {30048, 0.00886008818}, {32768, 0.00827605439}, 
 {35734, 0.00500288074}, {38968, 0.00567043081}, {42495, 0.00477390368}, 
 {46341, 0.00682841887}, {50535, 0.00649403638}, {55109, 0.00427676927}, 
 {60097, 0.00547895979}, {65536, 0.00452936829}, {71468, 0.00462866958}, 
 {77936, 0.00509581082}, {84990, 0.00318596142}, {92682, 0.00218413669}, 
 {101070, 0.00431497074}, {110218, 0.00297012142}, {120194, 0.00276429002}, 
 {131072, 0.00338076265}, {142935, 0.00523322734}, {155872, 0.00293663646}, 
 {169979, 0.00373711311}, {185364, 0.00247824128}, {202141, 0.00206957982}, 
 {220436, 0.00289853346}, {240387, 0.00284264129}, {262144, 0.00307915248}, 
 {285870, 0.00171089264}, {311744, 0.00321924642}, {339959, 0.00153927602}, 
 {370728, 0.00179464052}, {404281, 0.00130903668}, {440872, 0.00153074717}, 
 {480774, 0.00142858323}, {524288, 0.00109644894}, {571740, 0.00166422551}, 
 {623487, 0.00220595808}, {679917, 0.00181392879}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}},
{{16, 0.414242326}, {17, 0.269710021}, {19, 0.193225097}, {21, 0.299966008}, 
 {23, 0.35057033}, {25, 0.171007237}, {27, 0.19366601}, {29, 0.220287368}, 
 {32, 0.156590169}, {35, 0.227613098}, {38, 0.182874509}, {41, 0.147854212}, 
 {45, 0.224530969}, {49, 0.168070046}, {54, 0.0883873592}, {59, 0.120012863}, 
 {64, 0.162433615}, {70, 0.140067872}, {76, 0.122414311}, {83, 0.11386498}, 
 {91, 0.0904403489}, {99, 0.143976603}, {108, 0.111931425}, 
 {117, 0.0983341824}, {128, 0.146856889}, {140, 0.120886247}, 
 {152, 0.06811205}, {166, 0.103319955}, {181, 0.0604523301}, 
 {197, 0.0745454088}, {215, 0.0723750752}, {235, 0.0863845247}, 
 {256, 0.0512056368}, {279, 0.0578906081}, {304, 0.0641937133}, 
 {332, 0.0562017042}, {362, 0.0864714559}, {395, 0.0477134141}, 
 {431, 0.083151031}, {470, 0.0451858382}, {512, 0.0661442529}, 
 {558, 0.0430649757}, {609, 0.0517137828}, {664, 0.0721124997}, 
 {724, 0.0439536737}, {790, 0.0347705421}, {861, 0.0552030888}, 
 {939, 0.0360127739}, {1024, 0.0495859662}, {1117, 0.0431357934}, 
 {1218, 0.0411744486}, {1328, 0.0318308522}, {1448, 0.0268103076}, 
 {1579, 0.028684742}, {1722, 0.0253111883}, {1878, 0.0287435603}, 
 {2048, 0.0216433806}, {2233, 0.0241067313}, {2435, 0.0231666618}, 
 {2656, 0.0185829159}, {2896, 0.0156963489}, {3158, 0.0244352992}, 
 {3444, 0.0268401745}, {3756, 0.017359688}, {4096, 0.0177885494}, 
 {4467, 0.0230134583}, {4871, 0.0286110824}, {5312, 0.0176652977}, 
 {5793, 0.0164357664}, {6317, 0.0135497695}, {6889, 0.0129483173}, 
 {7512, 0.012614462}, {8192, 0.0114359839}, {8933, 0.0130331776}, 
 {9742, 0.0136959762}, {10624, 0.0119531726}, {11585, 0.0119520276}, 
 {12634, 0.0132044027}, {13777, 0.00761646959}, {15024, 0.00834556351}, 
 {16384, 0.00847839371}, {17867, 0.01199274}, {19484, 0.00718275583}, 
 {21247, 0.0100020085}, {23170, 0.00587579528}, {25268, 0.00883219565}, 
 {27554, 0.00596670136}, {30048, 0.00670316418}, {32768, 0.00751908324}, 
 {35734, 0.00722086841}, {38968, 0.00773668245}, {42495, 0.00544178625}, 
 {46341, 0.0047777099}, {50535, 0.00689915774}, {55109, 0.00608152719}, 
 {60097, 0.00469958787}, {65536, 0.00715254293}, {71468, 0.00380478068}, 
 {77936, 0.00339536004}, {84990, 0.00343991411}, {92682, 0.00303799136}, 
 {101070, 0.00319621257}, {110218, 0.00259685425}, {120194, 0.00388677669}, 
 {131072, 0.00382615313}, {142935, 0.00373222943}, {155872, 0.00226675854}, 
 {169979, 0.0029793622}, {185364, 0.00367970649}, {202141, 0.00225875207}, 
 {220436, 0.00321260636}, {240387, 0.00259253075}, {262144, 0.00149257453}, 
 {285870, 0.00292128688}, {311744, 0.0024807769}, {339959, 0.00188376734}, 
 {370728, 0.00184333659}, {404281, 0.00152923775}, {440872, 0.0021555472}, 
 {480774, 0.00129061771}, {524288, 0.00198246393}, {571740, 0.00195304934}, 
 {623487, 0.00125741598}, {679917, 0.00140539896}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}},
{{16, 0.465706748}, {17, 0.274061647}, {19, 0.240736045}, {21, 0.293016442}, 
 {23, 0.280297007}, {25, 0.245272406}, {27, 0.151340498}, {29, 0.273490932}, 
 {32, 0.164823969}, {35, 0.287031757}, {38, 0.260347852}, {41, 0.192142817}, 
 {45, 0.230711929}, {49, 0.144061769}, {54, 0.131074429}, {59, 0.164534377}, 
 {64, 0.111576459}, {70, 0.10667315}, {76, 0.113056468}, {83, 0.107763066}, 
 {91, 0.102747572}, {99, 0.127750054}, {108, 0.104008607}, 
 {117, 0.093966655}, {128, 0.0801693672}, {140, 0.0967265676}, 
 {152, 0.127587377}, {166, 0.0733822486}, {181, 0.0764427879}, 
 {197, 0.128167638}, {215, 0.0577700986}, {235, 0.0599952704}, 
 {256, 0.102030811}, {279, 0.0860935323}, {304, 0.0672127693}, 
 {332, 0.0824585863}, {362, 0.0774240618}, {395, 0.0631731798}, 
 {431, 0.0554557867}, {470, 0.0503111755}, {512, 0.034133675}, 
 {558, 0.0600155958}, {609, 0.0464926321}, {664, 0.0382905183}, 
 {724, 0.047638003}, {790, 0.0523831391}, {861, 0.0531332276}, 
 {939, 0.0467645661}, {1024, 0.0428659852}, {1117, 0.0408478091}, 
 {1218, 0.0463372975}, {1328, 0.0376866133}, {1448, 0.0316047102}, 
 {1579, 0.0273769574}, {1722, 0.0287388268}, {1878, 0.0277172323}, 
 {2048, 0.0187227255}, {2233, 0.0220175016}, {2435, 0.0340742398}, 
 {2656, 0.027626026}, {2896, 0.0249338831}, {3158, 0.0236398712}, 
 {3444, 0.0196693244}, {3756, 0.0178147889}, {4096, 0.0149235648}, 
 {4467, 0.0204442706}, {4871, 0.0156733415}, {5312, 0.0166735824}, 
 {5793, 0.0144717308}, {6317, 0.0187596056}, {6889, 0.0171090507}, 
 {7512, 0.0185792679}, {8192, 0.0153018447}, {8933, 0.0101287604}, 
 {9742, 0.00976158864}, {10624, 0.0123083814}, {11585, 0.00992362073}, 
 {12634, 0.0111592718}, {13777, 0.00974761979}, {15024, 0.00925219393}, 
 {16384, 0.0105141803}, {17867, 0.00767028921}, {19484, 0.0116847825}, 
 {21247, 0.00841240447}, {23170, 0.00649999523}, {25268, 0.00900786076}, 
 {27554, 0.00662713215}, {30048, 0.00658403365}, {32768, 0.00666104238}, 
 {35734, 0.00587705309}, {38968, 0.00556106727}, {42495, 0.00633401494}, 
 {46341, 0.00567032645}, {50535, 0.00418866341}, {55109, 0.00613224048}, 
 {60097, 0.00534472453}, {65536, 0.00440482353}, {71468, 0.0032176447}, 
 {77936, 0.0043418139}, {84990, 0.00252232004}, {92682, 0.00421223409}, 
 {101070, 0.00343211674}, {110218, 0.00242318091}, {120194, 0.00361152692}, 
 {131072, 0.00366474601}, {142935, 0.00358858436}, {155872, 0.00268115664}, 
 {169979, 0.00216100448}, {185364, 0.00359619698}, {202141, 0.00304198946}, 
 {220436, 0.00222541384}, {240387, 0.00277869107}, {262144, 0.0029618434}, 
 {285870, 0.00360144583}, {311744, 0.00335336346}, {339959, 0.00226454398}, 
 {370728, 0.00137803228}, {404281, 0.00168205727}, {440872, 0.00246476981}, 
 {480774, 0.00275422611}, {524288, 0.00175769252}, {571740, 0.00155489197}, 
 {623487, 0.00213150035}, {679917, 0.00158709991}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}},
{{16, 0.241159006}, {17, 0.346434413}, {19, 0.351786215}, {21, 0.235718287}, 
 {23, 0.195407089}, {25, 0.200081848}, {27, 0.246839649}, {29, 0.163688996}, 
 {32, 0.181084568}, {35, 0.131101039}, {38, 0.172555019}, {41, 0.204673902}, 
 {45, 0.186934367}, {49, 0.175355461}, {54, 0.202518799}, {59, 0.171014626}, 
 {64, 0.125406572}, {70, 0.138412207}, {76, 0.127223755}, {83, 0.152925929}, 
 {91, 0.105113012}, {99, 0.100207669}, {108, 0.075541814}, 
 {117, 0.0950516469}, {128, 0.101148179}, {140, 0.102052182}, 
 {152, 0.10120874}, {166, 0.0823449717}, {181, 0.113711956}, 
 {197, 0.0804283682}, {215, 0.0612089869}, {235, 0.0809923377}, 
 {256, 0.0667092407}, {279, 0.0576825889}, {304, 0.0531494009}, 
 {332, 0.0419515298}, {362, 0.0592873249}, {395, 0.0477993385}, 
 {431, 0.0751848516}, {470, 0.0449425347}, {512, 0.0678000384}, 
 {558, 0.040813661}, {609, 0.0768364722}, {664, 0.0470561758}, 
 {724, 0.0344028272}, {790, 0.038584023}, {861, 0.038457829}, 
 {939, 0.0307533228}, {1024, 0.0407451613}, {1117, 0.0376275675}, 
 {1218, 0.0350246508}, {1328, 0.0272576676}, {1448, 0.0452349998}, 
 {1579, 0.034534663}, {1722, 0.0287191524}, {1878, 0.0242380573}, 
 {2048, 0.0214633557}, {2233, 0.027927017}, {2435, 0.0239320963}, 
 {2656, 0.0218903988}, {2896, 0.0217774125}, {3158, 0.022877633}, 
 {3444, 0.0200771218}, {3756, 0.0264905925}, {4096, 0.0156348009}, 
 {4467, 0.0148137875}, {4871, 0.0168213965}, {5312, 0.0181464914}, 
 {5793, 0.0148940021}, {6317, 0.0141890859}, {6889, 0.0169914092}, 
 {7512, 0.00795661035}, {8192, 0.0108715278}, {8933, 0.0156814458}, 
 {9742, 0.013158504}, {10624, 0.0113755576}, {11585, 0.00966907553}, 
 {12634, 0.0102615867}, {13777, 0.0129571113}, {15024, 0.0111861922}, 
 {16384, 0.00828995667}, {17867, 0.0110007072}, {19484, 0.0130386418}, 
 {21247, 0.00928285556}, {23170, 0.00789660241}, {25268, 0.0121810667}, 
 {27554, 0.00602738101}, {30048, 0.00467530849}, {32768, 0.00498010259}, 
 {35734, 0.00685795834}, {38968, 0.00584193705}, {42495, 0.00588212829}, 
 {46341, 0.00389521376}, {50535, 0.00646298849}, {55109, 0.0070971371}, 
 {60097, 0.00477099644}, {65536, 0.00641988346}, {71468, 0.0035831268}, 
 {77936, 0.00698608974}, {84990, 0.00458628971}, {92682, 0.00614920932}, 
 {101070, 0.00352604926}, {110218, 0.00348509529}, {120194, 0.00337332071}, 
 {131072, 0.00339642751}, {142935, 0.00285311338}, {155872, 0.00364965431}, 
 {169979, 0.00267857104}, {185364, 0.00230211464}, {202141, 0.0032035657}, 
 {220436, 0.00264762922}, {240387, 0.0024987309}, {262144, 0.00199607066}, 
 {285870, 0.00225634047}, {311744, 0.00226385914}, {339959, 0.00298004122}, 
 {370728, 0.00244058359}, {404281, 0.00160369293}, {440872, 0.00190327307}, 
 {480774, 0.00206153883}, {524288, 0.00127839226}, {571740, 0.00181614337}, 
 {623487, 0.00158596633}, {679917, 0.0016627173}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}},
{{16, 0.217758239}, {17, 0.388063742}, {19, 0.208713586}, {21, 0.191297044}, 
 {23, 0.273920005}, {25, 0.235368975}, {27, 0.256420584}, {29, 0.193511249}, 
 {32, 0.159560473}, {35, 0.191625254}, {38, 0.22238476}, {41, 0.190509859}, 
 {45, 0.248419533}, {49, 0.193140204}, {54, 0.146724186}, {59, 0.202991687}, 
 {64, 0.209231853}, {70, 0.182848317}, {76, 0.151688408}, {83, 0.101246563}, 
 {91, 0.0899246234}, {99, 0.069008267}, {108, 0.143272677}, 
 {117, 0.0994614279}, {128, 0.146453974}, {140, 0.0853254963}, 
 {152, 0.0692795306}, {166, 0.0883777552}, {181, 0.0766523571}, 
 {197, 0.0691716311}, {215, 0.130366074}, {235, 0.0627593158}, 
 {256, 0.0717998665}, {279, 0.0624992704}, {304, 0.0915077592}, 
 {332, 0.0830521348}, {362, 0.0717305019}, {395, 0.0659604102}, 
 {431, 0.0444808248}, {470, 0.06793983}, {512, 0.0843805909}, 
 {558, 0.0472726314}, {609, 0.0657651689}, {664, 0.0787818737}, 
 {724, 0.0460537654}, {790, 0.0355524985}, {861, 0.0425228499}, 
 {939, 0.0416149176}, {1024, 0.029403733}, {1117, 0.0350294952}, 
 {1218, 0.0356941739}, {1328, 0.0314035208}, {1448, 0.027940029}, 
 {1579, 0.0227831554}, {1722, 0.0278963585}, {1878, 0.0194489788}, 
 {2048, 0.0220749949}, {2233, 0.0187004871}, {2435, 0.027254495}, 
 {2656, 0.031385065}, {2896, 0.0309732603}, {3158, 0.0275941217}, 
 {3444, 0.0232211766}, {3756, 0.0207394732}, {4096, 0.0298719198}, 
 {4467, 0.021069677}, {4871, 0.0167480466}, {5312, 0.017921407}, 
 {5793, 0.0156342971}, {6317, 0.0114295631}, {6889, 0.0121766397}, 
 {7512, 0.0129878852}, {8192, 0.0145270112}, {8933, 0.0124243645}, 
 {9742, 0.0111263392}, {10624, 0.0106399638}, {11585, 0.0143937562}, 
 {12634, 0.0104139615}, {13777, 0.012524643}, {15024, 0.0086360605}, 
 {16384, 0.00819919229}, {17867, 0.0142724031}, {19484, 0.00846640105}, 
 {21247, 0.00996765868}, {23170, 0.00657353671}, {25268, 0.00625717578}, 
 {27554, 0.007130875}, {30048, 0.00641441637}, {32768, 0.00717098195}, 
 {35734, 0.00517724571}, {38968, 0.00528375217}, {42495, 0.00787713012}, 
 {46341, 0.00597207505}, {50535, 0.0065869546}, {55109, 0.00689171046}, 
 {60097, 0.00553065996}, {65536, 0.00468306487}, {71468, 0.00434723696}, 
 {77936, 0.00384599155}, {84990, 0.0038830795}, {92682, 0.00386221553}, 
 {101070, 0.00400662416}, {110218, 0.0034157527}, {120194, 0.00251680733}, 
 {131072, 0.00364950439}, {142935, 0.00272291006}, {155872, 0.00310779564}, 
 {169979, 0.00326777407}, {185364, 0.00263024534}, {202141, 0.00209793759}, 
 {220436, 0.00267467069}, {240387, 0.00290443447}, {262144, 0.00258787629}, 
 {285870, 0.00253402604}, {311744, 0.00207669779}, {339959, 0.00255653574}, 
 {370728, 0.00180469951}, {404281, 0.0020109256}, {440872, 0.00253436926}, 
 {480774, 0.00181109825}, {524288, 0.0015141519}, {571740, 0.00139289343}, 
 {623487, 0.00141816273}, {679917, 0.00150198198}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}},
{{16, 0.231395}, {17, 0.243031}, {19, 0.459986}, {21, 0.337224}, 
 {23, 0.194458}, {25, 0.291001}, {27, 0.247465}, {29, 0.228643}, 
 {32, 0.150076}, {35, 0.23875}, {38, 0.169501}, {41, 0.167025}, 
 {45, 0.168367}, {49, 0.177118}, {54, 0.124865}, {59, 0.148469}, 
 {64, 0.106984}, {70, 0.138845}, {76, 0.125777}, {83, 0.170217}, 
 {91, 0.10669}, {99, 0.130907}, {108, 0.0903538}, {117, 0.120028}, 
 {128, 0.0914924}, {140, 0.108914}, {152, 0.109666}, {166, 0.118934}, 
 {181, 0.12154}, {197, 0.0812188}, {215, 0.0873895}, {235, 0.0556072}, 
 {256, 0.0896645}, {279, 0.0633214}, {304, 0.0561256}, {332, 0.068966}, 
 {362, 0.0615526}, {395, 0.0599908}, {431, 0.0473081}, {470, 0.0528815}, 
 {512, 0.0734399}, {558, 0.0420989}, {609, 0.0514971}, {664, 0.040097}, 
 {724, 0.0387159}, {790, 0.0412989}, {861, 0.0489538}, {939, 0.0371726}, 
 {1024, 0.0349454}, {1117, 0.0476618}, {1218, 0.0249619}, {1328, 0.0367608}, 
 {1448, 0.0303395}, {1579, 0.0284216}, {1722, 0.0317125}, {1878, 0.0213456}, 
 {2048, 0.0293301}, {2233, 0.0304511}, {2435, 0.0283373}, {2656, 0.0217701}, 
 {2896, 0.0174291}, {3158, 0.0202258}, {3444, 0.0289357}, {3756, 0.0174263}, 
 {4096, 0.0170421}, {4467, 0.0200523}, {4871, 0.0163522}, {5312, 0.0203566}, 
 {5793, 0.0273581}, {6317, 0.0173965}, {6889, 0.0113766}, {7512, 0.0139971}, 
 {8192, 0.010923}, {8933, 0.00850966}, {9742, 0.0164064}, {10624, 0.0107679}, 
 {11585, 0.0107791}, {12634, 0.00871262}, {13777, 0.0110207}, 
 {15024, 0.0129219}, {16384, 0.0113947}, {17867, 0.0091696}, 
 {19484, 0.0100244}, {21247, 0.00738945}, {23170, 0.00743932}, 
 {25268, 0.00848909}, {27554, 0.00804706}, {30048, 0.00571526}, 
 {32768, 0.0058234}, {35734, 0.00403224}, {38968, 0.00493939}, 
 {42495, 0.00779933}, {46341, 0.00517462}, {50535, 0.00532844}, 
 {55109, 0.0051878}, {60097, 0.00465341}, {65536, 0.00425227}, 
 {71468, 0.0052966}, {77936, 0.00440189}, {84990, 0.00342255}, 
 {92682, 0.00340478}, {101070, 0.00412388}, {110218, 0.00411252}, 
 {120194, 0.00427372}, {131072, 0.00263254}, {142935, 0.00402213}, 
 {155872, 0.00341875}, {169979, 0.00256535}, {185364, 0.00311763}, 
 {202141, 0.00323746}, {220436, 0.00218863}, {240387, 0.0023513}, 
 {262144, 0.00233024}, {285870, 0.00211824}, {311744, 0.0019092}, 
 {339959, 0.00177373}, {370728, 0.001864}, {404281, 0.00240407}, 
 {440872, 0.00283089}, {480774, 0.00196031}, {524288, 0.00178199}, 
 {571740, 0.0013973}, {623487, 0.00151737}, {679917, 0.00172512}, 
 {741455, 0.00147891}, {808563, 0.00116188}, {0, 0}, {0, 0}, {0, 0}},
{{16, 0.253616}, {17, 0.214281}, {19, 0.270979}, {21, 0.295344}, 
 {23, 0.198688}, {25, 0.163309}, {27, 0.156901}, {29, 0.194555}, 
 {32, 0.298966}, {35, 0.27252}, {38, 0.180816}, {41, 0.140045}, 
 {45, 0.216073}, {49, 0.160252}, {54, 0.126436}, {59, 0.100859}, 
 {64, 0.219372}, {70, 0.17285}, {76, 0.137154}, {83, 0.104885}, 
 {91, 0.0931511}, {99, 0.0908274}, {108, 0.0934414}, {117, 0.0904434}, 
 {128, 0.110892}, {140, 0.117996}, {152, 0.0918393}, {166, 0.126731}, 
 {181, 0.127412}, {197, 0.0725189}, {215, 0.0867113}, {235, 0.0620027}, 
 {256, 0.0879597}, {279, 0.0713301}, {304, 0.0458694}, {332, 0.0595954}, 
 {362, 0.0739103}, {395, 0.0565231}, {431, 0.0711691}, {470, 0.0598291}, 
 {512, 0.0481867}, {558, 0.0380998}, {609, 0.0662246}, {664, 0.0485549}, 
 {724, 0.0355629}, {790, 0.039814}, {861, 0.0380585}, {939, 0.0339006}, 
 {1024, 0.0402932}, {1117, 0.037835}, {1218, 0.0382605}, {1328, 0.0387835}, 
 {1448, 0.0342977}, {1579, 0.032477}, {1722, 0.0304111}, {1878, 0.0373453}, 
 {2048, 0.0253829}, {2233, 0.0299329}, {2435, 0.0315334}, {2656, 0.0231417}, 
 {2896, 0.0138789}, {3158, 0.0221256}, {3444, 0.0179622}, {3756, 0.0289628}, 
 {4096, 0.0173713}, {4467, 0.0156191}, {4871, 0.0197344}, {5312, 0.010995}, 
 {5793, 0.0156325}, {6317, 0.0140521}, {6889, 0.0157502}, {7512, 0.0159859}, 
 {8192, 0.0102983}, {8933, 0.0114398}, {9742, 0.0171485}, 
 {10624, 0.00942839}, {11585, 0.00975362}, {12634, 0.00934078}, {0, 0}, 
 {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
{{16, 0.23976}, {17, 0.314648}, {19, 0.313688}, {21, 0.286199}, 
 {23, 0.316461}, {25, 0.293044}, {27, 0.354106}, {29, 0.300875}, 
 {32, 0.257582}, {35, 0.235919}, {38, 0.127973}, {41, 0.166115}, 
 {45, 0.200038}, {49, 0.216472}, {54, 0.148395}, {59, 0.1694}, 
 {64, 0.127995}, {70, 0.196048}, {76, 0.109899}, {83, 0.201113}, 
 {91, 0.0923412}, {99, 0.10241}, {108, 0.102317}, {117, 0.104399}, 
 {128, 0.101601}, {140, 0.091993}, {152, 0.124291}, {166, 0.0677907}, 
 {181, 0.0708223}, {197, 0.0738834}, {215, 0.0712079}, {235, 0.0671792}, 
 {256, 0.0655157}, {279, 0.0519673}, {304, 0.0718622}, {332, 0.0581126}, 
 {362, 0.0570809}, {395, 0.0661495}, {431, 0.0666507}, {470, 0.054766}, 
 {512, 0.0692056}, {558, 0.0643635}, {609, 0.0580993}, {664, 0.0592979}, 
 {724, 0.0717951}, {790, 0.0378605}, {861, 0.0426492}, {939, 0.0308034}, 
 {1024, 0.036159}, {1117, 0.0343356}, {1218, 0.026033}, {1328, 0.03136}, 
 {1448, 0.0303424}, {1579, 0.0256807}, {1722, 0.0241634}, {1878, 0.0279386}, 
 {2048, 0.0293094}, {2233, 0.0320787}, {2435, 0.0194725}, {2656, 0.0257325}, 
 {2896, 0.0308729}, {3158, 0.0225089}, {3444, 0.0248643}, {3756, 0.0162403}, 
 {4096, 0.0177283}, {4467, 0.0196591}, {4871, 0.0161618}, {5312, 0.0232882}, 
 {5793, 0.0216845}, {6317, 0.0132164}, {6889, 0.0135306}, {7512, 0.013076}, 
 {8192, 0.01006}, {8933, 0.0100879}, {9742, 0.0176046}, {10624, 0.0157654}, 
 {11585, 0.0109845}, {12634, 0.00855122}, {13777, 0.0101116}, 
 {15024, 0.00756275}, {16384, 0.00988907}, {17867, 0.00767043}, 
 {19484, 0.0100572}, {21247, 0.00863387}, {23170, 0.00770503}, 
 {25268, 0.00782128}, {27554, 0.00937935}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}},
{{16, 0.256274821}, {17, 0.261576211}, {19, 0.249571125}, {21, 0.290420508}, 
 {23, 0.193316539}, {25, 0.188425506}, {27, 0.219342548}, {29, 0.247846002}, 
 {32, 0.268852909}, {35, 0.114678026}, {38, 0.208686539}, {41, 0.213290286}, 
 {45, 0.150334027}, {49, 0.150923688}, {54, 0.162647817}, {59, 0.149111157}, 
 {64, 0.122932048}, {70, 0.109570812}, {76, 0.112828481}, {83, 0.135173023}, 
 {91, 0.16667922}, {99, 0.11171774}, {108, 0.0993912475}, 
 {117, 0.0843346443}, {128, 0.113334228}, {140, 0.115480626}, 
 {152, 0.0760233239}, {166, 0.0956328311}, {181, 0.124857419}, 
 {197, 0.0840874168}, {215, 0.0706647717}, {235, 0.119423794}, 
 {256, 0.0540393593}, {279, 0.112298401}, {304, 0.0558229583}, 
 {332, 0.0839467522}, {362, 0.0498325624}, {395, 0.052354819}, 
 {431, 0.0727197336}, {470, 0.042249342}, {512, 0.0507999308}, 
 {558, 0.0422553518}, {609, 0.0470899947}, {664, 0.0551084962}, 
 {724, 0.037895275}, {790, 0.0347323402}, {861, 0.03806382}, 
 {939, 0.0358305734}, {1024, 0.0523517779}, {1117, 0.0323863896}, 
 {1218, 0.0320548883}, {1328, 0.050004116}, {1448, 0.027574875}, 
 {1579, 0.0225910491}, {1722, 0.0214444958}, {1878, 0.0299201181}, 
 {2048, 0.0318952356}, {2233, 0.0237093574}, {2435, 0.0274150144}, 
 {2656, 0.0234353034}, {2896, 0.017019455}, {3158, 0.0191243725}, 
 {3444, 0.0235767158}, {3756, 0.0209479204}, {4096, 0.0158336982}, 
 {4467, 0.0254157813}, {4871, 0.0151588499}, {5312, 0.0171554622}, 
 {5793, 0.0120479901}, {6317, 0.0115219612}, {6889, 0.0120483849}, 
 {7512, 0.011058926}, {8192, 0.014438254}, {8933, 0.00952942558}, 
 {9742, 0.0140525354}, {10624, 0.0159021178}, {11585, 0.00970658228}, 
 {12634, 0.00867895734}, {13777, 0.0109611458}, {15024, 0.010890474}, 
 {16384, 0.0095381986}, {17867, 0.0114969965}, {19484, 0.00928016468}, 
 {21247, 0.00977175107}, {23170, 0.00815720052}, {25268, 0.00825419094}, 
 {27554, 0.0156865375}, {30048, 0.00842881917}, {32768, 0.00565495948}, 
 {35734, 0.00583668936}, {38968, 0.00518960672}, {42495, 0.00427588197}, 
 {46341, 0.00412630914}, {50535, 0.00567782134}, {55109, 0.00515323593}, 
 {60097, 0.00531540806}, {65536, 0.00377740384}, {71468, 0.00542374337}, 
 {77936, 0.00425419603}, {84990, 0.00505647639}, {92682, 0.0037251135}, 
 {101070, 0.00400775263}, {110218, 0.00448559414}, {120194, 0.0037248343}, 
 {131072, 0.00329502514}, {142935, 0.00262011667}, {155872, 0.00222887418}, 
 {169979, 0.00366491394}, {185364, 0.00250524108}, {202141, 0.00271573575}, 
 {220436, 0.0036165752}, {240387, 0.00226393779}, {262144, 0.00200935113}, 
 {285870, 0.00261296411}, {311744, 0.00279276807}, {339959, 0.00194385154}, 
 {370728, 0.00179358311}, {404281, 0.00182940017}, {440872, 0.0016766013}, 
 {480774, 0.00280533727}, {524288, 0.00127191656}, {571740, 0.00176582604}, 
 {623487, 0.00151628011}, {679917, 0.0012065726}, {741455, 0.00157581761}, 
 {808563, 0.00117627126}, {881744, 0.00190961876}, {961548, 0.000880505285}, 
 {1048576, 0.00126338232}},
{{16, 0.183554}, {17, 0.387358}, {19, 0.198928}, {21, 0.274589}, 
 {23, 0.183837}, {25, 0.175547}, {27, 0.182612}, {29, 0.266291}, 
 {32, 0.316451}, {35, 0.19724}, {38, 0.191977}, {41, 0.193468}, 
 {45, 0.160559}, {49, 0.175263}, {54, 0.2024}, {59, 0.113168}, 
 {64, 0.122161}, {70, 0.116487}, {76, 0.157693}, {83, 0.133454}, 
 {91, 0.137996}, {99, 0.128376}, {108, 0.113532}, {117, 0.149529}, 
 {128, 0.0953614}, {140, 0.0868197}, {152, 0.0775799}, {166, 0.0723326}, 
 {181, 0.0983735}, {197, 0.101735}, {215, 0.0859619}, {235, 0.104017}, 
 {256, 0.078866}, {279, 0.0648199}, {304, 0.041421}, {332, 0.0508273}, 
 {362, 0.0810566}, {395, 0.0681871}, {431, 0.0362397}, {470, 0.0448597}, 
 {512, 0.0499487}, {558, 0.0503514}, {609, 0.0523824}, {664, 0.0386004}, 
 {724, 0.0607413}, {790, 0.0545647}, {861, 0.058998}, {939, 0.0287223}, 
 {1024, 0.0249644}, {1117, 0.0373824}, {1218, 0.0369798}, {1328, 0.0306101}, 
 {1448, 0.0301854}, {1579, 0.0378392}, {1722, 0.0247293}, {1878, 0.0263389}, 
 {2048, 0.0271012}, {2233, 0.0250048}, {2435, 0.0228753}, {2656, 0.0292441}, 
 {2896, 0.0175593}, {3158, 0.0150876}, {3444, 0.0244764}, {3756, 0.0208564}, 
 {4096, 0.0200042}, {4467, 0.0157995}, {4871, 0.0132643}, {5312, 0.0196176}, 
 {5793, 0.0104006}, {6317, 0.0155649}, {6889, 0.0136281}, {7512, 0.0161991}, 
 {8192, 0.0107765}, {8933, 0.0109432}, {9742, 0.0094569}, {10624, 0.0118351}, 
 {11585, 0.00926725}, {12634, 0.0107085}, {13777, 0.0100185}, 
 {15024, 0.00949682}, {16384, 0.00829847}, {17867, 0.00819266}, 
 {19484, 0.00637483}, {21247, 0.00838179}, {23170, 0.00699151}, 
 {25268, 0.00876292}, {27554, 0.00601646}, {30048, 0.00949815}, 
 {32768, 0.00705806}, {35734, 0.00520224}, {38968, 0.00711047}, 
 {42495, 0.0063764}, {46341, 0.00845398}, {50535, 0.00666467}, 
 {55109, 0.00728894}, {60097, 0.0048955}, {65536, 0.00384881}, 
 {71468, 0.00317135}, {77936, 0.00522727}, {84990, 0.00462346}, 
 {92682, 0.00420349}, {101070, 0.00290154}, {110218, 0.00328619}, 
 {120194, 0.00413996}, {131072, 0.00331443}, {142935, 0.00325132}, 
 {155872, 0.00228771}, {169979, 0.00225672}, {185364, 0.00245884}, 
 {202141, 0.00250766}, {220436, 0.00270399}, {240387, 0.00297334}, 
 {262144, 0.00196399}, {285870, 0.00283688}, {311744, 0.00267611}, 
 {339959, 0.00254682}, {370728, 0.00211752}, {404281, 0.00255953}, 
 {440872, 0.00138526}, {480774, 0.00136328}, {524288, 0.0020747}, 
 {571740, 0.00130175}, {623487, 0.00214943}, {679917, 0.00119441}, 
 {741455, 0.00137476}, {808563, 0.00181671}, {0, 0}, {0, 0}, {0, 0}},
{{16, 0.251962}, {17, 0.329085}, {19, 0.246219}, {21, 0.19048}, 
 {23, 0.178153}, {25, 0.250142}, {27, 0.248619}, {29, 0.191855}, 
 {32, 0.172008}, {35, 0.264907}, {38, 0.211307}, {41, 0.267913}, 
 {45, 0.166029}, {49, 0.159815}, {54, 0.163156}, {59, 0.174633}, 
 {64, 0.189573}, {70, 0.13551}, {76, 0.18176}, {83, 0.183638}, 
 {91, 0.138957}, {99, 0.111462}, {108, 0.0815089}, {117, 0.103465}, 
 {128, 0.134117}, {140, 0.0879008}, {152, 0.0860631}, {166, 0.0916263}, 
 {181, 0.127384}, {197, 0.0699496}, {215, 0.085096}, {235, 0.076114}, 
 {256, 0.076467}, {279, 0.0576053}, {304, 0.0842042}, {332, 0.0770191}, 
 {362, 0.071448}, {395, 0.0622037}, {431, 0.056725}, {470, 0.053128}, 
 {512, 0.043972}, {558, 0.0473175}, {609, 0.0344604}, {664, 0.0396932}, 
 {724, 0.0586779}, {790, 0.0430406}, {861, 0.0338284}, {939, 0.0266141}, 
 {1024, 0.0336631}, {1117, 0.0333226}, {1218, 0.0383282}, {1328, 0.036224}, 
 {1448, 0.0337164}, {1579, 0.0213242}, {1722, 0.020943}, {1878, 0.0232834}, 
 {2048, 0.0278482}, {2233, 0.025876}, {2435, 0.0254929}, {2656, 0.0225978}, 
 {2896, 0.0240713}, {3158, 0.0312602}, {3444, 0.0221609}, {3756, 0.0144678}, 
 {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}},
{{16, 0.313044843}, {17, 0.277869925}, {19, 0.230129343}, {21, 0.282579256}, 
 {23, 0.232542245}, {25, 0.218224944}, {27, 0.148004082}, {29, 0.183246203}, 
 {32, 0.152841233}, {35, 0.2751004}, {38, 0.17432993}, {41, 0.135731272}, 
 {45, 0.191438771}, {49, 0.153362685}, {54, 0.135729369}, {59, 0.148709275}, 
 {64, 0.139727481}, {70, 0.115503689}, {76, 0.124433716}, {83, 0.160342805}, 
 {91, 0.0883705371}, {99, 0.166300942}, {108, 0.100213629}, 
 {117, 0.105961576}, {128, 0.0870464203}, {140, 0.116047058}, 
 {152, 0.127372013}, {166, 0.100727974}, {181, 0.0839872356}, 
 {197, 0.0674123758}, {215, 0.0925456818}, {235, 0.0834146016}, 
 {256, 0.0662876728}, {279, 0.0515930333}, {304, 0.0611917447}, 
 {332, 0.0604413225}, {362, 0.0529667605}, {395, 0.0676463564}, 
 {431, 0.0508745058}, {470, 0.0454577958}, {512, 0.0352723683}, 
 {558, 0.0506035989}, {609, 0.0663038884}, {664, 0.033109396}, 
 {724, 0.0650008362}, {790, 0.0324148673}, {861, 0.0381610342}, 
 {939, 0.0326948425}, {1024, 0.0382395257}, {1117, 0.0355868155}, 
 {1218, 0.0317868933}, {1328, 0.0283586777}, {1448, 0.0228287966}, 
 {1579, 0.048867428}, {1722, 0.0310717933}, {1878, 0.0180127816}, 
 {2048, 0.0192565483}, {2233, 0.0367979116}, {2435, 0.0322406561}, 
 {2656, 0.0250871571}, {2896, 0.0182860702}, {3158, 0.0155198791}, 
 {3444, 0.0170647001}, {3756, 0.0196985699}, {4096, 0.0142769502}, 
 {4467, 0.0292116777}, {4871, 0.0187196762}, {5312, 0.0209973478}, 
 {5793, 0.0154723796}, {6317, 0.0131043872}, {6889, 0.0115491303}, 
 {7512, 0.011549468}, {8192, 0.0137558184}, {8933, 0.0134805728}, 
 {9742, 0.0185696894}, {10624, 0.00841680709}, {11585, 0.0126699029}, 
 {12634, 0.0103209651}, {13777, 0.0132474343}, {15024, 0.0106040162}, 
 {16384, 0.0108808799}, {17867, 0.0128424474}, {19484, 0.00660421228}, 
 {21247, 0.0100722533}, {23170, 0.00899687201}, {25268, 0.00724381169}, 
 {27554, 0.00625296332}, {30048, 0.00507502503}, {32768, 0.00441195446}, 
 {35734, 0.00549693873}, {38968, 0.0048752991}, {42495, 0.00595681523}, 
 {46341, 0.00554880097}, {50535, 0.00549234261}, {55109, 0.00621105917}, 
 {60097, 0.00619233167}, {65536, 0.00534710179}, {71468, 0.00369686529}, 
 {77936, 0.00293179794}, {84990, 0.0050358777}, {92682, 0.00302700356}, 
 {101070, 0.00475272128}, {110218, 0.00492416793}, {120194, 0.00534106338}, 
 {131072, 0.00341388656}, {142935, 0.0042178422}, {155872, 0.00262139364}, 
 {169979, 0.00446311435}, {185364, 0.00260181058}, {202141, 0.00208888157}, 
 {220436, 0.00228658673}, {240387, 0.00287875075}, {262144, 0.00175075844}, 
 {285870, 0.00261790251}, {311744, 0.00214324606}, {339959, 0.00236016488}, 
 {370728, 0.00161014877}, {404281, 0.00139952142}, {440872, 0.00208082231}, 
 {480774, 0.00136861546}, {524288, 0.00151204281}, {571740, 0.00127996823}, 
 {623487, 0.00134236616}, {679917, 0.00193624609}, {741455, 0.00183351768}, 
 {808563, 0.00137650877}, {881744, 0.00152956845}, {961548, 0.00137440376}, 
 {1048576, 0.00121602331}},
{{16, 0.314205599}, {17, 0.357823575}, {19, 0.276940529}, {21, 0.164469424}, 
 {23, 0.239388998}, {25, 0.244946402}, {27, 0.317383081}, {29, 0.291735361}, 
 {32, 0.210455248}, {35, 0.213492437}, {38, 0.191657831}, {41, 0.230998207}, 
 {45, 0.119858119}, {49, 0.114302121}, {54, 0.172941144}, {59, 0.149584364}, 
 {64, 0.13755723}, {70, 0.134874309}, {76, 0.12739334}, {83, 0.177456862}, 
 {91, 0.125673171}, {99, 0.0961032504}, {108, 0.0953785227}, 
 {117, 0.0857208606}, {128, 0.155505493}, {140, 0.112542352}, 
 {152, 0.119560548}, {166, 0.0812542281}, {181, 0.095675424}, 
 {197, 0.0851236928}, {215, 0.114599041}, {235, 0.0824520559}, 
 {256, 0.0864381606}, {279, 0.0660571657}, {304, 0.0605734767}, 
 {332, 0.0476296755}, {362, 0.0680332094}, {395, 0.042736041}, 
 {431, 0.0540605439}, {470, 0.0432866501}, {512, 0.0692678864}, 
 {558, 0.0478713863}, {609, 0.0515453852}, {664, 0.0437063581}, 
 {724, 0.057365766}, {790, 0.0582582096}, {861, 0.0354418176}, 
 {939, 0.0380130226}, {1024, 0.0538342684}, {1117, 0.0476743165}, 
 {1218, 0.0372145359}, {1328, 0.0492800936}, {1448, 0.0255840825}, 
 {1579, 0.0242309227}, {1722, 0.0284061577}, {1878, 0.0259248046}, 
 {2048, 0.0333748429}, {2233, 0.0407684006}, {2435, 0.0317252931}, 
 {2656, 0.0237050094}, {2896, 0.024373372}, {3158, 0.0153834669}, 
 {3444, 0.0279987473}, {3756, 0.0231264011}, {4096, 0.0190507628}, 
 {4467, 0.0224561466}, {4871, 0.0126710182}, {5312, 0.0156194986}, 
 {5793, 0.0182734816}, {6317, 0.0127530554}, {6889, 0.0155325151}, 
 {7512, 0.0162433248}, {8192, 0.00989546603}, {8933, 0.0126806151}, 
 {9742, 0.0136915505}, {10624, 0.010461049}, {11585, 0.0165901798}, 
 {12634, 0.0102060938}, {13777, 0.00944451058}, {15024, 0.00738313846}, 
 {16384, 0.00935385863}, {17867, 0.0123216883}, {19484, 0.00865786848}, 
 {21247, 0.00771596915}, {23170, 0.00989844232}, {25268, 0.0068139802}, 
 {27554, 0.00554282623}, {30048, 0.0062869695}, {32768, 0.00731289868}, 
 {35734, 0.0055961317}, {38968, 0.00706034102}, {42495, 0.00630477017}, 
 {46341, 0.00506622807}, {50535, 0.00651671396}, {55109, 0.00526275798}, 
 {60097, 0.00460572546}, {65536, 0.00481291191}, {71468, 0.00494221146}, 
 {77936, 0.00394948174}, {84990, 0.00489739011}, {92682, 0.0040063443}, 
 {101070, 0.00314698234}, {110218, 0.00345358238}, {120194, 0.0042258158}, 
 {131072, 0.00261516935}, {142935, 0.00303397745}, {155872, 0.0029047444}, 
 {169979, 0.00243059923}, {185364, 0.00255944859}, {202141, 0.00229218315}, 
 {220436, 0.0023529167}, {240387, 0.001645696}, {262144, 0.00267695972}, 
 {285870, 0.00190609821}, {311744, 0.00209480175}, {339959, 0.00202847394}, 
 {370728, 0.00152058899}, {404281, 0.00216222353}, {440872, 0.00207987971}, 
 {480774, 0.00193603293}, {524288, 0.00161072566}, {571740, 0.00187866693}, 
 {623487, 0.00116265739}, {679917, 0.00123396009}, {741455, 0.00211942582}, 
 {808563, 0.00187789106}, {881744, 0.00173018944}, {961548, 0.00107608698}, 
 {1048576, 0.00082831339}},
{{16, 0.267109548}, {17, 0.299313284}, {19, 0.300068912}, {21, 0.367468745}, 
 {23, 0.269229707}, {25, 0.272938044}, {27, 0.262222734}, {29, 0.170997605}, 
 {32, 0.26487208}, {35, 0.210080846}, {38, 0.162940559}, {41, 0.145877578}, 
 {45, 0.168706451}, {49, 0.214790596}, {54, 0.140209628}, {59, 0.115440498}, 
 {64, 0.214881304}, {70, 0.132006734}, {76, 0.13877739}, {83, 0.107434109}, 
 {91, 0.127068535}, {99, 0.106852422}, {108, 0.11980477}, 
 {117, 0.0968536379}, {128, 0.174662382}, {140, 0.0917904207}, 
 {152, 0.0669498285}, {166, 0.142506355}, {181, 0.129309677}, 
 {197, 0.0901522818}, {215, 0.0840556576}, {235, 0.0662813921}, 
 {256, 0.0604668421}, {279, 0.087499219}, {304, 0.0858565332}, 
 {332, 0.0470917325}, {362, 0.0898855397}, {395, 0.0639763878}, 
 {431, 0.0566809179}, {470, 0.0598412124}, {512, 0.0636723627}, 
 {558, 0.055918709}, {609, 0.0562925343}, {664, 0.0520952108}, 
 {724, 0.0388184567}, {790, 0.0359363571}, {861, 0.0420274957}, 
 {939, 0.0306978848}, {1024, 0.0494096909}, {1117, 0.0315116792}, 
 {1218, 0.0243528909}, {1328, 0.0393849758}, {1448, 0.0367646472}, 
 {1579, 0.0410104157}, {1722, 0.0220386911}, {1878, 0.0256663401}, 
 {2048, 0.0311113052}, {2233, 0.0267378837}, {2435, 0.0255661437}, 
 {2656, 0.0202088651}, {2896, 0.0260459126}, {3158, 0.0168735967}, 
 {3444, 0.0185450481}, {3756, 0.0221796116}, {4096, 0.0123937081}, 
 {4467, 0.0246611154}, {4871, 0.0247839638}, {5312, 0.0194059535}, 
 {5793, 0.0152090312}, {6317, 0.01972187}, {6889, 0.0117589193}, 
 {7512, 0.0140781574}, {8192, 0.0139864061}, {8933, 0.00982237313}, 
 {9742, 0.0153539625}, {10624, 0.0115633182}, {11585, 0.0121875071}, 
 {12634, 0.0141426782}, {13777, 0.0160661939}, {15024, 0.00900126792}, 
 {16384, 0.00951070114}, {17867, 0.0079785864}, {19484, 0.00857022293}, 
 {21247, 0.00928222631}, {23170, 0.0102113861}, {25268, 0.00770409789}, 
 {27554, 0.00688947206}, {30048, 0.00500413017}, {32768, 0.00510371542}, 
 {35734, 0.00472811895}, {38968, 0.00523345586}, {42495, 0.00521847759}, 
 {46341, 0.005773612}, {50535, 0.00412631007}, {55109, 0.0067462982}, 
 {60097, 0.0041735217}, {65536, 0.00486083057}, {71468, 0.00539324481}, 
 {77936, 0.00317458572}, {84990, 0.00422299852}, {92682, 0.0044092157}, 
 {101070, 0.00436369472}, {110218, 0.00317223456}, {120194, 0.00231924209}, 
 {131072, 0.00402536281}, {142935, 0.00266920213}, {155872, 0.00371031038}, 
 {169979, 0.003012757}, {185364, 0.00335636755}, {202141, 0.0042394449}, 
 {220436, 0.00242715153}, {240387, 0.00320988303}, {262144, 0.00186312637}, 
 {285870, 0.00218142423}, {311744, 0.00153194002}, {339959, 0.00246726022}, 
 {370728, 0.00221425184}, {404281, 0.00150939563}, {440872, 0.00183497064}, 
 {480774, 0.00167986045}, {524288, 0.00152956878}, {571740, 0.00150412345}, 
 {623487, 0.00175062826}, {679917, 0.00210089214}, {741455, 0.00124612458}, 
 {808563, 0.00170917655}, {881744, 0.00130049689}, {961548, 0.00143585244}, 
 {1048576, 0.00114286141}},
{{16, 0.287735182}, {17, 0.287959048}, {19, 0.188115206}, {21, 0.259501037}, 
 {23, 0.38511051}, {25, 0.199386613}, {27, 0.185220463}, {29, 0.178475091}, 
 {32, 0.167083211}, {35, 0.199196774}, {38, 0.143056557}, {41, 0.21375431}, 
 {45, 0.17085664}, {49, 0.231633583}, {54, 0.195460792}, {59, 0.200180102}, 
 {64, 0.127633458}, {70, 0.141789483}, {76, 0.141780759}, {83, 0.115562919}, 
 {91, 0.10357825}, {99, 0.0870069043}, {108, 0.0927092399}, 
 {117, 0.0919826602}, {128, 0.0896759049}, {140, 0.133111638}, 
 {152, 0.120480326}, {166, 0.105062773}, {181, 0.115878221}, 
 {197, 0.135670451}, {215, 0.0774886133}, {235, 0.0691766426}, 
 {256, 0.0594505822}, {279, 0.047109708}, {304, 0.0633632167}, 
 {332, 0.0596725656}, {362, 0.0749714356}, {395, 0.0481467954}, 
 {431, 0.0568574592}, {470, 0.0496720438}, {512, 0.0521141592}, 
 {558, 0.0479546987}, {609, 0.0458181655}, {664, 0.0445027085}, 
 {724, 0.0539643429}, {790, 0.0456500616}, {861, 0.0340763774}, 
 {939, 0.0418301096}, {1024, 0.0326723974}, {1117, 0.0271770563}, 
 {1218, 0.0449264678}, {1328, 0.0365168498}, {1448, 0.0516404032}, 
 {1579, 0.039537717}, {1722, 0.02865964}, {1878, 0.0235416763}, 
 {2048, 0.0193145997}, {2233, 0.0234168026}, {2435, 0.0203316298}, 
 {2656, 0.0176135884}, {2896, 0.0259081518}, {3158, 0.0158341282}, 
 {3444, 0.0209347785}, {3756, 0.0161654242}, {4096, 0.0187361469}, 
 {4467, 0.0216626475}, {4871, 0.0117088422}, {5312, 0.0202433207}, 
 {5793, 0.0170186678}, {6317, 0.0156047008}, {6889, 0.0178808493}, 
 {7512, 0.0121502192}, {8192, 0.0155092225}, {8933, 0.010925733}, 
 {9742, 0.00938526702}, {10624, 0.0120621301}, {11585, 0.0126613863}, 
 {12634, 0.00949562801}, {13777, 0.0119677733}, {15024, 0.0080497702}, 
 {16384, 0.0070845857}, {17867, 0.00695805031}, {19484, 0.00964387052}, 
 {21247, 0.00870421468}, {23170, 0.0100602954}, {25268, 0.0104428808}, 
 {27554, 0.00491087718}, {30048, 0.00753441662}, {32768, 0.00666027921}, 
 {35734, 0.00767197526}, {38968, 0.00742108416}, {42495, 0.00547229193}, 
 {46341, 0.0055999085}, {50535, 0.00489444335}, {55109, 0.00451946298}, 
 {60097, 0.00479619006}, {65536, 0.00449844162}, {71468, 0.00410898073}, 
 {77936, 0.0038316079}, {84990, 0.00562420455}, {92682, 0.00361192558}, 
 {101070, 0.00434322322}, {110218, 0.00426187173}, {120194, 0.00606374401}, 
 {131072, 0.00360003665}, {142935, 0.00383883703}, {155872, 0.00375432549}, 
 {169979, 0.00384656041}, {185364, 0.00219063611}, {202141, 0.00265061547}, 
 {220436, 0.00211367162}, {240387, 0.00228525047}, {262144, 0.00255523066}, 
 {285870, 0.00232726849}, {311744, 0.00268343105}, {339959, 0.00178715772}, 
 {370728, 0.0017344768}, {404281, 0.00229601524}, {440872, 0.00185491742}, 
 {480774, 0.00173902178}, {524288, 0.00174445079}, {571740, 0.0015021547}, 
 {623487, 0.00142767291}, {679917, 0.000995890061}, {741455, 0.00160233818}, 
 {808563, 0.00161652343}, {881744, 0.00112712286}, {961548, 0.00141942276}, 
 {1048576, 0.000999239582}},
{{16, 0.277640361}, {17, 0.251401646}, {19, 0.17244483}, {21, 0.22715834}, 
 {23, 0.27068026}, {25, 0.231527924}, {27, 0.206766726}, {29, 0.251299314}, 
 {32, 0.216810786}, {35, 0.232521477}, {38, 0.228256239}, {41, 0.275717152}, 
 {45, 0.218551609}, {49, 0.178694299}, {54, 0.167980038}, {59, 0.0990151548}, 
 {64, 0.140019255}, {70, 0.159423882}, {76, 0.115312694}, {83, 0.124971553}, 
 {91, 0.102641876}, {99, 0.0904052752}, {108, 0.104775781}, 
 {117, 0.102988623}, {128, 0.0734173658}, {140, 0.0756161792}, 
 {152, 0.0876984537}, {166, 0.0854546155}, {181, 0.0795181436}, 
 {197, 0.0977266871}, {215, 0.0975030122}, {235, 0.105833546}, 
 {256, 0.0649629509}, {279, 0.0641004117}, {304, 0.0495922697}, 
 {332, 0.0783605127}, {362, 0.0581722169}, {395, 0.047128431}, 
 {431, 0.0599836986}, {470, 0.0627746539}, {512, 0.0577022865}, 
 {558, 0.0338246062}, {609, 0.0482122477}, {664, 0.0480219539}, 
 {724, 0.0517152132}, {790, 0.0307168193}, {861, 0.0468822652}, 
 {939, 0.0329783699}, {1024, 0.0298022561}, {1117, 0.0405230162}, 
 {1218, 0.0224463095}, {1328, 0.0272001098}, {1448, 0.0333467543}, 
 {1579, 0.0342167709}, {1722, 0.0293909135}, {1878, 0.0230341608}, 
 {2048, 0.0268480994}, {2233, 0.0238167585}, {2435, 0.0261750658}, 
 {2656, 0.0183257851}, {2896, 0.0245373277}, {3158, 0.0304035358}, 
 {3444, 0.0183847902}, {3756, 0.0253753024}, {4096, 0.0246370204}, 
 {4467, 0.0141124527}, {4871, 0.0199642756}, {5312, 0.0144705021}, 
 {5793, 0.0124170977}, {6317, 0.0227969401}, {6889, 0.0107285183}, 
 {7512, 0.0177668064}, {8192, 0.0136071457}, {8933, 0.00976105939}, 
 {9742, 0.0101443293}, {10624, 0.0101781387}, {11585, 0.009508362}, 
 {12634, 0.0111140634}, {13777, 0.0103624475}, {15024, 0.00889477148}, 
 {16384, 0.00820997886}, {17867, 0.0110003016}, {19484, 0.00950257045}, 
 {21247, 0.0090025747}, {23170, 0.00636253152}, {25268, 0.00772128309}, 
 {27554, 0.00822713628}, {30048, 0.00490034557}, {32768, 0.00698606744}, 
 {35734, 0.00636366629}, {38968, 0.00592220498}, {42495, 0.00545524256}, 
 {46341, 0.00559101146}, {50535, 0.00522377591}, {55109, 0.00397902521}, 
 {60097, 0.00482157086}, {65536, 0.00485891182}, {71468, 0.00330611452}, 
 {77936, 0.00385883019}, {84990, 0.00404501474}, {92682, 0.00427130807}, 
 {101070, 0.00375276036}, {110218, 0.00314760034}, {120194, 0.00260193675}, 
 {131072, 0.00268715119}, {142935, 0.00321222584}, {155872, 0.00370365388}, 
 {169979, 0.00363141804}, {185364, 0.00213875876}, {202141, 0.00227612549}, 
 {220436, 0.00176423154}, {240387, 0.00266247627}, {262144, 0.00222030808}, 
 {285870, 0.00233294272}, {311744, 0.00224789972}, {339959, 0.0029904365}, 
 {370728, 0.00247117676}, {404281, 0.00171247354}, {440872, 0.00171495437}, 
 {480774, 0.00174020633}, {524288, 0.00169912153}, {571740, 0.00139506057}, 
 {623487, 0.00152041396}, {679917, 0.00158054437}, {741455, 0.00130534008}, 
 {808563, 0.0014413551}, {881744, 0.00132964616}, {961548, 0.000911152623}, 
 {1048576, 0.00118861405}},
{{16, 0.315332324}, {17, 0.310156955}, {19, 0.303804189}, {21, 0.25939165}, 
 {23, 0.22476962}, {25, 0.29555582}, {27, 0.186062202}, {29, 0.244440083}, 
 {32, 0.268260654}, {35, 0.205753912}, {38, 0.180576474}, {41, 0.246982683}, 
 {45, 0.155358373}, {49, 0.158822966}, {54, 0.163344322}, {59, 0.173506202}, 
 {64, 0.168064726}, {70, 0.111908553}, {76, 0.105639765}, {83, 0.134286063}, 
 {91, 0.103733409}, {99, 0.111587452}, {108, 0.151019677}, 
 {117, 0.119994047}, {128, 0.134574757}, {140, 0.0728805629}, 
 {152, 0.109014171}, {166, 0.0770104874}, {181, 0.0887696493}, 
 {197, 0.108224099}, {215, 0.0715013452}, {235, 0.0840488722}, 
 {256, 0.0990589226}, {279, 0.073182922}, {304, 0.048393271}, 
 {332, 0.104000358}, {362, 0.0603410631}, {395, 0.0553661405}, 
 {431, 0.0938343356}, {470, 0.0619157209}, {512, 0.0487218673}, 
 {558, 0.0432284232}, {609, 0.0517705309}, {664, 0.0552113664}, 
 {724, 0.0426621277}, {790, 0.0324839854}, {861, 0.0290485699}, 
 {939, 0.0285349447}, {1024, 0.0345525417}, {1117, 0.0432595774}, 
 {1218, 0.0381002666}, {1328, 0.0281388445}, {1448, 0.0304739698}, 
 {1579, 0.0199779152}, {1722, 0.0405863928}, {1878, 0.0256438318}, 
 {2048, 0.0368869599}, {2233, 0.0261302243}, {2435, 0.033514835}, 
 {2656, 0.0218746669}, {2896, 0.0208313866}, {3158, 0.0225239501}, 
 {3444, 0.019343578}, {3756, 0.020529899}, {4096, 0.0186877323}, 
 {4467, 0.0235769187}, {4871, 0.0189642653}, {5312, 0.0169480168}, 
 {5793, 0.0164804935}, {6317, 0.0146076249}, {6889, 0.0137160555}, 
 {7512, 0.018683107}, {8192, 0.014014559}, {8933, 0.0121887919}, 
 {9742, 0.0129881788}, {10624, 0.00980165086}, {11585, 0.0103425837}, 
 {12634, 0.0122473855}, {13777, 0.00781233815}, {15024, 0.0108928891}, 
 {16384, 0.00860497972}, {17867, 0.0115931497}, {19484, 0.0107727489}, 
 {21247, 0.00955391803}, {23170, 0.0130730378}, {25268, 0.0081983703}, 
 {27554, 0.00560944933}, {30048, 0.00784450849}, {32768, 0.00808963954}, 
 {35734, 0.00641205657}, {38968, 0.00803898295}, {42495, 0.00573900699}, 
 {46341, 0.00758172733}, {50535, 0.00422407688}, {55109, 0.00395906082}, 
 {60097, 0.00403856167}, {65536, 0.00415102065}, {71468, 0.00513634068}, 
 {77936, 0.00673556651}, {84990, 0.00272665038}, {92682, 0.00323964311}, 
 {101070, 0.00504482053}, {110218, 0.00374331566}, {120194, 0.00254357951}, 
 {131072, 0.00271580802}, {142935, 0.00531301417}, {155872, 0.00406824765}, 
 {169979, 0.00436484911}, {185364, 0.0026365792}, {202141, 0.00248118569}, 
 {220436, 0.00233451552}, {240387, 0.00248793236}, {262144, 0.00255719465}, 
 {285870, 0.00254754789}, {311744, 0.00235752053}, {339959, 0.00162335718}, 
 {370728, 0.00218866055}, {404281, 0.0016204023}, {440872, 0.00175255502}, 
 {480774, 0.00165422354}, {524288, 0.00166319402}, {571740, 0.00235451966}, 
 {623487, 0.00124322225}, {679917, 0.00169623186}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}},
{{16, 0.243813748}, {17, 0.234474718}, {19, 0.271306848}, {21, 0.187935196}, 
 {23, 0.363953217}, {25, 0.293498395}, {27, 0.208578296}, {29, 0.118269846}, 
 {32, 0.150173003}, {35, 0.288892542}, {38, 0.222559569}, {41, 0.220542156}, 
 {45, 0.220388542}, {49, 0.109096123}, {54, 0.201311758}, {59, 0.135047321}, 
 {64, 0.136700549}, {70, 0.138646167}, {76, 0.105143174}, {83, 0.115143641}, 
 {91, 0.197982723}, {99, 0.0929362949}, {108, 0.114430499}, 
 {117, 0.138177339}, {128, 0.111239861}, {140, 0.132063304}, 
 {152, 0.124205241}, {166, 0.0876444847}, {181, 0.0820601355}, 
 {197, 0.07542183}, {215, 0.0793663855}, {235, 0.0832147226}, 
 {256, 0.10406985}, {279, 0.108225945}, {304, 0.0673945213}, 
 {332, 0.0642987221}, {362, 0.0711174283}, {395, 0.0488561382}, 
 {431, 0.0742564637}, {470, 0.0554427968}, {512, 0.0809966445}, 
 {558, 0.0380798624}, {609, 0.0493846514}, {664, 0.0467109721}, 
 {724, 0.0390734583}, {790, 0.0484794853}, {861, 0.0419327083}, 
 {939, 0.0377270332}, {1024, 0.0580998441}, {1117, 0.0274228446}, 
 {1218, 0.026928435}, {1328, 0.0302239919}, {1448, 0.0403668173}, 
 {1579, 0.0284379297}, {1722, 0.0218061102}, {1878, 0.0224470786}, 
 {2048, 0.0355033032}, {2233, 0.0236868648}, {2435, 0.0203579289}, 
 {2656, 0.0257956796}, {2896, 0.0148996599}, {3158, 0.0352692885}, 
 {3444, 0.0196317339}, {3756, 0.0193973161}, {4096, 0.0182920289}, 
 {4467, 0.0184357382}, {4871, 0.0164156071}, {5312, 0.015764929}, 
 {5793, 0.0140435149}, {6317, 0.0127629264}, {6889, 0.0168451311}, 
 {7512, 0.0137621343}, {8192, 0.0142959112}, {8933, 0.012433841}, 
 {9742, 0.0105028109}, {10624, 0.0122320056}, {11585, 0.0140147356}, 
 {12634, 0.0108546613}, {13777, 0.0117100922}, {15024, 0.0113008206}, 
 {16384, 0.00572910597}, {17867, 0.00869085555}, {19484, 0.00939574867}, 
 {21247, 0.00766957893}, {23170, 0.00830231912}, {25268, 0.00707094746}, 
 {27554, 0.0106488871}, {30048, 0.00702296793}, {32768, 0.00513960538}, 
 {35734, 0.0069107021}, {38968, 0.00555562122}, {42495, 0.00413538604}, 
 {46341, 0.00365123034}, {50535, 0.00425961284}, {55109, 0.00401338498}, 
 {60097, 0.00443196633}, {65536, 0.00413910677}, {71468, 0.00661302414}, 
 {77936, 0.0062522593}, {84990, 0.00476165759}, {92682, 0.00396197612}, 
 {101070, 0.00394532836}, {110218, 0.00432042437}, {120194, 0.00275215151}, 
 {131072, 0.0029962222}, {142935, 0.00260219575}, {155872, 0.00222630322}, 
 {169979, 0.00248498316}, {185364, 0.00239159479}, {202141, 0.00292283505}, 
 {220436, 0.0022645371}, {240387, 0.00335890765}, {262144, 0.00223059037}, 
 {285870, 0.00303466565}, {311744, 0.00236151972}, {339959, 0.00143339241}, 
 {370728, 0.00132740784}, {404281, 0.00145322742}, {440872, 0.00223383519}, 
 {480774, 0.00207895157}, {524288, 0.00184075712}, {571740, 0.00166041394}, 
 {623487, 0.00117457}, {679917, 0.00148052921}, {0, 0}, {0, 0}, {0, 0}, 
 {0, 0}, {0, 0}}
        };

        bins = Table[{}, {129}];
        Do[
        	set = dataSets[[iSet]];
			Print["Processing set ", iSet];
			Do[
				{n,discrepancy} = set[[i]];
				If[n == 0, Continue[] ];
				binind = Round[8 Log[2,n]] - 31;
				If[binind < 1 || binind > 129, Continue[] ];
				(*Print[i -> n -> binind]*);
				AppendTo[bins[[binind]],discrepancy]; 
			,{i,Length[set]}];
        ,{iSet, Length[dataSets]}];

        ntab = Table[ bin = Round[2^(i/8)] ,{i,4*8, 20*8}];

		res = {ntab, Max /@ bins}//T;
		
		res = Select[res, 1 > #[[2]] > 0 &];
		Print[res]
			
    ] (* getRefDiscrepancyWhiteNoise *)

getRefDiscrepancyPoisson[] :=
    Module[ {},
        dataSets = {
{{16,0.216958},{17,0.176703},{19,0.148974},{21,0.164878},{23,0.193228},{25,0.156788},{27,0.131455},{29,0.143027},{32,0.171422},{35,0.114086},{38,0.155469},{41,0.111584},{45,0.106808},{49,0.0829849},{54,0.116665},{59,0.103584},{64,0.0779145},{70,0.0915119},{76,0.0776819},{83,0.0808646},{91,0.0715481},{99,0.0723577},{108,0.0585661},{117,0.0575077},{128,0.0542787},{140,0.0584816},{152,0.0554977},{166,0.053549},{181,0.057699},{197,0.0423359},{215,0.0405464},{235,0.0360482},{256,0.0404024},{279,0.042832},{304,0.0315866},{332,0.0374635},{362,0.028026},{395,0.0288725},{431,0.0297753},{470,0.0257314},{512,0.0322463},{558,0.0230183},{609,0.0215046},{664,0.0208742},{724,0.0186741},{790,0.0172457},{861,0.0188746},{939,0.0217901},{1024,0.017131},{1117,0.0131505},{1218,0.0148693},{1328,0.0130648},{1448,0.0121932},{1579,0.0119331},{1722,0.0122542},{1878,0.0102297},{2048,0.010408},{2233,0.0105085},{2435,0.0106718},{2656,0.00904431},{2896,0.008889},{3158,0.00750852},{3444,0.00744455},{3756,0.00700895},{4096,0.00897263},{4467,0.00657335},{4871,0.0077648},{5312,0.00623429},{5793,0.00591469},{6317,0.00638182},{6889,0.00739227},{7512,0.00464656},{8192,0.00579265},{8933,0.00572942},{9742,0.00432662},{10624,0.00463327},{11585,0.00467332},{12634,0.00451681},{13777,0.00429101},{15024,0.00321669},{16384,0.00404058},{17867,0.00333394},{19484,0.0038011},{21247,0.00381476},{23170,0.00362646},{25268,0.0030286},{27554,0.00310678},{30048,0.00222513},{32768,0.00287622},{35734,0.00256653},{38968,0.00220393},{42495,0.00195391},{46341,0.00218995},{50535,0.00185627},{55109,0.00227082},{60097,0.00224727},{65536,0.00152669},{71468,0.00167159},{77936,0.00167064},{84990,0.00141509},{92682,0.00140212},{101070,0.00167385},{110218,0.00127232},{120194,0.00135603},{131072,0.00125954},{142935,0.00110939},{155872,0.000839108},{169979,0.00114685},{185364,0.000775161},{202141,0.000908949},{220436,0.00109883},{240387,0.000710231},{262144,0.000839695},{285870,0.000617023},{311744,0.000638895},{339959,0.000762221},{370728,0.00060733},{404281,0.000608008},{440872,0.000590926},{480774,0.000564127},{571740,0.000538741},{623487,0.00050475},{679917,0.000626259},{741455,0.000446879},{808563,0.000514973},{881744,0.000386843},{961548,0.000366661},{1048576,0.000445725}},
{{17, 0.128636}, {20, 0.145078}, {22, 0.192933}, {24, 0.144701}, 
 {26, 0.112179}, {27, 0.107418}, {29, 0.125133}, {33, 0.100664}, 
 {36, 0.114086}, {38, 0.115112}, {41, 0.111584}, {46, 0.0990821}, 
 {52, 0.0894594}, {54, 0.116665}, {58, 0.0639052}, {64, 0.0779145}, 
 {73, 0.0645093}, {78, 0.0621608}, {85, 0.0603012}, {89, 0.0656198}, 
 {102, 0.0509094}, {103, 0.0620066}, {121, 0.0423604}, {129, 0.0418629}, 
 {142, 0.044387}, {155, 0.0554977}, {168, 0.053549}, {182, 0.0442635}, 
 {200, 0.0399226}, {217, 0.0318511}, {242, 0.0360482}, {258, 0.0372872}, 
 {279, 0.0335376}, {302, 0.0279275}, {335, 0.0374635}, {362, 0.028026}, 
 {400, 0.0221531}, {431, 0.0275047}, {479, 0.0176795}, {521, 0.0322463}, 
 {561, 0.0230183}, {606, 0.0215046}, {663, 0.0208742}, {741, 0.0176489}, 
 {792, 0.0158355}, {865, 0.0188746}, {962, 0.0132925}, {1032, 0.0170489}, 
 {1120, 0.0107352}, {1216, 0.0148693}, {1340, 0.0115866}, {1451, 0.00941467}, 
 {1568, 0.0114565}, {1709, 0.0122542}, {1878, 0.00834783}, {2027, 0.010408}, 
 {2222, 0.00951746}, {2413, 0.00909757}, {2647, 0.00625539}, 
 {2848, 0.00727889}, {3095, 0.00667533}, {3353, 0.00744455}, 
 {3670, 0.00700895}, {3968, 0.00897263}, {4271, 0.00576264}, 
 {4720, 0.0077648}, {5117, 0.00623429}, {5554, 0.00541229}, 
 {6056, 0.00453098}, {6638, 0.00499178}, {7218, 0.00464656}, 
 {7884, 0.00579265}, {8617, 0.00314591}, {9335, 0.00375956}, 
 {10281, 0.00405165}, {11152, 0.00284177}, {12155, 0.00326104}, 
 {13272, 0.00429101}, {14500, 0.00312958}, {15758, 0.00240234}, 
 {17215, 0.00248684}, {18716, 0.0038011}, {20440, 0.00252963}, 
 {22277, 0.0025233}, {24384, 0.0030286}, {26489, 0.00247463}, 
 {28910, 0.00219246}, {31626, 0.00220532}, {34428, 0.00175836}, 
 {37525, 0.00220393}, {40913, 0.00178318}, {44558, 0.001526}, 
 {48625, 0.00138028}, {53034, 0.00137317}, {57810, 0.00191365}, 
 {63050, 0.00151129}, {68908, 0.00133495}, {75064, 0.00105884}, 
 {81840, 0.00141509}, {89267, 0.000936912}, {97284, 0.00167385}, 
 {106101, 0.00127232}, {115692, 0.000763185}, {126247, 0.00125954}, 
 {137645, 0.000879878}, {150028, 0.00079932}, {163630, 0.000772942}, 
 {178447, 0.000775161}, {194539, 0.000908949}, {212388, 0.000612463}, 
 {231281, 0.000568025}, {252454, 0.00048643}, {275147, 0.000550677}, 
 {300355, 0.000527044}, {327107, 0.000506024}, {356917, 0.00060733}, 
 {389323, 0.000532235}, {424299, 0.000383161}, {462901, 0.000495472}, 
 {550512, 0.000538741}, {600291, 0.000289856}, {654418, 0.000626259}, 
 {713958, 0.00043239}, {778599, 0.000514973}, {848834, 0.000386843}, 
 {925469, 0.000366661}, {1009433, 0.000290355}, {1101410, 0.000307478}},
{{16, 0.216958}, {18, 0.176703}, {21, 0.136362}, {23, 0.153421}, 
 {24, 0.139045}, {28, 0.114733}, {31, 0.171422}, {33, 0.0888702}, 
 {34, 0.103464}, {37, 0.109595}, {41, 0.108257}, {46, 0.0808248}, 
 {51, 0.0704193}, {55, 0.0966518}, {57, 0.103584}, {64, 0.0744846}, 
 {72, 0.0684363}, {76, 0.077162}, {83, 0.0623323}, {91, 0.0715481}, 
 {100, 0.0443485}, {106, 0.0562542}, {124, 0.0541037}, {129, 0.0417677}, 
 {143, 0.0475799}, {152, 0.0488546}, {166, 0.0441528}, {176, 0.057699}, 
 {203, 0.0423359}, {221, 0.0405464}, {240, 0.0292889}, {262, 0.0404024}, 
 {281, 0.0331367}, {316, 0.0315866}, {336, 0.0370182}, {372, 0.0252062}, 
 {397, 0.0190444}, {435, 0.0215931}, {475, 0.022979}, {507, 0.0256919}, 
 {567, 0.0197832}, {612, 0.0183528}, {675, 0.0192192}, {737, 0.0186741}, 
 {800, 0.0158171}, {871, 0.0184432}, {939, 0.0217901}, {1043, 0.0113587}, 
 {1135, 0.0131505}, {1236, 0.0105101}, {1339, 0.0130648}, {1457, 0.0121932}, 
 {1583, 0.0119331}, {1718, 0.0106107}, {1874, 0.0102297}, {2032, 0.0100282}, 
 {2227, 0.00749346}, {2402, 0.00842671}, {2604, 0.00647429}, 
 {2838, 0.00746545}, {3091, 0.00697312}, {3368, 0.00560033}, 
 {3639, 0.00646747}, {3981, 0.00500646}, {4293, 0.00610479}, 
 {4670, 0.00479247}, {5094, 0.00481841}, {5571, 0.0044296}, 
 {6092, 0.00638182}, {6641, 0.00621853}, {7226, 0.00399403}, 
 {7917, 0.00424236}, {8599, 0.00486033}, {9323, 0.00462242}, 
 {10233, 0.0035525}, {11175, 0.00344203}, {12142, 0.00451681}, 
 {13247, 0.00398715}, {14485, 0.0027648}, {15791, 0.00404058}, 
 {17198, 0.00235772}, {18697, 0.00278262}, {20464, 0.0019329}, 
 {22326, 0.00226379}, {24259, 0.00264752}, {26581, 0.00267019}, 
 {29025, 0.00222513}, {31523, 0.00251577}, {34399, 0.00256653}, 
 {37472, 0.00152759}, {40916, 0.00136501}, {44534, 0.00218995}, 
 {48682, 0.00173131}, {53058, 0.00184799}, {57858, 0.00159233}, 
 {63105, 0.00152669}, {68789, 0.00136838}, {74967, 0.00151865}, 
 {81852, 0.00126184}, {89224, 0.000923916}, {97283, 0.00086159}, 
 {106084, 0.000835901}, {115516, 0.00080359}, {126366, 0.000896399}, 
 {137613, 0.0010124}, {150247, 0.000823824}, {163652, 0.00114685}, 
 {178374, 0.000734779}, {194567, 0.000820675}, {212448, 0.00109883}, 
 {231526, 0.000710231}, {252553, 0.000839695}, {275098, 0.000552171}, 
 {300415, 0.000638895}, {327364, 0.000511727}, {356559, 0.000511157}, 
 {389292, 0.00057696}, {424330, 0.000446255}, {463229, 0.000478519}, 
 {550562, 0.000468266}, {600617, 0.000302692}, {654877, 0.000329254}, 
 {713662, 0.000267509}, {778692, 0.000314052}, {849381, 0.000294678}, 
 {925843, 0.000302028}, {1009688, 0.000274941}, {1100793, 0.000259279}},
{{16, 0.254057}, {19, 0.144429}, {23, 0.116457}, {24, 0.151054}, 
 {29, 0.12423}, {32, 0.14086}, {33, 0.114309}, {38, 0.108887}, 
 {43, 0.104006}, {45, 0.0902596}, {51, 0.0791882}, {52, 0.0990969}, 
 {56, 0.123337}, {65, 0.0913973}, {68, 0.0747037}, {79, 0.0889608}, 
 {88, 0.0531222}, {92, 0.0605272}, {99, 0.0597469}, {104, 0.0541502}, 
 {120, 0.0700875}, {126, 0.0521817}, {144, 0.0434676}, {153, 0.0517466}, 
 {162, 0.0478336}, {177, 0.0356774}, {203, 0.0409313}, {214, 0.0378176}, 
 {242, 0.0383757}, {252, 0.0300133}, {281, 0.0329006}, {313, 0.0243921}, 
 {336, 0.0228308}, {363, 0.0260642}, {398, 0.0273743}, {428, 0.0226421}, 
 {468, 0.0254713}, {503, 0.0192438}, {562, 0.0181377}, {612, 0.0183822}, 
 {672, 0.0167395}, {736, 0.016598}, {803, 0.0154147}, {867, 0.0168028}, 
 {948, 0.0188991}, {1038, 0.0122954}, {1127, 0.0144627}, {1238, 0.0111963}, 
 {1326, 0.0093384}, {1466, 0.0102123}, {1574, 0.0101243}, {1732, 0.0107753}, 
 {1868, 0.00901121}, {2039, 0.00743244}, {2231, 0.0113912}, 
 {2422, 0.00829138}, {2615, 0.00926629}, {2865, 0.00835529}, 
 {3114, 0.00636982}, {3330, 0.00892987}, {3654, 0.00761774}, 
 {3999, 0.00559033}, {4288, 0.00644631}, {4690, 0.00412696}, 
 {5149, 0.00539907}, {5580, 0.00487627}, {6092, 0.00547417}, 
 {6621, 0.0038738}, {7249, 0.00538014}, {7908, 0.00501124}, 
 {8608, 0.00460908}, {9350, 0.003661}, {10237, 0.00513056}, 
 {11161, 0.00254402}, {12150, 0.00341386}, {13270, 0.00290897}, 
 {14470, 0.00329595}, {15786, 0.00300794}, {17146, 0.0043959}, 
 {18801, 0.00211677}, {20449, 0.00191356}, {22279, 0.00333094}, 
 {24347, 0.00206792}, {26520, 0.00257923}, {28976, 0.00169671}, 
 {31563, 0.00209142}, {34437, 0.00260891}, {37444, 0.00201221}, 
 {40772, 0.00158035}, {44674, 0.00224528}, {48666, 0.00164494}, 
 {53103, 0.00142935}, {57860, 0.00122796}, {63076, 0.00113933}, 
 {68863, 0.00112551}, {75050, 0.00125609}, {81784, 0.000934313}, 
 {89325, 0.00142548}, {97263, 0.000939721}, {106251, 0.00110292}, 
 {115702, 0.00107745}, {126176, 0.000689672}, {137604, 0.000704384}, 
 {150252, 0.00082217}, {163690, 0.000651781}, {178611, 0.000964119}, 
 {194578, 0.000750886}, {212146, 0.000647206}, {231397, 0.000779842}, 
 {252609, 0.000601459}, {275286, 0.000523974}, {300410, 0.000697049}, 
 {327343, 0.000510862}, {357027, 0.000517701}, {389180, 0.000665361}, 
 {424588, 0.000628696}, {463037, 0.000475628}, {550388, 0.000641648}, 
 {600565, 0.000335693}, {654431, 0.000466376}, {713757, 0.000314182}, 
 {778202, 0.000428999}, {848909, 0.000337502}, {926270, 0.000383815}, 
 {1009762, 0.000255865}, {1101284, 0.000293757}},
{{17, 0.157663}, {18, 0.137369}, {22, 0.174767}, {23, 0.104463}, 
 {26, 0.15776}, {27, 0.145575}, {35, 0.104251}, {37, 0.125313}, 
 {40, 0.0776992}, {46, 0.0930219}, {49, 0.0887774}, {54, 0.0799406}, 
 {57, 0.0600137}, {65, 0.0622955}, {70, 0.0663194}, {77, 0.0570128}, 
 {88, 0.0759505}, {90, 0.0758913}, {101, 0.0549351}, {105, 0.0556807}, 
 {120, 0.0445968}, {124, 0.0487732}, {140, 0.0406247}, {155, 0.0466623}, 
 {165, 0.0421288}, {184, 0.0364098}, {204, 0.0298363}, {217, 0.045275}, 
 {235, 0.0287899}, {261, 0.0262331}, {281, 0.035392}, {303, 0.0272782}, 
 {336, 0.0295417}, {373, 0.0283878}, {394, 0.0245256}, {439, 0.0260767}, 
 {480, 0.0265282}, {518, 0.0200772}, {566, 0.020279}, {607, 0.0200906}, 
 {676, 0.0191673}, {723, 0.0183609}, {790, 0.0159779}, {859, 0.0142427}, 
 {950, 0.01526}, {1034, 0.0149763}, {1136, 0.0141944}, {1228, 0.0108508}, 
 {1333, 0.0151081}, {1450, 0.0105078}, {1592, 0.00956376}, {1723, 0.0127629}, 
 {1859, 0.0106596}, {2054, 0.00956885}, {2221, 0.00909866}, 
 {2429, 0.00813532}, {2625, 0.00809354}, {2863, 0.00794629}, 
 {3094, 0.0088792}, {3375, 0.00567703}, {3666, 0.00542538}, 
 {3971, 0.00697642}, {4285, 0.00734157}, {4673, 0.00537747}, 
 {5118, 0.00441458}, {5596, 0.00481472}, {6048, 0.00488522}, 
 {6649, 0.00490422}, {7242, 0.00487541}, {7877, 0.00473349}, 
 {8619, 0.00429852}, {9413, 0.00466299}, {10251, 0.00444822}, 
 {11134, 0.00417953}, {12186, 0.00336772}, {13241, 0.00290417}, 
 {14470, 0.00294674}, {15754, 0.00319468}, {17217, 0.0032857}, 
 {18737, 0.00279406}, {20448, 0.00274233}, {22378, 0.00206491}, 
 {24321, 0.0021464}, {26539, 0.00177797}, {28985, 0.00222227}, 
 {31542, 0.00275436}, {34326, 0.00169933}, {37535, 0.00227221}, 
 {40851, 0.00195085}, {44628, 0.00189}, {48690, 0.00160076}, 
 {53058, 0.00193336}, {57896, 0.00105618}, {63115, 0.00129837}, 
 {68776, 0.00140852}, {74999, 0.00130063}, {81816, 0.00108934}, 
 {89317, 0.00145813}, {97386, 0.00101605}, {106022, 0.00114525}, 
 {115767, 0.00122238}, {126183, 0.000716638}, {137744, 0.000835965}, 
 {150082, 0.00113962}, {163529, 0.000885024}, {178452, 0.00117849}, 
 {194617, 0.000755121}, {212419, 0.000808656}, {231454, 0.000719244}, 
 {252619, 0.000631692}, {275151, 0.000745829}, {300298, 0.000755673}, 
 {327511, 0.000675438}, {356839, 0.000623385}, {389104, 0.000440247}, 
 {424536, 0.000606739}, {462942, 0.000558201}, {550310, 0.000469593}, 
 {600237, 0.000552178}, {654690, 0.000426659}, {714022, 0.000363008}, 
 {778418, 0.000444644}, {849018, 0.000382544}, {926262, 0.000321219}, 
 {1009675, 0.000256747}, {1100854, 0.000301137}},
{{18, 0.217436}, {19, 0.178637}, {23, 0.161323}, {24, 0.135467}, 
 {25, 0.137918}, {26, 0.107046}, {30, 0.11509}, {34, 0.126244}, 
 {35, 0.117887}, {40, 0.10995}, {42, 0.104043}, {47, 0.101132}, 
 {52, 0.0866502}, {56, 0.0982677}, {64, 0.0745091}, {70, 0.0868406}, 
 {78, 0.0693983}, {81, 0.0721125}, {93, 0.0484801}, {98, 0.0666837}, 
 {107, 0.0615811}, {116, 0.0440618}, {125, 0.0598974}, {143, 0.0470554}, 
 {155, 0.0458281}, {168, 0.0460891}, {183, 0.0394474}, {198, 0.0488434}, 
 {216, 0.0348158}, {239, 0.0387128}, {254, 0.0354709}, {271, 0.0300489}, 
 {310, 0.0213181}, {340, 0.034708}, {366, 0.024692}, {396, 0.0322271}, 
 {441, 0.0286435}, {472, 0.0315412}, {522, 0.028593}, {566, 0.0173917}, 
 {617, 0.0179662}, {673, 0.0201413}, {737, 0.016887}, {794, 0.0162189}, 
 {874, 0.0195706}, {953, 0.0121766}, {1050, 0.0129168}, {1149, 0.0142882}, 
 {1213, 0.0152513}, {1340, 0.0107959}, {1463, 0.00888133}, {1587, 0.0114949}, 
 {1729, 0.0192509}, {1885, 0.00965765}, {2055, 0.0098966}, 
 {2230, 0.00929427}, {2413, 0.00975963}, {2644, 0.00983239}, 
 {2847, 0.00737491}, {3106, 0.00728483}, {3339, 0.00665467}, 
 {3666, 0.00653122}, {3969, 0.00599777}, {4313, 0.0074627}, 
 {4695, 0.00717314}, {5142, 0.00622942}, {5581, 0.00607501}, 
 {6098, 0.00610747}, {6654, 0.00493137}, {7244, 0.00477933}, 
 {7904, 0.00415643}, {8572, 0.00415342}, {9409, 0.00469526}, 
 {10263, 0.00521032}, {11173, 0.00349062}, {12199, 0.00403882}, 
 {13295, 0.00381911}, {14475, 0.00350975}, {15780, 0.00309657}, 
 {17228, 0.00319275}, {18746, 0.00344109}, {20445, 0.00272847}, 
 {22265, 0.00179732}, {24359, 0.00223597}, {26530, 0.0028274}, 
 {29037, 0.00181106}, {31583, 0.00181598}, {34435, 0.00163356}, 
 {37574, 0.00209046}, {40953, 0.00181543}, {44535, 0.00133026}, 
 {48694, 0.00179746}, {53047, 0.00183405}, {57970, 0.00129187}, 
 {63207, 0.00145992}, {68824, 0.00150597}, {74945, 0.00111074}, 
 {81837, 0.00102586}, {89231, 0.00150874}, {97267, 0.00158457}, 
 {106083, 0.00114583}, {115832, 0.00106233}, {126111, 0.00102068}, 
 {137511, 0.000758083}, {149976, 0.000732778}, {163850, 0.000819214}, 
 {178460, 0.000673431}, {194745, 0.00098635}, {212178, 0.000794762}, 
 {231638, 0.000852835}, {252360, 0.000682168}, {275440, 0.000736899}, 
 {300369, 0.00052648}, {327568, 0.000493758}, {357140, 0.000497563}, 
 {389408, 0.000625827}, {424378, 0.000516763}, {462935, 0.000551343}, 
 {550475, 0.000546192}, {600086, 0.0006985}, {655069, 0.000611632}, 
 {714440, 0.000454227}, {778285, 0.000422566}, {849197, 0.000390063}, 
 {925660, 0.000325803}, {1009196, 0.00027175}, {1101156, 0.000364517}},
{{19, 0.148974}, {20, 0.164878}, {22, 0.142677}, {23, 0.11839}, 
 {25, 0.135736}, {26, 0.129241}, {28, 0.123683}, {29, 0.143027}, 
 {35, 0.104611}, {38, 0.0988014}, {42, 0.110289}, {47, 0.105788}, 
 {52, 0.0904656}, {59, 0.0834228}, {60, 0.0908163}, {64, 0.0755467}, 
 {72, 0.0830379}, {76, 0.0776819}, {87, 0.0561961}, {91, 0.0711605}, 
 {101, 0.0723577}, {105, 0.0535934}, {119, 0.0575077}, {126, 0.0542032}, 
 {136, 0.0450909}, {152, 0.052945}, {169, 0.0418582}, {187, 0.0406236}, 
 {198, 0.0387248}, {216, 0.0354743}, {241, 0.0313715}, {262, 0.0282011}, 
 {280, 0.0266206}, {314, 0.0281245}, {339, 0.0265912}, {367, 0.0234981}, 
 {393, 0.0261055}, {432, 0.0249902}, {476, 0.0241267}, {522, 0.0237819}, 
 {556, 0.0204757}, {620, 0.0152317}, {676, 0.01677}, {728, 0.0143979}, 
 {797, 0.0172457}, {873, 0.0132974}, {938, 0.0168753}, {1039, 0.0162607}, 
 {1132, 0.0116151}, {1227, 0.0119955}, {1340, 0.0122054}, {1460, 0.00953865}, 
 {1592, 0.0100241}, {1719, 0.0108898}, {1880, 0.00877049}, 
 {2028, 0.00910699}, {2195, 0.00838506}, {2428, 0.007809}, 
 {2615, 0.00904431}, {2864, 0.0069215}, {3098, 0.00750852}, 
 {3356, 0.00695934}, {3665, 0.00660992}, {3959, 0.00569084}, 
 {4301, 0.00657335}, {4711, 0.00730629}, {5119, 0.00599697}, 
 {5623, 0.00438666}, {6104, 0.00550688}, {6686, 0.00439041}, 
 {7273, 0.00383273}, {7931, 0.00574755}, {8574, 0.00572942}, 
 {9416, 0.00427068}, {10207, 0.00463275}, {11135, 0.00467332}, 
 {12158, 0.00306067}, {13241, 0.00368509}, {14490, 0.00231991}, 
 {15756, 0.0032508}, {17186, 0.00333394}, {18757, 0.00281302}, 
 {20481, 0.00271993}, {22268, 0.002121}, {24384, 0.00255357}, 
 {26515, 0.00271158}, {28997, 0.00211767}, {31607, 0.00287622}, 
 {34497, 0.00146941}, {37511, 0.00170588}, {40968, 0.00161452}, 
 {44669, 0.00189071}, {48631, 0.00185627}, {53107, 0.00163125}, 
 {57928, 0.00224727}, {63102, 0.00122035}, {68817, 0.00151776}, 
 {75044, 0.00129814}, {81853, 0.0013095}, {89316, 0.0010909}, 
 {97208, 0.000979943}, {106192, 0.000983532}, {115838, 0.00103536}, 
 {126176, 0.000875207}, {137476, 0.00110567}, {150139, 0.000806311}, 
 {163791, 0.00104268}, {178485, 0.000567676}, {194629, 0.000606545}, 
 {212376, 0.000825075}, {231612, 0.000572841}, {252504, 0.000728269}, 
 {275377, 0.000617023}, {300114, 0.000570111}, {327161, 0.000538533}, 
 {357088, 0.000478738}, {389038, 0.000447267}, {424614, 0.000590926}, 
 {462836, 0.000516833}, {550730, 0.000362857}, {600368, 0.000375592}, 
 {654738, 0.000478824}, {713997, 0.000446879}, {778937, 0.000414853}, 
 {849465, 0.000362307}, {926013, 0.000309821}, {1009793, 0.000445725}, 
 {1101097, 0.000306248}},
{{16, 0.147385}, {20, 0.153009}, {23, 0.193228}, {24, 0.156788}, 
 {26, 0.131455}, {28, 0.104593}, {33, 0.0890101}, {36, 0.099107}, 
 {39, 0.155469}, {41, 0.08175}, {46, 0.0805647}, {47, 0.106808}, 
 {53, 0.0803927}, {63, 0.0661197}, {66, 0.0667993}, {70, 0.0915119}, 
 {80, 0.0808646}, {85, 0.0626184}, {93, 0.0679225}, {103, 0.0559811}, 
 {105, 0.0585661}, {119, 0.047774}, {127, 0.0542787}, {138, 0.0584816}, 
 {153, 0.0436795}, {166, 0.0411586}, {181, 0.0395913}, {197, 0.0374671}, 
 {213, 0.0302792}, {235, 0.0330158}, {253, 0.0275142}, {287, 0.042832}, 
 {310, 0.0264745}, {330, 0.0304355}, {374, 0.0208278}, {393, 0.0288725}, 
 {436, 0.0297753}, {484, 0.0257314}, {517, 0.0255059}, {568, 0.0224052}, 
 {618, 0.0164555}, {661, 0.0178927}, {738, 0.0158043}, {789, 0.0165019}, 
 {868, 0.0149984}, {948, 0.0185897}, {1027, 0.017131}, {1124, 0.0125406}, 
 {1215, 0.0135394}, {1335, 0.0109098}, {1456, 0.0112352}, {1583, 0.00976857}, 
 {1728, 0.00971143}, {1870, 0.00985671}, {2062, 0.00782955}, 
 {2205, 0.0105085}, {2415, 0.0106718}, {2642, 0.00745793}, {2855, 0.008889}, 
 {3099, 0.00739015}, {3340, 0.0069837}, {3655, 0.00634141}, 
 {3985, 0.00563848}, {4305, 0.00496999}, {4693, 0.0055896}, 
 {5136, 0.00493235}, {5575, 0.00500887}, {6110, 0.00579838}, 
 {6632, 0.00488627}, {7176, 0.00739227}, {7889, 0.00414592}, 
 {8639, 0.00363465}, {9409, 0.00356271}, {10217, 0.0040138}, 
 {11174, 0.00336102}, {12204, 0.00328286}, {13290, 0.00385258}, 
 {14504, 0.00277642}, {15719, 0.00256015}, {17180, 0.00316098}, 
 {18807, 0.00316642}, {20476, 0.00280524}, {22377, 0.00256715}, 
 {24413, 0.00198883}, {26526, 0.00310678}, {28920, 0.00213436}, 
 {31565, 0.00217786}, {34406, 0.00174999}, {37465, 0.00164061}, 
 {40833, 0.00195391}, {44635, 0.00152389}, {48724, 0.00178583}, 
 {52984, 0.00127428}, {57784, 0.00138495}, {63167, 0.00119442}, 
 {68738, 0.00167159}, {75093, 0.00167064}, {81859, 0.00103548}, 
 {89230, 0.00122562}, {97456, 0.00124103}, {106215, 0.00100885}, 
 {115844, 0.00135603}, {126368, 0.000896403}, {137638, 0.00110939}, 
 {150092, 0.000738525}, {163680, 0.000676996}, {178390, 0.000605261}, 
 {194629, 0.000524673}, {212215, 0.000685319}, {231411, 0.000614859}, 
 {252436, 0.000520298}, {275126, 0.00046771}, {300151, 0.000545076}, 
 {327313, 0.000762221}, {356909, 0.000477789}, {389125, 0.000608008}, 
 {424806, 0.000444828}, {462749, 0.000564127}, {550932, 0.000480375}, 
 {600094, 0.00050475}, {654714, 0.000347317}, {713822, 0.000446658}, 
 {778406, 0.000270167}, {848927, 0.000310474}, {926058, 0.000337164}, 
 {1009875, 0.000288863}, {1100942, 0.00027893}},
{{15, 0.175189}, {20, 0.174556}, {22, 0.137903}, {23, 0.158256}, 
 {25, 0.122739}, {28, 0.142323}, {29, 0.126263}, {33, 0.0950919}, 
 {35, 0.113546}, {40, 0.0836107}, {42, 0.0733948}, {44, 0.111403}, 
 {51, 0.0680826}, {54, 0.111445}, {57, 0.0929892}, {68, 0.0696423}, 
 {76, 0.0664814}, {82, 0.0690951}, {92, 0.0633937}, {101, 0.0565745}, 
 {105, 0.0600051}, {114, 0.0544127}, {129, 0.037907}, {139, 0.0564216}, 
 {156, 0.0430737}, {164, 0.0505128}, {183, 0.0314494}, {201, 0.0354233}, 
 {214, 0.0339549}, {239, 0.042544}, {264, 0.0311741}, {284, 0.0264416}, 
 {305, 0.0283502}, {334, 0.0218976}, {362, 0.0299945}, {402, 0.0220285}, 
 {432, 0.0231342}, {476, 0.0220282}, {517, 0.0236004}, {575, 0.0227017}, 
 {614, 0.0237709}, {679, 0.0139374}, {724, 0.0184237}, {796, 0.0213933}, 
 {869, 0.0171255}, {947, 0.0129145}, {1034, 0.0148111}, {1120, 0.0129683}, 
 {1215, 0.0128573}, {1346, 0.0124081}, {1462, 0.0100366}, {1576, 0.00941313}, 
 {1712, 0.00828712}, {1883, 0.00931042}, {2029, 0.00969463}, 
 {2218, 0.00679456}, {2426, 0.0101721}, {2621, 0.00741579}, 
 {2864, 0.0070164}, {3093, 0.00625574}, {3342, 0.00959553}, 
 {3657, 0.00626117}, {3986, 0.00582207}, {4271, 0.0056813}, 
 {4699, 0.00473702}, {5088, 0.00445844}, {5570, 0.00630096}, 
 {6101, 0.00566724}, {6625, 0.00564473}, {7241, 0.00495575}, 
 {7890, 0.00376064}, {8572, 0.00419275}, {9359, 0.00428891}, 
 {10275, 0.00405961}, {11197, 0.00401388}, {12132, 0.00291622}, 
 {13245, 0.00257426}, {14459, 0.0028081}, {15749, 0.0033395}, 
 {17224, 0.00252807}, {18801, 0.00299651}, {20427, 0.00251554}, 
 {22308, 0.00324195}, {24395, 0.00214567}, {26586, 0.0023099}, 
 {28895, 0.0017083}, {31581, 0.002172}, {34339, 0.00172409}, 
 {37642, 0.00146669}, {40977, 0.0016157}, {44628, 0.00186954}, 
 {48632, 0.00136868}, {53119, 0.00185287}, {57852, 0.00175658}, 
 {63091, 0.00102027}, {68779, 0.00111689}, {75064, 0.0012201}, 
 {81814, 0.00137508}, {89168, 0.000968615}, {97347, 0.000970924}, 
 {106192, 0.000819952}, {115632, 0.000971292}, {126173, 0.000924303}, 
 {137626, 0.000799534}, {150110, 0.000748218}, {163893, 0.000995554}, 
 {178737, 0.00108228}, {194428, 0.000647237}, {212399, 0.000710856}, 
 {231519, 0.000627833}, {252220, 0.000696627}, {275188, 0.000750886}, 
 {300309, 0.00054604}, {327512, 0.000501573}, {356979, 0.000500414}, 
 {389654, 0.000810153}, {424418, 0.000546975}, {462921, 0.000447296}, 
 {550635, 0.000458297}, {600358, 0.000414009}, {654549, 0.000372226}, 
 {713876, 0.00030231}, {778429, 0.000397403}, {849217, 0.000378203}, 
 {925743, 0.000406688}, {1010034, 0.00036982}, {1101308, 0.0002171}},
{{18, 0.142057}, {20, 0.250993}, {22, 0.106196}, {24, 0.118233}, 
 {27, 0.127076}, {28, 0.113966}, {32, 0.122164}, {34, 0.121546}, 
 {41, 0.112692}, {45, 0.0838769}, {52, 0.0970853}, {53, 0.0955371}, 
 {60, 0.068246}, {66, 0.0848816}, {68, 0.0763557}, {79, 0.0559547}, 
 {82, 0.0621971}, {93, 0.0506701}, {98, 0.0468491}, {108, 0.0451991}, 
 {121, 0.0530235}, {132, 0.0488106}, {136, 0.0541201}, {156, 0.0443937}, 
 {167, 0.0319428}, {181, 0.0420027}, {205, 0.035428}, {217, 0.0361498}, 
 {243, 0.0360239}, {252, 0.0318255}, {274, 0.0261778}, {307, 0.0264941}, 
 {344, 0.0337351}, {371, 0.0229663}, {397, 0.0245525}, {427, 0.0234376}, 
 {480, 0.0260063}, {523, 0.0233045}, {560, 0.0207694}, {611, 0.0167412}, 
 {670, 0.0234203}, {734, 0.0194159}, {803, 0.0162717}, {878, 0.0148884}, 
 {954, 0.0138928}, {1025, 0.020514}, {1121, 0.0167188}, {1227, 0.0161988}, 
 {1331, 0.0131151}, {1458, 0.0130609}, {1598, 0.0110568}, {1715, 0.0102293}, 
 {1858, 0.0111452}, {2029, 0.0121173}, {2232, 0.0110443}, {2416, 0.00898841}, 
 {2599, 0.00740716}, {2819, 0.00991123}, {3097, 0.00691714}, 
 {3361, 0.00688947}, {3650, 0.00900139}, {3955, 0.00803898}, 
 {4304, 0.00654251}, {4701, 0.00570727}, {5129, 0.00669336}, 
 {5621, 0.00564423}, {6076, 0.00490808}, {6623, 0.00488533}, 
 {7254, 0.00484188}, {7893, 0.00445734}, {8551, 0.00349615}, 
 {9384, 0.00383904}, {10217, 0.00513245}, {11192, 0.00559813}, 
 {12138, 0.00338938}, {13225, 0.00350041}, {14459, 0.00329646}, 
 {15817, 0.00348151}, {17181, 0.00355108}, {18755, 0.00207128}, 
 {20419, 0.00215123}, {22336, 0.00191399}, {24288, 0.00263683}, 
 {26519, 0.00196225}, {28956, 0.00202174}, {31508, 0.00194044}, 
 {34338, 0.00233033}, {37502, 0.0016666}, {40922, 0.00161135}, 
 {44632, 0.00193669}, {48743, 0.00121609}, {53007, 0.00129169}, 
 {57855, 0.00131241}, {63143, 0.00129908}, {68743, 0.00165339}, 
 {74964, 0.00131423}, {81836, 0.00102635}, {89246, 0.00102327}, 
 {97393, 0.00185039}, {106114, 0.000907921}, {115875, 0.000897734}, 
 {126183, 0.000945968}, {137616, 0.000825488}, {150142, 0.000731821}, 
 {163751, 0.000884147}, {178435, 0.000936698}, {194482, 0.00101203}, 
 {212247, 0.000785414}, {231552, 0.000565736}, {252370, 0.000731154}, 
 {275485, 0.000484384}, {300137, 0.000784497}, {327367, 0.000494273}, 
 {356883, 0.000551967}, {389280, 0.000597729}, {424325, 0.000455902}, 
 {462992, 0.00054392}, {550718, 0.000415588}, {600472, 0.000375898}, 
 {655102, 0.000354123}, {713960, 0.000373818}, {778458, 0.000384843}, 
 {849344, 0.000422486}, {925687, 0.000313037}, {1009516, 0.000367651}, 
 {1100935, 0.000287842}},
{{16, 0.126042}, {20, 0.17269}, {21, 0.178745}, {23, 0.207181}, 
 {25, 0.136511}, {28, 0.120076}, {30, 0.0927068}, {31, 0.148408}, 
 {33, 0.114309}, {38, 0.109795}, {43, 0.134209}, {47, 0.0854957}, 
 {51, 0.0996638}, {56, 0.0773412}, {59, 0.0984014}, {66, 0.0742409}, 
 {71, 0.0688502}, {77, 0.056393}, {83, 0.0780716}, {88, 0.0612596}, 
 {100, 0.0486822}, {108, 0.0700123}, {119, 0.058131}, {129, 0.0511842}, 
 {137, 0.0562564}, {157, 0.0436109}, {172, 0.0344742}, {179, 0.0386061}, 
 {197, 0.0312351}, {220, 0.0364575}, {242, 0.0327258}, {253, 0.0273237}, 
 {280, 0.0308856}, {309, 0.0263893}, {324, 0.033572}, {365, 0.0258825}, 
 {406, 0.0218142}, {437, 0.020297}, {476, 0.0221561}, {527, 0.0162173}, 
 {562, 0.0203353}, {603, 0.0192325}, {672, 0.0159134}, {731, 0.0186543}, 
 {782, 0.018226}, {864, 0.0161451}, {950, 0.0175572}, {1043, 0.015678}, 
 {1136, 0.0134323}, {1237, 0.0114167}, {1325, 0.0152468}, {1465, 0.0114274}, 
 {1570, 0.0118238}, {1725, 0.0141791}, {1848, 0.00847946}, 
 {2054, 0.00795828}, {2187, 0.00866927}, {2404, 0.00751842}, 
 {2610, 0.00823219}, {2844, 0.0070947}, {3097, 0.00815416}, 
 {3344, 0.00730976}, {3634, 0.00698242}, {3961, 0.00722874}, 
 {4291, 0.00636153}, {4687, 0.00647753}, {5125, 0.00518468}, 
 {5531, 0.00627713}, {6095, 0.00578477}, {6641, 0.00497801}, 
 {7244, 0.00440485}, {7893, 0.00384373}, {8664, 0.00574336}, 
 {9374, 0.00336736}, {10246, 0.00348576}, {11197, 0.00345611}, 
 {12193, 0.00363615}, {13239, 0.00314648}, {14489, 0.00331441}, 
 {15736, 0.00356891}, {17214, 0.00296726}, {18803, 0.0023733}, 
 {20488, 0.00180607}, {22284, 0.00306409}, {24322, 0.00210023}, 
 {26562, 0.00177375}, {28989, 0.00266189}, {31558, 0.00226171}, 
 {34582, 0.00193677}, {37509, 0.00187838}, {40906, 0.00172326}, 
 {44618, 0.00167782}, {48707, 0.00198161}, {53071, 0.00149704}, 
 {57805, 0.00152551}, {63132, 0.00151353}, {68815, 0.00122439}, 
 {75039, 0.00148401}, {81748, 0.00136453}, {89292, 0.00100709}, 
 {97274, 0.00121195}, {106337, 0.000928313}, {115629, 0.000868617}, 
 {126172, 0.00112401}, {137745, 0.000803512}, {150099, 0.000845804}, 
 {163670, 0.000804843}, {178550, 0.000885252}, {194560, 0.000545387}, 
 {212174, 0.000900612}, {231511, 0.00112375}, {252472, 0.000611462}, 
 {275350, 0.000619236}, {300486, 0.000478486}, {327218, 0.00044843}, 
 {357160, 0.000551624}, {389109, 0.000508432}, {424678, 0.000457519}, 
 {462995, 0.000500222}, {550743, 0.000707257}, {600392, 0.000444434}, 
 {654698, 0.000348039}, {714053, 0.000340476}, {778473, 0.000363694}, 
 {848608, 0.000363455}, {925887, 0.000342236}, {1010136, 0.000367888}, 
 {1101120, 0.000353418}}
        };

        bins = Table[{}, {129}];
        Do[
        	set = dataSets[[iSet]];
			Print["Processing set ", iSet];
			Do[
				{n,discrepancy} = set[[i]];
				If[n == 0, Continue[] ];
				binind = Round[8 Log[2,n]] - 31;
				If[binind < 1 || binind > 129, Continue[] ];
				(*Print[i -> n -> binind]*);
				AppendTo[bins[[binind]],discrepancy]; 
			,{i,Length[set]}];
        ,{iSet, Length[dataSets]}];

        ntab = Table[ bin = Round[2^(i/8)] ,{i,4*8, 20*8}];

		res = {ntab, Max /@ bins}//T;
		
		res = Select[res, 1 > #[[2]] > 0 &];
		Print[res]
			
    ] (* getRefDiscrepancyPoisson *)

makeFigureDiscrepancyAndVariance[] :=
    Module[ {},
        pDiscrepancy = makeFigureDiscrepancy[];
        pVariance = makeFigureVariance[];
        p = Column[{pDiscrepancy, " ", " ", " ", " ", " ", pVariance}];
        p//Print;
        Export["prep-figs/fig-discrepancy+variance.pdf",p];
    ] (* makeFigureDiscrepancyAndVariance*)

makeFigureDiscrepancy[] :=
    Module[ {},
        discrepancyMU3 =
         {{19, 0.146048}, {36, 0.103531}, {69, 0.0527673}, {131, 0.0334332}, 
		 {250, 0.0173804}, {476, 0.00994099}, {907, 0.00580434}, {1728, 0.0034883}, 
		 {3292, 0.00198379}, {6272, 0.00111701}, {11949, 0.000630328}, 
		 {22765, 0.000329294}, {43371, 0.000194028}, {82629, 0.00011561}, 
		 {157422, 0.0000630014}, {299915, 0.0000326063}, {571388, 0.0000177684}, 
		 {1088589, 9.89873*^-6}};
        discrepancyMU3 =
		 {{28,0.101116},{31,0.229365},{34,0.208829},{37,0.16522},{41,0.1456},{45,0.118245},{50,0.0954973},{55,0.0734385},{60,0.0523873},{66,0.130918},{73,0.11946},{80,0.0959367},{88,0.0818747},{97,0.0744634},{107,0.0613733},{117,0.0493948},{129,0.028759},{142,0.0876231},{156,0.0667444},{172,0.0654181},{189,0.0507307},{208,0.0496933},{229,0.0423499},{252,0.0302466},{277,0.0146923},{305,0.0585993},{335,0.0543912},{369,0.043002},{406,0.0299345},{447,0.0311712},{492,0.0284365},{541,0.0184941},{595,0.00714452},{655,0.0427749},{720,0.0386779},{793,0.0366175},{872,0.0239827},{959,0.0194717},{1056,0.017794},{1162,0.0135747},{1278,0.00362989},{1406,0.0293291},{1547,0.0263712},{1702,0.022921},{1873,0.0153871},{2061,0.0145117},{2267,0.0122569},{2495,0.00806518},{2745,0.00189629},{3020,0.0204456},{3323,0.016317},{3656,0.0146553},{4023,0.0102752},{4426,0.00969819},{4870,0.00894472},{5359,0.00542086},{5896,0.000936623},{6487,0.0129666},{7138,0.0112171},{7853,0.00958427},{8641,0.00580582},{9507,0.00656519},{10461,0.00570965},{11510,0.00418558},{12664,0.000451302},{13934,0.00942439},{15331,0.00845983},{16868,0.00759574},{18560,0.00450027},{20421,0.00449935},{22469,0.00387508},{24722,0.00296386},{27201,0.000225858},{29929,0.00644807},{32930,0.00534923},{36232,0.00472142},{39865,0.00281807},{43863,0.00313935},{48261,0.00274536},{53100,0.00187274},{58425,0.000112247},{64284,0.00435189},{70730,0.00375668}};
        discrepancyMU3 =
{{28,0.0908318},{31,0.142884},{34,0.142456},{37,0.116141},{41,0.115406},{45,0.115599},{50,0.104761},{55,0.0692415},{60,0.0549557},{66,0.0934172},{73,0.083668},{80,0.0657224},{88,0.0540106},{97,0.0519886},{107,0.0565238},{117,0.0480572},{129,0.0275489},{142,0.0591274},{156,0.0446966},{172,0.0445951},{189,0.0510143},{208,0.0375806},{229,0.0277239},{252,0.0234271},{277,0.0135519},{305,0.0392222},{335,0.0349783},{369,0.0282171},{406,0.0256727},{447,0.0244103},{492,0.0173983},{541,0.0153274},{595,0.00754813},{655,0.0225408},{720,0.0204656},{793,0.019274},{872,0.0162268},{959,0.0150046},{1056,0.0122442},{1162,0.0099706},{1278,0.00364641},{1406,0.0135458},{1547,0.0137074},{1702,0.0132313},{1873,0.0107658},{2061,0.00967195},{2267,0.00758944},{2495,0.00512662},{2745,0.00178475},{3020,0.00994701},{3323,0.00899127},{3656,0.00847527},{4023,0.00820637},{4426,0.00722153},{4870,0.0057379},{5359,0.00355459},{5896,0.000904654},{6487,0.00683176},{7138,0.00622563},{7853,0.00559404},{8641,0.00503763},{9507,0.00471199},{10461,0.00380581},{11510,0.00265076},{12664,0.000451742},{13934,0.00446041},{15331,0.00445172},{16868,0.00422119},{18560,0.00351718},{20421,0.0032648},{22469,0.00259009},{24722,0.00161626},{27201,0.000226318},{29929,0.00303041},{32930,0.00291765},{36232,0.00281943},{39865,0.00243079},{43863,0.00201976},{48261,0.00153648},{53100,0.00104881},{58425,0.000107978},{64284,0.00191429},{70730,0.00181279},{77822,0.00176479},{85626,0.00165007}};
        discrepancyWhiteNoise = {{16,0.465707},{17,0.388064},{19,0.459986},{21,0.367469},{23,0.385111},{25,0.295556},{27,0.354106},{29,0.300875},{32,0.316451},{35,0.288893}
        	,{38,0.260348},{41,0.275717},{45,0.24842},{49,0.23368},{54,0.202519},{59,0.202992},{64,0.219372},{70,0.196048},{76,0.18176},{83,0.201113},{91,0.197983},{99,0.166301}
        	,{108,0.168207},{117,0.149529},{128,0.174662},{140,0.133112},{152,0.127587},{166,0.142506},{181,0.12931},{197,0.13567},{215,0.130366},{235,0.119424},{256,0.10407}
        	,{279,0.112298},{304,0.117502},{332,0.104},{362,0.0898855},{395,0.0681871},{431,0.0938343},{470,0.0679398},{512,0.0843806},{558,0.0719844},{609,0.0768365},{664,0.0787819}
        	,{724,0.0717951},{790,0.0582582},{861,0.058998},{939,0.057316},{1024,0.0580998},{1117,0.0476743},{1218,0.0463373},{1328,0.0500041},{1448,0.0516404},{1579,0.0488674}
        	,{1722,0.0405864},{1878,0.0373453},{2048,0.036887},{2233,0.0407684},{2435,0.0340742},{2656,0.0313851},{2896,0.0309733},{3158,0.0352693},{3444,0.0289357},{3756,0.0311953}
        	,{4096,0.0298719},{4467,0.0292117},{4871,0.0286111},{5312,0.0232882},{5793,0.0273581},{6317,0.0227969},{6889,0.0188692},{7512,0.0186831},{8192,0.0172367},{8933,0.0156814}
        	,{9742,0.0185697},{10624,0.0159021},{11585,0.0165902},{12634,0.014361},{13777,0.0160662},{15024,0.0129219},{16384,0.0113947},{17867,0.0142724},{19484,0.0130386}
        	,{21247,0.0100723},{23170,0.013073},{25268,0.0121811},{27554,0.0126865},{30048,0.00949815},{32768,0.00827605},{35734,0.00900733},{38968,0.00803898},{42495,0.00787713}
        	,{46341,0.00845398},{50535,0.00689916},{55109,0.00728894},{60097,0.00678822},{65536,0.00715254},{71468,0.00661302},{77936,0.00698609},{84990,0.0056242},{92682,0.00614921}
        	,{101070,0.00504482},{110218,0.00492417},{120194,0.00606374},{131072,0.00402536},{142935,0.00531301},{155872,0.00406825},{169979,0.00446311},{185364,0.00367971}
        	,{202141,0.00423944},{220436,0.00363137},{240387,0.00335891},{262144,0.00327757},{285870,0.00360145},{311744,0.00335336},{339959,0.00299044},{370728,0.00247118}
        	,{404281,0.00255953},{440872,0.00283089},{480774,0.00280534},{524288,0.00221412},{571740,0.00235452},{623487,0.00220596},{679917,0.00210089},{741455,0.00211943}
        	,{808563,0.00187789},{881744,0.00190962},{961548,0.00164359},{1048576,0.00166338}}
        ;
         discrepancyStratified =Sort@{{16, 0.157912}, {25, 0.137432}, {36, 0.0912169}, {49, 0.0844069}, 
		 {64, 0.0804593}, {81, 0.078426}, {100, 0.0706013}, {121, 0.0584125}, 
		 {144, 0.0472011}, {169, 0.0554125}, {196, 0.0442846}, {225, 0.0322727}, 
		 {256, 0.0297792}, {289, 0.0273832}, {324, 0.0244251}, {361, 0.0245931}, 
		 {400, 0.023595}, {441, 0.0262007}, {484, 0.0212625}, {529, 0.0208267}, 
		 {576, 0.0225288}, {625, 0.0206137}, {676, 0.0167414}, {784, 0.019003}, 
		 {841, 0.0189115}, {900, 0.0136611}, {1024, 0.0111371}, {1089, 0.0125132}, 
		 {1156, 0.0129763}, {1296, 0.0122103}, {1444, 0.00903934}, {1521, 0.0109435}, 
		 {1681, 0.00819267}, {1849, 0.00840695}, {2025, 0.00860575}, 
		 {2209, 0.00726007}, {2401, 0.00786116}, {2601, 0.00649045}, 
		 {2809, 0.00628888}, {3136, 0.00577421}, {3364, 0.00577469}, 
		 {3721, 0.00536625}, {4096, 0.00464152}, {4356, 0.00454688}, 
		 {4761, 0.00464139}, {5184, 0.00444508}, {5776, 0.00391696}, 
		 {6241, 0.00351202}, {6889, 0.00359584}, {7396, 0.00353619}, 
		 {8100, 0.0034538}, {8836, 0.00305841}, {9604, 0.00269001}, 
		 {10609, 0.00281775}, {11449, 0.00252363}, {12544, 0.00226291}, 
		 {13689, 0.00224837}, {14884, 0.00228994}, {16384, 0.0019587}, 
		 {17689, 0.00187914}, {19321, 0.00168352}, {21025, 0.00184605}, 
		 {23104, 0.00178713}, {24964, 0.00145727}, {27225, 0.00139265}, 
		 {29929, 0.00135553}, {32761, 0.00115389}, {35721, 0.00121735}, 
		 {38809, 0.00110084}, {42436, 0.000940465}, {46225, 0.000854904}, 
		 {50176, 0.000923739}, {54756, 0.000823026}, {60025, 0.000763457}, 
		 {65536, 0.000720001}, {71289, 0.000691396}, {77841, 0.000609039}, 
		 {84681, 0.000636986}, {92416, 0.000504864}, {100489, 0.00054037}, 
		 {109561, 0.000508041}, {119716, 0.000512242}, {131044, 0.000492277}, 
		 {142884, 0.000436648}, {155236, 0.000410358}, {169744, 0.000354903}, 
		 {184900, 0.000367617}, {201601, 0.00041001}, {219961, 0.000327547}, 
		 {240100, 0.000301551}, {262144, 0.000303958}, {285156, 0.000257014}, 
		 {311364, 0.000231762}, {339889, 0.000241154}, {369664, 0.000215338}, 
		 {403225, 0.000198652}, {439569, 0.000195579}, {480249, 0.000190936}, 
		 {524176, 0.000163622}, {571536, 0.000162185}, {622521, 0.000137277}, 
		 {678976, 0.000141704}, {741321, 0.000138676}, {808201, 0.000121713}, 
		 {881721, 0.000117879}, {960400, 0.000118654} }; 
        discrepancyTabSobol = Sort@{ (* Sobol 2D Kuo's implementation http://web.maths.unsw.edu.au/~fkuo/sobol/ *)
        {16, 0.171875}, {18, 0.164931}, {20, 0.13125}, {21, 0.150298}, 
		 {23, 0.106318}, {25, 0.105}, {27, 0.0882523}, {30, 0.0690104}, 
		 {32, 0.0898438}, {35, 0.0880859}, {39, 0.0938502}, {42, 0.0902158}, 
		 {46, 0.0748981}, {50, 0.0744531}, {54, 0.0568576}, {59, 0.0460143}, 
		 {64, 0.0537109}, {70, 0.0488002}, {77, 0.0461311}, {83, 0.0471221}, 
		 {91, 0.0396152}, {99, 0.0469145}, {108, 0.0342882}, {118, 0.031639}, 
		 {128, 0.0251465}, {140, 0.0279403}, {153, 0.0330645}, {166, 0.0256623}, 
		 {182, 0.0215542}, {198, 0.0212032}, {216, 0.0215149}, {235, 0.0159236}, 
		 {256, 0.0145865}, {280, 0.0165697}, {305, 0.016271}, {332, 0.0142837}, 
		 {363, 0.0137116}, {395, 0.0124203}, {431, 0.01031}, {470, 0.00967041}, 
		 {512, 0.00840717}, {559, 0.0113431}, {609, 0.00919007}, {664, 0.00972256}, 
		 {725, 0.00853666}, {790, 0.00817986}, {862, 0.00579645}, {940, 0.00481335}, 
		 {1024, 0.00429869}, {1117, 0.00532756}, {1218, 0.0054369}, 
		 {1328, 0.00403969}, {1449, 0.00409411}, {1580, 0.00357261}, 
		 {1723, 0.00408891}, {1879, 0.00321273}, {2048, 0.00244783}, 
		 {2234, 0.00271899}, {2436, 0.00254465}, {2656, 0.00245601}, 
		 {2897, 0.00263177}, {3159, 0.00233313}, {3445, 0.00190401}, 
		 {3757, 0.00176822}, {4096, 0.00132906}, {4467, 0.00152441}, 
		 {4871, 0.00166753}, {5312, 0.00147807}, {5793, 0.00130338}, 
		 {6317, 0.00120296}, {6889, 0.00112552}, {7513, 0.00129263}, 
		 {8192, 0.000690815}, {8934, 0.000873438}, {9742, 0.000867572}, 
		 {10624, 0.000825984}, {11586, 0.000781609}, {12634, 0.000658344}, 
		 {13778, 0.000594917}, {15025, 0.000576783}, {16384, 0.00037303}, 
		 {17867, 0.000482112}, {19484, 0.000441908}, {21248, 0.000415188}, 
		 {23171, 0.000447637}, {25268, 0.000409131}, {27555, 0.00031017}, 
		 {30049, 0.000311846}, {32768, 0.000184114}, {35734, 0.000258252}, 
		 {38968, 0.000255033}, {42495, 0.000232537}, {46341, 0.000222176}, 
		 {50536, 0.000209905}, {55109, 0.000199195}, {60097, 0.000167325}, 
		 {65536, 0.0000992867}, {71468, 0.000144252}, {77936, 0.000123522}, 
		 {84990, 0.000131856}, {92682, 0.000114479}, {101071, 0.00011113}, 
		 {110218, 0.0000978768}, {120194, 0.000102486}, {131072, 0.000052728}, 
		 {142936, 0.0000795587}, {155872, 0.0000746982}, {169980, 0.000068755}, 
		 {185364, 0.0000695651}, {202141, 0.0000548182}, {220436, 0.0000524729}, 
		 {240388, 0.0000477785}, {262144, 0.0000278281}, {285871, 0.0000440788}, 
		 {311744, 0.0000400307}, {339959, 0.0000354368}, {370728, 0.0000330689}, 
		 {404282, 0.0000327887}, {440872, 0.0000306035}, {480775, 0.0000270392}, 
		 {524288, 0.0000140669}, {571741, 0.0000245037}, {623488, 0.000019496}, 
		 {679918, 0.0000181217}, {741456, 0.0000181108}, {808563, 0.0000170825}, 
		 {881744, 0.0000155596} };	 
        discrepancyHalton =
         {{16, 0.201389}, {18, 0.145833}, {20, 0.173843}, {21, 0.152447}, 
		 {23, 0.16405}, {25, 0.154907}, {27, 0.115741}, {30, 0.12037}, 
		 {32, 0.104167}, {35, 0.115608}, {39, 0.107817}, {42, 0.100033}, 
		 {46, 0.0893967}, {50, 0.0867363}, {54, 0.0659726}, {59, 0.0744668}, 
		 {64, 0.0520837}, {70, 0.062682}, {77, 0.0633115}, {83, 0.0577312}, 
		 {91, 0.0537767}, {99, 0.0468055}, {108, 0.0435959}, {118, 0.0456607}, 
		 {128, 0.0366518}, {140, 0.0368618}, {153, 0.0345546}, {166, 0.0343193}, 
		 {182, 0.0360932}, {198, 0.0286017}, {216, 0.0234376}, {235, 0.025857}, 
		 {256, 0.01876}, {280, 0.0197593}, {305, 0.0212157}, {332, 0.0198954}, 
		 {363, 0.0210892}, {395, 0.0176294}, {431, 0.0147806}, {470, 0.0141489}, 
		 {512, 0.0113251}, {559, 0.0126587}, {609, 0.0104757}, {664, 0.0107349}, 
		 {725, 0.0104316}, {790, 0.00927977}, {862, 0.00874465}, {940, 0.00784544}, 
		 {1024, 0.00683606}, {1117, 0.00776341}, {1218, 0.00545398}, 
		 {1328, 0.00641308}, {1449, 0.00517443}, {1580, 0.00564848}, 
		 {1723, 0.00472082}, {1879, 0.00498623}, {2048, 0.00367115}, 
		 {2234, 0.00376467}, {2436, 0.00312396}, {2656, 0.00287177}, 
		 {2897, 0.00313452}, {3159, 0.00288578}, {3445, 0.00286523}, 
		 {3757, 0.00259474}, {4096, 0.00186325}, {4467, 0.00226267}, 
		 {4871, 0.00188436}, {5312, 0.00177759}, {5793, 0.00160862}, 
		 {6317, 0.00144341}, {6889, 0.00135113}, {7513, 0.00139102}, 
		 {8192, 0.00100929}, {8934, 0.00122849}, {9742, 0.00118564}, 
		 {10624, 0.000984408}, {11586, 0.000911207}, {12634, 0.000821416}, 
		 {13778, 0.000790556}, {15025, 0.000805155}, {16384, 0.00060479}, 
		 {17867, 0.000707032}, {19484, 0.000535371}, {21248, 0.00056644}, 
		 {23171, 0.000519442}, {25268, 0.000501624}, {27555, 0.000492283}, 
		 {30049, 0.000463332}, {32768, 0.000322315}, {35734, 0.000355128}, 
		 {38968, 0.000288246}, {42495, 0.000321558}, {46341, 0.000260253}, 
		 {50536, 0.000235825}, {55109, 0.00023843}, {60097, 0.000242236}, 
		 {65536, 0.000165467}, {71468, 0.000190812}, {77936, 0.000165844}, 
		 {84990, 0.000153456}, {92682, 0.000156524}, {101071, 0.000139448}, 
		 {110218, 0.000127741}, {120194, 0.00011545}, {131072, 0.0000895647}, 
		 {142936, 0.0000988041}, {155872, 0.0000842346}, {169980, 0.0000843094}, 
		 {185364, 0.0000776017}, {202141, 0.0000838974}, {220436, 0.0000716507}, 
		 {240388, 0.0000632168}, {262144, 0.0000538457}, {285871, 0.0000582425}, 
		 {311744, 0.0000497959}, {339959, 0.000043315}, {370728, 0.0000412365}, 
		 {404282, 0.0000430598}, {440872, 0.0000430205}, {480775, 0.0000356195}, 
		 {524288, 0.0000246759}, {571741, 0.0000301574}, {623488, 0.0000246936}, 
		 {679918, 0.0000239648}, {741456, 0.0000236384}, {808563, 0.0000228835}, 
		 {881744, 0.0000202835}, {961549, 0.0000177657} };
		 
        discrepancyFPO = Sort@{{16, d}, {64, d}, {256, d}, {1024, d}, {4096, d}, {16384, d}, {65536, d}, 
        {262144, d}, {1048576, d}};
        discrepancyPoissonDisk = {{16,0.254057},{17,0.217436},{19,0.178637},{21,0.250993},{23,0.207181},{25,0.156788},{27,0.15776},{29,0.143027},{32,0.171422},{35,0.126244},{38,0.155469},{41,0.134209},{45,0.111403},{49,0.0996638},{54,0.123337},{59,0.103584},{64,0.0913973},{70,0.0915119},{76,0.0889608},{83,0.0808646},{91,0.0759505},{99,0.0723577},{108,0.0700123},{117,0.0700875},{128,0.0598974},{140,0.0584816},{152,0.0554977},{166,0.053549},{181,0.057699},{197,0.0488434},{215,0.045275},{235,0.042544},{256,0.0404024},{279,0.042832},{304,0.0315866},{332,0.0374635},{362,0.0299945},{395,0.0322271},{431,0.0297753},{470,0.0315412},{512,0.0322463},{558,0.0230183},{609,0.0237709},{664,0.0234203},{724,0.0194159},{790,0.0213933},{861,0.0195706},{939,0.0217901},{1024,0.020514},{1117,0.0167188},{1218,0.0161988},{1328,0.0152468},{1448,0.0130609},{1579,0.0119331},{1722,0.0192509},{1878,0.0111452},{2048,0.0121173},{2233,0.0113912},{2435,0.0106718},{2656,0.00983239},{2896,0.00991123},{3158,0.0088792},{3444,0.00959553},{3756,0.00900139},{4096,0.00897263},{4467,0.0074627},{4871,0.0077648},{5312,0.00669336},{5793,0.00630096},{6317,0.00638182},{6889,0.00739227},{7512,0.00538014},{8192,0.00579265},{8933,0.00574336},{9742,0.00469526},{10624,0.00521032},{11585,0.00559813},{12634,0.00451681},{13777,0.00429101},{15024,0.00350975},{16384,0.00404058},{17867,0.0043959},{19484,0.0038011},{21247,0.00381476},{23170,0.00362646},{25268,0.0030286},{27554,0.00310678},{30048,0.00266189},{32768,0.00287622},{35734,0.00260891},{38968,0.00227221},{42495,0.00195391},{46341,0.00224528},{50535,0.00198161},{55109,0.00227082},{60097,0.00224727},{65536,0.00152669},{71468,0.00167159},{77936,0.00167064},{84990,0.00141509},{92682,0.00150874},{101070,0.00185039},{110218,0.00127232},{120194,0.00135603},{131072,0.00125954},{142935,0.00110939},{155872,0.00113962},{169979,0.00114685},{185364,0.00117849},{202141,0.00101203},{220436,0.00109883},{240387,0.00112375},{262144,0.000839695},{285870,0.000750886},{311744,0.000784497},{339959,0.000762221},{370728,0.000623385},{404281,0.000810153},{440872,0.000628696},{480774,0.000564127},{571740,0.000707257},{623487,0.0006985},{679917,0.000626259},{741455,0.000454227},{808563,0.000514973},{881744,0.000422486},{961548,0.000406688},{1048576,0.000445725}}        ;
        discrepancyBNOT = Sort@{{100, 0.0475730366}, {200, 0.0278109149}, {2, 0.0278109149}, 
         {1000, 0.00982811914}, {2048, 0.00734707037}, {4096, 0.00360289798}, 
         {10000, 0.00264887797}, {100000, 0.00227561152}, {200000, 0.00161330407}, 
         {300000, 0.00133587581}};
        discrepancyCMJ = Sort@{
        {16, 0.125702845}, {64, 0.0445100149}, 
         {256, 0.0210656044}, {1024, 0.00655676413}, {4096, 0.00196644971}, 
         {16384, 0.000682649013}, {65536, 0.000327020385}, {262144, 0.000127795326},
         {32768, 0.000477686521}, {35734, 0.000540079884}, {38968, 0.00413222832}, 
         {42495, 0.00143681654}, {46341, 0.0025473752}, {50536, 0.0071929403}, 
         {55109, 0.00646953367}, {60097, 0.00124051691}, {65536, 0.000327020385}, 
         {71468, 0.00253774755}, {77936, 0.00125356996}, {84990, 0.00367361738}, 
         {92682, 0.00289614833}, {101071, 0.00579858446}, {110218, 0.00600086928}, 
         {120194, 0.00400828394}, {131072, 0.000249043833}, {142936, 0.00039118716}, 
         {155872, 0.00410697221}, {169980, 0.00140523428}, {185364, 0.00252276932}, 
         {202141, 0.0026921155}, {220436, 0.00216881255}, {240388, 0.00121196693}};
        discrepancyNROOKS = Sort@{
        {4096, 0.00305789209}, {4871, 0.0225977462}, {5793, 0.00394034708}, 
         {6889, 0.00189941196}, {8192, 0.0113540644}, {9742, 0.0142263796}, 
         {11586, 0.011883946}, {13778, 0.00657030478}, {16384, 0.00108374669}, 
         {19484, 0.00841803838}, {23171, 0.00299870679}, {27555, 0.011909777}, 
         {32768, 0.000764104157}, {38968, 0.00411820502}, {46341, 0.00254233051}, 
         {55109, 0.00640717672}, {65536, 0.000409610463}, {77936, 0.00126532263}, 
         {92682, 0.00288960751}, {110218, 0.00595245169}, {131072, 0.000332417051}, 
         {155872, 0.00408539736}, {185364, 0.00250810949}, {220436, 0.0021593175}, 
         {262144, 0.000155646316}, {311744, 0.00122783704},{16, 0.142233863}, {64, 0.0579094977}, {256, 0.017721039}, 
         {1024, 0.00874068078}, {4096, 0.00305789209}, {16384, 0.00108374669}, 
         {65536, 0.000409610463}, {262144, 0.000155646316}  };

		coef = 2;
        refpow05 = Table[
        	npts = Round[2^(i/8)];
        	val = coef npts^-.5;
        	{npts,val}
        ,{i,4*8, 20*8}];

		coef = .55;
        refpow10 = Table[
        	npts = Round[2^(i/8)];
        	val = coef (Log[npts]) npts^-1.0;
        	{npts,val}
        ,{i,4*8, 20*8}];
		k = .;
		pDiscrepancy = ListPlot[{
			Log[10,#]&  /@ refpow05,
			Log[10,#]&  /@ discrepancyWhiteNoise,
			Log[10,#]&  /@ discrepancyPoissonDisk, 
			Log[10,#]&  /@ discrepancyStratified, 
			Log[10,#]& /@ discrepancyHalton, 
			Log[10,#]& /@ discrepancyTabSobol,
			Log[10,#]&  /@ discrepancyMU3,
			Log[10,#]&  /@ refpow10
		}
			, PlotLegends ->  {
				Style[#,30]& @ (Subscript[k,1]  / N^Style["1/2",Italic]  ),
				Style[#,30]& @"WhiteNoise",
				Style[#,30]& @"PoissonDisk",
				Style[#,30]& @"Jitter",
				Style[#,30]& @"Halton",
				Style[#,30]& @"Sobol",
				Style[#,30]& @"Ours",
				Style[#,30]& @ (Subscript[k,2] Style["(Log N)",Italic]  / N^Style["1",Italic] )
				}
			,PlotRange->{{1,6.01},{-5,0}}
			,AspectRatio->.61
			,FrameLabel->{Style[ HoldForm@(Subscript[Log, 10] "(NSamples)"), 36],Style[ HoldForm@(Subscript[Log, 10] "(Discrepancy)"), 36] }
			,FrameStyle->Directive[Black,24]
			, RotateLabel -> True
			,Frame->True
			,ImageSize -> {Automatic,700}
			,PlotStyle->  {{Black,AbsoluteDashing[{10,5}]},Black,Orange,Green,Blue,Gray,Red,{Black,Dotted}}
			, Joined->True
			,PlotLabel->Style["log-log Discrepancy",Black,42]
			] 

] (*makeFigureDiscrepancy *)
makeFigureVariance[] :=
    Module[ {},
dataHalton = Sort@{{1024,4.72385 10^-09},{1116,4.27215 10^-09},{1217,3.86941 10^-09},{1327,3.51124 10^-09},{1448,3.04187 10^-09},{1579,2.61556 10^-09},{1722,2.17235 10^-09},{1878,2.00734 10^-09},{2047,1.79497 10^-09},{2233,1.59541 10^-09},{2435,1.40438 10^-09},{2655,1.29315 10^-09},{2896,1.16564 10^-09},{3158,1.0391 10^-09},{3444,8.59686 10^-10},{3756,7.73393 10^-10},{4095,6.91897 10^-10},{4466,5.98507 10^-10},{4870,5.30897 10^-10},{5311,4.6292 10^-10},{5792,4.27257 10^-10},{6316,3.67627 10^-10},{6888,3.04905 10^-10},{7512,2.75237 10^-10},{8191,2.68505 10^-10},{8933,2.31284 10^-10},{9741,2.08418 10^-10},{10623,1.89642 10^-10},{11585,1.58783 10^-10},{12633,1.3541 10^-10},{13777,1.20433 10^-10},{15024,1.07613 10^-10},{16383,9.08945 10^-11},{17866,8.16799 10^-11},{19483,7.71746 10^-11},{21247,6.74092 10^-11},{23170,5.91286 10^-11},{25267,5.50502 10^-11},{27554,4.43745 10^-11},{30048,4.04336 10^-11},{32767,3.57416 10^-11},{35733,3.19275 10^-11},{38967,2.84736 10^-11},{42494,2.55971 10^-11},{46340,2.15014 10^-11},{50535,1.88664 10^-11},{55108,1.60468 10^-11},{60096,1.51338 10^-11},{65535,1.41107 10^-11},{71467,1.18651 10^-11},{77935,1.06828 10^-11},{84989,9.29725 10^-12},{92681,8.17442 10^-12},{101070,7.62139 10^-12},{110217,6.33536 10^-12},{120193,5.88906 10^-12},{131071,5.33948 10^-12},{142935,4.47651 10^-12},{155871,3.76866 10^-12},{169979,3.41356 10^-12},{185363,2.8671 10^-12},{202140,2.43725 10^-12},{220435,2.22423 10^-12},{240387,2.09334 10^-12},{262143,1.83684 10^-12},{285870,1.65288 10^-12},{311743,1.3863 10^-12},{339958,1.21686 10^-12},{370727,1.00945 10^-12},{404281,8.95613 10^-13},{440871,8.04393 10^-13},{480774,7.42037 10^-13},{524287,6.32021 10^-13},{571740,5.53772 10^-13},{623487,4.86628 10^-13},{679917,4.40111 10^-13},{741455,3.63368 10^-13},{808562,3.30345 10^-13},{881743,2.81733 10^-13},{961548,2.51519 10^-13},{1048575,2.10966 10^-13},{16,7.20486 10^-07},{17,6.88192 10^-07},{19,5.7792 10^-07},{20,5.45614 10^-07},{22,5.12803 10^-07},{24,4.22121 10^-07},{26,3.556 10^-07},{29,3.31329 10^-07},{31,3.26676 10^-07},{34,3.08068 10^-07},{38,2.57035 10^-07},{41,2.26639 10^-07},{45,1.96226 10^-07},{49,1.87969 10^-07},{53,1.56591 10^-07},{58,1.43122 10^-07},{63,1.30483 10^-07},{69,1.13903 10^-07},{76,9.7556 10^-08},{82,8.38625 10^-08},{90,7.95865 10^-08},{98,7.41864 10^-08},{107,6.78932 10^-08},{117,5.89775 10^-08},{127,5.35736 10^-08},{139,5.0855 10^-08},{152,4.2893 10^-08},{165,3.85062 10^-08},{181,3.73423 10^-08},{197,3.47446 10^-08},{215,3.08397 10^-08},{234,2.64342 10^-08},{255,2.40767 10^-08},{279,2.22086 10^-08},{304,1.979 10^-08},{331,1.78382 10^-08},{362,1.61472 10^-08},{394,1.44618 10^-08},{430,1.2981 10^-08},{469,1.1633 10^-08},{511,1.08186 10^-08},{558,1.00823 10^-08},{608,8.91343 10^-09},{663,8.24493 10^-09},{724,7.00686 10^-09},{789,6.19174 10^-09},{861,5.53095 10^-09},{939,4.9288 10^-09}};
dataPoissonDisk = Sort@{{1132,4.42803 10^-09},{1101215,1.61619 10^-12},{12154,2.70173 10^-10},{2220,2.17297 10^-09},{24280,1.17645 10^-10},{275204,7.34787 10^-12},{4302,9.3741 10^-10},{48676,5.28339 10^-11},{550620,3.09186 10^-12},{97375,2.26802 10^-11},{141,6.01618 10^-08},{137716,1.57875 10^-11},{1583,3.16257 10^-09},{17201,1.72801 10^-10},{202,3.5618 10^-08},{27,4.84967 10^-07},{282,2.50907 10^-08},{3093,1.48901 10^-09},{34343,7.59261 10^-11},{37,3.3632 10^-07},{399,1.63136 10^-08},{389279,4.61436 10^-12},{50,2.15686 10^-07},{559,1.10575 10^-08},{70,1.29831 10^-07},{68885,3.53046 10^-11},{791,7.1636 10^-09},{778898,2.29125 10^-12},{8563,4.15955 10^-10},{100,9.19958 10^-08},{140,5.68744 10^-08},{17,7.70464 10^-07},{199,3.71319 10^-08},{23,5.47999 10^-07},{285,2.2691 10^-08},{30,3.35514 10^-07},{400,1.57873 10^-08},{47,2.29765 10^-07},{575,1.1019 10^-08},{73,1.28577 10^-07},{794,7.6395 10^-09},{98,8.26657 10^-08}};
dataStratified = Sort@{{100489,1.33207 10^-11},{1024,5.46568 10^-09},{1048576,4.09643 10^-13},{10609,3.07446 10^-10},{1024,5.90465 10^-09},{109561,1.22108 10^-11},{1089,5.12715 10^-09},{11449,2.47101 10^-10},{1156,4.58537 10^-09},{119716,1.08101 10^-11},{1156,4.79876 10^-09},{12544,2.22638 10^-10},{121,8.50605 10^-08},{131044,8.97484 10^-12},{1296,4.01628 10^-09},{13689,2.10383 10^-10},{142884,8.01294 10^-12},{1444,3.5758 10^-09},{14884,1.80158 10^-10},{155236,8.28032 10^-12},{1521,3.37064 10^-09},{16384,1.59472 10^-10},{169744,6.11956 10^-12},{1681,3.04771 10^-09},{17689,1.41766 10^-10},{169,5.16877 10^-08},{184900,5.46797 10^-12},{1849,2.75848 10^-09},{19321,1.32858 10^-10},{2025,2.52346 10^-09},{21025,1.17784 10^-10},{2209,1.99854 10^-09},{23104,9.89408 10^-11},{16,1.03434 10^-06},{2401,1.87707 10^-09},{24964,8.94696 10^-11},{256,3.2788 10^-08},{262144,3.49121 10^-12},{2601,1.83251 10^-09},{27225,8.62807 10^-11},{2809,1.55601 10^-09},{29929,6.64063 10^-11},{3136,1.3407 10^-09},{32761,6.64017 10^-11},{25,6.24817 10^-07},{3364,1.23034 10^-09},{35721,5.6998 10^-11},{361,2.25832 10^-08},{369664,2.06528 10^-12},{3721,1.15468 10^-09},{38809,4.73357 10^-11},{4096,9.99037 10^-10},{42436,4.96091 10^-11},{4356,8.68328 10^-10},{36,4.16572 10^-07},{46225,3.89677 10^-11},{4761,7.93342 10^-10},{50176,3.41295 10^-11},{484,1.45696 10^-08},{524176,1.21372 10^-12},{5184,7.19914 10^-10},{54756,2.98748 10^-11},{5776,6.41411 10^-10},{60025,2.62789 10^-11},{6241,5.69409 10^-10},{64,2.04752 10^-07},{65536,2.72894 10^-11},{6724,5.16109 10^-10},{71289,2.25353 10^-11},{676,1.00193 10^-08},{741321,7.02636 10^-13},{7396,4.55026 10^-10},{77841,1.88009 10^-11},{8100,4.05338 10^-10},{84681,1.52729 10^-11},{8836,3.55125 10^-10},{81,1.4406 10^-07},{92416,1.53745 10^-11},{9604,3.30923 10^-10},{169744,6.11956 10^-12},{201601,4.98642 10^-12},{219961,4.2477 10^-12},{240100,3.62304 10^-12},{285156,3.09032 10^-12},{311364,2.57272 10^-12},{339889,2.21519 10^-12},{403225,1.69748 10^-12},{439569,1.64525 10^-12},{480249,1.50136 10^-12},{571536,1.04911 10^-12},{622521,9.3861 10^-13},{678976,8.46255 10^-13},{808201,6.18509 10^-13},{881721,5.35332 10^-13},{960400,5.07743 10^-13},{100,1.02774 10^-07},{100,1.02774 10^-07},{121,8.88676 10^-08},{121,8.88676 10^-08},{144,7.22166 10^-08},{144,7.22166 10^-08},{16,1.06374 10^-06},{16,1.06374 10^-06},{169,5.9301 10^-08},{196,4.32657 10^-08},{16,1.06374 10^-06},{16,1.06374 10^-06},{196,4.32657 10^-08},{16,1.06374 10^-06},{225,3.96501 10^-08},{16,1.06374 10^-06},{225,3.96501 10^-08},{25,6.33913 10^-07},{256,3.23135 10^-08},{25,6.33913 10^-07},{289,2.74456 10^-08},{25,6.33913 10^-07},{324,2.40872 10^-08},{25,6.33913 10^-07},{361,2.11204 10^-08},{36,3.98131 10^-07},{361,2.11204 10^-08},{36,3.98131 10^-07},{400,1.78423 10^-08},{36,3.77407 10^-07},{441,1.64804 10^-08},{49,2.70263 10^-07},{484,1.516 10^-08},{49,2.70263 10^-07},{529,1.31287 10^-08},{49,2.70263 10^-07},{576,1.15331 10^-08},{49,2.70263 10^-07},{625,1.00337 10^-08},{64,1.86315 10^-07},{676,9.48307 10^-09},{64,1.86315 10^-07},{784,8.24101 10^-09},{81,1.37473 10^-07},{841,6.84963 10^-09},{81,1.37473 10^-07},{900,6.59047 10^-09},{81,1.37473 10^-07}};
dataWhiteNoise = Sort@{{16,1.7193*10^-6},{18,1.35627*10^-6},{20,1.23638*10^-6},{21,1.32549*10^-6},{23,1.18659*10^-6},{25,1.16495*10^-6},{27,1.00973*10^-6},{30,8.67355*10^-7},{32,8.26599*10^-7},{35,7.48765*10^-7},{39,6.75548*10^-7},{42,6.26428*10^-7},{46,6.02332*10^-7},{50,5.0882*10^-7},{54,4.96448*10^-7},{59,4.57956*10^-7},{64,4.02633*10^-7},{70,3.97721*10^-7},{77,3.4902*10^-7},{83,3.35143*10^-7},{91,2.97979*10^-7},{99,2.49178*10^-7},{108,2.48293*10^-7},{118,2.23731*10^-7},{128,2.05644*10^-7},{140,1.75915*10^-7},{153,1.5188*10^-7},{166,1.57781*10^-7},{182,1.49809*10^-7},{198,1.36422*10^-7},{216,1.28778*10^-7},{235,1.10534*10^-7},{256,1.00786*10^-7},{280,9.49554*10^-8},{305,8.50694*10^-8},{332,7.77829*10^-8},{363,7.21732*10^-8},{395,7.01618*10^-8},{431,6.60548*10^-8},{470,5.78097*10^-8},{512,5.10081*10^-8},{559,4.5815*10^-8},{609,4.43864*10^-8},{664,4.0423*10^-8},{725,3.50438*10^-8},{790,3.16265*10^-8},{862,2.88752*10^-8},{940,2.88863*10^-8},{1024,2.54333*10^-8},{1117,2.20736*10^-8},{1218,2.05536*10^-8},{1328,1.93848*10^-8},{1449,1.82202*10^-8},{1580,1.57731*10^-8},{1723,1.41618*10^-8},{1879,1.32657*10^-8},{2048,1.27468*10^-8},{2234,1.09096*10^-8},{2436,1.03001*10^-8},{2656,1.04143*10^-8},{2897,8.76415*10^-9},{3159,7.78102*10^-9},{3445,7.53579*10^-9},{3757,7.45128*10^-9},{4096,6.32514*10^-9},{4467,5.7765*10^-9},{4871,5.28301*10^-9},{5312,4.84325*10^-9},{5793,4.68123*10^-9},{6317,4.10083*10^-9},{6889,3.47955*10^-9},{7513,3.62186*10^-9},{8192,3.12469*10^-9},{8934,3.00087*10^-9},{9742,2.4388*10^-9},{10624,2.38313*10^-9},{11586,2.26888*10^-9},{12634,2.05813*10^-9},{13778,1.77089*10^-9},{15025,1.6666*10^-9},{16384,1.65269*10^-9},{17867,1.39241*10^-9},{19484,1.47051*10^-9},{21248,1.33488*10^-9},{23171,1.07161*10^-9},{25268,1.03775*10^-9},{27555,9.30388*10^-10},{30049,8.61146*10^-10},{32768,8.23482*10^-10},{35734,7.35069*10^-10},{38968,6.61457*10^-10},{42495,5.62971*10^-10},{46341,5.71546*10^-10},{50536,5.35012*10^-10},{55109,4.64418*10^-10},{60097,4.59199*10^-10},{65536,3.76845*10^-10},{71468,3.81441*10^-10},{77936,3.25968*10^-10},{84990,3.38257*10^-10},{92682,2.89534*10^-10},{101071,2.56916*10^-10},{110218,2.38981*10^-10},{120194,2.18685*10^-10},{131072,2.05472*10^-10},{142936,1.78017*10^-10},{155872,1.69618*10^-10},{169980,1.58666*10^-10},{185364,1.41492*10^-10},{202141,1.43011*10^-10},{220436,1.18106*10^-10},{240388,1.04849*10^-10},{262144,1.01201*10^-10},{285871,8.64106*10^-11},{311744,8.27402*10^-11},{339959,7.31802*10^-11},{370728,6.42812*10^-11},{404282,6.37195*10^-11},{440872,5.1776*10^-11},{480775,5.29356*10^-11},{524288,4.83283*10^-11},{571741,4.84771*10^-11},{623488,3.98174*10^-11},{679918,3.79206*10^-11},{741456,3.58682*10^-11},{808563,3.11122*10^-11},{881744,2.77218*10^-11},{961549,2.78232*10^-11},{1048576,2.42514*10^-11}};
dataMU4 = Sort@{{19,6.6695 10^-07},{36,3.19307 10^-07},{69,1.2575 10^-07},{131,5.38466 10^-08},{250,2.67361 10^-08},{476,1.13276 10^-08},{907,4.57458 10^-09},{1728,1.91524 10^-09},{3292,8.31386 10^-10},{6272,3.306 10^-10},{11949,1.39315 10^-10},{22765,5.59056 10^-11},{43371,2.18593 10^-11},{82629,8.29322 10^-12},{157422,3.3464 10^-12},{299915,1.26982 10^-12},{571388,4.90327 10^-13},{1088589,1.76056 10^-13}};
dataSobol = Sort@{{1024,3.56004 10^-09},{1116,3.339 10^-09},{1217,3.19021 10^-09},{1327,2.94467 10^-09},{1448,2.67144 10^-09},{1579,2.44837 10^-09},{1722,2.05721 10^-09},{1878,1.80771 10^-09},{2047,1.50228 10^-09},{2233,1.44813 10^-09},{2435,1.38139 10^-09},{2655,1.25928 10^-09},{2896,1.16321 10^-09},{3158,1.04833 10^-09},{3444,9.54614 10^-10},{3756,8.26515 10^-10},{4095,7.16388 10^-10},{4466,6.6807 10^-10},{4870,6.074 10^-10},{5311,5.36525 10^-10},{5792,4.79298 10^-10},{6316,3.94465 10^-10},{6888,3.51076 10^-10},{7512,3.06983 10^-10},{8191,2.45929 10^-10},{8933,2.45562 10^-10},{9741,2.19182 10^-10},{10623,2.07404 10^-10},{11585,1.81118 10^-10},{12633,1.52996 10^-10},{13777,1.376 10^-10},{15024,1.14549 10^-10},{16383,9.27436 10^-11},{17866,8.83543 10^-11},{19483,8.20665 10^-11},{21247,7.22391 10^-11},{23170,6.48565 10^-11},{25267,5.36817 10^-11},{27554,5.11895 10^-11},{30048,4.27405 10^-11},{32767,3.37584 10^-11},{35733,3.44688 10^-11},{38967,3.06648 10^-11},{42494,2.63997 10^-11},{46340,2.3704 10^-11},{50535,1.86593 10^-11},{55108,1.67864 10^-11},{60096,1.38803 10^-11},{65535,1.04489 10^-11},{71467,1.16609 10^-11},{77935,1.06677 10^-11},{84989,9.94014 10^-12},{92681,9.01025 10^-12},{101070,7.94047 10^-12},{110217,7.44086 10^-12},{120193,6.13505 10^-12},{131071,4.35447 10^-12},{142935,4.65055 10^-12},{155871,4.30226 10^-12},{169979,3.66693 10^-12},{185363,3.15327 10^-12},{202140,2.53427 10^-12},{220435,2.26764 10^-12},{240387,2.00054 10^-12},{262143,1.42313 10^-12},{285870,1.62431 10^-12},{311743,1.41732 10^-12},{339958,1.25047 10^-12},{370727,1.1304 10^-12},{404281,9.48631 10^-13},{440871,8.30693 10^-13},{480774,7.37677 10^-13},{524287,5.0552 10^-13},{571740,5.2391 10^-13},{623487,5.01641 10^-13},{679917,4.586 10^-13},{741455,3.7654 10^-13},{808562,3.14803 10^-13},{881743,2.79445 10^-13},{961548,2.29086 10^-13},{1048575,1.4263 10^-13},{16,1.01755 10^-06},{17,9.14168 10^-07},{19,7.68306 10^-07},{20,7.33917 10^-07},{22,6.54947 10^-07},{24,5.74232 10^-07},{26,4.88302 10^-07},{29,3.65212 10^-07},{31,3.37464 10^-07},{34,2.94991 10^-07},{38,2.82964 10^-07},{41,2.57731 10^-07},{45,2.21423 10^-07},{49,1.87419 10^-07},{53,1.60332 10^-07},{58,1.44247 10^-07},{63,1.22972 10^-07},{69,1.2145 10^-07},{76,1.17738 10^-07},{82,1.03922 10^-07},{90,9.66756 10^-08},{98,8.54212 10^-08},{107,7.10619 10^-08},{117,6.65298 10^-08},{127,5.42737 10^-08},{139,5.33481 10^-08},{152,4.76259 10^-08},{165,4.26719 10^-08},{181,3.5386 10^-08},{197,3.29381 10^-08},{215,2.98715 10^-08},{234,2.53999 10^-08},{255,2.19114 10^-08},{279,2.21545 10^-08},{304,2.05738 10^-08},{331,1.81759 10^-08},{362,1.80693 10^-08},{394,1.5217 10^-08},{430,1.42257 10^-08},{469,1.19236 10^-08},{511,1.02019 10^-08},{558,9.46088 10^-09},{608,8.54402 10^-09},{663,7.75269 10^-09},{724,6.78136 10^-09},{789,5.98074 10^-09},{861,5.40531 10^-09},{939,4.47351 10^-09}};

		coef = .00003;
        refpow10 = Table[
        	npts = Round[2^(i/8)];
        	val = coef npts^-1.0;
        	{npts,val}
        ,{i,4*8, 20*8}];

		coef = .00017;
		coef = .000015;
        refpow15 = Table[
        	npts = Round[2^(i/8)];
        	val = coef  (Log[npts])  npts^-1.5;
        	{npts,val}
        ,{i,4*8, 20*8}];

		pVariance = ListPlot[{
			Log[10,#]&  /@ refpow10,
			Log[10,#]&  /@ dataWhiteNoise,
			Log[10,#]&  /@ dataPoissonDisk, 
			Log[10,#]&  /@ dataStratified, 
			Log[10,#]& /@ dataHalton, 
			Log[10,#]& /@ dataSobol, 
			Log[10,#]&  /@ dataMU4,
			Log[10,#]&  /@ refpow15
		}
			, PlotLegends ->  {
				Style[#,30]& @ (Subscript[k,3]  / N^Style["1",Italic]  ),
				Style[#,30]& @"WhiteNoise",
				Style[#,30]& @"PoissonDisk",
				Style[#,30]& @"Jitter",
				Style[#,30]& @"Halton",
				Style[#,30]& @"Sobol",
				Style[#,30]& @"Ours",
				Style[#,30]& @ (Subscript[k,4] Style["(Log N)",Italic] / N^Style["3/2",Italic]  )
				}
			,PlotRange->{{1,6.01},{-13,-6}}
			,AspectRatio->.61
			,FrameLabel->{Style[ HoldForm@(Subscript[Log, 10] "(NSamples)"), 36],Style[ HoldForm@(Subscript[Log, 10] "(Variance)"), 36] }
			,RotateLabel -> True
			,FrameStyle->Directive[Black,24]
			,ImageSize -> {Automatic,700}
			,Frame->True
			,PlotStyle->  {{Black,AbsoluteDashing[{10,5}]},Black,Orange,Green,Blue,Gray,Red,{Black,Dotted}}
			, Joined->True
			,PlotLabel->Style["log-log Variance",Black,42]
			] 

] (*makeFigureVariance *)


makeRefDiscrepancy[method_:1] :=
    Module[ {},
        Switch[method        
	        ,1, basename = "pointsets_MU4";
			,2, basename = "pointsets_sampler_cmj_m1-b";
			,3, basename = "pointsets_sampler_nrooks-m1-b";
			,4, basename = "pointsets_stk-sampler-haltonT2-m1-b";
			,5, basename = "pointsets_stk-sampler-poissondiskT2-m1-b";
			,6, basename = "pointsets_stk-sampler-sobolT2-m1-b";
			,7, basename = "pointsets_stk-sampler-stratifiedT2-m1-b";
			,8, basename = "pointsets_stk-sampler-whitenoiseT2-m1-b";
	        ,9, basename = "pointsets_BNOT";
        ];
        fname = "data/list_"<>basename<>".txt";
        Print["Reading ",fname];
        data = Import[fname,"Data"];
        flst = First /@ data;

        discrepancyTab = Table[{0, 0}, {Length[flst]}];
        
        Do[
        	fname = "data/"<>basename<>"/"<>ToString[flst[[i]]];
        	pts = Complement[Import[fname],{{}}];
        	Print["Reading ",fname];
            discrepancy = getDiscrepancy2Dexact[pts];
            discrepancyTab[[i]] = { Length[pts], discrepancy};
            Print[discrepancyTab];
       		Put[discrepancyTab,"results/discrepancy_"<>basename<>".dat"];
        ,{i,Length[flst]}];
    ] (* makeRefDiscrepancy *)

makeRefDiscrepancyPoisson[nset_:0] :=
    Module[ {},
		basename = "poisson_"<>ToString[nset];
        fname = "data/pointsets_poisson/list_"<>basename<>".txt";
        Print["Reading ",fname];
        data = Import[fname,"Data"];
        flst = First /@ data;

        discrepancyTab = Table[{0, 0}, {Length[flst]}];
        
        Do[
        	fname = "data/pointsets_poisson/"<>basename<>"/"<>ToString[flst[[i]]];
        	pts = Complement[Import[fname],{{}}];
        	Print["Reading ",fname];
            discrepancy = getDiscrepancy2Dexact[pts];
            discrepancyTab[[i]] = { Length[pts], discrepancy};
            Print[discrepancyTab];
       		Put[discrepancyTab,"results/discrepancy_"<>basename<>".dat"];
        ,{i,Length[flst]}];
    ] (* makeRefDiscrepancyPoisson *)

makeRefDiscrepancyWhiteNoise[nset_:0] :=
    Module[ {},
		basename = "WhiteNoise_"<>ToString[nset];

        discrepancyTab = Table[{0, 0}, {129}];
        count = 1;
        Do[
        	npts = Round[2^(i/8)];
        	Print[" makeRefDiscrepancyWhiteNoise: ",i -> count -> npts];
        	pts = Table[{RandomReal[],RandomReal[]},{npts}];
            discrepancy = getDiscrepancy2Dexact[pts];
            discrepancyTab[[count]] = { Length[pts], discrepancy};
            Print[discrepancyTab];
       		Put[discrepancyTab,"results/discrepancy_"<>basename<>".dat"];
       		count++;
        ,{i,4*8, 20*8}];
    ] (* makeRefDiscrepancyPoisson *)


getFig1Dgl[wordsDir_] :=
    Module[ {gl,h = .01, level, col, wordDir},
        level = Length[wordsDir[[1]] ] - 2;
        gl = {};
        mycolors = {Darker@Darker@Gray,Darker@Blue,Darker@Darker@Green,Darker@Darker@Darker@Orange};
        
        wordsInv = (Reverse/@wordsDir );
        intValueDir = getIntValueDir/@wordsDir;
        fracValueDir = getFracValueDir/@wordsDir;
        intValueInv = getIntValueInv/@wordsInv;
        fracValueInv = getFracValueInv/@wordsInv;
        Table[
            wordDir = wordsDir[[i]];
            type = Last@wordDir;
            col = mycolors[[type]];
            start = fracValueDir[[i]] lambda^2;
            stop = start + evecDir[[type]] lambda^(-level+2);
            center = (start+stop)/2;
            Print[(i-1) -> (evecDir[[type]] lambda^(-level)) -> (mf @ {Table[(-i),{i,12}],Table[lambda^(-i),{i,12}]}) -> start];
            AppendTo[gl,{
                {col,Rectangle[{start,-h},{stop,h}]},{Black,Thickness[.003],Line[{{start,-h},{start,h},{stop,h},{stop,-h},{start,-h}}]}
                (*,Text[getIntValueInv@(Reverse@wordDir),{center,0},{0,-1}],Text[{{intValueDir[[i]],intValueInv[[i]]}}//T,{center,0},{0,1}]*)
            }]
        ,{i,Length[wordsDir]}];
        gl
    ] (* getFig1Dgl *)

MU4makeFigureDweRuKiTu1d[nlevels_:8] :=
    Module[ {},
        mxsz = 4;
        orderTabLength = 1;
        myRandomSampleDir = Identity;
        myRandomSampleInv = Identity;  (* RandomSample or randomSampleButFirst or Identity *)
        fouriertabsz =  64 1024;
        imagesize = {2 1024,Automatic};
        labelDweRuKi = "mx4233";
                mx = mx4233;
                mx = {{1,1,0,0},{0,0,1,0},{0,0,0,1},{1,0,0,0}};

             init[mx,False, True];

        Print["orderDir:",mf@orderDir];
        Print["orderInv:",mf@orderInv];
        wordsDir = {{1},{2},{3},{4}};
        wordsDir = {{1}};
        (*tiles = { {{1},{0,1}} };*)
        gtab = Table[
            gl = getAALDS1dGL[wordsDir];
            gl = getFig1Dgl[wordsDir];
            g = Graphics[{gl}, ImageSize -> imagesize, AspectRatio->.025, PlotRange->{{-.01,1.01},Automatic}, Axes->False];
            (*tiles = Flatten[#, 2] &@{AALDS1dSubdivideTile /@ tiles};*)
            wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir}; 
            Print[ wordsDir ];
            g//Print;      
            g
        ,{ilevel,nlevels}];
        res = GraphicsColumn[gtab[[2;;]] ];
        res//Print;
        Export["prep-figs/fig-dwe-ru-ki-tu-1d.png",res];
    ] (* MU4makeFigureDweRuKiTu1d *)


MU4recursiveSubdivSimple[level_:1,x0_:a,y0_:a] :=
    Module[ {subdivTiles,prevlevelPattern, xSubtilePrefix,ySubtilePrefix },
        If[ level == 1, Return [{ {{},{}} }] (*Return@MU4getRandomGoodPattern[x0,y0]*) ];
        subdivTiles = (Tuples@{MU4getCodes1d[1, a], MU4getCodes1d[1, a]})[[{1,2,3,4}]]; (*[[{1, 4, 2, 3}]];*)
        MU4getActiveCodes @ (Flatten[#,1]& @ Table[ {{xSubtilePrefix},{ySubtilePrefix}} = subdivTiles[[isubtile]];
            prevlevelPattern = MU4recursiveSubdivSimple[level-1,xSubtilePrefix,ySubtilePrefix];
            {Join[{xSubtilePrefix},#[[1]],{ySubtilePrefix}], Join[{ySubtilePrefix},#[[2]],{xSubtilePrefix}]} & /@ ((*Reverse@*)prevlevelPattern)
        ,{isubtile,Length[subdivTiles]}])
    ] (* MU4recursiveSubdiv *)

    
zzzMU4pmkFigureProduction[innlevels_:5] :=
    Module[ {},
        dbg = False;
        mxsz = 2;
        base = mxsz;
        baselog = Log[2,base];
        nlevels = innlevels;
            MU4goodPatterns = Table[{},{4},{4}];
            MU4goodPatterns[[1,1]] = { {{{a},{a}}} };
            MU4goodPatterns[[1,2]] = { {{{a},{b}}} };
            MU4goodPatterns[[1,3]] = { {{{a},{c}}} };
            MU4goodPatterns[[1,4]] = { {{{a},{d}}} };
            MU4goodPatterns[[2,1]] = { {{{b},{a}}} };
            MU4goodPatterns[[2,2]] = { {{{b},{b}}} };
            MU4goodPatterns[[2,3]] = { {{{b},{c}}} };
            MU4goodPatterns[[2,4]] = { {{{b},{d}}} };
            MU4goodPatterns[[3,1]] = { {{{c},{a}}} };
            MU4goodPatterns[[3,2]] = { {{{c},{b}}} };
            MU4goodPatterns[[3,3]] = { {{{c},{c}}} };
            MU4goodPatterns[[3,4]] = { {{{c},{d}}} };
            MU4goodPatterns[[4,1]] = { {{{d},{a}}} };
            MU4goodPatterns[[4,2]] = { {{{d},{b}}} };
            MU4goodPatterns[[4,3]] = { {{{d},{c}}} };
            MU4goodPatterns[[4,4]] = { {{{d},{d}}} };
        Do[
            codes = MU4recursiveSubdivSimple[ilevel];
            hlen = If[Length[codes[[1]]] == 0, 0, Length[codes[[1,1]]]/2 ];
            If[hlen > 0,
	            codes = Last /@ (Sort @ Table[
	            	{Reverse@Table[Switch[{codes[[i,2,j]],codes[[i,1,j]]}//MU4symbols2binCode,{0,0},0,{1,1},1,{0,1},2,{1,0},3] ,{j,hlen}], codes[[i]]}
	            ,{i,Length[codes]}])  ;
            ];
            
            ptsXY = MU4PhiXY /@ codes;
                    g = Graphics[{{ MU4getGrid4Figures[ilevel, a,a ]} 
                            ,PointSize[.01],Point/@ ptsXY
                            ,Table[
                            	(*ordercode = Reverse@If[hlen == 0, {}, Join[Reverse@codes[[i,1,;;hlen]],Reverse@codes[[i,1,hlen+1;;]]] ];*)
                            	Text[Style[ i-1  ,14],ptsXY[[i]],{-1,-1}]
                            ,{i,Length[ptsXY]}]
                            (*,Table[Text[Style[ MU4symbols2binCode@codes[[i]],10],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]*)
                        } 
                        ,PlotLabel->Style["Ranking",24]
                        ,ImageSize -> {300,300}  2 ];
                    g//Print;
                    Export["prep-figs/Fig-ranking"<>ToString[ilevel]<>".png",g];
        ,{ilevel,1,nlevels}];
        
     ] (*MU4pmkFigureProduction *)

     
MU4pmkFigureProduction[] :=
    Module[ {},
        dbg = False;
        mxsz = 2;
        base = mxsz;
        baselog = Log[2,base];
        nlevels = innlevels;
        gridThickness = .005;
 			gtab = Table[
            {xcode,ycode} = {a,a};
            codes = MU4recursiveSubdivSIMPLEST[ilevel];
            ptsXY = MU4PhiXY /@ codes;
            		lbl = Switch[ilevel,1,"Initial aa-tile",2,"1 Subdivision",_,ToString[ilevel-1]<>" Subdivisions"];
                    g = Graphics[{{ MU4getGrid4Figures[ilevel, xcode,ycode,True ] } 
                          } 
                          (*,PlotRange->{{-.2,1.2},{-.2,1.2}}*)
                          ,PlotLabel->Style[lbl, 48]
                        ,ImageSize -> {300,300}  2 ];
                    g//Print;
                    g
             ,{ilevel,10}];
             grid = GraphicsGrid@(Partition[gtab[[;;6]],3]);
             grid//Print;
             Export["prep-figs/fig-subdivisions.pdf",grid];

        
     ] (*MU4pmkFigureProduction *)

MU4getGrid4Figures[nlevels_:2,xType_:a,yType_:a,showSymbols_:False,gridStyle_:{Blue,AbsoluteThickness[3]}, showFrame_:True, frameStyle_:{Magenta,AbsoluteThickness[12]} ] :=
    Module[ {hlevels, gl ,txtcoltab,xSymbols,ySymbols,xvaluesFracDir,yvaluesFracDir,xmax,ymax,xind,yind},
        txtcoltab = {Red, Red,Red, Red,Red, Red,Red, Red};
        {xind,yind} = {Switch[xType,a,1,b,4,c,3,d,2],Switch[yType,a,1,b,4,c,3,d,2]};
        {xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
        gl = gridStyle;
        Do[
            gl = Join[gl,{{ Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] } }];
            xSymbols = MU4getCodes1d[ilevel-1,xType];
            ySymbols = MU4getCodes1d[ilevel-1,yType];
            xvaluesFracDir = MU4Phi /@ xSymbols;
            yvaluesFracDir = MU4Phi /@ ySymbols;
            AppendTo[xvaluesFracDir,1.];
            AppendTo[yvaluesFracDir,1.];
            Do[AppendTo[gl, { Line[{{xvaluesFracDir[[i]],0},{xvaluesFracDir[[i]],ymax}}]}],{i,Length[xSymbols]}];
            Do[AppendTo[gl, { Line[{{0,yvaluesFracDir[[i]]},{xmax,yvaluesFracDir[[i]]}}]}],{i,Length[ySymbols]}];
        ,{ilevel,1,nlevels}];
        If[showFrame,
        	gl = Join[gl, frameStyle];
        	AppendTo[gl,Line[{{0,0},{xmax,0},{xmax,ymax},{0,ymax},{0,0}}] ];
        ];
        hlevels = Floor[nlevels/2];
        If[ showSymbols,
        	If[xSymbols == {{}}, xSymbols = {{xType}}];
        	If[ySymbols == {{}}, ySymbols = {{yType}}];
        	AppendTo[gl, {Black,
        			Table[ Text[Style[#,36]& @ (Last@xSymbols[[ix]]), {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2.,-.02},{0,1}] , {ix,Length[xSymbols]}] ,
        			Table[ Text[Style[Rotate[#,Pi/2],36]& @ (Last@ySymbols[[iy]]), {-.02, (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{1,0}] , {iy,Length[ySymbols]}] 
        	}];
        ];
        gl
    ] (* MU4getGrid4Figures*)

MU4pmkFigurePopulatingL0[] :=
    Module[ {},
    	myRandomChoice := First;
        basename = "goodFIBOLen8Patterns";

		lenindtab = {0,3,2,1};
        patternsLevel = 0;
        MU4goodPatterns = Table[{},{4},{4}];
        Table[
            fname = "data/MU4_L"<>ToString[patternsLevel]<>"/MU4_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU4goodPatterns[[ix,iy]] = Get[fname];
            Print["Reading ",fname -> Length[MU4goodPatterns[[ix,iy]]]];
        ,{iy,4},{ix,4}];
        
        gtab = Table[
        	{xType,yType} =  MU4index2symbols/@{ix,iy};
			{xind,yind} = {Switch[xType,a,1,b,4,c,3,d,2],Switch[yType,a,1,b,4,c,3,d,2]};
    	    {xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
            codes = MU4recursiveSubdiv[1, xType,yType];
			ptsXY = MU4PhiXY /@ codes;
			{ddx,ddy} = {lenindtab[[ix]], lenindtab[[iy]]};
			Print[{ix,iy} -> {ddx,ddy}];
            g = Graphics[{
            		MU4getGridAxesSeparateSubdiv[1,1,xType,yType,True,{Magenta,AbsoluteThickness[5]},True,{Cyan,AbsoluteThickness[2]},False]
            		,MU4getGridAxesSeparateSubdiv[4-ddy,4-ddx,xType,yType,True,{Magenta,AbsoluteThickness[5]},False,{Cyan,AbsoluteThickness[2]},False]
            		,Text[Style["Tile_"<>ToString[xType]<>ToString[yType],Bold,30], {0, ymax+.01},{-1,-1}]
                    ,AbsolutePointSize[15],Point/@ ptsXY
                    ,Table[Text[Style[codes[[j]],14],ptsXY[[j]],{-1,-1}],{j,Length[ptsXY]}]
                } 
                (*,PlotLabel->Style["Tile_"<>ToString[xType]<>ToString[yType],Bold,30]*)
                (*,Frame->True
                ,FrameStyle->White
                ,FrameTicks->None
                ,FrameLabel->{Style[ xType, 36,Black],Style[ yType (*Rotate[yType,-Pi/2]*), 36,Black] }*)
                ,PlotRange->If[iy==1,{{-.13,1+.01},{-.18,1.15}},{{-.13,1+.01},{-.18,1+.01}}]
                ,ImageSize -> 1/4 {1200,1200}   ];
 			g
        ,{iy,4},{ix,4}];
        gg = GraphicsGrid[gtab];
        Print[gg];
        Export["prep-figs/fig-populating1.pdf",gg];
	]
 
 MU4pmkFigurePopulatingL0AllTiles[] :=
    Module[ {},
    	myRandomChoice := First;
        basename = "goodFIBOLen8Patterns";

		lenindtab = {0,3,2,1};

        patternsLevel = 0;
        MU4goodPatterns = Table[{},{4},{4}];
        Table[
            fname = "data/MU4_L"<>ToString[patternsLevel]<>"/MU4_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU4goodPatterns[[ix,iy]] = Get[fname];
            Print["Reading ",fname -> Length[MU4goodPatterns[[ix,iy]]]];
        ,{iy,4},{ix,4}];
        
        Do[
        	{xType,yType} =  MU4index2symbols/@{ix,iy};
        	gtab = Partition[#,Min[4,Length[MU4goodPatterns[[ix,iy]]] ] ]& @ Table[
	            codes = MU4goodPatterns[[ix,iy,iTile]];
				ptsXY = MU4PhiXY /@ codes;
				{ddx,ddy} = {lenindtab[[ix]], lenindtab[[iy]]};
	            g = Graphics[{{ MU4getGridAxesSeparateSubdiv[4-ddy,4-ddx,xType,yType]} 
	                    ,AbsolutePointSize[15],Point/@ ptsXY
	                    ,Table[Text[Style[codes[[j]],14],ptsXY[[j]],{-1,-1}],{j,Length[ptsXY]}]
	                } 
	                ,PlotLabel->Style["Tile_"<>ToString[xType]<>ToString[yType]<>"_"<>ToString[iTile],Bold,30]
	                ,Frame->True
	                ,FrameStyle->White
	                ,FrameTicks->None
	                ,FrameLabel->{Style[ xType, 36,Black],Style[ yType (*Rotate[yType,-Pi/2]*), 36,Black] }
	                ,ImageSize -> 1/4 {1200,1200}   ];
	 			g
	 		,{iTile,Length[MU4goodPatterns[[ix,iy]] ]}];
	        gg = GraphicsGrid[gtab];
	        Print[gg];
	        Export["prep-figs/fig-populating_all_"<>ToString[xType]<>ToString[yType]<>".pdf",gg];
        ,{iy,4},{ix,4}];
	]


MU4getSubdivGrid[nlevels_:2,xType_:a,yType_:a,showSymbols_:True] :=
    Module[ {hlevels,symbols1,symbols2,gl = {},coltab,txtcoltab,xSymbols,ySymbols,xvaluesFracDir,yvaluesFracDir,xmax,ymax,xind,yind},
        txtcoltab = {Red, Red,Red, Red,Red, Red,Red, Red};
        coltab = {Blue, Blue, Lighter@Orange, Black,Red,Blue, Black,Red,Red, Black,Red,Blue, Black,Green,Cyan};
        {xind,yind} = {Switch[xType,a,1,b,4,c,3,d,2],Switch[yType,a,1,b,4,c,3,d,2]};
        {xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[.02(*/lambdaMU4^(ilevel )*)],{Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] }}];
            xSymbols = If[ xType===a,
                           MU4getCodes1d[ilevel,xType],
                           (Drop[#, If[ xType===d,
                                        2,
                                        1
                                    ]] & /@ MU4getCodes1d[ilevel,xType])
                       ];
            ySymbols = If[ yType===a,
                           MU4getCodes1d[ilevel,yType],
                           (Drop[#, If[ yType===d,
                                        2,
                                        1
                                    ]] & /@ MU4getCodes1d[ilevel,yType])
                       ];
            xvaluesFracDir = MU4Phi /@ xSymbols;
            yvaluesFracDir = MU4Phi /@ ySymbols;
            Do[AppendTo[gl, {Line[{{xvaluesFracDir[[i]],0},{xvaluesFracDir[[i]],ymax}}]}],{i,Length[xSymbols]}];
            Do[AppendTo[gl, {Line[{{0,yvaluesFracDir[[i]]},{xmax,yvaluesFracDir[[i]]}}]}],{i,Length[ySymbols]}];
        ,{ilevel,1,nlevels}];
        gl
    ] (* MU4getSubdivGrid*)

MU4pmkFigureSubdivision[] :=
    Module[ {},
    	myRandomChoice := First;
        basename = "goodFIBOLen8Patterns";

		lenindtab = {0,3,2,1};

        patternsLevel = 0;
        MU4goodPatterns = Table[{},{4},{4}];
        Table[
            fname = "data/MU4_L"<>ToString[patternsLevel]<>"/MU4_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU4goodPatterns[[ix,iy]] = Get[fname];
            Print["Reading ",fname -> Length[MU4goodPatterns[[ix,iy]]]];
        ,{iy,4},{ix,4}];
        
        gtab = Table[
        	{xType,yType} =  {a,a};
        	{ix,iy} = {1,1};
            codes = MU4recursiveSubdiv[iSubdiv, xType,yType];
			ptsXY = MU4PhiXY /@ codes;
			Print[{ix,iy} -> {ddx,ddy}];
			lbl = Switch[iSubdiv,1,"Initial aa-tile         ",2,"1 Subdivision        ",_,ToString[iSubdiv-1]<>" Subdivisions        "];
            g = Graphics[{{ 	
            			MU4getSubdivGrid[iSubdiv-1,xType,yType]
            			,MU4getGridAxesSeparateSubdiv[2+2 iSubdiv,2+2 iSubdiv,xType,yType,True, {Magenta,AbsoluteThickness[12]} ]
            		} 
                    ,AbsolutePointSize[20],Point/@ ptsXY
                    ,Table[Text[Style[codes[[j]],16],ptsXY[[j]],{-1,-1}],{j,Length[ptsXY]}]
                } 
                ,Frame->True
                ,FrameTicks->None
                ,FrameStyle->White
                ,FrameLabel->Switch[iSubdiv
                	,1, {Style[ "a       ", 40,Black,Italic],Style[ yType (*Rotate[yType,-Pi/2]*), 40,Black,Italic] }
                	,2, {Style[ "    a              b   ", 40,Black,Italic],Style[ "        a                 b " (*Rotate[yType,-Pi/2]*), 40,Black,Italic] }
                	,3, {Style[ "a             b        c    ", 40,Black,Italic],Style[  "    a             b       c" (*Rotate[yType,-Pi/2]*), 40,Black,Italic] }
                ]
                (*,PlotRange->{{-eps,1+eps},{-eps,1+eps}}*)
                ,PlotRange ->{{-.02,1.272},{-.02,1.05}} 
                ,PlotLabel->Style[lbl,Bold,40]
                ,ImageSize -> 1/2 {1200,1200}   ];
                g//Print;
 			g
        ,{iSubdiv,3}];
        gg = GraphicsRow[gtab];
        Print[gg];
        Export["prep-figs/fig-2subdivs.pdf",gg];
	] (* MU4pmkFigureSubdivision *)

       
normaMatrixQ[mx_] := ConjugateTranspose[mx].mx == mx.ConjugateTranspose[mx]
 
mxPowerClosedForm[mx_,x_]:=
	(* this algorithm is based on the fillowing property (spectral theorem)
	m^x == v.d^x.MatrixPower[v,-1]
	m == v.d.Inverse[v] or m == v.d.vinv
	where 
		m = mx
		v = Transpose[Eigenvectors[m]]
		d = DiagonalMatrix[Eigenvalues[m]]
		vinv = Inverse[v]
		
		m == v.d.vinv // Simplify
	      
	      citation:
	      Any matrix with unique eigenvectors and eigen values can be diagonalized:
				A=V.D.MatrixPower[V,-1]
			Where D is a diagonal matrix of the eign values
			and the ith column of V is the eign vector which corresponds to the eign value on the diagnal of the ith column of D.
			In general 
				A^N=V.D^N.MatrixPower[mx,-1]
	*******************************************************)
Block[{mxdiag,mxevec,mxevecinv,evalues=Eigenvalues[mx],evectors=Eigenvectors[mx]},
	mxdiag = DiagonalMatrix[evalues^x];
	mxevec = Transpose[evectors];
	mxevecinv = MatrixPower[mxevec, -1]//FullSimplify;
	(mxevec.mxdiag.mxevecinv)
] (* mxPowerClosedForm3x3*)


mxPowerClosedFormN[mx_,x_]:=
	(* this algorithm is based on the fillowing property (spectral theorem)
	m^x == v.d^x.MatrixPower[v,-1]
	m == v.d.Inverse[v] or m == v.d.vinv
	where 
		m = mx
		v = Transpose[Eigenvectors[m]]
		d = DiagonalMatrix[Eigenvalues[m]]
		vinv = Inverse[v]
		
		m == v.d.vinv // Simplify
	      
	      citation:
	      Any matrix with unique eigenvectors and eigen values can be diagonalized:
				A=V.D.MatrixPower[V,-1]
			Where D is a diagonal matrix of the eign values
			and the ith column of V is the eign vector which corresponds to the eign value on the diagnal of the ith column of D.
			In general 
				A^N=V.D^N.MatrixPower[mx,-1]
	*******************************************************)
Block[{mxdiag,mxevec,mxevecinv,evalues=Eigenvalues[mx]//N//Chop,evectors=Eigenvectors[mx]//N//Chop},
	mxdiag = DiagonalMatrix[evalues^x]//Chop;
	mxevec = Transpose[evectors]//Chop;
	mxevecinv = MatrixPower[mxevec, -1]//Chop;
	(mxevec.mxdiag.mxevecinv) (* the result is INTEGER; Round serves uniquely for conversion real->int *)
] (* mxPowerClosedForm3x3*)

MU4SseqClosedFormN[mx_,x_]:=
	(* this algorithm is based on the fillowing property (spectral theorem)
	m^x == v.d^x.MatrixPower[v,-1]
	m == v.d.Inverse[v] or m == v.d.vinv
	where 
		m = mx
		v = Transpose[Eigenvectors[m]]
		d = DiagonalMatrix[Eigenvalues[m]]
		vinv = Inverse[v]
		
		m == v.d.vinv // Simplify
	      
	      citation:
	      Any matrix with unique eigenvectors and eigen values can be diagonalized:
				A=V.D.MatrixPower[V,-1]
			Where D is a diagonal matrix of the eign values
			and the ith column of V is the eign vector which corresponds to the eign value on the diagnal of the ith column of D.
			In general 
				A^N=V.D^N.MatrixPower[mx,-1]
	*******************************************************)
Block[{mxdiag,mxevec,mxevecinv,evalues,evectors,mxpow},
	evalues=Eigenvalues[mx];
	evectors=Eigenvectors[mx];
	mxdiag = DiagonalMatrix[evalues^x];
	mxevec = Transpose[evectors];
	mxevecinv = MatrixPower[mxevec, -1]//Chop;
	mxpow = (mxevec.mxdiag.mxevecinv);
	(Total@mxpow[[1]])  (*// ToRadicals // Simplify*)
] (* mxPowerClosedForm3x3*)


mxPowerClosedForm2x2[mx2x2_,x_]:=
Block[{a, b, c, d, ev1, ev2},
	{{a, b}, {c, d}} = mx2x2;
	{ev1,ev2}=Eigenvalues[mx2x2];
	{{
		(* 1,1 *)
		  ev1^x*(a - d + (ev1 - ev2))/2   / (ev1 - ev2)
		+ ev2^x*(a - d - (ev1 - ev2))/2  / (ev2 - ev1),

		(* 1,2 *)
		  ev1^x * b / (ev1 - ev2)
		+ ev2^x * b /(ev2 - ev1) },

		(* 2,1 *)
		{  ev1^x * c  / (ev1 - ev2)
		+  ev2^x * c  / (ev2 - ev1),

		(* 2,2 *)
		- ev1^x*(a - d - (ev1 - ev2)) / 2  / (ev1 - ev2)
		- ev2^x*(a - d + (ev1 - ev2)) / 2  / (ev2 - ev1)
	}} 
] (* mxPowerClosedForm2x2 *)


(****************** test:
mx2x2 = Partition[Take[Prime[RandomSample[Range[2, 8]]], 4], 2]
Print[Table[{i, MatrixForm[MatrixPower[mx2x2, i]]} // mf, {i, 0, 5}]]
Table[{i, mf[mxPowerClosedForm2x2[x2, i]]} // mf, {i, 0, 5}]
*******************)



mxPowerClosedForm3x3[mx3x3_,x_]:=
Block[{a, b, c, d, e, f, g, h, i, ev1, ev2, ev3},
	{{a, b, c}, {d, e, f}, {g, h, i}} = mx3x3;
	{ev1,ev2,ev3}=Eigenvalues[{{a, b, c}, {d, e, f}, {g, h, i}}];
	
	(* 1,1 *)
	{{(ev1^x*( (ev1 - e)*(ev1 - i) -(f*h) ) )/((ev1 - ev2)*(ev1 - ev3)) + 
	(ev2^x*( (ev2 - e)*(ev2 - i) -(f*h) ) )/((ev2 - ev1)*(ev2 - ev3)) + 
	(ev3^x*( (ev3 - e)*(ev3 - i) -(f*h) ) )/((ev3 - ev1)*(ev3 - ev2)),
	
	(* 1,2 *)
	(ev1^x*( b*ev1 + (c*h) -(b*i) ) )/((ev1 - ev2)*(ev1 - ev3)) + 
	(ev2^x*( b*ev2 + (c*h) -(b*i) ) )/((ev2 - ev1)*(ev2 - ev3)) + 
	(ev3^x*( b*ev3 + (c*h) -(b*i) ) )/((ev3 - ev1)*(ev3 - ev2)),
	
	(* 1,3 *)
	(ev1^x*( c*ev1 + (b*f) -(c*e) ) )/((ev1 - ev2)*(ev1 - ev3)) + 
	(ev2^x*( c*ev2 + (b*f) -(c*e) ) )/((ev2 - ev1)*(ev2 - ev3)) + 
	(ev3^x*( c*ev3 + (b*f) -(c*e) ) )/((ev3 - ev1)*(ev3 - ev2))},

	(* 2,1 *)
	{(ev1^x*( d*ev1 + (f*g) -(d*i) ) )/((ev1 - ev2)*(ev1 - ev3)) + 
	(ev2^x*( d*ev2 + (f*g) -(d*i) ) )/((ev2 - ev1)*(ev2 - ev3)) + 
	(ev3^x*( d*ev3 + (f*g) -(d*i) ) )/((ev3 - ev1)*(ev3 - ev2)),

	(* 2,2 *)
	(ev1^x*( (ev1 - a)*(ev1 - i) -(c*g) ) )/((ev1 - ev2)*(ev1 - ev3)) + 
	(ev2^x*( (ev2 - a)*(ev2 - i) -(c*g) ) )/((ev2 - ev1)*(ev2 - ev3)) + 
	(ev3^x*( (ev3 - a)*(ev3 - i) -(c*g) ) )/((ev3 - ev1)*(ev3 - ev2)),

	(* 2,3 *)
	(ev1^x*( f*ev1 + d c - a f  ) )/((ev1 - ev2)*(ev1 - ev3)) + 
	(ev2^x*( f*ev2 + d c - a f  ) )/((ev2 - ev1)*(ev2 - ev3)) + 
	(ev3^x*( f*ev3 + d c - a f  ) )/((ev3 - ev1)*(ev3 - ev2))},

	(* 3,1 *)
	{(ev1^x*( g*ev1 + (d*h) -(e*g) ) )/((ev1 - ev2)*(ev1 - ev3)) + 
	(ev2^x*( g*ev2 + (d*h) -(e*g) ) )/((ev2 - ev1)*(ev2 - ev3)) + 
	(ev3^x*( g*ev3 + (d*h) -(e*g) ) )/((ev3 - ev1)*(ev3 - ev2)),

	(* 3,2 *)
	(ev1^x*( h*ev1 + g b - a h ) )/((ev1 - ev2)*(ev1 - ev3)) + 
	(ev2^x*( h*ev2 + g b - a h ) )/((ev2 - ev1)*(ev2 - ev3)) + 
	(ev3^x*( h*ev3 + g b - a h ) )/((ev3 - ev1)*(ev3 - ev2)),

	(* 3,3 *)
	(ev1^x*( (ev1 - e)*(ev1 - a) -(b*d) ) )/((ev1 - ev2)*(ev1 - ev3)) + 
	(ev2^x*( (ev2 - e)*(ev2 - a) -(b*d) ) )/((ev2 - ev1)*(ev2 - ev3)) + 
	(ev3^x*( (ev3 - e)*(ev3 - a) -(b*d) ) )/((ev3 - ev1)*(ev3 - ev2))}}
] (* mxPowerClosedForm3x3*)

findAnalyticalEigenSystem[mx_] :=
    Module[ {},
        {evals, evecs} = N[Eigensystem[mx] ];
        lambda = evals /. {(x_ /; Im[x] != 0) -> 0} // Max;
        keyIndex = Position[evals,lambda][[1,1]];
        {aevals, aevecs} = Eigensystem[mx];
        aeval = aevals[[keyIndex]]//ToRadicals//Simplify;
        aevec = aevecs[[keyIndex]]//ToRadicals//Simplify;
        eval = aevals[[keyIndex]]//N;
        evec = aevecs[[keyIndex]]//N;
        cp = CharacteristicPolynomial[mx, x];
        Print[mx//mf,mx//T//mf," eval: " -> cp -> evals[[keyIndex]]];
        Print["evecs: ",evec/Max[evec]," ratio:",Max[evec]/Min[evec]];
        Print["analytical eval: ",aeval];
        Print["analyticalevec: ",aevec];
        Print["analytical eval: ",aeval//InputForm];
        Print["analyticalevec: ",aevec//InputForm];
        cp
    ]

mxMU2SseqClosedForm[x_]:=
Block[{ev1, ev2},
	{ev1,ev2}=Eigenvalues[mxMU2];
	(ev1^x (3+ev1-ev2)+(-3+ev1-ev2) ev2^x)/(2 (ev1-ev2))// FullSimplify
] (* mxPowerClosedForm2x2 *)

mxMU3SseqClosedForm[x_]:=
Block[{ev1, ev2, ev3},
	{ev1,ev2,ev3}=Eigenvalues[mxMU3];
	(*{ev1,ev2,ev3}={1/3 (1+(1/2 (29-3 Sqrt[93]))^(1/3)+(1/2 (29+3 Sqrt[93]))^(1/3)),1/3-1/6 (1+I Sqrt[3]) (1/2 (29-3 Sqrt[93]))^(1/3)+1/6 I (I+Sqrt[3]) (1/2 (29+3 Sqrt[93]))^(1/3),1/3+1/6 I (I+Sqrt[3]) (1/2 (29-3 Sqrt[93]))^(1/3)-1/6 (1+I Sqrt[3]) (1/2 (29+3 Sqrt[93]))^(1/3)}*);
	(-ev2^x (1+ev2+ev2^2) (ev1-ev3)+ev1^x (1+ev1+ev1^2) (ev2-ev3)+(ev1-ev2) ev3^x (1+ev3+ev3^2))/((ev1-ev2) (ev1-ev3) (ev2-ev3))// FullSimplify
] (* mxMU3SseqClosedForm*)

mxMU4SseqClosedForm[x_]:=
Block[{ev1, ev2,ev3,ev4,xev1,xev2,xev3,xev4},
	{ev2,ev4,ev3,ev1} = Eigenvalues[mxMU4];
	{xev1,xev2,xev3,xev4} = (Root[1 - 9 #1 - 5 #1^2 - 283 #1^3 + 283 #1^4 &, #])& /@ {1,2,3,4};
	(ev1^(1 + x) xev1 + ev2^(1 + x) xev2 + ev3^(1 + x) xev3 + ev4^(1 + x) xev4)// FullSimplify
] (* mxMU4SseqClosedForm *)

(****************** test:
mx3x3 = Partition[Take[Prime[RandomSample[Range[2, 12]]], 9], 3]
Print[Table[{i, MatrixForm[MatrixPower[mx3x3, i]]} // mf, {i, 0, 5}]]
Table[{i, mf[mxPowerClosedForm3x3[mx3x3, i]]} // mf, {i, 0, 5}]
*******************)

(*
exp = mxPowerClosedForm[mxMU4, x]
simplerexp = FullSimplify@(Total@exp[[1]])
(simplerexp /. {Root[-1 - #1^3 + #1^4 &, 1] :> ev1, 
    Root[-1 - #1^3 + #1^4 &, 2] :> ev2, 
    Root[-1 - #1^3 + #1^4 &, 3] :> ev3, 
    Root[-1 - #1^3 + #1^4 &, 4] :> ev4, 
    Root[1 - 9 #1 - 5 #1^2 - 283 #1^3 + 283 #1^4 &, 1] :> xev1, 
    Root[1 - 9 #1 - 5 #1^2 - 283 #1^3 + 283 #1^4 &, 2] :> xev2, 
    Root[1 - 9 #1 - 5 #1^2 - 283 #1^3 + 283 #1^4 &, 3] :> xev3, 
    Root[1 - 9 #1 - 5 #1^2 - 283 #1^3 + 283 #1^4 &, 4] :>xev4}) // FullSimplify
*)
genMU2[x_]:=x/(1-x-x^2) (* Graham-Knuth-Patashnik p.297 *)
genMU3[x]:=x/(1-x-x^3)
genMU4[x]:=x/(1-x-x^4)

seqMU3ClosedForm[n_]:=Module[{\[Alpha],\[Beta],\[Gamma]},
	(*{\[Alpha],\[Beta],\[Gamma]} = {Root[-1-#1^2+#1^3&,1],Root[-1-#1^2+#1^3&,2],Root[-1-#1^2+#1^3&,3]};*)
	{\[Alpha],\[Beta],\[Gamma]} = {1/3 (1+(1/2 (29-3 Sqrt[93]))^(1/3)+(1/2 (29+3 Sqrt[93]))^(1/3)),
		1/3+1/6 I (I+Sqrt[3]) (1/2 (29-3 Sqrt[93]))^(1/3)-1/6 (1+I Sqrt[3]) (1/2 (29+3 Sqrt[93]))^(1/3),
		1/3-1/6 (1+I Sqrt[3]) (1/2 (29-3 Sqrt[93]))^(1/3)+1/6 I (I+Sqrt[3]) (1/2 (29+3 Sqrt[93]))^(1/3)};
	\[Alpha]^(n+1)/((\[Alpha]-\[Beta]) (\[Alpha]-\[Gamma])) + \[Beta]^(n+1)/((\[Beta]-\[Alpha]) (\[Beta]-\[Gamma])) + \[Gamma]^(n+1)/((\[Gamma]-\[Alpha]) (\[Gamma]-\[Beta])) 
] // N // Round (* the expression is EXCT! rounding only to speed-up *)

seqMU4ClosedForm[n_]:=Module[{\[Alpha],\[Beta],\[Gamma],\[Delta]},
	{\[Alpha],\[Beta],\[Gamma],\[Delta]} = Root[-1-#1^3+#1^4&,#]& /@ {2,1,4,3};	
	(\[Alpha]^(n+2)/((\[Alpha]-\[Beta]) (\[Alpha]-\[Gamma]) (\[Alpha]-\[Delta]) ) 
	+ \[Beta]^(n+2)/((\[Beta]-\[Alpha]) (\[Beta]-\[Gamma]) (\[Beta]-\[Delta])) 
	+ \[Gamma]^(n+2)/((\[Gamma]-\[Alpha]) (\[Gamma]-\[Beta]) (\[Gamma]-\[Delta]) ) 
	+ \[Delta]^(n+2)/((\[Delta]-\[Alpha]) (\[Delta]-\[Beta]) (\[Delta]-\[Gamma]))  )  

] (*// N // Round*) (* the expression is EXCT! rounding only to speed-up *)


(*
mf/@Table[{i,seqMU3ClosedForm[i]},{i,-6,10}]

mf/@Table[{i,seqMU4ColosedForm[i]},{i,-6,10}]
-----------------
(*MU3:*)
generatorFuncion = genMU3[x]
lhe = A/(1 - a x) + B/(1 - b x) + C/(1 - c x)  

(*now, findinf {a,b,c}:*)
exp = Apart @ Denominator[Together@lhe]
coefs = CoefficientList[exp,x]
gencoefs = CoefficientList[#, x] & @ (coefs[[1]] Denominator[generatorFuncion]) (*<<<<<<<<<<<<< here coefs[[1]] == -1 *)
sol = Solve[{coefs == gencoefs}, {a, b, c}] // FullSimplify
Replace[#, sol[[1]] ]& /@ {a,b,c}
(*gives {Root[-1-#1^2+#1^3&,1],Root[-1-#1^2+#1^3&,2],Root[-1-#1^2+#1^3&,3]}*)

(*now, findinf {A,B,C}:*)
exp = Apart @ Numerator[Together@lhe]
coefs = CoefficientList[exp,x]
gencoefs = CoefficientList[#, x] & @ ( Numerator[generatorFuncion] )
sol = Solve[{coefs[[1]] == 0, coefs[[2]] == 1, coefs[[3]] == 0}, {A, B, C}] // FullSimplify
(*gives {{A->1/((-a+b) (a-c)),B->1/((a-b) (b-c)),C->1/((a-c) (-b+c))}} *)

{Root[-1 - #1^2 + #1^3 &, 1], Root[-1 - #1^2 + #1^3 &, 2], Root[-1 - #1^2 + #1^3 &, 3]} // ToRadicals // Simplify
{Root[-1 - #1^2 + #1^3 &, 1], Root[-1 - #1^2 + #1^3 &, 2], Root[-1 - #1^2 + #1^3 &, 3]} // ToRadicals // Simplify

(*test:*)

mf /@ Table[{i,seqMU3ClosedForm[i]},{i,-10,20}]

TexForm of the final expression  

form1: 
exp = HoldForm @ ( 
	(1+\[Alpha]^2)\[Alpha]^n/((\[Alpha]-\[Beta]) (\[Alpha]-\[Gamma])) + (1+\[Beta]^2)\[Beta]^n/((\[Beta]-\[Alpha]) (\[Beta]-\[Gamma])) + (1+\[Gamma]^2)\[Gamma]^n/((\[Gamma]-\[Alpha]) (\[Gamma]-\[Beta])) 
	)
TeXForm[exp] // Print

form2: 
exp = HoldForm @ ( 
	-(\[Alpha]^n (\[Beta]-\[Gamma]) + \[Beta]^n (\[Gamma]-\[Alpha]) + \[Gamma]^n (\[Alpha]-\[Beta]))/((\[Alpha]-\[Beta])(\[Beta]-\[Gamma])(\[Gamma]-\[Alpha]) )
	)



###########################################################################################################################
MU4:
generatorFuncion = genMU4[x]
lhe = A/(1 - \[Alpha] x) + B/(1 - \[Beta] x) + C/(1 - \[Gamma] x) + D/(1 - \[Delta] x)  

{\[Alpha],\[Beta],\[Gamma],\[Delta]} = Root[-1-#1^3+#1^4&,#]& /@ {2,1,4,3};

exp = Hold @ (-(alpha^n/((alpha-beta) (gamma-alpha)) + beta^n/((alpha-beta) (beta-gamma)) + gamma^n/((gamma-alpha) (beta-gamma)) ) /.{alpha:>\[Alpha],beta:>\[Beta],gamma:>\[Gamma],delta:>\[Delta]} )
TexForm[ ]

now, findinf {A,B,C,D} ----------------------------------
generatorFuncion = genMU4[x]
lhe = A/(1 - a x) + B/(1 - b x) + C/(1 - c x) + D/(1 - d x)  
exp = Apart @ Numerator[Together@lhe]
coefs = CoefficientList[exp,x]
gencoefs = CoefficientList[#, x] & @ ( Numerator[generatorFuncion] )
sol = Solve[{coefs == gencoefs}, {A, B, C, D}]
sol /. {a :> alpha, b :> beta, c :> gamma, d :> delta} // FullSimplify // Print
{{A->1/((alpha-beta) (alpha-delta) (alpha-gamma)),B->1/((-alpha+beta) (beta-delta) (beta-gamma)),C->1/((beta-gamma) (delta-gamma) (-alpha+gamma)),D->1/((alpha-delta) (beta-delta) (delta-gamma))}}

test:
mf @ Table[{i,seqMU4ClosedForm[i]},{i,20}]

form1: 
exp = HoldForm @ ( 
	(\[Alpha]^n/((\[Alpha]-\[Beta]) (\[Alpha]-\[Gamma]) (\[Alpha]-\[Delta]) ) 
	+ \[Beta]^n/((\[Beta]-\[Alpha]) (\[Beta]-\[Gamma]) (\[Beta]-\[Delta])) 
	+ \[Gamma]^n/((\[Gamma]-\[Alpha]) (\[Gamma]-\[Beta]) (\[Gamma]-\[Delta]) ) 
	+ \[Delta]^n/((\[Delta]-\[Alpha]) (\[Delta]-\[Beta]) (\[Delta]-\[Gamma]))  )  
	)
TeXForm[exp] // Print

{\[Alpha], \[Beta], \[Gamma], \[Delta]} = Root[-1 - #1^3 + #1^4 &, #] & /@ {2, 1, 4, 3} // ToRadicals // Simplify  ;
\[Alpha] // ToRadicals // Simplify // TeXForm
\[Beta] // ToRadicals // Simplify // TeXForm
\[Gamma] // ToRadicals // Simplify // TeXForm
\[Delta] // ToRadicals // Simplify // TeXForm

{\[Alpha], \[Beta], \[Gamma], \[Delta]} = Root[-1 - #1^3 + #1^4 &, #] & /@ {2, 1, 4, 3} // ToRadicals // Simplify 
{\[Alpha], \[Beta], \[Gamma], \[Delta]} // InputForm // Print
{1/4 + Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)]/4 + Sqrt[1/2 + 4*(2/(3*(-9 + Sqrt[849])))^(1/3) - ((-9 + Sqrt[849])/2)^(1/3)/3^(2/3) + 1/(2*Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)])]/2, 1/4 + Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)]/4 - Sqrt[1/2 + 4*(2/(3*(-9 + Sqrt[849])))^(1/3) - ((-9 + Sqrt[849])/2)^(1/3)/3^(2/3) + 1/(2*Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)])]/2, 1/4 - Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)]/4 + Sqrt[1/2 + 4*(2/(3*(-9 + Sqrt[849])))^(1/3) - ((-9 + Sqrt[849])/2)^(1/3)/3^(2/3) - 1/(2*Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)])]/2, 1/4 - Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)]/4 - Sqrt[1/2 + 4*(2/(3*(-9 + Sqrt[849])))^(1/3) - ((-9 + Sqrt[849])/2)^(1/3)/3^(2/3) - 1/(2*Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)])]/2}
>>>> replace Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)] by r1
exp = {1/4 + r1/4 + Sqrt[1/2 + 4*(2/(3*(-9 + Sqrt[849])))^(1/3) - ((-9 + Sqrt[849])/2)^(1/3)/3^(2/3) + 1/(2*r1)]/2, 1/4 + r1/4 - Sqrt[1/2 + 4*(2/(3*(-9 + Sqrt[849])))^(1/3) - ((-9 + Sqrt[849])/2)^(1/3)/3^(2/3) + 1/(2*r1)]/2, 1/4 - r1/4 + Sqrt[1/2 + 4*(2/(3*(-9 + Sqrt[849])))^(1/3) - ((-9 + Sqrt[849])/2)^(1/3)/3^(2/3) - 1/(2*r1)]/2, 1/4 - r1/4 - Sqrt[1/2 + 4*(2/(3*(-9 + Sqrt[849])))^(1/3) - ((-9 + Sqrt[849])/2)^(1/3)/3^(2/3) - 1/(2*r1)]/2}
exp//FullSimplify//Print
{1/12 (3+3 r1+Sqrt[6] Sqrt[3/r1+Root[-675+171 #1-9 #1^2+#1^3&,1]]),1/12 (3+3 r1-Sqrt[6] Sqrt[3/r1+Root[-675+171 #1-9 #1^2+#1^3&,1]]),1/12 (3-3 r1+Sqrt[6] Sqrt[-(3/r1)+Root[-675+171 #1-9 #1^2+#1^3&,1]]),1/12 (3-3 r1-Sqrt[6] Sqrt[-(3/r1)+Root[-675+171 #1-9 #1^2+#1^3&,1]])}
>>>> replace Root[-675+171 #1-9 #1^2+#1^3&,1] by (r2)
{1/12 (3+3 r1+Sqrt[6] Sqrt[3/r1+(r2)]),1/12 (3+3 r1-Sqrt[6] Sqrt[3/r1+(r2)]),1/12 (3-3 r1+Sqrt[6] Sqrt[-(3/r1)+(r2)]),1/12 (3-3 r1-Sqrt[6] Sqrt[-(3/r1)+(r2)])}

{\[Alpha], \[Beta], \[Gamma], \[Delta]} =  {1/12 (3+3 r1+Sqrt[6] Sqrt[3/r1+(r2)]),1/12 (3+3 r1-Sqrt[6] Sqrt[3/r1+(r2)]),1/12 (3-3 r1+Sqrt[6] Sqrt[-(3/r1)+(r2)]),1/12 (3-3 r1-Sqrt[6] Sqrt[-(3/r1)+(r2)])}

\[Alpha]  // FullSimplify // TeXForm
\[Beta]  // FullSimplify // TeXForm
\[Gamma]  // FullSimplify // TeXForm
\[Delta]  // FullSimplify // TeXForm

Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)]  // Simplify // TeXForm
Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)]  // N // TeXForm

exp = Root[-675 + 171 #1 - 9 #1^2 + #1^3 &, 1] // ToRadicals // Simplify
exp  // TeXForm
exp // N // TeXForm

*)

(*------------------------ After SIGGRAPH-2016 submission ------------------------------*)

MU4buildCCVTbasedTilesBNprepPivots[inbasicShift_:14, showGraphics_:True] :=
    Module[ {basicShift,mindistLimit},
		lenindtab = {0,3,2,1};
		basicShift = inbasicShift;
		mindistLimit = Switch[basicShift, 12, 0, 14, 0];

		pivots = pivotsCodes =Table[{},{4}];
		pivots = Table[{},{4}];
		{pivotsCodes[[1]],pivots[[1]]} = MU4getPivot[1,1,basicShift,mindistLimit,showGraphics]; (* AApivot *)
		{pivotsCodes[[2]],pivots[[2]]} = MU4getPivot[2,2,basicShift,mindistLimit,showGraphics]; (* BBpivot *)
		{pivotsCodes[[3]],pivots[[3]]} = MU4getPivot[3,3,basicShift,mindistLimit,showGraphics]; (* CCpivot *)
		{pivotsCodes[[4]],pivots[[4]]} = MU4getPivot[4,4,basicShift,mindistLimit,showGraphics]; (* DDpivot *)
	] (* MU4buildCCVTbasedTilesBNprepPivots *)

MU4getPivot[ix_,iy_,basicShift_,mindistLimit_:0,showGraphics_:False,freeFlag_:True] :=
    Module[ {lenindtab,xType,yType,ddx,ddy,xsymbols,ysymbols,npts,pts,xmax,ymax,found,iter,dx,dy,xpts,ypts,ysort,order,codes,ptsxy,mindist},
		lenindtab = {0,3,2,1};
		{xType,yType} = MU4index2symbols@{ix,iy};
		{ddx,ddy} = {lenindtab[[ix]], lenindtab[[iy]]};		
		xsymbols = Join[#,Table[a,{ddy}]]& /@ MU4getCodes1d[basicShift-ddy, xType];
		ysymbols = Join[#,Table[a,{ddx}]]& /@ MU4getCodes1d[basicShift-ddx, yType];
		npts = Length[xsymbols]; 
		{xmax,ymax} = {1/lambda^ddx,1/lambda^ddy};

        found = False;
        iter  = 0;
        While[ !found,
			pts = MU4getCCVTpts[npts,xmax,ymax];
			{dx,dy} = pts[[1]];
			If[!freeFlag, pts = ({Mod[Subtract[#[[1]],dx],xmax],Mod[Subtract[#[[2]],dy],ymax]}& /@ pts) ];
			{xpts,ypts} = {First/@pts,Last/@pts};
			ysort = {ypts, Range[Length[pts]]} // T // Sort;
	        order = permut2order[Last /@ ysort];
	        codes = Table[{xsymbols[[ i ]], ysymbols[[ order[[i]] ]]},{i,Length[pts]}];
	        found = If[mindistLimit == 0, True,
		        ptsxy = MU4PhiXY /@ codes;        	
				mindist = Round[1000000 getptsMinDist1[ptsxy]];
				found = mindist > mindistLimit;
				iter++;
	        ];
        ];
		If[showGraphics, ptsxy = MU4PhiXY /@ codes; 
						{
		            	 Graphics[{PointSize[.01], Point /@ pts}, Frame -> True, FrameTicks -> None, PlotLabel->{iter -> {xType,yType},Length[pts] (*-> Round[1000000 getptsMinDist1[pts]]*) }, PlotRange->{{0,1},{0,1}}, ImageSize -> {600,600}/2] 
		            	,Graphics[{
		            		MU4getGridAxesSeparateSubdiv[basicShift/2+6-ddx,basicShift/2+6-ddy,xType,yType,True, {Magenta,AbsoluteThickness[12]}, True, {Cyan,AbsoluteThickness[2]}  ] 
		            				, PointSize[.01], Point /@ ptsxy
		            				,Table[Line[{pts[[i]],ptsxy[[i]]}],{i,Length[pts]}]
		            				,Red, Point /@ pts
		            			}
		            		, Frame -> True, FrameTicks -> None, PlotRange->{{0,xmax},{0,ymax}}, ImageSize -> {600,600} ]
						 }//Print
		 ];
		{codes,pts}
] (* MU4getPivot *)


MU4getCCVTpts[npts_:131,xsz_:1,ysz_:1] :=
    Module[ {outfname,execstr},
    	outfname = "tmp/pts"<>pid<>".dat";
    	If[ FileExistsQ[outfname], DeleteFile[outfname] ];
		execstr = "ccvtTor "<>ToString[npts]<>" 1024 "<>ToString[xsz]<>" "<>ToString[ysz]<>" "<>outfname<>" > /dev/null";
		(*Print["executing ",execstr];*)
		Run[execPrefix<>execstr];
		Sort @ Import[outfname]
] (* MU4getPivot *)

MU4prepL0Tiles[xType_:a, yType_:a ] :=
    Module[ {},
        resTiles = {};
        count = 0;

		lenindtab = {0,3,2,1};
		{ddx,ddy} = {lenindtab[[MU4symbols2index@xType]], lenindtab[[MU4symbols2index@yType]]};		
        
        xsymbols = Join[#,Table[a (*xType*),{ddy}]]& /@ MU4getCodes1d[3-ddy, xType];
        ysymbols = Join[#,Table[a (*yType*),{ddx}]]& /@ MU4getCodes1d[3-ddx, yType];
        permuts = Tuples[{Permutations[Range[Length[xsymbols]]], Permutations[Range[Length[ysymbols]]]}];
        tmp = Table[
        	{permutx,permuty} = permuts[[i]];
        	{xsymbols[[permutx]],ysymbols[[permuty]]}//T
        ,{i,Length[permuts]}];
        resTiles = Union @ (Sort /@ tmp);

        tab = Reverse @ (Sort @ Table[
			mindist = getptsMinDist1[MU4PhiXY /@ resTiles[[i]]];
			{mindist,resTiles[[i]]}
		,{i,Length[resTiles]}]);
		resTiles = Last /@ tab;


		Print[{xType,yType} -> Length[resTiles]];
		Do[
			codes = resTiles[[i]];
    		ptsXY = MU4PhiXY /@ codes;
    		gridThickness = .002;
            g = Graphics[{{ MU4getGrid4Figures[4,xType,yType]} 
                    ,PointSize[.01],Point/@ ptsXY
                    ,Table[Text[Style[codes[[j]],8],ptsXY[[j]],{-1,-1}],{j,Length[ptsXY]}]
                    (*,Table[Text[Style[Mod[j,100],24],ptsXY[[j]],{-1,-1}],{j,Length[ptsXY]}]*)
                } 
                ,ImageSize -> 1/4 {1200,1200}   ];
            g//Print;
		,{i,Length[resTiles]}];
		resTiles
    ] (*MU4prepL0Tiles *)


MU4prepAllL0Tiles[] :=
    Module[ {},
		Do[
			resTiles = MU4prepL0Tiles[MU4index2symbols@ix,MU4index2symbols@iy]/.{c:>a,d:>a};
			fname = "data/MU4_L0/MU4_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
			Put[resTiles,fname];
			Print["Writing into ",fname -> Length[resTiles]];
		,{ix,4},{iy,4}];
        
    ] (* MU4prepAllL0Tiles *)

    
MU4prepL1Tiles[x0_:a, y0_:a ] :=
    Module[ {},
        resTiles = {};
        count = 0;
        While[True,
			randomTabX = Table[ Table[RandomChoice[{True,False}],{2 2^ilevel}] ,{ilevel,1,4}];
        	randomTabY = Table[ Table[RandomChoice[{True,False}],{2 2^ilevel}] ,{ilevel,1,4}];
	        Do[
	            codes = MU4getActiveCodes @ MU4recursiveSubdivSIMPLESTRandomized[ilevel, x0, y0];
	        ,{ilevel,1,3}];
	        If[!MemberQ[resTiles,codes],
	        	resTiles = Join[resTiles,{codes}];
	        	Print[count -> Length[resTiles] ];
	        ];         
	        If[count++ > 1000, Break[] ];
        ]; (*While*)
        tab = Reverse @ (Sort @ Table[
			mindist = getptsMinDist1[MU4PhiXY /@ resTiles[[i]]];
			{mindist,resTiles[[i]]}
		,{i,Length[resTiles]}]);
		resTiles = Last /@ tab;
		Do[
			codes = resTiles[[i]];
    		ptsXY = MU4PhiXY /@ codes;
    		gridThickness = .002;
            g = Graphics[{{ MU4getGrid4Figures[7,x0,y0]} 
                    ,PointSize[.01],Point/@ ptsXY
                    ,Table[Text[Style[codes[[j]],8],ptsXY[[j]],{-1,-1}],{j,Length[ptsXY]}]
                    (*,Table[Text[Style[Mod[j,100],24],ptsXY[[j]],{-1,-1}],{j,Length[ptsXY]}]*)
                } 
                ,ImageSize -> 1/2 {1200,1200}   ];
            g//Print;
		,{i,Length[resTiles]}];
		resTiles
    ] (*MU4prepL1Tiles *)


MU4prepAllL1Tiles[] :=
    Module[ {},
		Do[
			resTiles = MU4prepL1Tiles[MU4index2symbols@ix,MU4index2symbols@iy];
			fname = "data/MU4_L1/MU4_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
			Put[resTiles,fname];
			Print["Writing into ",fname -> Length[resTiles]];
		,{ix,4},{iy,4}];
        
    ] (* MU4prepAllL1Tiles *)

MU4buildCCVTbasedTilesBN[inbasicShift_:14, nPatterns_:16, showGraphics_:True] := (* inbasicShift=14 ->L4 inbasicShift=16 ->L5 inbasicShift=18 ->L6 inbasicShift=20 ->L7 inbasicShift=22 ->L8 *)
    Module[ {},
    	nLloydIterations = 20;
		basicShift = inbasicShift;
		lenindtab = {0,3,2,1};
		MU4buildCCVTbasedTilesBNprepPivots[basicShift-6,showGraphics];
		rescodes = Table[{},{4},{4},{nPatterns}];
		resOrderPlusCodes = Table[{},{4},{4},{nPatterns}];
		meandist = 1./Sqrt[Length[pivots[[1]] ] ];
        Do[
			Do[
				{xType,yType} = MU4index2symbols@{ix,iy};
				{xsz,ysz} = {1./lambda^(lenindtab[[ix]]),1./lambda^(lenindtab[[iy]])};
				npts = MU4basicSeq[[basicShift-lenindtab[[ix]]-lenindtab[[iy]]-5 ]];
				pts = MU4getCCVTpts[npts,xsz,ysz];
				{x0,y0} = {Min[First/@pts],Min[Last/@pts]};
				pts = ((#-{x0,y0})& /@ pts);
				{x0,y0} = First@pts;
				pts = {Mod[#[[1]]-x0,xsz],Mod[#[[2]]-y0,ysz]}& /@ pts;
				gl0 = {Point/@pts};
				ptsLloyd = Join[#,{0}]& /@ pts;
				gl = {Blue};

				pts = Plus[#,{0,ysz}]& /@ pivots[[ix]];
				AppendTo[gl, Point/@pts];
				ptsLloyd = Join[ptsLloyd, (Join[#,{-1}]& /@ pts)];
				pts = Plus[#,{0,-xsz}]& /@ pivots[[ix]];
				AppendTo[gl, Point/@pts];
				ptsLloyd = Join[ptsLloyd, (Join[#,{-1}]& /@ pts)];
				pts = Plus[#,{xsz,0}]& /@ pivots[[iy]];
				AppendTo[gl, Point/@pts];
				ptsLloyd = Join[ptsLloyd, (Join[#,{-1}]& /@ pts)];
				pts = Plus[#,{-ysz,0}]& /@ pivots[[iy]];
				AppendTo[gl, Point/@pts];
				ptsLloyd = Join[ptsLloyd, (Join[#,{-1}]& /@ pts)];
				
				pts = {{0,ysz},{xsz,0},{xsz,ysz},{-meandist,-meandist/2},{-meandist/2,-meandist}};
				AppendTo[gl, {Green,Point/@pts}];
				ptsLloyd = Join[ptsLloyd, (Join[#,{-1}]& /@ pts)];
				
				Export["tmp/ptsLloyd"<>pid<>".dat",ptsLloyd];
				Run[execPrefix<>"my_lloyd2d tmp/ptsLloyd"<>pid<>".dat tmp/outLloyd"<>pid<>".dat "<>ToString[nLloydIterations]<>" > /dev/null"];
				pts = Sort @ (Drop[#,-1]& /@ (Take[#,npts] & @ Import["tmp/outLloyd"<>pid<>".dat"]));
				
				{xpts,ypts} = {First/@pts,Last/@pts};

				{ddx,ddy} = {lenindtab[[ix]], lenindtab[[iy]]};		
	            xsymbols = Join[#,Table[a,{ddy}]]& /@ MU4getCodes1d[basicShift-ddy-6, xType];
	            ysymbols = Join[#,Table[a,{ddx}]]& /@ MU4getCodes1d[basicShift-ddx-6, yType];
	            ysort = {ypts, Range[Length[pts]]} // T // Sort;
	            order = permut2order[Last /@ ysort];
	            codes = Table[
	            	{xsymbols[[ i ]], ysymbols[[ order[[i]] ]]}
	            ,{i,Length[pts]}];

				orderSymbols = MU4getCodes1d[ basicShift-lenindtab[[ix]]-lenindtab[[iy]]-6 , a] ;
				orderPlusCodes = MU4getOrder[ptsLloyd,codes,orderSymbols];
				Print[ipattern,"/",nPatterns -> {ix,iy} -> {lenindtab[[ix]],lenindtab[[iy]]} -> npts -> Length[orderSymbols] -> (MU4F /@ orderSymbols)];
				
				If[ showGraphics,         
	        		ptsxy = MU4PhiXY /@ codes;
	        		g1 = Graphics[{PointSize[.02], {Red,Point/@pts},gl }, Frame -> None, FrameTicks -> None, (*PlotRange->{{0,xsz},{0,ysz}},*) ImageSize -> {600,600}/2 ];
	        		g2 = Graphics[{PointSize[.02], {Red,Point/@ptsxy},gl}, Frame -> None, FrameTicks -> None, (*PlotRange->{{0,xsz},{0,ysz}},*) ImageSize -> {600,600}/2 ];
	        		g3 = Graphics[{MU4getGridAxesSeparateSubdiv[basicShift/2+3-ddx,basicShift/2+3-ddy,xType,yType,True, {Magenta,AbsoluteThickness[12]}, False, {Cyan,AbsoluteThickness[2]}  ] 
	        							, Text[Style[MU4F@#[[1]],36],MU4PhiXY@#[[2]],{-1,-1}]& /@ orderPlusCodes
	        							, PointSize[.01] , Point /@ ptsxy
			            				,Table[Line[{pts[[i]],ptsxy[[i]]}],{i,Length[pts]}]
			            				,Red, Point /@ pts }
			            		(*, Frame -> True, FrameTicks -> None*) (*PlotRange->{{0,xsz},{0,ysz}},*) 
			            		,ImageSize -> {600,600} ];
					{g1,g2,g3}//Print;

					If[ipattern == 1 && ix == 1 && iy == 1,
						Export["prep-figs/optim_blockers_11.pdf", g1];
						Export["prep-figs/optim_shifts.pdf", g3];
					];
				];
				If[ipattern == 1 && ix == 1 && iy == 4,
					Export["prep-figs/optim_blockers_14.pdf", g1];
				];
				rescodes[[ix,iy,ipattern]] = codes;
				resOrderPlusCodes[[ix,iy,ipattern]] = orderPlusCodes;
			,{ix,4},{iy,4}];
        ,{ipattern,nPatterns}];	

		Print["all done !"];
		dirName = "data/MU4_L"<>ToString[(basicShift-6)/2]<>"_"<>ToString[nPatterns];
		If[!DirectoryQ[dirName], CreateDirectory[dirName] ];
		Do[
			fname = dirName<>"/MU4_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
			Put[rescodes[[ix,iy]],fname];
			Print["Writing into ",fname -> Length[rescodes[[ix,iy]]] -> Length[rescodes[[ix,iy,1]]]];

			fname = dirName<>"/MU4_Order+Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
			Put[MU4symbols2binCode/@resOrderPlusCodes[[ix,iy]],fname];
			Print["Writing into ",fname -> Length[resOrderPlusCodes[[ix,iy]]] -> Length[resOrderPlusCodes[[ix,iy,1]]]];
		,{ix,4},{iy,4}];

] (* MU4buildCCVTbasedTilesBN *)

MU4getOrder[ptsLloyd_,incodes_,orderSymbols_] :=
    Module[ {codes = incodes,orderCodes,ind,count,res,ptsMovable,ptsFixed,dtab,pt},
        orderCodes = MU4symbols2binCode /@ orderSymbols;
        ind = 1;
        count = 1;
        res = { {orderCodes[[count]],codes[[ind]]} };
        While[True,
            codes = Complement[codes,(Last/@res)];
            If[ Length[codes] == 0,
                Break[]
            ];
			ptsMovable = MU4PhiXY /@ codes;
            ptsFixed = Join[ Drop[#,-1]& /@ Select[ptsLloyd, Last[#] == -1&], MU4PhiXY /@ (Last/@res)];
            dtab = Table[
                    pt = ptsMovable[[i]];
                    Sort[euclidlen[pt - #]& /@ ptsFixed] //First
                ,{i,Length[ptsMovable]}];
            ind = Position[dtab, Max[dtab]][[1, 1]];
            count++;
            res = Join[res, { {orderCodes[[count]], codes[[ind]]} } ];
        ];
        Return[res]
    ]

MU4consolidateCCVTbased[] :=
    Module[ {},
    resPatterns = Table[{},{4},{4}];
	Do[
		count = 0;
        Do[
        	Do[
            	infname = "trial"<>ToString[itrial]<>"/MU4_L7_set"<>ToString[iset]<>"/MU4_bestTiles_"<>ToString[ix]<>ToString[iy]<>".dat";
            	data = Get[infname];
            	resPatterns[[ix,iy]] = Join[resPatterns[[ix,iy]], data];
            	count++;
            	(*Print[infname -> {ix,iy} -> Length[data] -> count -> (Length @ resPatterns[[ix,iy]] )]*);
            ,{iset,16}]
    	,{itrial,12}];
    	outfname = "data/MU4_L7/MU4_bestTiles_"<>ToString[ix]<>ToString[iy]<>".dat";
    	Union@ (resPatterns[[ix,iy]] );
    	Print["Writing into ",outfname -> Length[data] ];
    	Put[data,outfname];
    ,{ix,4},{iy,4}];
    ] (* MU4consolidateCCVTbased *)

MU4choose16best[] :=
    Module[ {},
        data = Table[{},{4},{4}];
        Table[
            fname = "data/MU4_L7/MU4_bestTiles_"<>ToString[ix]<>ToString[iy]<>".dat";
            data[[ix,iy]] = Get[fname];
            Print["Reading ",fname -> Length[data[[ix,iy]]]];
        ,{iy,4},{ix,4}];
	nsets = Length[data[[1,1]]];
    MU4goodPatterns = Table[{},{4},{4}];
    tab = Sort@Table[
		Do[
            MU4goodPatterns[[ix,iy]] = data[[ix,iy,iset;;iset]];
        ,{iy,4},{ix,4}];
        codes = MU4recursiveSubdiv[4];
        ptsXY = MU4PhiXY /@ codes;
        Graphics[{Point /@ ptsXY}, Frame -> True, FrameTicks -> None, PlotRange->{{0,1},{0,1}}, ImageSize -> {600,600}/2]//Print;
        mindist = Round[1000000 getptsMinDist1[ptsXY]];
        Print[iset -> mindist];
        {mindist,iset}
     ,{iset,nsets}];
     	
	
       
    ] (* MU4consolidateCCVTbased *)


MU4mkFigureFourier[innlevels_:7, patternsLevel_:10, nPatterns__:64 ] := (* MU4mkFigureFourier[7, 10] *)
    Module[ {},
        nTrials = 1;
        nlevels = innlevels;
        myRandomChoice := RandomChoice;
        fouriertabsz = 2 4096 ;
        fsum = Table[0,{fouriertabsz},{fouriertabsz}];
        discrepancyMU4 = Table[{0,0},{nlevels}];

        MU4goodPatterns = Table[{},{4},{4}];
        Table[
            fname = "data/MU4_L"<>ToString[patternsLevel]<>"_"<>ToString[nPatterns]<>"/MU4_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU4goodPatterns[[ix,iy]] = Get[fname];
            Print["Reading ",fname -> Length[MU4goodPatterns[[ix,iy]]]];
        ,{iy,4},{ix,4}];
		randomTabX = Table[ Table[RandomChoice[{True,False}],{MU4basicSeq[[2+2 (ilevel+patternsLevel)]] }] ,{ilevel,1,nlevels}];
        randomTabY = Table[ Table[RandomChoice[{True,False}],{MU4basicSeq[[2+2 (ilevel+patternsLevel)]] }] ,{ilevel,1,nlevels}];

		Do[
	        Do[
	            codes = MU4recursiveSubdivRandomized[ilevel];
	            (*codes = MU4recursiveSubdiv[ilevel];
	            *)ptsXY = MU4PhiXY /@ codes;
	            Print[ilevel -> Length[ codes] ];
		                    If [ilevel <= 1,
		                   		g = Graphics[{PointSize[.02/1.3^ilevel],Point/@ptsXY},PlotRange->{{0,1},{0,1}},Frame->True,FrameTicks->None];
		                    	Export["prep-figs/fig-MU4_pts_L"<>ToString[ilevel]<>".pdf",g];
		                    	g//Print
	              			  ];
	        ,{ilevel,1,nlevels}];
	        fsum += getFourier2D[Ceiling[(fouriertabsz ptsXY)],fouriertabsz];
		,{iTrial, nTrials}];
            
            
            (*fsum[[1,1]] = 0;*)
            centralPartSz = fouriertabsz/8;
            fsum = Reorg[fsum];
            centralPart = (fsum[[fouriertabsz/2-centralPartSz/2+1 ;; fouriertabsz/2+centralPartSz/2, fouriertabsz/2-centralPartSz/2+1 ;; fouriertabsz/2+centralPartSz/2]])^2;
            psprectrum = niceRaster[50000./Sqrt[nTrials] centralPart /Max[centralPart],zoom->1];
            Print[psprectrum];
            Export["prep-figs/fig-MU4-spectrum.png",psprectrum];
        
        bins = Table[{},{centralPartSz}];
        maxval = 0;
        Do[
        	r = Round[euclidlen[{ix,iy}]];
        	angle = getAngle[{ix,iy},{0,0},{1,0}]//N;
        	If[angle < PI/60. || angle > PI/2 - PI/60., Continue[] ];
        	val = centralPart[[centralPartSz/2+1+ix,centralPartSz/2+1+iy]];
        	AppendTo[bins[[r]], val];
        	maxval = Max[maxval,val];
        ,{ix,centralPartSz/2-2},{iy,centralPartSz/2-2}];
        Print["maxval = ", maxval -> maxval/centralPart[[centralPartSz/2+1,centralPartSz/2+1]] ];
        binsmean = Table[If[Length[bins[[i]]] > 0, Mean[bins[[i]]], 0], {i,centralPartSz}];
        radial = ListPlot[binsmean[[;;Round[1.3 centralPartSz/2] ]], (*Frame->True,*) PlotStyle->{Red}, Joined -> True, Ticks->None, PlotRange->All,PlotLabel->Style["Radial Power Spectrum",36] ];
        radial//Print;
        Export["prep-figs/fig-MU4-spectrum-radial.pdf",radial];
        	
    ] (*MU4mkFigureFourier *)

getAngle[z0_,z1_,z2_] :=
	Module[{res},
		If[z0==z1||z2==z1,
			res=0,
			res=ArcTan@@(z0-z1)-ArcTan@@(z2-z1)];
		If[res<0,res+=2 Pi];
		If[res > Pi,res = 2 Pi - res];
		Return[res(*Mod[res, 2 Pi]*)]
	] (* getAngle*)


MU4mkFigureMultiplePoitns[] :=
    Module[ {},
        nlevels = 4;
        mxsz = 2;
        base = mxsz;
        baselog = Log[2,base];
        myRandomChoice := RandomChoice;
        MU4goodPatterns = Table[{},{4},{4}];
        Table[
            fname = "data/MU4_L3_16/MU4_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU4goodPatterns[[ix,iy]] = Get[fname];
        ,{iy,4},{ix,4}];
        Do[
            codes = MU4recursiveSubdiv[ilevel];
            ptsXY = MU4PhiXY /@ codes;
            Print[ilevel -> Length[ codes] ];
            	gridThickness = .005;
                    g = Graphics[{{ 
                    		MU4getGrid4Figures[ilevel,a,a, True, {Blue,AbsoluteThickness[6]}, True, {Magenta,AbsoluteThickness[12]} ]} 
                    		,MU4getGridAxesSeparateSubdiv[13,13,a,a, False, {Magenta,AbsoluteThickness[5]},False,{Cyan,AbsoluteThickness[1]}]
                            ,PointSize[.015],Point/@ ptsXY
                            (*,Table[Text[Style[DweRuKigetIntValueInv@ codes[[i,2]],18],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]*)
                        } 
                        ,ImageSize ->{1200,1200}/2   ];
        ,{ilevel,1,nlevels}];
        g1 = g;

        MU4goodPatterns = Table[{},{4},{4}];
        Table[
            fname = "data/MU4_L8_64/MU4_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU4goodPatterns[[ix,iy]] = Get[fname];
            (*Print["Reading ",fname -> Length[MU4goodPatterns[[ix,iy]]]];*)
        ,{iy,4},{ix,4}];
        Do[
            codes = MU4recursiveSubdiv[ilevel];
            ptsXY = MU4PhiXY /@ codes;
            Print[ilevel -> Length[ codes] ];
            	gridThickness = .005;
                    g = Graphics[{{ MU4getGrid4Figures[ilevel,a,a, True, {Blue,AbsoluteThickness[6]}, True, {Magenta,AbsoluteThickness[12]} ]} 
                            ,PointSize[.01],Point/@ ptsXY
                            (*,Table[Text[Style[DweRuKigetIntValueInv@ codes[[i,2]],18],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]*)
                        } 
                        ,ImageSize ->{1200,1200}/2   ];
        ,{ilevel,1,nlevels}];
        g2 = g;
        
        gRow = GraphicsRow[{g1,g2}];
        gRow//Print;
        
        Export["prep-figs/fig-multi-points.pdf",gRow];
    ] (* MU4mkFigureMultiplePoitns *)

(*getOneHexagon[z0_:{0,0}]:=Plus[z0,#]& /@ {{-(1/2),-(Sqrt[3]/2)},{1/2,-(Sqrt[3]/2)},{1,0},{1/2,Sqrt[3]/2},{-(1/2),Sqrt[3]/2},{-1,0},{-(1/2),-(Sqrt[3]/2)}}*)
(*uv2xy[uv_]:= {{3/2,-(3/2)},{Sqrt[3]/2,Sqrt[3]/2}}.uv*)
(*xy2uv[xy_]:= {{1/3,1/Sqrt[3]},{-(1/3),1/Sqrt[3]}}.xy*)

uv2xy[uv_]:= {{Sqrt[3]/2,-Sqrt[3]},{3/2,0}}.uv
xy2uv[xy_]:= {{0,2/3},{-(1/Sqrt[3]),1/3}}.xy

getOneHexagon[z0_:{0,0}]:=Plus[z0,#]& /@ {{0,-1},{Sqrt[3]/2,-(1/2)},{Sqrt[3]/2,1/2},{0,1},{-(Sqrt[3]/2),1/2},{-(Sqrt[3]/2),-(1/2)},{0,-1}}

getOneHexagonUV[uv_:{0,0}]:=getOneHexagon[uv2xy@uv]

getOneMarkedHexagonGL[uv_:{0,0},val_:1]:= With[{xy = uv2xy@uv}, {Line@getOneHexagon[xy],Text[Style[val,markstyle,Bold],xy]} ]

MU4mkFigurePascalTriangle[] :=
    Module[ {},
    	markstyle = {Black,14};
    	gl = {
    		getOneMarkedHexagonGL[{0,0},	1]
    		
    		,getOneMarkedHexagonGL[{-1,0},	1]
   			,getOneMarkedHexagonGL[{-1,-1},	1]
    		
    		,getOneMarkedHexagonGL[{-2,0},	1]
   			,getOneMarkedHexagonGL[{-2,-1},	2]
    		,getOneMarkedHexagonGL[{-2,-2},	1]
    		
    		,getOneMarkedHexagonGL[{-3,0},	1]
   			,getOneMarkedHexagonGL[{-3,-1},	3]
   			,getOneMarkedHexagonGL[{-3,-2},	3]
    		,getOneMarkedHexagonGL[{-3,-3},	1]
    		
    		,getOneMarkedHexagonGL[{-4,0},	1]
   			,getOneMarkedHexagonGL[{-4,-1},	4]
   			,getOneMarkedHexagonGL[{-4,-2},	6]
    		,getOneMarkedHexagonGL[{-4,-3},	4]
    		,getOneMarkedHexagonGL[{-4,-4},	1]
    		
    		,getOneMarkedHexagonGL[{-5,0},	1]
   			,getOneMarkedHexagonGL[{-5,-1},	5]
   			,getOneMarkedHexagonGL[{-5,-2},	10]
    		,getOneMarkedHexagonGL[{-5,-3},	10]
    		,getOneMarkedHexagonGL[{-5,-4},	5]
    		,getOneMarkedHexagonGL[{-5,-5},	1]

    		,getOneMarkedHexagonGL[{-6,0},	1]
   			,getOneMarkedHexagonGL[{-6,-1},	6]
   			,getOneMarkedHexagonGL[{-6,-2},	15]
    		,getOneMarkedHexagonGL[{-6,-3},	20]
    		,getOneMarkedHexagonGL[{-6,-4},	15]
    		,getOneMarkedHexagonGL[{-6,-5},	6]
    		,getOneMarkedHexagonGL[{-6,-6},	1]

    		,getOneMarkedHexagonGL[{-7,0},	1]
   			,getOneMarkedHexagonGL[{-7,-1},	7]
   			,getOneMarkedHexagonGL[{-7,-2},	21]
    		,getOneMarkedHexagonGL[{-7,-3},	35]
    		,getOneMarkedHexagonGL[{-7,-4},	35]
    		,getOneMarkedHexagonGL[{-7,-5},	21]
    		,getOneMarkedHexagonGL[{-7,-6},	7]
    		,getOneMarkedHexagonGL[{-7,-7},	1]

    		,getOneMarkedHexagonGL[{-8,0},	1]
   			,getOneMarkedHexagonGL[{-8,-1},	8]
   			,getOneMarkedHexagonGL[{-8,-2},	28]
    		,getOneMarkedHexagonGL[{-8,-3},	56]
    		,getOneMarkedHexagonGL[{-8,-4},	70]
    		,getOneMarkedHexagonGL[{-8,-5},	56]
    		,getOneMarkedHexagonGL[{-8,-6},	28]
    		,getOneMarkedHexagonGL[{-8,-7},	8]
    		,getOneMarkedHexagonGL[{-8,-8},	1]

    		,getOneMarkedHexagonGL[{-9,0},	1]
   			,getOneMarkedHexagonGL[{-9,-1},	9]
   			,getOneMarkedHexagonGL[{-9,-2},	36]
    		,getOneMarkedHexagonGL[{-9,-3},	84]
    		,getOneMarkedHexagonGL[{-9,-4},	126]
    		,getOneMarkedHexagonGL[{-9,-5},	126]
    		,getOneMarkedHexagonGL[{-9,-6},	84]
    		,getOneMarkedHexagonGL[{-9,-7},	36]
    		,getOneMarkedHexagonGL[{-9,-8},	9]
    		,getOneMarkedHexagonGL[{-9,-9},	1]

    		,getOneMarkedHexagonGL[{-10,0},	1]
   			,getOneMarkedHexagonGL[{-10,-1},	10]
   			,getOneMarkedHexagonGL[{-10,-2},	45]
    		,getOneMarkedHexagonGL[{-10,-3},	120]
    		,getOneMarkedHexagonGL[{-10,-4},	210]
    		,getOneMarkedHexagonGL[{-10,-5},	252]
    		,getOneMarkedHexagonGL[{-10,-6},	210]
    		,getOneMarkedHexagonGL[{-10,-7},	120]
    		,getOneMarkedHexagonGL[{-10,-8},	45]
    		,getOneMarkedHexagonGL[{-10,-9},	10]
    		,getOneMarkedHexagonGL[{-10,-10},1]

    		,getOneMarkedHexagonGL[{-11,0},	1]
   			,getOneMarkedHexagonGL[{-11,-1},	11]
   			,getOneMarkedHexagonGL[{-11,-2},	55]
    		,getOneMarkedHexagonGL[{-11,-3},	165]
    		,getOneMarkedHexagonGL[{-11,-4},	330]
    		,getOneMarkedHexagonGL[{-11,-5},	462]
    		,getOneMarkedHexagonGL[{-11,-6},	462]
    		,getOneMarkedHexagonGL[{-11,-7},	330]
    		,getOneMarkedHexagonGL[{-11,-8},	165]
    		,getOneMarkedHexagonGL[{-11,-9},	55]
    		,getOneMarkedHexagonGL[{-11,-10},	11]
    		,getOneMarkedHexagonGL[{-11,-11},1]

    		,getOneMarkedHexagonGL[{-12,0},	1]
   			,getOneMarkedHexagonGL[{-12,-1},	12]
   			,getOneMarkedHexagonGL[{-12,-2},	66]
    		,getOneMarkedHexagonGL[{-12,-3},	220]
    		,getOneMarkedHexagonGL[{-12,-4},	495]
    		,getOneMarkedHexagonGL[{-12,-5},	792]
    		,getOneMarkedHexagonGL[{-12,-6},	924]
    		,getOneMarkedHexagonGL[{-12,-7},	792]
    		,getOneMarkedHexagonGL[{-12,-8},	495]
    		,getOneMarkedHexagonGL[{-12,-9},	220]
    		,getOneMarkedHexagonGL[{-12,-10},	66]
    		,getOneMarkedHexagonGL[{-12,-11},	12]
    		,getOneMarkedHexagonGL[{-12,-12},1]

    		,getOneMarkedHexagonGL[{-13,0},	1]
   			,getOneMarkedHexagonGL[{-13,-1},	13]
   			,getOneMarkedHexagonGL[{-13,-2},	78]
    		,getOneMarkedHexagonGL[{-13,-3},	286]
    		,getOneMarkedHexagonGL[{-13,-4},	715]
    		,getOneMarkedHexagonGL[{-13,-5},	1287]
    		,getOneMarkedHexagonGL[{-13,-6},	1716]
    		,getOneMarkedHexagonGL[{-13,-7},	1716]
    		,getOneMarkedHexagonGL[{-13,-8},	1287]
    		,getOneMarkedHexagonGL[{-13,-9},	715]
    		,getOneMarkedHexagonGL[{-13,-10},	286]
    		,getOneMarkedHexagonGL[{-13,-11},	78]
    		,getOneMarkedHexagonGL[{-13,-12},	13]
    		,getOneMarkedHexagonGL[{-13,-13},1]
    	};
    	ggl = (Flatten[#, 1] & @ gl);
    	{	colm3,		colm2,		colm1,		col0,		col1,		col2,			col3,		col4,	col5,			col7,			col10,			col14,	col19 ,		col26,		col36 } =
    		{Lighter@Red, Green,Lighter@Magenta, Darker@Orange,Lighter@Gray,Lighter@Lighter@Blue,Lighter@Red,Green,Lighter@Magenta, Darker@Orange, Lighter@Gray, Lighter@Lighter@Blue,Lighter@Red,  Green,Lighter@Magenta};
    	linem3 = {Line[{uv2xy@({1,0}-{3,-1} ), uv2xy@({4,-1}+{3,-1} (-3)/3 )}] };
    	linem2 = {Line[{uv2xy@({0,0}-{3,-1} ), uv2xy@({3,-1}+{3,-1} (-2)/3 )}] };
    	linem1 = {Line[{uv2xy@({-1,0}-{3,-1} ), uv2xy@({2,-1}+{3,-1} (-1)/3  )}] };
    	line0 = {Line[{uv2xy@({-2,0}-{3,-1} ), uv2xy@({1,-1}+{3,-1} 0/3 )}] };
    	line1 = {Line[{uv2xy@({-3,0}-{3,-1} ), uv2xy@({-0,-1}+{3,-1} 1/3  )}] };
    	line2 = {Line[{uv2xy@({-4,0}-{3,-1} ), uv2xy@({-1,-1}+{3,-1} 2/3 )}] };
    	line3 = {Line[{uv2xy@({-5,0}-{3,-1} ), uv2xy@({-2,-1}+{3,-1} 3/3   )}] };
    	line4 = {Line[{uv2xy@({-6,0}-{3,-1} ), uv2xy@({-3,-1}+{3,-1} 4/3 )}] };
    	line5 = {Line[{uv2xy@({-7,0}-{3,-1} ), uv2xy@({-4,-1}+{3,-1} 5/3   )}] };
    	line7 = {Line[{uv2xy@({-8,0}-{3,-1} ), uv2xy@({-5,-1}+{3,-1} 6/3 )}] };
    	line10 = {Line[{uv2xy@({-9,0}-{3,-1} ), uv2xy@({-6,-1}+{3,-1} 7/3  1.065)}] };
    	line14 = {Line[{uv2xy@({-10,0}-{3,-1} ), uv2xy@({-7,-1}+{3,-1} 8/3 )}] };
    	line19 = {Line[{uv2xy@({-11,0}-{3,-1} ), uv2xy@({-8,-1}+{3,-1} 9/3 1.052)}] };
    	line26 = {Line[{uv2xy@({-12,0}-{3,-1} ), uv2xy@({-9,-1}+{3,-1} 10/3 )}] };
    	line36 = {Line[{uv2xy@({-13,0}-{3,-1} ), uv2xy@({-10,-1}+{3,-1} 11/3 1.04)}] };

    	lhexm3 = {										Text[Style[0,markstyle],uv2xy@({4,-1}+{3,-1} (-3)/3 ) ,{-1,-1}] };
    	lhexm2 = {Polygon@getOneHexagonUV[{0,0}], 										Text[Style[1,markstyle],uv2xy@({3,-1}+{3,-1} (-2)/3 ) ,{-1,-1}] };
    	lhexm1 = {Polygon@getOneHexagonUV[{-1,0}], 										Text[Style[1,markstyle],uv2xy@({2,-1}+{3,-1} (-1)/3 ) ,{-1,-1}] };
    	lhex0 = {Polygon@getOneHexagonUV[{-2,0}], 										Text[Style[1,markstyle],uv2xy@({1,-1}+{3,-1} 0/3 ) ,{-1,-1}] };
    	lhex1 = {Polygon@getOneHexagonUV[{-3,0}], 										Text[Style[1,markstyle],uv2xy@({-0,-1}+{3,-1} 1/3  ) ,{-1,-1}] };
    	lhex2 = {Polygon@getOneHexagonUV[{-1,-1}], Polygon@getOneHexagonUV[{-4,-0}], 	Text[Style[2,markstyle],uv2xy@({-1,-1}+{3,-1} 2/3 ) ,{-1,-1}] };
    	lhex3 = {Polygon@getOneHexagonUV[{-2,-1}], Polygon@getOneHexagonUV[{-5,-0}], 	Text[Style[3,markstyle],uv2xy@({-2,-1}+{3,-1} 3/3  ) ,{-1,-1}] };
    	lhex4 = {Polygon@getOneHexagonUV[{-3,-1}], Polygon@getOneHexagonUV[{-6,-0}], 	Text[Style[4,markstyle],uv2xy@({-3,-1}+{3,-1} 4/3 ) ,{-1,-1}] };
    	lhex5 = {Polygon@getOneHexagonUV[{-4,-1}], Polygon@getOneHexagonUV[{-7,-0}], 	Text[Style[5,markstyle],uv2xy@({-4,-1}+{3,-1} 5/3  ) ,{-1,-1}] };
    	lhex7 = {Polygon@getOneHexagonUV[{-5,-1}], Polygon@getOneHexagonUV[{-8,-0}] , Polygon@getOneHexagonUV[{-2,-2}], 		Text[Style[7,markstyle],uv2xy@({-5,-1}+{3,-1} 6/3 ) ,{-1,-1}] };
    	lhex10 = {Polygon@getOneHexagonUV[{-6,-1}], Polygon@getOneHexagonUV[{-9,-0}] , Polygon@getOneHexagonUV[{-3,-2}], 		Text[Style[10,markstyle],uv2xy@({-6,-1}+{3,-1} 7/3  1.065) ,{0,-1}] };
    	lhex14 = {Polygon@getOneHexagonUV[{-7,-1}], Polygon@getOneHexagonUV[{-10,-0}] , Polygon@getOneHexagonUV[{-4,-2}],		Text[Style[14,markstyle],uv2xy@({-7,-1}+{3,-1} 8/3) ,{-1,-1}] };
    	lhex19 = {Polygon@getOneHexagonUV[{-8,-1}], Polygon@getOneHexagonUV[{-11,-0}] , Polygon@getOneHexagonUV[{-5,-2}],		Text[Style[19,markstyle],uv2xy@({-8,-1}+{3,-1} 9/3 1.052) ,{0,-1}] };
    	lhex26 = {Polygon@getOneHexagonUV[{-9,-1}], Polygon@getOneHexagonUV[{-12,-0}] , Polygon@getOneHexagonUV[{-6,-2}], Polygon@getOneHexagonUV[{-3,-3}],		Text[Style[26,markstyle],uv2xy@({-9,-1}+{3,-1} 10/3) ,{-1,-1}] };
    	lhex36 = {Polygon@getOneHexagonUV[{-10,-1}], Polygon@getOneHexagonUV[{-13,-0}] , Polygon@getOneHexagonUV[{-7,-2}], Polygon@getOneHexagonUV[{-4,-3}],	Text[Style[36,markstyle],uv2xy@({-10,-1}+{3,-1} 11/3 1.04) ,{0,-1}] };
    	g = Graphics[{Thickness[.01], colm3,lhexm3, colm2,lhexm2, colm1,lhexm1, col0,lhex0, col1,lhex1, col2,lhex2, col3,lhex3, col4,lhex4, col5,lhex5, col7,lhex7, col10,lhex10, col14,lhex14, col19,lhex19, col26,lhex26, col36,lhex36
    		,Black,Thickness[.005],ggl, Text[Style[HoldForm@(Subscript[S, \[Mu] ] "(n) = "), 16,Italic] , uv2xy@({3,-1}+{3,-1} (-2)/3 ) + {-2.1,.35} ] 
    		, colm3,linem3 , colm2,linem2, colm1,linem1, col0,line0, col1,line1, col2,line2, col3,line3, col4,line4, col5,line5, col7,line7, col10,line10, col14,line14, col19,line19, col26,line26, col36,line36
    		, Black, Select[ggl, Head[#] == Text &] }
    		,PlotRange->{Automatic,{3,-21}}
    		,ImageSize ->{600,Automatic} ];
        g//Print;
        Export["prep-figs/fig-PascalTriangle.pdf",g];
    ] (* MU4mkFigurePascalTriangle *)
    
showBNOTpointsets[] :=
    Module[ {},
        fname = "data/pointsets_BNOT/pointset_bbnot_n1024.pts";
        data = Import[fname];
        Graphics[{Point/@data,Red,Point/@(Plus[#,{0,1}]& /@ data),Red,Point/@(Plus[#,{1,0}]& /@ data) }
            ,ImageSize ->2{600,600} ]//Print;

        fname = "data/pointsets_BNOT/pointset_bbnot_n110218.pts";
        data = Import[fname];
        Graphics[{Point/@data,Red,Point/@(Plus[#,{0,1}]& /@ data),Red,Point/@(Plus[#,{1,0}]& /@ data) }
            ,ImageSize ->8{600,600} ]//Print;

        fname = "data/BNOT-2puissance20.dat";
        data = Import[fname];
        Graphics[{Point/@data,Red,Point/@(Plus[#,{0,1}]& /@ data),Red,Point/@(Plus[#,{1,0}]& /@ data) }
            ,ImageSize ->8{600,600} ]//Print;
    ]


testHierarchicalStratified2D[set_] := Module[{sz,powers,tests,i,tab},
	sz=Length[set];
	powers = Table[2^i,{i,0,Log[2,sz]}];
	tests = Select[Tuples[powers, 2], (Times @@ #) == sz &];
	tab = Table[Length[Union[Quotient[#, tests[[i]]] & /@ set]] == sz,{i,Length[tests]}];
	If[And @@ tab == False, Print["testHierarchicalStratified2D: ",Select[{tests,tab}//T,Last[#]==False&]//mf, " -> ", Select[{tests,tab}//T,Last[#]==False&]//Length] ];
	And @@ tab
] (* testHierarchicalStratified2D *)

MU4getGridDiadic[xlevels_:2,ylevels_:2,xType_:a,yType_:a, showFrame_:True, frameStyle_:{Magenta,AbsoluteThickness[5]},showSymbols_:False,gridStyle_:{Cyan,AbsoluteThickness[2]},showAreas_:False ] :=
    Module[ {hlevels, gl ,txtcoltab,xSymbols,ySymbols,xvaluesFracDir,yvaluesFracDir,xmax,ymax,xind,yind,sx,sy,pow},
        txtcoltab = {Red, Red,Red, Red,Red, Red,Red, Red};
        {xind,yind} = {Switch[xType,a,1,b,4,c,3,d,2],Switch[yType,a,1,b,4,c,3,d,2]};
        {xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
        gl = gridStyle;
        gl = Join[gl,{{ Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] } }];
        Do[
            xSymbols = MU4getCodes1d[ilevel-1,xType];
            xvaluesFracDir = MU4Phi /@ xSymbols;
            AppendTo[xvaluesFracDir,1.];
            Do[AppendTo[gl, { Line[{{xvaluesFracDir[[i]],0},{xvaluesFracDir[[i]],ymax}}]}],{i,Length[xSymbols]}];
        ,{ilevel,1,xlevels}];
        Do[
            ySymbols = MU4getCodes1d[ilevel-1,yType];
            yvaluesFracDir = MU4Phi /@ ySymbols;
            AppendTo[yvaluesFracDir,1.];
            Do[AppendTo[gl, { Line[{{0,yvaluesFracDir[[i]]},{xmax,yvaluesFracDir[[i]]}}]}],{i,Length[ySymbols]}];
        ,{ilevel,1,ylevels}];
        If[showFrame,
        	gl = Join[gl, frameStyle];
        	AppendTo[gl,Line[{{0,0},{xmax,0},{xmax,ymax},{0,ymax},{0,0}}] ];
        ];
        hlevels = Floor[nlevels/2];
        If[ showSymbols,
        	AppendTo[gl, {
        			Table[ Text[Style[#,36]& @ (Last@xSymbols[[ix]]), {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2.,-.02},{0,1}] , {ix,Length[xSymbols]}] ,
        			Table[ Text[Style[#,36]& @ (Last@ySymbols[[iy]]), {-.02, (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{1,0}] , {iy,Length[ySymbols]}] 
        	}];
        ];

		(*xSymbols = MU4getCodes1d[xlevels,xType];
		ySymbols = MU4getCodes1d[xlevels,xType];*)
Print[xSymbols,ySymbols];
        If[ showAreas,
        	AppendTo[gl, {
         			Table[ 
         				Print[{ xSymbols[[ix]],  ySymbols[[iy]]} -> {Last@xSymbols[[ix]], Last@ySymbols[[iy]]} ];
         				{sx,sy} = {Last@xSymbols[[ix]], Last@ySymbols[[iy]]};
         				pow = Switch[{sx,sy}
         					,{a,a}, 4
         					,_, 0
         				];
         				Text[Style[pow,36,Blue], 
         					{(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,0}] 
         			, {ix,Length[xSymbols]}, {iy,Length[ySymbols]}] 
        	}];
        ];

        gl
    ] (* MU4getGridDiadic*)

MU4pmkFigureRanking[innlevels_:5] :=
    Module[ {},
        patternsLevel = 7 ;
        nPatterns = 64;
        MU4goodPatterns = Table[{},{4},{4}];
        Table[
            fname = "data/MU4_L"<>ToString[patternsLevel]<>"_"<>ToString[nPatterns]<>"/MU4_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU4goodPatterns[[ix,iy]] =  Get[fname];
            Print["Reading ",fname -> Length[MU4goodPatterns[[ix,iy]] ] -> Length[MU4goodPatterns[[ix,iy,1]] ] ];
        ,{iy,4},{ix,4}];
        
        codes = MU4goodPatterns[[1, 1, 6]];
        ptsXY = MU4PhiXY /@ codes;
		g1 = Graphics[{ MU4getGridAxesSeparateSubdiv[1,1,a,a,False, {Magenta,AbsoluteThickness[12]}, False, {Red,AbsoluteThickness[2]}, False ]
                    ,AbsolutePointSize[50]
                    ,Table[rank = MU4FInv @ codes[[i,1]] ;
                     	rankReal = MU4PhiInv @ codes[[i,1]] ;
                    	{AbsolutePointSize[52], Point @ ptsXY[[i]], AbsolutePointSize[50], GrayLevel[rankReal], Point @ ptsXY[[i]], If[rankReal < .5, White, Black], Text[Style[rank,30],ptsXY[[i]]] }
                    ,{i,Length[codes]}]
                  } ,ImageSize -> {800,800}   ];
        g1//Print;

        (*patternsLevel = 10;
        nPatterns = 64;
        MU4goodPatterns = Table[{},{4},{4}];
        Table[
            fname = "data/MU4_L"<>ToString[patternsLevel]<>"_"<>ToString[nPatterns]<>"/MU4_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU4goodPatterns[[ix,iy]] =  Get[fname];
            Print["Reading ",fname -> Length[MU4goodPatterns[[ix,iy]]]];
        ,{iy,4},{ix,4}];
        
        codes = MU4goodPatterns[[1, 1, 1]];
        ptsXY = MU4PhiXY /@ codes;
		g2 = Graphics[{ MU4getGridAxesSeparateSubdiv[1,1,a,a,False, {Magenta,AbsoluteThickness[12]}, False, {Red,AbsoluteThickness[2]}, False ]
                    ,AbsolutePointSize[20]
                    ,Table[rank = MU4F @ codes[[i,1]] ;
                     	rankReal = MU4PhiInv @ codes[[i,1]] ;
                    	{GrayLevel[rankReal], Point @ ptsXY[[i]] }
                    ,{i,Length[codes]}]
                  } ,ImageSize -> {800,800}   ];
        g2//Print;*)
     ] (*MU4pmkFigureRanking *)

MU4getGridAxesSeparateSubdiv[xlevels_:2,ylevels_:2,xType_:a,yType_:a, showFrame_:True, frameStyle_:{Magenta,AbsoluteThickness[5]},showSymbols_:False,gridStyle_:{Cyan,AbsoluteThickness[2]},showAreas_:False ] :=
    Module[ {hlevels, gl ,txtcoltab,(*xSymbols,ySymbols,*)xvaluesFracDir,yvaluesFracDir,xmax,ymax,xind,yind,sx,sy,pow},
        txtcoltab = {Red, Red,Red, Red,Red, Red,Red, Red};
        {xind,yind} = {Switch[xType,a,1,b,4,c,3,d,2],Switch[yType,a,1,b,4,c,3,d,2]};
        {xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
        gl = gridStyle;
        gl = Join[gl,{{ Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] } }];
        Do[
            xSymbols = MU4getCodes1d[ilevel-1,xType];
            xvaluesFracDir = MU4Phi /@ xSymbols;
            AppendTo[xvaluesFracDir,xmax];
            Do[AppendTo[gl, { Line[{{xvaluesFracDir[[i]],0},{xvaluesFracDir[[i]],ymax}}]}],{i,Length[xSymbols]}];
        ,{ilevel,1,xlevels}];
        Do[
            ySymbols = MU4getCodes1d[ilevel-1,yType];
            yvaluesFracDir = MU4Phi /@ ySymbols;
            AppendTo[yvaluesFracDir,ymax];
            Do[AppendTo[gl, { Line[{{0,yvaluesFracDir[[i]]},{xmax,yvaluesFracDir[[i]]}}]}],{i,Length[ySymbols]}];
        ,{ilevel,1,ylevels}];
        If[showFrame,
        	gl = Join[gl, frameStyle];
        	AppendTo[gl,Line[{{0,0},{xmax,0},{xmax,ymax},{0,ymax},{0,0}}] ];
        ];

        If[xSymbols === {{}}, xSymbols = {{xType}} ];
        If[ySymbols ==={{}}, ySymbols = {{yType}} ];
        hlevels = Floor[nlevels/2];
        If[ showSymbols,
        	AppendTo[gl, {
        			Table[ Text[Style[#,36,Black]& @ (Last@xSymbols[[ix]]), {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2.,-.02},{0,1}] , {ix,Length[xSymbols]}] ,
        			Table[ Text[Style[Rotate[#,Pi/2],36,Black]& @ (Last@ySymbols[[iy]]), {-.02, (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{1,0}] , {iy,Length[ySymbols]}] 
        	}];
        ];
        
		xxSymbols = MU4getCodes1d[xlevels,yType];
		yySymbols = MU4getCodes1d[ylevels,yType];
        If[ showAreas,
        	AppendTo[gl, {
         			Table[ 
         				{sx,sy} = {Last@xxSymbols[[ix]], Last@yySymbols[[iy]]};
         				pow = Switch[{sx,sy}
         					,{a,a}, 4
         					,{a,b}, 1
         					,{a,c}, 2
         					,{a,d}, 3
         					,{b,a}, 1
         					,{b,b}, 1
         					,{b,c}, 1
         					,{b,d}, 1
         					,{c,a}, 2
         					,{c,b}, 1
         					,{c,c}, 2
         					,{c,d}, 1
         					,{d,a}, 3
         					,{d,b}, 1
         					,{d,c}, 1
         					,{d,d}, 2
         					,_, 0
         				];
         				(*Text[Style[ToString[sx]<>ToString[sy],36,Blue], *)
         				Text[Style[pow,36,Blue], 
         					{(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,0}] 
         			, {ix,Length[xSymbols]}, {iy,Length[ySymbols]}] 
        	}];
        ];

        gl
    ] (* MU4getGridAxesSeparateSubdiv*)


makeFigureDiadicPartitioningSobol[] :=
    Module[ {},
        grid2 = { Thickness[.02],Yellow,Table[{Line[{{0,i},{2,i}}/2],Line[{{i,0},{i,2}}/2]},{i,0,2,1}] };
        grid4 = { Thickness[.01],Orange,Table[{Line[{{0,i},{4,i}}/4],Line[{{i,0},{i,4}}/4]},{i,0,4,1}] };
        grid8 = { Thickness[.005],Cyan,Table[{Line[{{0,i},{8,i}}/8],Line[{{i,0},{i,8}}/8]},{i,0,8,1}] };
        grid16 = { Thickness[.002],Red,Table[{Line[{{0,i},{16,i}}/16],Line[{{i,0},{i,16}}/16]},{i,0,16,1}] };
        grid32 = { Thickness[.001],Blue,Table[{Line[{{0,i},{32,i}}/32],Line[{{i,0},{i,32}}/32]},{i,0,32,1}] };
        grid64 = { Thickness[.0005],Orange,Table[{Line[{{0,i},{64,i}}/64],Line[{{i,0},{i,64}}/64]},{i,0,64,1}] };

		col = Red;
		th = .003;
        grid1x16 = 	{ Thickness[th],col,Table[Line[{{0,i},{16,i}}/16],{i,0,16,16}],	Table[Line[{{i,0},{i,16}}/16],{i,0,16,1}] };
        grid2x8 = 	{ Thickness[th],col,Table[Line[{{0,i},{16,i}}/16],{i,0,16,8}],	Table[Line[{{i,0},{i,16}}/16],{i,0,16,2}] };
        grid4x4 =	{ Thickness[th],col,Table[Line[{{0,i},{16,i}}/16],{i,0,16,4}],	Table[Line[{{i,0},{i,16}}/16],{i,0,16,4}] };
        grid8x2 =	{ Thickness[th],col,Table[Line[{{0,i},{16,i}}/16],{i,0,16,2}],	Table[Line[{{i,0},{i,16}}/16],{i,0,16,8}] };
        grid16x1 =	{ Thickness[th],col,Table[Line[{{0,i},{16,i}}/16],{i,0,16,1}],	Table[Line[{{i,0},{i,16}}/16],{i,0,16,16}] };

        {ind1, ind2} = {1,2};
        buildMSobol[{ind1, ind2}];
        nf = 1; (* x *)
            npts =  16;
			ptsx =  Table[sobol1d[nf,i],{i,0,npts-1}];
        Print["Sobol dir number ind=",ind1," a058947[[ind1]]=", a058947[[ind1]] -> (IntegerDigits @ a058947[[ind1]]) -> ptsx];
        nf = 2; (* x *)
            npts =  16;
			ptsy =  Table[sobol1d[nf,i],{i,0,npts-1}];
        Print["Sobol dir number ind=",ind1," a058947[[ind1]]=", a058947[[ind1]] -> (IntegerDigits @ a058947[[ind1]]) -> ptsy];
        set = {ptsx,ptsy}//T;
        
        ptsz = .03;
        g1x16 = Graphics[{grid1x16, Black, PointSize[ptsz], Point/@set}
        	(* ,Frame->True, FrameTicks->None *)];
        g2x8 = Graphics[{grid2x8, Black, PointSize[ptsz], Point/@set}
        	(* ,Frame->True, FrameTicks->None *)];
        g4x4 = Graphics[{grid4x4, Black, PointSize[ptsz], Point/@set}
        	(* ,Frame->True, FrameTicks->None *)];
        g8x2 = Graphics[{grid8x2, Black, PointSize[ptsz], Point/@set}
        	(* ,Frame->True, FrameTicks->None *)];
        g16x11 = Graphics[{grid16x1, Black, PointSize[ptsz], Point/@set}
        	(* ,Frame->True, FrameTicks->None *)];
        plot = GraphicsRow[{g1x16,g2x8,g4x4,g8x2,g16x11},ImageSize ->{600,Automatic}];
        plot//Print;
        Export["prep-figs/fig-DiadicPartitioningSobol.pdf",plot];
    ] (* makeFigureDiadicPartitioningSobol *)

blobbyFunction[{x_,y_}]:=E^(-20 x^2 - 20 y^2) + 0.2 (Sin[Pi x])^2 (Sin[Pi y])^2

blobbyFunction01[{x_,y_}]:=With[{xx = (x-.5) 2, yy = (y-.5) 2 }, blobbyFunction[{xx,yy}] ]

MU4makeFigureMUadicPartitioning[] :=
    Module[ {},
    	(*myRandomChoice := First;*)
		lenindtab = {0,3,2,1};
        patternsLevel = 0;
        MU4goodPatterns = Table[{},{4},{4}];
        Table[
            fname = "data/MU4_L"<>ToString[patternsLevel]<>"/MU4_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            fname = "data/MU4_L"<>ToString[patternsLevel]<>"_restricted_to_12/MU4_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU4goodPatterns[[ix,iy]] =  Get[fname];
            (*Print["Reading ",fname -> Length[MU4goodPatterns[[ix,iy]]]];*)
        ,{iy,4},{ix,4}];
        
        	nlevels = 3;
			randomTabX = Table[ Table[RandomChoice[{True,False}],{2 2^nlevels}] ,{nlevels,1,4}];
        	randomTabY = Table[ Table[RandomChoice[{True,False}],{2 2^nlevels}] ,{nlevels,1,4}];
        	{ix,iy} = {1,1};
            (*codes = MU4recursiveSubdiv[3, xType,yType];*)
            (*codes = MU4getActiveCodes @ MU4recursiveSubdivSIMPLESTRandomized[nlevels,xType,yType]; *)(* does not work well *)
            
            codes = MU4getActiveCodes @ MU4recursiveSubdivSIMPLEST[nlevels,xType,yType];
            
		MU4AAmuPartitioningQ[codes,8, True]//Print ;
		MU4AAmuPartitioningQ[codes,7, True]//Print ;
		MU4AAmuPartitioningQ[codes,6, True]//Print ;
		MU4AAmuPartitioningQ[codes,5, True]//Print ;
		MU4AAmuPartitioningQ[codes,4, True]//Print ;
		MU4AAmuPartitioningQ[codes,3, True]//Print ;
		MU4AAmuPartitioningQ[codes,2, True]//Print ;

(*            
            (*codes = MU4getActiveCodes @ MU4recursiveSubdivSIMPLEST[3,xType,yType];*)
			ptsXY = MU4PhiXY /@ codes;
			gtab = Table[
           		Graphics[{ MU4getGridAxesSeparateSubdiv[nPartitionLevels+1-i,i,xType,yType,True, {Magenta,AbsoluteThickness[12]}, True, {Red,AbsoluteThickness[2]}, True ]
                    ,AbsolutePointSize[20],Point/@ ptsXY } ,ImageSize -> {800,800}   ]
            ,{i,nPartitionLevels}];
            ggrid = GraphicsGrid@Partition[gtab,3];
            Print[ggrid];
        Export["prep-figs/fig-MUadicPartitioning.pdf",ggrid];*)
    ] (* MU4makeFigureMUadicPartitioning *)

   
showmuPartitioningQ[ptsXY_,xlevels_,ylevels_,xType_:a,yType_:a, showGraphics_:True] :=
    Module[ {hlevels, gl ,txtcoltab,(*xSymbols,ySymbols,*)xvaluesFracDir,yvaluesFracDir,xmax,ymax,xind,yind,sx,sy,pow},
    	showFrame = True;
    	frameStyle = {Magenta,AbsoluteThickness[5]};
    	showSymbols = True;
    	gridStyle = {Cyan,AbsoluteThickness[2]};
    	showAreas = True;
        txtcoltab = {Red, Red,Red, Red,Red, Red,Red, Red};
        {xind,yind} = {Switch[xType,a,1,b,4,c,3,d,2],Switch[yType,a,1,b,4,c,3,d,2]};
        {xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
        gl = gridStyle;
        gl = Join[gl,{{ Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] } }];
        Do[
            xSymbols = MU4getCodes1d[ilevel-1,xType];
            xvaluesFracDir = MU4Phi /@ xSymbols;
            AppendTo[xvaluesFracDir,xmax];
            Do[AppendTo[gl, { Line[{{xvaluesFracDir[[i]],0},{xvaluesFracDir[[i]],ymax}}]}],{i,Length[xSymbols]}];
        ,{ilevel,1,xlevels}];
        Do[
            ySymbols = MU4getCodes1d[ilevel-1,yType];
            yvaluesFracDir = MU4Phi /@ ySymbols;
            AppendTo[yvaluesFracDir,ymax];
            Do[AppendTo[gl, { Line[{{0,yvaluesFracDir[[i]]},{xmax,yvaluesFracDir[[i]]}}]}],{i,Length[ySymbols]}];
        ,{ilevel,1,ylevels}];
        If[showFrame,
        	gl = Join[gl, frameStyle];
        	AppendTo[gl,Line[{{0,0},{xmax,0},{xmax,ymax},{0,ymax},{0,0}}] ];
        ];

        If[xSymbols === {{}}, xSymbols = {{xType}} ];
        If[ySymbols ==={{}}, ySymbols = {{yType}} ];
        hlevels = Floor[nlevels/2];
        If[ showSymbols,
        	AppendTo[gl, {
        			Table[ Text[Style[#,36,Black]& @ (Last@xSymbols[[ix]]), {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2.,-.02},{0,1}] , {ix,Length[xSymbols]}] ,
        			Table[ Text[Style[Rotate[#,Pi/2],36,Black]& @ (Last@ySymbols[[iy]]), {-.02, (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{1,0}] , {iy,Length[ySymbols]}] 
        	}];
        ];
        
		xxSymbols = MU4getCodes1d[xlevels,xType];
		yySymbols = MU4getCodes1d[ylevels,yType];
        If[ showAreas,
        	AppendTo[gl, {
         			Table[ 
         				{sx,sy} = {Last@xxSymbols[[ix]], Last@yySymbols[[iy]]};
         				pow = Switch[{sx,sy}
         					,{a,a}, 4
         					,{a,b}, 1
         					,{a,c}, 2
         					,{a,d}, 3
         					,{b,a}, 1
         					,{b,b}, 1
         					,{b,c}, 1
         					,{b,d}, 1
         					,{c,a}, 2
         					,{c,b}, 1
         					,{c,c}, 2
         					,{c,d}, 1
         					,{d,a}, 3
         					,{d,b}, 1
         					,{d,c}, 1
         					,{d,d}, 2
         					,_, 0
         				];
         				actual = Length @ Select[ptsXY, xvaluesFracDir[[ix+1]] > #[[1]] >= xvaluesFracDir[[ix]] && yvaluesFracDir[[iy+1]] > #[[2]] >= yvaluesFracDir[[iy]] &];
         				If[pow == actual,
	         				Text[Style[pow,36,Blue], {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,0}]
         				,
         					{
	         				Text[Style[pow,36,Blue], {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,-1}]
	         				,Text[Style[actual,36,Red], {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,1}] 
	         				}
         				]
         			, {ix,Length[xSymbols]}, {iy,Length[ySymbols]}] 
        	}];
        ];
        gl
    ] (* showmuPartitioningQ*)

    
getMU4basicSeqIndex[int_]:=If[int == 1, 1,  (Round[Log[lambda, #]] & @ int) ]


MU4AAmuPartitioningQ[codes_,imposednlevels_:0, dbg_:False] :=
    Module[ {ptsXY,nlevels,xSymbols,ySymbols,xvaluesFracDir,yvaluesFracDir,pow,actual,ilevel,gl,tab,xmax,ymax,codelen,res},
    	ptsXY = MU4PhiXY /@ codes;
    	codelen = getMU4basicSeqIndex@Length[codes];
    	nlevels = If[imposednlevels == 0, codelen, imposednlevels];
    	gtab = {};
    	res = And @@ Table[
			xSymbols = MU4getCodes1d[nlevels-ilevel,a];
			ySymbols = MU4getCodes1d[ilevel-1,a];
			xvaluesFracDir = MU4Phi /@ xSymbols;
			yvaluesFracDir = MU4Phi /@ ySymbols;
			AppendTo[xvaluesFracDir,1.];
			AppendTo[yvaluesFracDir,1.];
			
	        If[ dbg,
        		{xmax,ymax} = {1,1};
	        	gl = { Magenta,AbsoluteThickness[5], Line[{{0,0},{xmax,0},{xmax,ymax},{0,ymax},{0,0}}] ,
	        			Table[ Text[Style[#,36,Black]& @ (Last@xSymbols[[ix]]), {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2.,-.02},{0,1}] , {ix,Length[xSymbols]}] ,
	        			Table[ Text[Style[Rotate[#,Pi/2],36,Black]& @ (Last@ySymbols[[iy]]), {-.02, (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{1,0}] , {iy,Length[ySymbols]}],
 						Red,AbsoluteThickness[2],
						Table[ Line[{{xvaluesFracDir[[i]],0},{xvaluesFracDir[[i]],ymax}}],{i,2,Length[xSymbols] }],
            			Table[ Line[{{0,yvaluesFracDir[[i]]},{xmax,yvaluesFracDir[[i]]}}],{i,2,Length[ySymbols] }]
	        	};
	         ];

			tab = And @@ (Flatten @ Table[
         		pow = Switch[{xSymbols[[ix,-1]],ySymbols[[iy,-1]]}
         					,{a,a}, MU4basicSeqExtended[[codelen-nlevels+10-0]] ,	{a,b}, MU4basicSeqExtended[[codelen-nlevels+10-3]] ,	{a,c}, MU4basicSeqExtended[[codelen-nlevels+10-2]] ,	{a,d}, MU4basicSeqExtended[[codelen-nlevels+10-1]]
         					,{b,a}, MU4basicSeqExtended[[codelen-nlevels+10-3]] ,	{b,b}, MU4basicSeqExtended[[codelen-nlevels+10-6]] ,	{b,c}, MU4basicSeqExtended[[codelen-nlevels+10-5]] ,	{b,d}, MU4basicSeqExtended[[codelen-nlevels+10-4]]
         					,{c,a}, MU4basicSeqExtended[[codelen-nlevels+10-2]] ,	{c,b}, MU4basicSeqExtended[[codelen-nlevels+10-5]] ,	{c,c}, MU4basicSeqExtended[[codelen-nlevels+10-4]] ,	{c,d}, MU4basicSeqExtended[[codelen-nlevels+10-3]]
         					,{d,a}, MU4basicSeqExtended[[codelen-nlevels+10-1]] ,	{d,b}, MU4basicSeqExtended[[codelen-nlevels+10-4]] ,	{d,c}, MU4basicSeqExtended[[codelen-nlevels+10-3]] ,	{d,d}, MU4basicSeqExtended[[codelen-nlevels+10-2]]
         					,_, Print[{sx,sy} ->" boyond the range"]
         				];
         		actual = Length @ Select[ptsXY, xvaluesFracDir[[ix+1]] > #[[1]] >= xvaluesFracDir[[ix]] && yvaluesFracDir[[iy+1]] > #[[2]] >= yvaluesFracDir[[iy]] &];
         		If[dbg,
         			AppendTo[gl, {	Black, AbsolutePointSize[20],Point/@ ptsXY,
         				If[pow == actual,
	         				Text[Style[pow,36,Blue], {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,0}]
         				,
         					{
	         				Text[Style[pow,36,Blue], {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,-1}]
	         				,Text[Style[actual,36,Red], {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,1}] 
	         				}
         				] } ];
         		];
         		pow == actual
			, {ix,Length[xSymbols]}, {iy,Length[ySymbols]}] );
         	If[dbg,AppendTo[gtab, Graphics[gl,(*PlotLabel->{ilevel,nlevels}, *)ImageSize -> {400,400}] ] ];
			tab
    	,{ilevel,nlevels}];
		If[dbg,gtab//Print];
    	res
    ] (* MU4AAmuPartitioningQ *)


MU4getRandomAATile[nlevels_] := T[RandomSample /@ {MU4getCodes1d[nlevels,a],MU4getCodes1d[nlevels,a]}]

MU4builsAAtilesL123456[ntrials_:100000] :=
    Module[ {},
    	Parallelize @ Do[
	        nlevels = ilevel;
	        
	        count = 0;
	        resTiles = {};
	        Do[
				{codes, zzz} = Sort /@ MU4getPivot[1, 1, nlevels, 0, False];
				(*codes = MU4getRandomAATile[nlevels];*)
				ptsXY = MU4PhiXY /@ codes;

				If[MemberQ[resTiles, codes], Continue[] ];
				If[MU4AAmuPartitioningQ[codes],
			        (*nPartitionLevels = nlevels - 2;
					Table[
		           		Graphics[{ showmuPartitioningQ[ptsXY, nPartitionLevels+1-i,i,a,a,True ]
		                    ,AbsolutePointSize[20],Point/@ ptsXY } ,ImageSize -> {800,800}   ]
		            ,{i,nPartitionLevels}]//Print;*)
		            count++;
					Print[nlevels -> itrial -> Length[codes] -> count ];
		            resTiles = Union @ Join[resTiles, {codes} ];
				];
	        ,{itrial,ntrials}];
	        fname = "data/AAtilesL"<>ToString[nlevels]<>".dat";
	        Put[resTiles,fname];
	        Print[{ilevel,itrial}," Written into ",fname -> Length[resTiles]];
	    ,{ilevel,6}];
    ] (* MU4builsAAtilesL123456 *)

MU4recursiveAATileCodes[level_:1] :=
    Module[ {},
        If[ level <= 6, Return[RandomChoice @ aaTiles[[level]]] ];
        Join[
	        (Join[#,{a}]& /@ #)& /@ MU4recursiveAATileCodes[level-1],
	        (Join[#,{a,a,a,b}]& /@ #)& /@ MU4recursiveAATileCodes[level-4]
        ]
    ] (* MU4recursiveSubdiv *)


MU4pocSequencee[innlevels_:6, showGraphics_:False, generateDiscrepancy_:True] :=
    Module[ {},
        nlevels = innlevels;
        discrepancyMU4 = Table[{},{nlevels}];

		aaTiles = Table[
	        fname = "data/AAtilesL"<>ToString[ilevel]<>".dat";
	        data = Get[fname];
	        Print["Reading ",fname -> Length[data[[1]] ]-> Length[data]];
	        data
	    ,{ilevel,6}];

        (*codes1 = First @ MU4getPivot[1, 1, nlevels, 0, False];
        codes = codes11 = (Join[#,{a}]& /@ #)& /@ codes1;
	    pts = MU4PhiXY /@ codes1;
        Print[nlevels -> Length[codes]  -> Length[pts] ];*)
        codes = {};
	    Do[
	
	        (*codes2 = First @ MU4getPivot[1, 1, nlevels-3+iter, 0, False];
	        codes22 = (Join[#,{a,a,a,b}]& /@ #)& /@ codes2;
	        codes = Union @ Join[codes,codes22];*)
        	
        	codes = MU4recursiveAATileCodes[level];
	        pts = (MU4PhiXY /@ codes);
	        
	        Print[level -> {Length[codes2],Length[pts]} -> MU4AAmuPartitioningQ[codes] ];
	        If[ showGraphics,
	            Graphics[{ 
	                {Blue,AbsolutePointSize[20],Point/@ pts }
	                    ,MU4getGridAxesSeparateSubdiv[level+1,level+1,a,a,True,{Magenta,AbsoluteThickness[5]},False,{Cyan,AbsoluteThickness[2]},False]
	            } ,ImageSize -> {1024,1024}   ]//Print
	        ];
            If[ generateDiscrepancy,
                discrepancy = getDiscrepancy2Dexact[pts];
                discrepancyMU4[[level]] = { Length[pts], discrepancy};
                Print[discrepancyMU4];
            ];
	    ,{level,nlevels}];

		MU4AAmuPartitioningQ[codes,6, True]//Print ;
		MU4AAmuPartitioningQ[codes,5, True]//Print ;
		MU4AAmuPartitioningQ[codes,4, True]//Print ;
		MU4AAmuPartitioningQ[codes,3, True]//Print ;
		MU4AAmuPartitioningQ[codes,2, True]//Print ;
		
        If[ generateDiscrepancy,
            discrepancyTabSobol = { (* Sobol 2D Kuo's implementation http://web.maths.unsw.edu.au/~fkuo/sobol/ *)
                    {16, 0.171875},(*pSobol2Dlog1 = discrepancyComplexity[data, (Log[#])/# &, "Discrepancy Sobol 2D N/LogN"]; pSobol2Dlog1 //Print;*)
                     {64, 0.0537109}, 
                     {256, 0.0145874}, 
                     {1024, 0.00429916}, 
                     {4096, 0.00132918}, 
                     {16384, 0.000372991}, 
                     {65536, 0.0000994867},
                     {262144, 0.000027597358}
                 };
            discrepancyTabFIBOm21 = {{3,0.618034},{5,0.418034},{8,0.27051},{13,0.193678},{21,0.130694},{34,0.0866825},{55,0.0554336},{89,0.0372093},{144,0.0244132},{233,0.0161211},
                {377,0.010242},{610,0.00673888},{987,0.00436806},{1597,0.00285382},{2584,0.00180478},{4181,0.0011745},{6765,0.000755457},{10946,0.000489471},{17711,0.000308601},{28657,0.000199274}};
            discrepancyTabFIBOLen8 = {{8,0.27051},{21,0.120557},{55,0.0501118},{144,0.0230114},{377,0.00982341},{987,0.00427672},{2584,0.00180458},{6765,0.000750238},{17711,0.000306409},{46368,0.000126695}
                ,{121393, 0.0000516168}};
            ListPlot[{Log[2,#]& /@ discrepancyMU4, Log[2,#]& /@ discrepancyTabSobol}, Joined->True
                ,Ticks->{Table[{i,i},{i,20}],Automatic}
                ,PlotLabel->"log-log discrepancy"]//Print;
        ];
    ] (* MU4pocSequencee *)


(* -------------------MU3 -----------------------*)
mxMU2 = mxFibo = {{1,1},{1,0}}; (* fibo 1 level *)
mxMU3 = {{1,1,0},{0,0,1},{1,0,0}} (* MU3 *)
mxMU3POW2 = {{1,1,1},{1,0,0},{1,1,0}}      (* MU3POW2 *)
mxMU3POW3 = {{1,1,1,1},{1,0,0,0},{1,1,0,0},{1,1,1,0}}     (* MU3POW3 *) 

lambda = lambdaMU3 = 1.465571231876768;
lambdaMU3quared = 2.1478990357047874;

MU3basicSeq = {1,2,3,4,6,9,13,19,28,41,60,88,129,189,277,406,595,872,1278,1873,2745,4023,5896,8641,12664,18560,27201,39865,58425,85626,125491,183916,269542,395033,578949,848491,1243524,1822473,2670964,3914488,5736961,8407925,12322413,
	18059374,26467299,38789712,56849086,83316385,122106097,178955183,262271568,384377665,563332848,825604416,1209982081,1773314929,2598919345,3808901426,5582216355,8181135700,11990037126,17572253481,25753389181,37743426307,55315679788,
	81069068969,118812495276,174128175064,255197244033,374009739309,548137914373,803335158406,1177344897715,1725482812088,2528817970494,3706162868209,5431645680297,7960463650791,11666626519000,17098272199297,25058735850088,36725362369088,
	53823634568385,78882370418473,115607732787561,169431367355946,248313737774419,363921470561980,533352837917926,781666575692345,1145588046254325,1678940884172251,2460607459864596,3606195506118921,5285136390291172,7745743850155768,11351939356274689,16637075746565861};

MU3basicSeqExtended  = {0,1,0,0,1,1,1,2,3,4,6,9,13,19,28,41,60,88,129,189,277,406,595,872,1278,1873,2745,4023,5896,8641,12664,18560,27201,39865,58425,85626,125491,183916,269542,395033,578949,848491,1243524,1822473,2670964,3914488,5736961,8407925,12322413,
	18059374,26467299,38789712,56849086,83316385,122106097,178955183,262271568,384377665,563332848,825604416,1209982081,1773314929,2598919345,3808901426,5582216355,8181135700,11990037126,17572253481,25753389181,37743426307,55315679788,
	81069068969,118812495276,174128175064,255197244033,374009739309,548137914373,803335158406,1177344897715,1725482812088,2528817970494,3706162868209,5431645680297,7960463650791,11666626519000,17098272199297,25058735850088,36725362369088,
	53823634568385,78882370418473,115607732787561,169431367355946,248313737774419,363921470561980,533352837917926,781666575692345,1145588046254325,1678940884172251,2460607459864596,3606195506118921,5285136390291172,7745743850155768,11351939356274689,16637075746565861};
    
getMU3basicSeqIndex[int_]:=If[int == 1, 1,  (Round[Log[lambda, #]] & @ int) ]

MU3F[symbols_] :=
    With[ {s = Reverse@(symbols//MU3symbols2binCode)},
        Total@Table[MU3basicSeq[[i]] s[[i]], {i, Length[s]}]
    ]
MU3FInv[symbols_] :=
    With[ {s = (symbols//MU3symbols2binCode)},
        Total@Table[MU3basicSeq[[i]] s[[i]], {i, Length[s]}]
    ]
MU3FXY[symbols_] :=
    MU3F/@symbols

phitab = Table[lambdaMU3^-i, {i, 0, 100}] // N;
MU3PhiBin[binsymbols_] :=
    With[ {s = (binsymbols)},
        Sum[phitab[[i+1]] s[[i]], {i, Length[s]}]
    ]
MU3Phi[symbols_] :=
    With[ {s = (symbols//MU3symbols2binCode)},
        Sum[phitab[[i+1]] s[[i]], {i, Length[s]}]
    ]

MU3PhiInv[symbols_] :=MU3Phi[Reverse@symbols]

MU3PhiXY[s_] :=  MU3Phi/@s
MU3PhiXYbin[s_] := MU3PhiBin/@s


MU3symbols2binCode[symbols_] :=  (symbols/.{a:>0,b:>1,c:>0})
MU3symbols2index[symbols_] :=  (symbols/.{a:>1,b:>2,c:>3})
MU3index2symbols[ind_] :=  (ind/.{1:>a,2:>b,3:>c})

MU3getCodes1d[nlevels_:1,initsymbol_:a] :=
    Block[ {codes = {{initsymbol}}},
    	If[nlevels == 0, Return[codes] ];
        Table[ codes = Flatten[#,1]& @ (MU3subdiv1d /@ codes),{nlevels}];
        Drop[#,1]& /@ codes
    ] (* MU3getCodes1d *)


MU3subdiv1d[symbol_] :=
    If[ symbol === {},
        {{a}, {b}},
        Switch[Last[symbol]
            ,a, {Join[symbol,{a}],Join[symbol,{b}]}
            ,b, {Join[symbol,{c}]}
            ,c, {Join[symbol,{a}]}
            ,_, Print["Houston, we've got a problem"];
                            ]
    ]
MU3subdiv1dWithPermut[symbol_,permut_] :=
    Switch[Last[symbol]
    ,0, If[ permut == 0,
            {Join[symbol,{0}],Join[symbol,{1}]},
            {Join[symbol,{1}],Join[symbol,{0}]}
        ]
    ,1, {Join[symbol,{2}]}
    ,2, {Join[symbol,{3}]}
    ,3, {Join[symbol,{0}]}
    ]

visuConvert :=
    MU3symbols2binCode (* ToString or MU3symbols2binCode*)


MU3getGrid[nlevels_:2,xType_:a,yType_:a,showSymbols_:True] :=
    Module[ {hlevels,symbols1,symbols2,gl = {},coltab,txtcoltab,xSymbols,ySymbols,xvaluesFracDir,yvaluesFracDir,xmax,ymax,xind,yind},
        txtcoltab = {Red, Red,Red, Red,Red, Red,Red, Red};
        coltab = {Green, Red, Lighter@Orange, Black,Red,Blue, Black,Red,Red, Black,Red,Blue, Black,Green,Cyan};
        {xind,yind} = {Switch[xType,a,1,b,3,c,2 ],Switch[yType,a,1,b,3,c,2 ]};
        {xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[.02/lambdaMU3^(ilevel/1.25)],{Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] }}];
            xSymbols = If[ xType===a,
                           MU3getCodes1d[ilevel,xType],
                           (Drop[#, If[ xType===d,
                                        2,
                                        1
                                    ]] & /@ MU3getCodes1d[ilevel,xType])
                       ];
            ySymbols = If[ yType===a,
                           MU3getCodes1d[ilevel,yType],
                           (Drop[#, If[ yType===d,
                                        2,
                                        1
                                    ]] & /@ MU3getCodes1d[ilevel,yType])
                       ];
            xvaluesFracDir = MU3Phi /@ xSymbols;
            yvaluesFracDir = MU3Phi /@ ySymbols;
            Do[AppendTo[gl, {Line[{{xvaluesFracDir[[i]],0},{xvaluesFracDir[[i]],ymax}}]}],{i,Length[xSymbols]}];
            Do[AppendTo[gl, {Line[{{0,yvaluesFracDir[[i]]},{xmax,yvaluesFracDir[[i]]}}]}],{i,Length[ySymbols]}];
        ,{ilevel,2,nlevels}];
        hlevels = Floor[nlevels/2];
        If[ showSymbols,
            symbols1 = #[[;;hlevels]]&         /@ (xSymbols);
            symbols2 = #[[hlevels+1;;]]&     /@ (xSymbols);
            AppendTo[gl, {Black,Opacity[1]
                ,Table[
                    Text[ Column[Join[{
                                 Style[Rotate[ToString[digits2str[visuConvert/@symbols2[[i]] ]]<>"        " ,Pi/2],Bold,Black]
                                }
                                ,Reverse@Table[Style[  Rotate[visuConvert@symbols1[[i,j]],Pi/2] ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                            ]
                        ], {xvaluesFracDir[[i]],0},{0,1}]
                    , {i,Length[xvaluesFracDir]}]
                } ];
            symbols1 = #[[;;hlevels]]& /@ (ySymbols);
            symbols2 = #[[hlevels+1;;]]& /@ (ySymbols);
            AppendTo[gl, {Black,Opacity[1]
                ,Table[                        
                        Text[ Row[Join[
                                Table[Style[  ToString[visuConvert@symbols1[[i,j]]]<>" " ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                                 ,{ Style[Rotate[ToString[digits2str[visuConvert/@symbols2[[i]] ]]<>"       " ,0],Bold,Black]
                        } ] ], {0,yvaluesFracDir[[i]]},{1,0}]
                , {i,Length[yvaluesFracDir]}]    
            } ];
        ];
        gl
    ] (* MU3getGrid*)

showMU3Grid[] :=
    Module[ {},
        mx = mxMU3POW3;
        init[mx,False];
        Graphics[getDweRuKiGrid[2]]//Print;
        Graphics[MU3getGrid[6,a,b],Axes->True]//Print;
        Graphics[MU3getGrid[6,b,c],Axes->True]//Print;
        Graphics[MU3getGrid[6,c,d],Axes->True]//Print;
        Graphics[MU3getGrid[6,d,a],Axes->True]//Print;
    ]

tstMU3subdiv1d[] :=
    Module[ {},
        symbols = MU3getCodes1d[6];
    ]

(*MU3getRandomGoodPattern[ix_:a,iy_:a] :=
    Module[ {fname},
        If[ !known[MU3goodPatterns],
            MU3goodPatterns = Table[{},{4},{4}];
            Table[
                fname = "data/MU3_L6patterns/MU3_bestTiles_"<>ToString[iix]<>ToString[iiy]<>".dat";
                MU3goodPatterns[[iix,iiy]] = Get[fname];
                Print["Reading ",fname -> Length[MU3goodPatterns[[iix,iiy]]]];
            ,{iiy,4},{iix,4}];
        ];
	    RandomChoice @ MU3goodPatterns[[MU3symbols2index@ix,MU3symbols2index@iy]]
    ]*)

myRandomChoice := RandomChoice

MU3getRandomGoodPattern[ix_:a,iy_:a] := myRandomChoice @ MU3goodPatterns[[MU3symbols2index@ix,MU3symbols2index@iy]]

MU3ActiveBinCodesQ[binCodes_,forbidPatterns_] :=
    And @@ {And @@ (Max[ListConvolve[#, binCodes[[1]]]] < 2 & /@ forbidPatterns),
            And @@ (Max[ListConvolve[#, binCodes[[2]]]] < 2 & /@ forbidPatterns)}

MU3getActiveBinCodes[codes_] :=
    Module[ {codesBin,forbidPatterns},
        forbidPatterns = Switch[Length[codes[[1,1]]],2,{{1,1}} ,2,{{1,1},{1,0,1}}, _,{{1,1},{1,0,1},{1,0,0,1}} ];
        codesBin = MU3symbols2binCode@codes;
        Select[codesBin, MU3ActiveBinCodesQ[#,forbidPatterns]& ]
    ]

MU3getActiveCodes[codes_] :=
    Module[ {codesBin,cc,sel,forbidPatterns},
    	If[Length[codes[[1,1]]] == 0, Return[codes] ];
        forbidPatterns = Switch[Length[codes[[1,1]]],2,{{1,1}} ,_,{{1,1},{1,0,1} } ];
        codesBin = MU3symbols2binCode@codes;
        cc = {codes,codesBin}//T;
        sel = Select[cc, MU3ActiveBinCodesQ[#[[2]],forbidPatterns]& ];
        First /@ sel
    ]

MU3recursiveSubdivSIMPLESTRandomized[level_:1,x0_:a,y0_:a] := (* works only for randomization at the last level *)
    Module[ {x1,y1,prevlevelPattern,newpattern,j,xLastDigit,yLastDigit,xprev,yprev,res,xsubdivTileCodes,ysubdivTileCodes,xcode,ycode,xind,yind},
        If[ level == 0,
            Return[{{{},{}}}]
        ];
        {xsubdivTileCodes,ysubdivTileCodes} = {MU3getCodes1d[1,x0], MU3getCodes1d[1,y0]};
        Flatten[#,2]& @ Table[
        	{x1} = xsubdivTileCodes[[ix]];
        	{y1} = ysubdivTileCodes[[iy]];
			prevlevelPattern = MU3recursiveSubdivSIMPLEST[level-1,x1,y1];
			newpattern = Table[
				{xprev,yprev} = prevlevelPattern[[j]];
				{xcode,ycode} = {Join[{x1},xprev], Join[{y1},yprev]};
				{xind,yind} = MU3F /@ {xcode,ycode};
				{xLastDigit,yLastDigit} = {y1,x1};
				If[Total[MU3symbols2binCode/@Take[xcode,-Min[3,Length[xcode]]]] == 0 && Length[ysubdivTileCodes] == 2,
					xLastDigit = If[randomTabX[[level,xind+1]],  MU3index2symbols@iy ,  MU3index2symbols@(3-iy)];
					(*Print[x -> {level,xind} -> randomTabX[[level,xind+1]] -> (mf@{Join[xcode,{xLastDigit}], Join[ycode,{yLastDigit}]}) -> (mf@(MU3symbols2binCode/@{Join[xcode,{xLastDigit}], Join[ycode,{yLastDigit}]}))];*)
				];
				If[Total[MU3symbols2binCode/@Take[ycode,-Min[3,Length[ycode]]]] == 0 && Length[xsubdivTileCodes] == 2,
					yLastDigit = If[randomTabY[[level,yind+1]],  MU3index2symbols@ix ,  MU3index2symbols@(3-ix)];
					(*Print[y -> {level,xind} -> randomTabX[[level,xind+1]] -> (mf@{Join[xcode,{xLastDigit}], Join[ycode,{yLastDigit}]}) -> (mf@(MU3symbols2binCode/@{Join[xcode,{xLastDigit}], Join[ycode,{yLastDigit}]}))];*)
				];
				res = {Join[xcode,{xLastDigit}], Join[ycode,{yLastDigit}]};
				res
	         ,{j,Length[prevlevelPattern]}];
	         newpattern
        ,{iy,Length[ysubdivTileCodes]},{ix,Length[xsubdivTileCodes]}]
    ] (* MU3recursiveSubdivSIMPLESTRandomized *)

MU3recursiveSubdivSIMPLEST[level_:1,x0_:a,y0_:a] := (* used in prepGoodPatterns4MU3pocRecursive[] *)
    Module[ {distribBetweenPatterns,x1,y1,prevlevelPattern,newpattern,i,j,xLastDigit,yLastDigit,xprev,yprev,res,xsubdivTileCodes,ysubdivTileCodes},
        If[ level == 0,
            Return[{{{},{}}}]
        ];
        {xsubdivTileCodes,ysubdivTileCodes} = {MU3getCodes1d[1,x0], MU3getCodes1d[1,y0]};
        distribBetweenPatterns  = Tuples@{xsubdivTileCodes,ysubdivTileCodes};
        Flatten[#,1]& @ Table[
         {{x1},{y1}} = distribBetweenPatterns[[i]];
         prevlevelPattern = MU3recursiveSubdivSIMPLEST[level-1,x1,y1];
         newpattern = Table[
             {xprev,yprev} = prevlevelPattern[[j]];
             {xLastDigit,yLastDigit} = {y1,x1};
             res = {Join[{x1},xprev,{xLastDigit}], Join[{y1},yprev,{yLastDigit}]};
             res
         ,{j,Length[prevlevelPattern]}];
         newpattern
        ,{i,Length[distribBetweenPatterns]}]
    ] (* MU3recursiveSubdivSIMPLEST *)

MU3recursiveSubdivSIMPLE[level_:1,x0_:a,y0_:a] :=
    Module[ {subdivTiles,prevlevelPattern, xSubtilePrefix,ySubtilePrefix },
        If[ level == 1,
            	(*Return[{{{},{}}}]*)
        	If[{x0,y0} === {a,a} || {x0,y0} === {b,d} || {x0,y0} === {c,c} || {x0,y0} === {d,b},
				Return[{{{x0},{y0}}}]
       		,(*ELSE*)
            	Return[{{{},{}}}]
        	];
        ];
        subdivTiles = Tuples@{MU3getCodes1d[1,x0], MU3getCodes1d[1,y0]};
        res = {};
        Do[ 
        	{{xSubtilePrefix},{ySubtilePrefix}} = subdivTiles[[isubtile]];
            prevlevelPattern = MU3recursiveSubdivSIMPLE[level-1,xSubtilePrefix,ySubtilePrefix];
            Print[prevlevelPattern];
            If[ prevlevelPattern =!= {{{},{}}},
	        	AppendTo[res, {Join[{xSubtilePrefix},#[[1]],{ySubtilePrefix}], Join[{ySubtilePrefix},#[[2]],{xSubtilePrefix}]} & /@ prevlevelPattern ];
            ];
        ,{isubtile,Length[subdivTiles]}];
        Flatten[#,1]& @res
    ] (* MU3recursiveSubdivSIMPLE *)

MU3recursiveSubdiv[level_:1,x0_:a,y0_:a] :=
    Module[ {subdivTiles,prevlevelPattern, xSubtilePrefix,ySubtilePrefix },
        If[ level <= 1, Return[MU3getRandomGoodPattern[x0,y0]] ];
        subdivTiles = Tuples@{MU3getCodes1d[1,x0], MU3getCodes1d[1,y0]};
        Flatten[#,1]& @ Table[ 
        	{{xSubtilePrefix},{ySubtilePrefix}} = subdivTiles[[isubtile]];
            prevlevelPattern = MU3recursiveSubdiv[level-1,xSubtilePrefix,ySubtilePrefix];
            {Join[{xSubtilePrefix},#[[1]],{ySubtilePrefix}], Join[{ySubtilePrefix},#[[2]],{xSubtilePrefix}]} & /@ prevlevelPattern
        ,{isubtile,Length[subdivTiles]}]
    ] (* MU3recursiveSubdiv *)


MU3getRandomRankPattern[ix_:a,iy_:a] := myRandomChoice @ rankPatterns[[MU3symbols2index@ix,MU3symbols2index@iy]]

MU3recursiveSubdivWithRank[level_:1,x0_:a,y0_:a] :=
    Module[ {prevlevelRankPattern,isubtile,subdivOrders,subdivTypes,xSubdivType,ySubdivType,subdivOrderPostfix},
        If[ level <= 1, Return[MU3getRandomRankPattern[x0,y0]] ];
        Switch[{x0,y0}
            	,{a,a},
            		subdivTypes  = {{a,a},{b,a},{a,b},{b,b}}; 
            		subdivOrders = {{0,0},{0,0,1,0},{0,0,0,1},{0,0,1,0,0,1}};
            	,{a,b},
            		subdivTypes  = {{a,c},{b,c}}; 
            		subdivOrders = {{0},{0,0,1}};
            	,{a,c},
            		subdivTypes  = {{a,a},{b,a}}; 
            		subdivOrders = {{0},{0,0,1}};
          	 	,{b,a},
            		subdivTypes  = {{c,a},{c,b}}; 
            		subdivOrders = {{0},{0,0,1}};
            	,{b,b},
            		subdivTypes  = {{c,c}}; 
            		subdivOrders = {{}};
            	,{b,c},
            		subdivTypes  = {{c,a}}; 
            		subdivOrders = {{}};
          	 	,{c,a},
            		subdivTypes  = {{a,a},{a,b}}; 
            		subdivOrders = {{0},{0,0,1}};
            	,{c,b},
            		subdivTypes  = {{a,c}}; 
            		subdivOrders = {{}};
            	,{c,c},
             		subdivTypes  = {{a,a}}; 
            		subdivOrders = {{}};
           ];
        Flatten[#,1]& @ Table[ 
        	{xSubdivType,ySubdivType} = subdivTypes[[isubtile]];
        	subdivOrderPostfix = subdivOrders[[isubtile]];
            prevlevelRankPattern = MU3recursiveSubdivWithRank[level-1,xSubdivType,ySubdivType];
            (*Print[isubtile -> (mf/@ prevlevelRankPattern) -> (subdivOrderPostfix) -> ( mf/@ (Join[#[[1]],subdivOrderPostfix]& /@ prevlevelRankPattern ) )];*)
            { Join[#[[1]],subdivOrderPostfix], 
              {Join[{xSubdivType},#[[2,1]],{ySubdivType}], Join[{ySubdivType},#[[2,2]],{xSubdivType}]} } & 
            	/@ prevlevelRankPattern
        ,{isubtile,Length[subdivTypes]}]//MU3symbols2binCode
    ] (* MU3recursiveSubdivWithRank *)

MU3recursiveSubdivRandomized[level_:1,x0_:a,y0_:a] :=
    Module[ {prevlevelPattern,xsubdivTileCodes,ysubdivTileCodes,newpattern,xprev,yprev,xcode,ycode,xind,yind,x1,y1,xLastDigit,yLastDigit,res},
        If[ level <= 1, Return[MU3getRandomGoodPattern[x0,y0]] ];
        {xsubdivTileCodes,ysubdivTileCodes} = {MU3getCodes1d[1,x0], MU3getCodes1d[1,y0]};
        Flatten[#,2]& @ Table[
        	{x1} = xsubdivTileCodes[[ix]];
        	{y1} = ysubdivTileCodes[[iy]];
			prevlevelPattern = MU3recursiveSubdivRandomized[level-1,x1,y1];
			newpattern = Table[
				{xprev,yprev} = prevlevelPattern[[j]];
				{xcode,ycode} = {Join[{x1},xprev], Join[{y1},yprev]};
				{xind,yind} = MU3F /@ {xcode,ycode};
				{xLastDigit,yLastDigit} = {y1,x1};
				If[Total[MU3symbols2binCode/@Take[xcode,-Min[3,Length[xcode]]]] == 0 && Length[ysubdivTileCodes] == 2,
					xLastDigit = If[randomTabX[[level,xind+1]],  MU3index2symbols@iy ,  MU3index2symbols@(3-iy)];
				];
				If[Total[MU3symbols2binCode/@Take[ycode,-Min[3,Length[ycode]]]] == 0 && Length[xsubdivTileCodes] == 2,
					yLastDigit = If[randomTabY[[level,yind+1]],  MU3index2symbols@ix ,  MU3index2symbols@(3-ix)];
				];
				res = {Join[xcode,{xLastDigit}], Join[ycode,{yLastDigit}]};
				res
	         ,{j,Length[prevlevelPattern]}];
	         newpattern
        ,{iy,Length[ysubdivTileCodes]},{ix,Length[xsubdivTileCodes]}]
    ] (* MU3recursiveSubdivRandomized *)


MU3pocRecursive[innlevels_:2, patternsLevel_:5, x0_:a, y0_:a, showGraphics_:True, generateDiscrepancy_:True, generateFourier_:False ] :=
    Module[ {},
        baselog = Log[2,base];
        nlevels = innlevels;

        fouriertabsz = 2 4096 ;
        fsum = Table[0,{fouriertabsz},{fouriertabsz}];
        discrepancyMU3 = Table[{},{nlevels}];
        nPatterns = 16;
        
        MU3goodPatterns = Table[{},{4},{4}];
        Table[
            fname = "data/MU3_L"<>ToString[patternsLevel]<>"/MU3_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            fname = "data/MU3_L"<>ToString[patternsLevel]<>"_"<>ToString[nPatterns]<>"/MU3_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU3goodPatterns[[ix,iy]] = Get[fname];
            Print["Reading ",fname -> Length[MU3goodPatterns[[ix,iy]]] -> Length[MU3goodPatterns[[ix,iy,1]]]];
        ,{iy,3},{ix,3}];
		randomTabX = Table[ Table[RandomChoice[{True,False}],{MU3basicSeq[[2+2 (ilevel+patternsLevel)]] }] ,{ilevel,1,nlevels}];
        randomTabY = Table[ Table[RandomChoice[{True,False}],{MU3basicSeq[[2+2 (ilevel+patternsLevel)]] }] ,{ilevel,1,nlevels}];
        
        Do[
        	
            (*codes = MU3getActiveCodes @ MU3recursiveSubdivSIMPLEST[ilevel, x0, y0]; *)
            codes = MU3getActiveCodes @ MU3recursiveSubdiv[ilevel, x0, y0];
            ptsXY = MU3PhiXY /@ codes;
            Print[ilevel -> Length[ codes] ];
            If[ generateDiscrepancy,
                discrepancy = getDiscrepancy2Dexact[ptsXY];
                discrepancyMU3[[ilevel]] = { Length[ptsXY], discrepancy};
                Print[ilevel -> Length[codes]  -> Length[ptsXY] -> discrepancy];
                Print[discrepancyMU3];
            ];
            If[ showGraphics,
                If[ ilevel < 4,
                    g = Graphics[{{Opacity[.2], MU3getGrid[ 2 ilevel ]} 
                            ,PointSize[.03 /lambda^ilevel],Point/@ ptsXY
                            (*,Table[Text[Style[(*MU3symbols2binCode /@ *)codes[[i ]],18],ptsXY[[i]],{-1,1}],{i,Length[ptsXY]}]*)
                            (*,Table[Text[Style[Mod[i,100],24],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]*)
                        } 
                        ,PlotLabel->ilevel
                        ,ImageSize -> ilevel/3 {1200,1200}   ];
                    g//Print;
                    ,(*ELSE*)
	                    If [ilevel < 8,
	                   		g = Graphics[{PointSize[.01],Point/@ptsXY},PlotRange->{{0,1},{0,1}},Frame->True,FrameTicks->None];
	                    	Export["prep-figs/fig-MU3_pts_L"<>ToString[ilevel]<>".pdf",g];
	                    	g//Print
              			  ];
                ];
            (*Print[(mf/@codes) -> (mf/@activeBinCodes)];*)
                (*Abort[];*)
            ];
        ,{ilevel,1,nlevels}];
        If[ generateDiscrepancy,
            discrepancyTabSobol = { (* Sobol 2D Kuo's implementation http://web.maths.unsw.edu.au/~fkuo/sobol/ *)
                    {16, 0.171875},(*pSobol2Dlog1 = discrepancyComplexity[data, (Log[#])/# &, "Discrepancy Sobol 2D N/LogN"]; pSobol2Dlog1 //Print;*)
                     {64, 0.0537109}, 
                     {256, 0.0145874}, 
                     {1024, 0.00429916}, 
                     {4096, 0.00132918}, 
                     {16384, 0.000372991}, 
                     {65536, 0.0000994867},
                     {262144, 0.000027597358}
                 };
            discrepancyTabFIBOm21 = {{3,0.618034},{5,0.418034},{8,0.27051},{13,0.193678},{21,0.130694},{34,0.0866825},{55,0.0554336},{89,0.0372093},{144,0.0244132},{233,0.0161211},
                {377,0.010242},{610,0.00673888},{987,0.00436806},{1597,0.00285382},{2584,0.00180478},{4181,0.0011745},{6765,0.000755457},{10946,0.000489471},{17711,0.000308601},{28657,0.000199274}};
            discrepancyTabFIBOLen8 = {{8,0.27051},{21,0.120557},{55,0.0501118},{144,0.0230114},{377,0.00982341},{987,0.00427672},{2584,0.00180458},{6765,0.000750238},{17711,0.000306409},{46368,0.000126695}
                ,{121393, 0.0000516168}};
            ListPlot[{Log[2,#]& /@ discrepancyMU3, Log[2,#]& /@ discrepancyTabSobol}, Joined->True
                ,Ticks->{Table[{i,i},{i,20}],Automatic}
                ,PlotLabel->"log-log discrepancy"]//Print;
        ];
        If[ generateFourier,
            fsum += getFourier2D[Ceiling[(fouriertabsz ptsXY)],fouriertabsz];
            (*fsum[[1,1]] = 0;*)
            fsum = Reorg[fsum];
            centralPart = (fsum[[fouriertabsz/2-fouriertabsz/16 ;; fouriertabsz/2+fouriertabsz/16, fouriertabsz/2-fouriertabsz/16 ;; fouriertabsz/2+fouriertabsz/16]])^2;
            (*ListDensityPlot[centralPart, ImageSize -> {1024,1024}]//Print;*)
            psprectrum = niceRaster[50000 centralPart /Max[centralPart],zoom->1];
            Print[psprectrum];
            Export["prep-figs/fig-MU3-spectrum.png",psprectrum]
        ];
    ] (*MU3pocRecursive *)

       


MU3makeGoodPatternsWithType[xsz_:4,ysz_:4,dbgGraphics_:True] :=
    Module[ {},
        (*xlimit = Switch[xType,a,4,b,1,c,2,d,3];
        ylimit = Switch[yType,a,4,b,1,c,2,d,3];*)
        res = {};
        Do[
            intcodes = basicPatterns4x4base4[[i]];
            sel = Select[intcodes, (#[[1]] < xsz ) && (#[[2]] < ysz ) &  ];
            If[ Length[sel] == Min[xsz,ysz],
                codes = sel /.{0:>{a,a,a},1:>{a,a,b},2:>{a, b, c}, 3:> {b, c, d} };
                AppendTo[res,codes];
            ]; 
        ,{i,Length[basicPatterns4x4base4]}];
        res = Union[res];
        If[ dbgGraphics,
            Do[
                codes = res[[i]];
                xy = MU3PhiXY /@ codes;
                Graphics[{MU3getGrid[6,a,a], PointSize[.05], Point/@ xy},PlotLabel->{i,{xsz,ysz}} ]//Print;
                codes
            ,{i,Length[res]}];
        ];
        res
    ] (* MU3makeGoodPatternsWithType *)

MU3makeGoodPatterns[dbgGraphics_:True] :=
    Module[ {},
        resTab = Table[
            MU3makeGoodPatternsWithType[ix,iy,dbgGraphics]
        ,{ix,4},{iy,4}];
        resTab[[2,2]] = resTab[[1, 1]];
        Print[resTab];
    ]




prepGoodPatterns4MU3pocRecursive[inxType_:a,inyType_:a,inshowGraphics_:False,innlevels_:4] :=
    Module[ {},
        {xType,yType} = {inxType,inyType};
        nlevels = innlevels;
        showGraphics = inshowGraphics;
        distlimit = .0001;
        
  Switch[nlevels
  	,4,      
        distlimit = Switch[{xType,yType} (* this set for nlevels == 4 *)
        	,{a,a},.019
        	,{a,b},.045
        	,{a,c},.038
        	,{a,d},.022
        	
        	,{b,a},.045
            ,{b,b},.0
            ,{b,c},.038
            ,{b,d},.038

        	,{c,a},.032
            ,{c,b},.038
            ,{c,c},.038
            ,{c,d},.045

        	,{d,a},.029
        	,{d,b},.038
            ,{d,c},.045
            ,{d,d},.038
        ];
        
        
   	,5,      
        distlimit = Switch[{xType,yType} (* this set for nlevels == 5 *)
        	,{a,a},.005(*.0082*)
        	,{a,b},.014
        	,{a,c},.015
        	,{a,d},.0096
        	
        	,{b,a},.014
            ,{b,b},.019
            ,{b,c},.019
            ,{b,d},.022

        	,{c,a},.015
            ,{c,b},.026
            ,{c,c},.018
            ,{c,d},.014

        	,{d,a},.011
        	,{d,b},.022
            ,{d,c},.013
            ,{d,d},.0118
        ];
  ];
        fname = "data/MU3_bestTiles_"<>ToString[MU3symbols2index@xType]<>ToString[MU3symbols2index@yType]<>".dat";

        codes = initcodes = MU3getActiveCodes @ MU3recursiveSubdivSIMPLEST[nlevels,xType,yType];
        npts = Length[codes];
        ptsXY = MU3PhiXY /@ codes;
        Graphics[{{Opacity[.25], MU3getGrid[6,xType,yType]} 
                                ,PointSize[.05],Point/@ ptsXY
                                ,Table[Text[Style[Mod[i,100],36],ptsXY[[i]],{-1,-1}],{i,npts}]
                            } 
                            ,PlotLabel->{"SRC",{xType,yType},npts}
                            ,ImageSize -> 1/3 {1200,1200}   ]//Print;

		npermuts = 10000000;
        rescodes = {};
        count = 1;
        bestval = 0;
		Do[
			If[Mod[ipermut,100000] == 0, Print[ipermut -> bestval]; Print[rescodes] ];
			xnewcodes = (First/@initcodes)[[ RandomSample[Range[npts]] ]];
			ynewcodes = (Last/@initcodes)[[ RandomSample[Range[npts]] ]];
            codes = {xnewcodes,ynewcodes}//T;
            ptsXY = MU3PhiXY /@ codes;
            dist = getptsMinDist1[ptsXY];
            If[ dist > distlimit,
            	If[dist > bestval, bestval = dist];
                AppendTo[rescodes,codes];
        		rescodes = Union[Sort/@rescodes];
        		Print["Writing into ",fname -> Length[rescodes] -> bestval];
        		Put[rescodes,fname];
	            If[ showGraphics,
	                Graphics[{{Opacity[.25], MU3getGrid[7,xType,yType]} 
	                   ,PointSize[.05],Point/@ ptsXY
	                   ,Table[Text[Style[Mod[i,100],36],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]
	                } 
	                ,PlotLabel->{xType,yType}
	                ,ImageSize -> 1/3 {1200,1200}   ]//Print;
	            ];
            ];
            {dist,codes}
        ,{ipermut,npermuts}];

        Do[
            codes = rescodes[[i]];
            ptsXY = MU3PhiXY /@ codes;
            If[ showGraphics,
                Graphics[{{Opacity[.25], MU3getGrid[7,xType,yType]} 
                   ,PointSize[.05],Point/@ ptsXY
                   ,Table[Text[Style[Mod[i,100],36],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]
                } 
                ,PlotLabel->{xType,yType}
                ,ImageSize -> 1/3 {1200,1200}   ]//Print;
            ];
        ,{i,Length[rescodes]}];
    ] (*prepGoodPatterns4MU3pocRecursive *)

(*
prepGoodPatterns4MU3pocRecursive[a,a]
prepGoodPatterns4MU3pocRecursive[a,b]
prepGoodPatterns4MU3pocRecursive[a,c]
prepGoodPatterns4MU3pocRecursive[a,d]
prepGoodPatterns4MU3pocRecursive[b,a]
prepGoodPatterns4MU3pocRecursive[b,b]
prepGoodPatterns4MU3pocRecursive[b,c]
prepGoodPatterns4MU3pocRecursive[b,d]
prepGoodPatterns4MU3pocRecursive[c,a]
prepGoodPatterns4MU3pocRecursive[c,b]
prepGoodPatterns4MU3pocRecursive[c,c]
prepGoodPatterns4MU3pocRecursive[c,d]
prepGoodPatterns4MU3pocRecursive[d,a]
prepGoodPatterns4MU3pocRecursive[d,b]
prepGoodPatterns4MU3pocRecursive[d,c]
prepGoodPatterns4MU3pocRecursive[d,d]
*)

MU3makeDiscrepancy[] :=
    Module[ {},
    	
    	basename = "MU3";
        lentab = Table[MU3basicSeq[[i]], {i, 12, 46, 2}];
        iset = 0;
        discrepancyTab = Table[{0, 0}, {Length[lentab]}];
        Do[
    		len = lentab[[i]];
        	fname = "data/pointsets_MU3/pts_"<>ToString[NumberForm[len, 7, NumberPadding -> "0"]]<>"_"<>ToString[NumberForm[iset, 3, NumberPadding -> "0"]]<>".dat";
         	pts = Import[fname];
        	Print["Reading ",fname];
            discrepancy = getDiscrepancy2Dexact[pts];
            discrepancyTab[[i]] = { len, discrepancy};
            Print[discrepancyTab];
       		Put[discrepancyTab,"results/discrepancy_"<>basename<>".dat"];
        ,{i,Length[lentab]} ];     
    ] (* MU3makeDiscrepancy *)

MU3generatePointSets[ranksAndCodesLevel_:1,  innlevels_:14, randomizedRankFlag_:False] :=
    Module[ {},
    	
        nlevels = innlevels;
        nPatterns = 64;
        rankPatterns = Table[{},{3},{3}];
		dirName = If[randomizedRankFlag, "data/MU3_L"<>ToString[ranksAndCodesLevel]<>"_RandomizedRank_"<>ToString[nPatterns], "data/MU3_L"<>ToString[ranksAndCodesLevel]<>"_"<>ToString[nPatterns] ];
		Print["MU3generatePointSets" -> randomizedRankFlag -> dirName];
        Table[
            fname = dirName<>"/MU3_Order+Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            rankPatterns[[ix,iy]] =  Get[fname];
            Print["Reading ",fname -> Length[rankPatterns[[ix,iy]] ] -> Length[rankPatterns[[ix,iy,1]] ] ];
        ,{iy,3},{ix,3}];

    	nsets = 1;
    	targetDir = dirName<>"_pointsets";
    	If[!DirectoryQ[targetDir], CreateDirectory[targetDir] ];
    	
    	Parallelize @ Do[
	        Do[
				ranksAndCodes = MU3recursiveSubdivWithRank[ilevel]; 
	        	fulloctave = seqMU3ClosedForm[2 (ranksAndCodesLevel + ilevel) + 3 ];
	        	suboctave = Table[seqMU3ClosedForm[2 (ranksAndCodesLevel + j) + 3 ], {j,ilevel-1+1/8,ilevel,1/8}];	
				Print[{ilevel,iset} -> (Length[ranksAndCodes]) -> fulloctave -> suboctave];
				Do[
					limit = suboctave[[isub]];
					codes = Last /@ Select[ranksAndCodes,MU3F[#[[1]]] <= limit &];
					ptsXY = MU3PhiXY /@ codes;
	        		fname = targetDir<>"/pts_"<>ToString[NumberForm[limit, 7, NumberPadding -> "0"]]<>"_"<>ToString[NumberForm[iset, 3, NumberPadding -> "0"]]<>".dat";
					Print[isub -> limit -> Length[codes] -> fname];
					Export[fname,ptsXY];
				,{isub,Length[suboctave]}];
	        ,{ilevel,4 - ranksAndCodesLevel,4 - ranksAndCodesLevel + nlevels}];
	    ,{iset,0,nsets-1}]
    ] (* MU3generatePointSets *)

MU3prepDiscrepancy[ranksAndCodesLevel_:1,  innlevels_:14, randomizedRankFlag_:False] :=
    Module[ {},    	
        nlevels = innlevels;
        nPatterns = 64;

    	iset = 0;
		dirName = If[randomizedRankFlag, "data/MU3_L"<>ToString[ranksAndCodesLevel]<>"_RandomizedRank_"<>ToString[nPatterns], "data/MU3_L"<>ToString[ranksAndCodesLevel]<>"_"<>ToString[nPatterns] ];
    	targetDir = dirName<>"_pointsets";
    	ntab = Table[seqMU3ClosedForm[2 (ranksAndCodesLevel + ilevel) + 3 ] ,{ilevel,4 - ranksAndCodesLevel,4 - ranksAndCodesLevel + nlevels, 1/8}];
    	Print[ntab];
    	discrepancyTab = ntab;
    	Do[
    		npts = ntab[[i]];
    		fname = targetDir<>"/pts_"<>ToString[NumberForm[npts, 7, NumberPadding -> "0"]]<>"_"<>ToString[NumberForm[iset, 3, NumberPadding -> "0"]]<>".dat";
    		Print["Processing ",fname];
    		data = Import[fname];
    		d = getDiscrepancy2Dexact[data];
    		discrepancyTab[[i]] = {npts,d};
    		Print[discrepancyTab];
    	,{i,Length[discrepancyTab]}];
    ] (* MU3prepDiscrepancy *)

fzone[{x_, y_}, kzone_] :=
      (Sin[(kzone x)^2 + (kzone y)^2] (*+ 1*))/2;
  
mitchellFilter[x_] := With[{b=1/3,c=1/3},
      Piecewise[{{(12 - 9 b - 6 c) Abs@x^3 + (-18 + 12 b +  6 c) x^2 + (6 - 2 b),  Abs@x < 1}, {(-b - 6 c) Abs@x^3 + (6 b + 30 c) x^2 + (-12 b - 48 c) Abs@x + (8 b + 24 c), 1 <= Abs@x < 2}}, 0]/6
]

mitchellFilterC = (* compiled version *)
  Compile[{{x, _Real}}, Piecewise[{{7 Abs@x^3 + -12 x^2 + 16/3, Abs@x < 1}, {-7/3 Abs@x^3 + 12 x^2 - 20 Abs@x + 32/3, 1 <= Abs@x < 2}}, 0]/6]
  
fzoneC = Compile[{{coord, _Real, 1}, {kzone, _Real}}, (Sin[(kzone coord[[1]])^2 + (kzone coord[[2]])^2] + 1)/2]
	
MU3makeZonePlateFromFile[fname_:"data_discrepancy/pts_grid_L9.dat", samplesPerPixel_:1, filterSz_:2, outputSize_:512, stkFlag_:True] :=
(* it takes about 3 minutes to generate 512x512 output, 1 samples per pixel *)
        Block[ {zoomFactor, kzone, pts, szPts, dupNb, ptsDuplicated, indx, indy, tab, gTab, sz, i, x, y, res, outputfname},
            zoomFactor = 1;
            kzone = 2/(4 Pi);	(*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< here: Sqrt[2.] because our zoneplate goes till f=2 *)
            sz = outputSize;
            If[ !FileExistsQ[fname],
                Print["File does not exist: ",fname];
                Abort[]
            ];
            pts = If[stkFlag, Drop[#,1]& @ Import[fname], Import[fname]] ; (* stk : first line contains meta-information *)
            szPts = Round[Sqrt@(Length@pts)/Sqrt[samplesPerPixel] ];
            pts = pts*szPts;
            (*Graphics[Point/@pts]//Print;*)
            dupNb = Ceiling[2 sz/szPts]; 	(* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<here: 2 because our zoneplate goes till f=2 *)
            ptsDuplicated =  Flatten[Table[# + {x*szPts, y*szPts} & /@ pts, {x, 0, dupNb}, {y, 0, dupNb}], 2];
            Print[samplesPerPixel, " sample per pixel (mean)",mf@{fname,{samplesPerPixel,filterSz,outputSize,szPts}}];
            Print["Image size = ", sz,mf@{fname,{samplesPerPixel,filterSz,outputSize,szPts}}];
            Print[dupNb^2, " duplications of initial point set",mf@{fname,{samplesPerPixel,filterSz,outputSize,szPts}}];
            tab = Table[{}, {sz}, {sz}];
            (indx = Floor@#[[1]] + 1;
             indy = Floor@#[[2]] + 1;
             (*Parallelize @*) Do[ (* parallelization does not work here *)
                If[ (0 < indx + i < sz) && (0 < indy + j < sz),
                    tab[[indx + i, indy + j]] = {tab[[indx + i, indy + j]], 
                        mitchellFilterC[Norm[# - {indx + i, indy + j}]]*fzoneC[#, kzone]};
                ];
    		,{i, -filterSz, filterSz}, {j, -filterSz, filterSz}]) & /@ ptsDuplicated;
            tab = Rescale @ Map[Total@Flatten[#] &, tab, {2}];
            res = niceRaster[tab,zoom->zoomFactor];
	        Print["the result of ",mf@{fname,{samplesPerPixel,filterSz,outputSize,szPts}},":"];	        	
            res//Print;
            outputfname = fname<>"_zoneplate.png";
            Export[outputfname,res,"PNG"];
            Print["Written into ",outputfname];
            (*Return[res]*)
        ] (*makeZonePlateFigure*)


(* exemples: 
*)

MU3makeZonePlates[nSamplesPerPixel_:4] :=
    Module[ {},
        Parallelize @ {
			(*MU3makeZonePlateFromFile["data_discrepancy/pts_grid_L9.dat",nSamplesPerPixel,2,512,False],
			MU3makeZonePlateFromFile["data_discrepancy/pts_Sobol_L9.dat",nSamplesPerPixel,2,512,False], 
			MU3makeZonePlateFromFile["data_discrepancy/pts_halton_L9.dat",nSamplesPerPixel,2,512,False],
			MU3makeZonePlateFromFile["data_discrepancy/pts_MU3_00299915_0000.dat",nSamplesPerPixel,2,512,False],*)
        	
			MU3makeZonePlateFromFile["data_discrepancy/pts_grid_L10.dat",nSamplesPerPixel,2,512,False],
            MU3makeZonePlateFromFile["data_discrepancy/pts_Sobol_L10.dat",nSamplesPerPixel,2,512,False],
            MU3makeZonePlateFromFile["data_discrepancy/pts_halton_L10.dat",nSamplesPerPixel,2,512,False],
			MU3makeZonePlateFromFile["data_discrepancy/pts_MU3_01088589_0000.dat",nSamplesPerPixel,2,512,False]
        };
    ]

getDiscrepancy[fname_] :=
    Module[ {},
    	execstr = "stk-sampler -s "<>method<>" -n "<>ToString[npts]<>" -o data_discrepancy/pts_"<>method<>"_L"<>ToString[ilevel]<>".dat > /dev/null";
        Run[execPrefix<>"stk-discrepancy -i data_discrepancy/pts_"<>method<>"_L"<>ToString[ilevel]<>".dat -o data_discrepancy/discrepancy2D_"<>method<>"_L"<>ToString[ilevel]<>".dat -m star -I 1 > /dev/null"];
    ]

discrepancyAllRefMethods2D[inmethod_:4, fromLevel_:2,toLevel_:10] :=
    Module[ {},
    	imethod = inmethod;
    	Print["imethod = ", imethod];
    	methods = {"whitenoise", "grid", "stratified", "poisson-disk", "sobol", "halton", "ccvt", "fpo"};
    		method = methods[[imethod]];
	        discrepancyTab = {};
	        prevSessionTime = SessionTime[];
	        dtab = {};
	        Do[
	        	npts = 4^ilevel;
				Print[" Processing ",method,{ilevel,npts}];
				execstr = "stk-sampler -s "<>method<>" -n "<>ToString[npts]<>" -o data_discrepancy/pts_"<>method<>"_L"<>ToString[ilevel]<>".dat > /dev/null";
				Run[execPrefix<>execstr];
				Run[execPrefix<>"stk-discrepancy -i data_discrepancy/pts_"<>method<>"_L"<>ToString[ilevel]<>".dat -o data_discrepancy/discrepancy2D_"<>method<>"_L"<>ToString[ilevel]<>".dat -m star -I 1 > /dev/null"];
				curSessionTime = SessionTime[];
				timing = curSessionTime - prevSessionTime; (* about 20secs for 16K; 5mins for 64K; 1h30 for 256K; 24h for 1M *)
				prevSessionTime = curSessionTime; 
	        	Print["-------------- timing ", method,{ilevel,npts} -> timing];
	        	{{npts, d}} = Import["data_discrepancy/discrepancy2D_"<>method<>"_L"<>ToString[ilevel]<>".dat"];
	        	AppendTo[dtab, {npts, d}];
		        Put[dtab,"data_discrepancy/res_discrepancy2D_"<>method<>".dat"];
	        ,{ilevel,fromLevel,toLevel}];
]; (* discrepancyAllRefMethods2D *)

discrepancySobol2D[] :=
    Module[ {},
        {ind1, ind2} = {1,2};
        buildMSobol[{ind1, ind2}];
        discrepancyTabSobol = {};
        prevSessionTime = SessionTime[];
        Do[
        	npts = 4^ilevel;
	        set = pts = Table[ sobol2d[i] //N,{i,0,npts-1}]; 
			Print[" Processing ",{ilevel,Length[set]}];
			d = getDiscrepancy2Dexact[set];
			curSessionTime = SessionTime[];
			timing = curSessionTime - prevSessionTime; (* about 20secs for 16K; 5mins for 64K; 1h30 for 256K; 24h for 1M *)
			prevSessionTime = curSessionTime; 
			AppendTo[discrepancyTabSobol, {npts,d} ];
        	Print[{ilevel,timing}->"discrepancyTabSobol = ",discrepancyTabSobol];
        	Put[discrepancyTabSobol,"data_discrepancy/discrepancyTabSobol2D.dat"];     	
        ,{ilevel,2,10}];
]; (* discrepancySobol2D *)

makeSobol2DPointSets[] :=
    Module[ {},
        {ind1, ind2} = {1,2};
        buildMSobol[{ind1, ind2}];
        discrepancyTabSobol = {};
        prevSessionTime = SessionTime[];
        Do[
        	npts = 4^ilevel;
	        set = pts = Table[ sobol2d[i] //N,{i,0,npts-1}]; 
	        fname = "data_discrepancy/pts_Sobol_L"<>ToString[ilevel]<>".dat";
			Print[" Processing ",{ilevel,Length[set]} -> fname];
			Export[fname,pts];			   	
        ,{ilevel,2,12}];
]; (* discrepancySobol2D *)

a2alpha[symbols_]:=(symbols(*/.{a :> \[Alpha], b :> \[Beta], c :> \[Gamma], d :> \[Delta]}*))


getFig1Dgl[wordsDir_] :=
    Module[ {gl,h = .01, level, col, wordDir},
        level = Length[wordsDir[[1]] ] - 2;
        gl = {};
        mycolors = {Darker@Darker@Gray,Darker@Blue,Darker@Darker@Green,Darker@Darker@Darker@Orange};
        
        wordsInv = (Reverse/@wordsDir );
        intValueDir = getIntValueDir/@wordsDir;
        fracValueDir = getFracValueDir/@wordsDir;
        intValueInv = getIntValueInv/@wordsInv;
        fracValueInv = getFracValueInv/@wordsInv;
        Table[
            wordDir = wordsDir[[i]];
            type = Last@wordDir;
            col = mycolors[[type]];
            start = fracValueDir[[i]] lambda^2;
            stop = start + evecDir[[type]] lambda^(-level+2);
            center = (start+stop)/2;
            Print[(i-1) -> (evecDir[[type]] lambda^(-level)) -> (mf @ {Table[(-i),{i,12}],Table[lambda^(-i),{i,12}]}) -> start];
            AppendTo[gl,{
                {col,Rectangle[{start,-h},{stop,h}]},{Black,Thickness[.003],Line[{{start,-h},{start,h},{stop,h},{stop,-h},{start,-h}}]}
                (*,Text[getIntValueInv@(Reverse@wordDir),{center,0},{0,-1}],Text[{{intValueDir[[i]],intValueInv[[i]]}}//T,{center,0},{0,1}]*)
            }]
        ,{i,Length[wordsDir]}];
        gl
    ] (* getFig1Dgl *)

MU3makeFigureDweRuKi1dGL[codes_] :=
    Module[ {gl,h = .02, level, col, wordDir},
    	colTab = {Darker@Darker@Darker@Darker@Gray,Darker@Blue,Darker@Darker@Green,Darker@Darker@Darker@Orange};
        level = Length[codes[[1]] ] - 2;
        gl = {AbsoluteThickness[4]};
        fracValueDir = MU3Phi/@codes;
        AppendTo[fracValueDir,1];
        Table[
            wordDir = codes[[i]];
            type = Last@wordDir;
            col = colTab[[MU3symbols2index@type]];
            start = fracValueDir[[i]];
            stop = fracValueDir[[i+1]];
            center = (start+stop)/2;
            AppendTo[gl,{
                {col,Rectangle[{start,-h},{stop,h}]},Black,Line[{{start,-h},{start,h},{stop,h},{stop,-h},{start,-h}}]
               (* ,Text[getIntValueInv@(Reverse@wordDir),{center,0},{0,-1}],Text[{{intValueDir[[i]],intValueInv[[i]]}}//T,{center,0},{0,1}]*)
            }]
        ,{i,Length[codes]}];
        gl
    ] (* MU3makeFigureDweRuKi1dGL *)


MU3makeFigureDweRuKi1d[nlevels_:6] :=
    Module[ {},
        gtab = Table[
        	codes = MU3getCodes1d[ilevel,a];
            (*gl = getFig1Dgl[wordsDir];*)
            gl = MU3makeFigureDweRuKi1dGL[codes];
            g = Graphics[{gl}, ImageSize -> {800,Automatic}, AspectRatio->.05, PlotRange->{{-.01,1.01},Automatic}, Axes->False];
            (*tiles = Flatten[#, 2] &@{AALDS1dSubdivideTile /@ tiles};*)
            wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir}; 
            Print[ wordsDir ];
            g//Print;      
            g
        ,{ilevel,0,nlevels}];
        res = GraphicsColumn[gtab[[2;;]] ];
        res//Print;
        Export["prep-figs/fig-dwe-ru-ki-1d.png",res];
    ] (* MU3makeFigureDweRuKi1d *)


MU3recursiveSubdivSimple[level_:1,x0_:a,y0_:a] :=
    Module[ {subdivTiles,prevlevelPattern, xSubtilePrefix,ySubtilePrefix },
        If[ level == 1, Return [{ {{},{}} }] (*Return@MU3getRandomGoodPattern[x0,y0]*) ];
        subdivTiles = (Tuples@{MU3getCodes1d[1, a], MU3getCodes1d[1, a]})[[{1,2,3,4}]]; (*[[{1, 4, 2, 3}]];*)
        MU3getActiveCodes @ (Flatten[#,1]& @ Table[ {{xSubtilePrefix},{ySubtilePrefix}} = subdivTiles[[isubtile]];
            prevlevelPattern = MU3recursiveSubdivSimple[level-1,xSubtilePrefix,ySubtilePrefix];
            {Join[{xSubtilePrefix},#[[1]],{ySubtilePrefix}], Join[{ySubtilePrefix},#[[2]],{xSubtilePrefix}]} & /@ ((*Reverse@*)prevlevelPattern)
        ,{isubtile,Length[subdivTiles]}])
    ] (* MU3recursiveSubdiv *)

 
MU3getCodes1dVoidZero[nlevels_:1,initsymbol_:a] :=
    Block[ {codes = {{initsymbol}}},
    	If[nlevels == 0, Return[{{}} ] ];
        Table[ codes = Flatten[#,1]& @ (MU3subdiv1d /@ codes),{nlevels}];
        Drop[#,1]& /@ codes
    ] (* MU3getCodes1dVoidZero *)

MU3makeFigureProductionGL[xlevels_:2,ylevels_:2,xType_:a,yType_:a, showFrame_:True, frameStyle_:{Magenta,AbsoluteThickness[5]},showSymbols_:False,gridStyle_:{Cyan,AbsoluteThickness[2]},showAreas_:True,lambdaShift_:0,textSz_:12, showTypesOnly_:False ] :=
    Module[ {hlevels, gl ,txtcoltab,(*xSymbols,ySymbols,*)xvaluesFracDir,yvaluesFracDir,xmax,ymax,xind,yind,sx,sy,sxy,xSymbols,ySymbols,axeLabelSz=40},
        txtcoltab = {Red, Red,Red, Red,Red, Red,Red, Red};
        {xind,yind} = {Switch[xType,a,1,b,3,c,2],Switch[yType,a,1,b,3,c,2]};
        {xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
        gl = gridStyle;
        gl = Join[gl,{{ Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] } }];
            xSymbols = MU3getCodes1dVoidZero[xlevels-1,xType];
            xvaluesFracDir = MU3Phi /@ xSymbols;
            AppendTo[xvaluesFracDir,xmax];
            Do[AppendTo[gl, { Line[{{xvaluesFracDir[[i]],0},{xvaluesFracDir[[i]],ymax}}]}],{i,Length[xSymbols]}];

            ySymbols = MU3getCodes1dVoidZero[ylevels-1,yType];
            yvaluesFracDir = MU3Phi /@ ySymbols;
            AppendTo[yvaluesFracDir,ymax];
            Do[AppendTo[gl, { Line[{{0,yvaluesFracDir[[i]]},{xmax,yvaluesFracDir[[i]]}}]}],{i,Length[ySymbols]}];

        If[showFrame,
        	gl = Join[gl, frameStyle];
        	AppendTo[gl,Line[{{0,0},{xmax,0},{xmax,ymax},{0,ymax},{0,0}}] ];
        ];

        If[xSymbols === {{}}, xSymbols = {{xType}} ];
        If[ySymbols ==={{}}, ySymbols = {{yType}} ];
        hlevels = Floor[nlevels/2];
        If[ showSymbols,
        	AppendTo[gl, {
        			Table[ Text[Style[#,axeLabelSz,Black]& @ (Last@xSymbols[[ix]]), {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2.,-.02},{0,1}] , {ix,Length[xSymbols]}] ,
        			Table[ Text[Style[Rotate[#,Pi/2],axeLabelSz,Black]& @ (Last@ySymbols[[iy]]), {-.02, (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{1,0}] , {iy,Length[ySymbols]}] 
        	}];
        ];

        If[ showAreas,
        	AppendTo[gl, {
         			Table[ 
         				{sx,sy} = {Last@xSymbols[[ix]], Last@ySymbols[[iy]]};
         				sxy = ToString[sx]<>ToString[sy];
         				lambdapow = Switch[{sx,sy}
         					,{a,a}, Style[ (*HoldForm@*)(Superscript[\[Lambda], 0+lambdaShift]), textSz]
         					,{a,b}, Style[ (*HoldForm@*)(Superscript[\[Lambda], -2+lambdaShift]), textSz]
         					,{a,c}, Style[ (*HoldForm@*)(Superscript[\[Lambda], -1+lambdaShift]), textSz]
          					,{b,a}, Style[ (*HoldForm@*)(Superscript[\[Lambda], -2+lambdaShift]), textSz]
         					,{b,b}, Style[ (*HoldForm@*)(Superscript[\[Lambda], -4+lambdaShift]), textSz]
         					,{b,c}, Style[ (*HoldForm@*)(Superscript[\[Lambda], -3+lambdaShift]), textSz]
         					,{c,a}, Style[ (*HoldForm@*)(Superscript[\[Lambda], -1+lambdaShift]), textSz]
         					,{c,b}, Style[ (*HoldForm@*)(Superscript[\[Lambda], -3+lambdaShift]), textSz]
         					,{c,c}, Style[ (*HoldForm@*)(Superscript[\[Lambda], -2+lambdaShift]), textSz]
          				];
          				If[showTypesOnly,
	         				{Text[Style[sxy,textSz,Red], {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,0}] }
	         			,(*ESLE*)
	         				{Text[Style[lambdapow,textSz,Blue], {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,-1}] ,
	         				Text[Style[sxy,textSz,Red], {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,1}] }
          				]
         			, {ix,Length[xSymbols]}, {iy,Length[ySymbols]}] 
        	}];
        ];

        If[ showTypesOnly,
        	AppendTo[gl, {
         			Table[ 
         				{sx,sy} = {Last@xSymbols[[ix]], Last@ySymbols[[iy]]};
         				sxy = ToString[sx]<>ToString[sy];
 	         			{Text[Style[sxy,textSz,Red], {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,0}] }
         			, {ix,Length[xSymbols]}, {iy,Length[ySymbols]}] 
        	}];
        ];

        gl
    ] (* MU3makeFigureProductionGL *)

   
MU3makeFigureProduction[] :=
    Module[ {},
        txtsz = 32;
        dbg = False;
        mxsz = 2;
        base = mxsz;
        baselog = Log[2,base];
        nlevels = innlevels;
        gridThickness = .005;
        hshift = .15;
        {kx,ky} = {2.6,1.4};
        deltax = {0, kx -.1 , 2kx -0.9};
        deltay = {0, ky + 0, 2ky -0.6};
 			gtab = Table[
            {xcode,ycode} = {a,a};
            codes = MU3recursiveSubdivSIMPLEST[ilevel];
            ptsXY = MU3PhiXY /@ codes;
            		lbl = Switch[ilevel,1,"Initial aa-tile",2,"1 Subdivision",_,ToString[ilevel-1]<>" Subdivisions"];
                    g = Graphics[{{ MU3makeFigureProductionGL[ilevel,ilevel,a,a,True,{Magenta,AbsoluteThickness[8]},True,{Blue,AbsoluteThickness[4]},False,0, txtsz, True] } 
                          } ,PlotLabel->Style[lbl, 40]
                        ,ImageSize -> {300,300}  2 ];
                    g
             ,{ilevel,6}];
             grid = GraphicsRow[gtab[[;;4]],ImageSize -> {1600, 400},Spacings->{0,0}];
             grid//Print;
             Export["prep-figs/fig-MU3subdivisions_2.png",grid];

        txtsz = 28;
        gl = {};
 		Do[
 			{xType,yType} = MU3index2symbols /@ {ix,iy};
 			{xind,yind} = {Switch[xType,a,1,b,3,c,2],Switch[yType,a,1,b,3,c,2]};
       		{xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
 			src = MU3makeFigureProductionGL[1,1,xType,yType,True,{Magenta,AbsoluteThickness[8]},True,{Blue,AbsoluteThickness[4]},True,0, txtsz];
 			dst =  MU3makeFigureProductionGL[2,2,xType,yType,True,{Magenta,AbsoluteThickness[8]},True,{Blue,AbsoluteThickness[4]},True,-2,txtsz];
 			AppendTo[gl, (Translate[#, {deltax[[ix]], deltay[[iy]]}]& @ Text[Style["\[RightArrow]", 36], {xmax/2-.05,ymax/2} ]) ];
 			AppendTo[gl, (Translate[#, {deltax[[ix]], deltay[[iy]]} - {xmax/2+hshift, 0}]& @ src) ];
 			AppendTo[gl, (Translate[#, {deltax[[ix]], deltay[[iy]]} + {xmax/2+hshift, 0}]& @ dst) ];
 		,{ix,3},{iy,3}];
 		ggrid = Graphics[gl,ImageSize -> {1600, 800}];
 		ggrid//Print;
        Export["prep-figs/fig-MU3subdivisions_1.png",ggrid];

] (*MU3makeFigureProduction *)

MU3getGrid4Figures[nlevels_:2,xType_:a,yType_:a,showSymbols_:False,gridStyle_:{Blue,AbsoluteThickness[3]}, showFrame_:True, frameStyle_:{Magenta,AbsoluteThickness[12]}, showTileTypes_:False,textSz_:24] :=
    Module[ {hlevels, gl ,txtcoltab,xSymbols,ySymbols,xvaluesFracDir,yvaluesFracDir,xmax,ymax,xind,yind},
        txtcoltab = {Red, Red,Red, Red,Red, Red,Red, Red};
        {xind,yind} = {Switch[xType,a,1,b,3,c,2 ],Switch[yType,a,1,b,3,c,2 ]};
        {xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
        gl = gridStyle;
            gl = Join[gl,{{ Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] } }];
            xSymbols = MU3getCodes1d[nlevels-2,xType];
            ySymbols = MU3getCodes1d[nlevels-2,yType];
            xvaluesFracDir = MU3Phi /@ xSymbols;
            yvaluesFracDir = MU3Phi /@ ySymbols;
            (*AppendTo[xvaluesFracDir,xmax];
            AppendTo[yvaluesFracDir,ymax];*)
            Do[AppendTo[gl, { Line[{{xvaluesFracDir[[i]],0},{xvaluesFracDir[[i]],ymax}}]}],{i,Length[xSymbols]}];
            Do[AppendTo[gl, { Line[{{0,yvaluesFracDir[[i]]},{xmax,yvaluesFracDir[[i]]}}]}],{i,Length[ySymbols]}];
        If[showFrame,
        	gl = Join[gl, frameStyle];
        	AppendTo[gl,Line[{{0,0},{xmax,0},{xmax,ymax},{0,ymax},{0,0}}] ];
        ];
        hlevels = Floor[nlevels/2];
        If[ showSymbols,
        	If[xSymbols == {{}}, xSymbols = {{xType}}];
        	If[ySymbols == {{}}, ySymbols = {{yType}}];
        	AppendTo[gl, {Black,
        			Table[ Text[Style[#,36]& @ (Last@xSymbols[[ix]]), {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2.,-.02},{0,1}] , {ix,Length[xSymbols]}] ,
        			Table[ Text[Style[Rotate[#,Pi/2],36]& @ (Last@ySymbols[[iy]]), {-.02, (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{1,0}] , {iy,Length[ySymbols]}] 
        	}];
        ];
        If[ showTileTypes,
        	AppendTo[gl, {
         			Table[ 
         				{sx,sy} = {Last@xSymbols[[ix]], Last@ySymbols[[iy]]};
         				sxy = ToString[sx]<>ToString[sy];
         				{Text[Style[sxy,textSz,Red], {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,0}] }
         			, {ix,Length[xSymbols]}, {iy,Length[ySymbols]}] 
        	}];
        ];
        gl
    ] (* MU3getGrid4Figures*)


MU3makeFigurePopulatingL1GL[xlevels_:2,ylevels_:2,xType_:a,yType_:a, showFrame_:True, frameStyle_:{Magenta,AbsoluteThickness[5]},showSymbols_:False,gridStyle_:{Cyan,AbsoluteThickness[2]},showAreas_:True,lambdaShift_:0,textSz_:12 ] :=
    Module[ {hlevels, gl ,txtcoltab,(*xSymbols,ySymbols,*)xvaluesFracDir,yvaluesFracDir,xmax,ymax,xind,yind,sx,sy,sxy,xSymbols,ySymbols,lenindtab,len,axeLabelSz=40},
        txtcoltab = {Red, Red,Red, Red,Red, Red,Red, Red};
        {xind,yind} = {Switch[xType,a,1,b,3,c,2],Switch[yType,a,1,b,3,c,2]};
        {xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
		lenindtab = {0,2,1};
        gl = gridStyle;
        gl = Join[gl,{{ Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] } }];
            xSymbols = MU3getCodes1dVoidZero[xlevels-1,xType];
            xvaluesFracDir = MU3Phi /@ xSymbols;
            AppendTo[xvaluesFracDir,xmax];
            Do[AppendTo[gl, { Line[{{xvaluesFracDir[[i]],0},{xvaluesFracDir[[i]],ymax}}]}],{i,Length[xSymbols]}];

            ySymbols = MU3getCodes1dVoidZero[ylevels-1,yType];
            yvaluesFracDir = MU3Phi /@ ySymbols;
            AppendTo[yvaluesFracDir,ymax];
            Do[AppendTo[gl, { Line[{{0,yvaluesFracDir[[i]]},{xmax,yvaluesFracDir[[i]]}}]}],{i,Length[ySymbols]}];

        If[showFrame,
        	gl = Join[gl, frameStyle];
        	AppendTo[gl,Line[{{0,0},{xmax,0},{xmax,ymax},{0,ymax},{0,0}}] ];
        ];

        If[xSymbols === {{}}, xSymbols = {{xType}} ];
        If[ySymbols ==={{}}, ySymbols = {{yType}} ];
        hlevels = Floor[nlevels/2];
        If[ showSymbols,
        	AppendTo[gl, {
        			Table[ Text[Style[#,axeLabelSz,Black]& @ (Last@xSymbols[[ix]]), {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2.,-.02},{0,1}] , {ix,Length[xSymbols]}] ,
        			Table[ Text[Style[Rotate[#,Pi/2],axeLabelSz,Black]& @ (Last@ySymbols[[iy]]), {-.02, (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{1,0}] , {iy,Length[ySymbols]}] 
        	}];
        ];

        If[ showAreas,
        	delta = -2; (* put 0 for 6,4,3,2,1      put -2 for 3,2,1,1,1 *)
        	AppendTo[gl, {
         			Table[ 
         				{sx,sy} = {Last@xSymbols[[ix]], Last@ySymbols[[iy]]};
         				sxy = ToString[sx]<>ToString[sy];
         				len = Switch[{sx,sy}
         					,{a,a}, MU3basicSeqExtended[[ 0+11+delta ]]
         					,{a,b}, MU3basicSeqExtended[[ -2+11+delta ]]
         					,{a,c}, MU3basicSeqExtended[[ -1+11+delta ]]
          					,{b,a}, MU3basicSeqExtended[[ -2+11+delta ]]
         					,{b,b}, MU3basicSeqExtended[[ -4+11+delta ]]
         					,{b,c}, MU3basicSeqExtended[[ -3+11+delta ]]
         					,{c,a}, MU3basicSeqExtended[[ -1+11+delta ]]
         					,{c,b}, MU3basicSeqExtended[[ -3+11+delta ]]
         					,{c,c}, MU3basicSeqExtended[[ -2+11+delta ]]
          				];
         				{Text[Style[len,textSz,Blue], {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,-1}] ,
         				Text[Style[sxy,textSz,Red], {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,1}] }
         			, {ix,Length[xSymbols]}, {iy,Length[ySymbols]}] 
        	}];
        ];

        gl
    ] (* MU3makeFigurePopulatingL1GL *)

MU3makeFigurePopulatingL1[] :=
    Module[ {},
		lenindtab = {0,2,1};
        dbg = False;
        mxsz = 2;
        base = mxsz;
        baselog = Log[2,base];
        nlevels = innlevels;
        gridThickness = .005;
        absptsz = 15;
        hshift = .15;
        {kx,ky} = {2.6,1.4};
        deltax = {0, kx -.1 , 2kx -0.9};
        deltay = {0, ky + 0, 2ky -0.6};
        MU3goodPatterns = Table[{},{3},{3}];
        patternsLevel = 1;
        Table[
            fname = "data/MU3_L"<>ToString[patternsLevel]<>"/MU3_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU3goodPatterns[[ix,iy]] = Get[fname];
            Print["Reading ",fname -> Length[MU3goodPatterns[[ix,iy]]] -> Length[MU3goodPatterns[[ix,iy,1]]]];
        ,{iy,3},{ix,3}];

        txtsz = 36;
        gl = {};
 		Do[
 			{xType,yType} = MU3index2symbols /@ {ix,iy};
 			{xind,yind} = {Switch[xType,a,1,b,3,c,2],Switch[yType,a,1,b,3,c,2]};
			{ddx,ddy} = {lenindtab[[ix]], lenindtab[[iy]]};
       		{xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
            codes = MU3recursiveSubdiv[1, xType,yType];
			ptsXY = MU3PhiXY /@ codes;
 			src = {MU3makeFigurePopulatingL1GL[1,1,xType,yType,True,{Magenta,AbsoluteThickness[8]},True,{Blue,AbsoluteThickness[4]},True,0, txtsz]
 					,MU3makeFigurePopulatingL1GL[3-ddy,3-ddx,xType,yType,True,{Magenta,AbsoluteThickness[5]},False,{Cyan,AbsoluteThickness[1]},False]
 					,AbsolutePointSize[absptsz], Point/@ptsXY
 					};
            codes = MU3recursiveSubdiv[2, xType,yType];
			ptsXY = MU3PhiXY /@ codes;
 			dst =  {MU3makeFigurePopulatingL1GL[2,2,xType,yType,True,{Magenta,AbsoluteThickness[8]},True,{Blue,AbsoluteThickness[4]},True,0, txtsz]
 					,MU3makeFigurePopulatingL1GL[5-ddy,5-ddx,xType,yType,True,{Magenta,AbsoluteThickness[5]},False,{Cyan,AbsoluteThickness[1]},False]
 					,AbsolutePointSize[absptsz], Point/@ptsXY
 					};
 			AppendTo[gl, (Translate[#, {deltax[[ix]], deltay[[iy]]}]& @ Text[Style["\[RightArrow]", 36], {xmax/2-.05,ymax/2} ]) ];
 			AppendTo[gl, (Translate[#, {deltax[[ix]], deltay[[iy]]} - {xmax/2+hshift, 0}]& @ src) ];
 			AppendTo[gl, (Translate[#, {deltax[[ix]], deltay[[iy]]} + {xmax/2+hshift, 0}]& @ dst) ];
 		,{ix,3},{iy,3}];
 		ggrid = Graphics[gl,ImageSize -> {1600, 800}];
 		ggrid//Print;
        Export["prep-figs/fig-MU3populating_1.png",ggrid];

        txtsz = 48;
		gtab = Table[
            {xcode,ycode} = {a,a};
            (*codes = MU3recursiveSubdivSIMPLEST[ilevel];*)
            codes = MU3recursiveSubdiv[ilevel, a,a];
            ptsXY = MU3PhiXY /@ codes;
			lbl = Switch[ilevel,1,"Initial aa-tile",2,"1 Subdivision",_,ToString[ilevel-1]<>" Subdivisions"];
		        g = Graphics[{{  
		        		MU3makeFigurePopulatingL1GL[ilevel, ilevel, xcode,ycode,True,{Magenta,AbsoluteThickness[8]},True,{Blue,AbsoluteThickness[4]},True,0, txtsz]
		        		,MU3makeFigurePopulatingL1GL[2 ilevel+1, 2 ilevel+1, xcode,ycode,True,{Magenta,AbsoluteThickness[5]},False,{Cyan,AbsoluteThickness[1]},False,0, txtsz]
 						,AbsolutePointSize[absptsz], Point/@ptsXY
		        		 } 
		              } ,PlotLabel->Style[lbl, 40]
		            ,ImageSize -> {300,300}  2 ];
		        g
		 ,{ilevel,4}];
		 grid = GraphicsRow[gtab[[;;3]],ImageSize -> {1600, 550},Spacings->{0,0}];
		 grid//Print;
        Export["prep-figs/fig-MU3populating_2.png",grid];

] (*MU3makeFigurePopulatingL1 *)

 
 MU3makeFigurePopulatingL0AllTiles[] :=
    Module[ {},
    	myRandomChoice := First;
        basename = "goodFIBOLen8Patterns";

		lenindtab = {0,3,2,1};

        patternsLevel = 0;
        MU3goodPatterns = Table[{},{4},{4}];
        Table[
            fname = "data/MU3_L"<>ToString[patternsLevel]<>"/MU3_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU3goodPatterns[[ix,iy]] = Get[fname];
            Print["Reading ",fname -> Length[MU3goodPatterns[[ix,iy]]]];
        ,{iy,4},{ix,4}];
        
        Do[
        	{xType,yType} =  MU3index2symbols/@{ix,iy};
        	gtab = Partition[#,Min[4,Length[MU3goodPatterns[[ix,iy]]] ] ]& @ Table[
	            codes = MU3goodPatterns[[ix,iy,iTile]];
				ptsXY = MU3PhiXY /@ codes;
				{ddx,ddy} = {lenindtab[[ix]], lenindtab[[iy]]};
	            g = Graphics[{{ MU3getGridAxesSeparateSubdiv[4-ddy,4-ddx,xType,yType]} 
	                    ,AbsolutePointSize[15],Point/@ ptsXY
	                    ,Table[Text[Style[codes[[j]],14],ptsXY[[j]],{-1,-1}],{j,Length[ptsXY]}]
	                } 
	                ,PlotLabel->Style["Tile_"<>ToString[xType]<>ToString[yType]<>"_"<>ToString[iTile],Bold,30]
	                ,Frame->True
	                ,FrameStyle->White
	                ,FrameTicks->None
	                ,FrameLabel->{Style[ xType, 36,Black],Style[ yType (*Rotate[yType,-Pi/2]*), 36,Black] }
	                ,ImageSize -> 1/4 {1200,1200}   ];
	 			g
	 		,{iTile,Length[MU3goodPatterns[[ix,iy]] ]}];
	        gg = GraphicsGrid[gtab];
	        Print[gg];
	        Export["prep-figs/fig-populating_all_"<>ToString[xType]<>ToString[yType]<>".pdf",gg];
        ,{iy,4},{ix,4}];
	]


MU3getSubdivGrid[nlevels_:2,xType_:a,yType_:a,showSymbols_:True] :=
    Module[ {hlevels,symbols1,symbols2,gl = {},coltab,txtcoltab,xSymbols,ySymbols,xvaluesFracDir,yvaluesFracDir,xmax,ymax,xind,yind},
        txtcoltab = {Red, Red,Red, Red,Red, Red,Red, Red};
        coltab = {Blue, Blue, Lighter@Orange, Black,Red,Blue, Black,Red,Red, Black,Red,Blue, Black,Green,Cyan};
        {xind,yind} = {Switch[xType,a,1,b,4,c,3,d,2],Switch[yType,a,1,b,4,c,3,d,2]};
        {xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[.02(*/lambdaMU3^(ilevel )*)],{Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] }}];
            xSymbols = If[ xType===a,
                           MU3getCodes1d[ilevel,xType],
                           (Drop[#, If[ xType===d,
                                        2,
                                        1
                                    ]] & /@ MU3getCodes1d[ilevel,xType])
                       ];
            ySymbols = If[ yType===a,
                           MU3getCodes1d[ilevel,yType],
                           (Drop[#, If[ yType===d,
                                        2,
                                        1
                                    ]] & /@ MU3getCodes1d[ilevel,yType])
                       ];
            xvaluesFracDir = MU3Phi /@ xSymbols;
            yvaluesFracDir = MU3Phi /@ ySymbols;
            Do[AppendTo[gl, {Line[{{xvaluesFracDir[[i]],0},{xvaluesFracDir[[i]],ymax}}]}],{i,Length[xSymbols]}];
            Do[AppendTo[gl, {Line[{{0,yvaluesFracDir[[i]]},{xmax,yvaluesFracDir[[i]]}}]}],{i,Length[ySymbols]}];
        ,{ilevel,1,nlevels}];
        gl
    ] (* MU3getSubdivGrid*)

MU3makeFigureSubdivision[] :=
    Module[ {},
    	myRandomChoice := First;
        basename = "goodFIBOLen8Patterns";

		lenindtab = {0,3,2,1};

        patternsLevel = 0;
        MU3goodPatterns = Table[{},{4},{4}];
        Table[
            fname = "data/MU3_L"<>ToString[patternsLevel]<>"/MU3_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU3goodPatterns[[ix,iy]] = Get[fname];
            Print["Reading ",fname -> Length[MU3goodPatterns[[ix,iy]]]];
        ,{iy,4},{ix,4}];
        
        gtab = Table[
        	{xType,yType} =  {a,a};
        	{ix,iy} = {1,1};
            codes = MU3recursiveSubdiv[iSubdiv, xType,yType];
			ptsXY = MU3PhiXY /@ codes;
			Print[{ix,iy} -> {ddx,ddy}];
			lbl = Switch[iSubdiv,1,"Initial aa-tile         ",2,"1 Subdivision        ",_,ToString[iSubdiv-1]<>" Subdivisions        "];
            g = Graphics[{{ 	
            			MU3getSubdivGrid[iSubdiv-1,xType,yType]
            			,MU3getGridAxesSeparateSubdiv[2+2 iSubdiv,2+2 iSubdiv,xType,yType,True, {Magenta,AbsoluteThickness[12]} ]
            		} 
                    ,AbsolutePointSize[20],Point/@ ptsXY
                    ,Table[Text[Style[codes[[j]],16],ptsXY[[j]],{-1,-1}],{j,Length[ptsXY]}]
                } 
                ,Frame->True
                ,FrameTicks->None
                ,FrameStyle->White
                ,FrameLabel->Switch[iSubdiv
                	,1, {Style[ "a       ", 40,Black,Italic],Style[ yType (*Rotate[yType,-Pi/2]*), 40,Black,Italic] }
                	,2, {Style[ "    a              b   ", 40,Black,Italic],Style[ "        a                 b " (*Rotate[yType,-Pi/2]*), 40,Black,Italic] }
                	,3, {Style[ "a             b        c    ", 40,Black,Italic],Style[  "    a             b       c" (*Rotate[yType,-Pi/2]*), 40,Black,Italic] }
                ]
                (*,PlotRange->{{-eps,1+eps},{-eps,1+eps}}*)
                ,PlotRange ->{{-.02,1.272},{-.02,1.05}} 
                ,PlotLabel->Style[lbl,Bold,40]
                ,ImageSize -> 1/2 {1200,1200}   ];
                g//Print;
 			g
        ,{iSubdiv,3}];
        gg = GraphicsRow[gtab];
        Print[gg];
        Export["prep-figs/fig-2subdivs.pdf",gg];
	] (* MU3makeFigureSubdivision *)

       
normaMatrixQ[mx_] := ConjugateTranspose[mx].mx == mx.ConjugateTranspose[mx]
 
mxPowerClosedForm[mx_,x_]:=
	(* this algorithm is based on the fillowing property (spectral theorem)
	m^x == v.d^x.MatrixPower[v,-1]
	m == v.d.Inverse[v] or m == v.d.vinv
	where 
		m = mx
		v = Transpose[Eigenvectors[m]]
		d = DiagonalMatrix[Eigenvalues[m]]
		vinv = Inverse[v]
		
		m == v.d.vinv // Simplify
	      
	      citation:
	      Any matrix with unique eigenvectors and eigen values can be diagonalized:
				A=V.D.MatrixPower[V,-1]
			Where D is a diagonal matrix of the eign values
			and the ith column of V is the eign vector which corresponds to the eign value on the diagnal of the ith column of D.
			In general 
				A^N=V.D^N.MatrixPower[mx,-1]
	*******************************************************)
Block[{mxdiag,mxevec,mxevecinv,evalues=Eigenvalues[mx],evectors=Eigenvectors[mx]},
	mxdiag = DiagonalMatrix[evalues^x];
	mxevec = Transpose[evectors];
	mxevecinv = MatrixPower[mxevec, -1]//FullSimplify;
	(mxevec.mxdiag.mxevecinv)
] (* mxPowerClosedForm3x3*)


mxPowerClosedFormN[mx_,x_]:=
	(* this algorithm is based on the fillowing property (spectral theorem)
	m^x == v.d^x.MatrixPower[v,-1]
	m == v.d.Inverse[v] or m == v.d.vinv
	where 
		m = mx
		v = Transpose[Eigenvectors[m]]
		d = DiagonalMatrix[Eigenvalues[m]]
		vinv = Inverse[v]
		
		m == v.d.vinv // Simplify
	      
	      citation:
	      Any matrix with unique eigenvectors and eigen values can be diagonalized:
				A=V.D.MatrixPower[V,-1]
			Where D is a diagonal matrix of the eign values
			and the ith column of V is the eign vector which corresponds to the eign value on the diagnal of the ith column of D.
			In general 
				A^N=V.D^N.MatrixPower[mx,-1]
	*******************************************************)
Block[{mxdiag,mxevec,mxevecinv,evalues=Eigenvalues[mx]//N//Chop,evectors=Eigenvectors[mx]//N//Chop},
	mxdiag = DiagonalMatrix[evalues^x]//Chop;
	mxevec = Transpose[evectors]//Chop;
	mxevecinv = MatrixPower[mxevec, -1]//Chop;
	(mxevec.mxdiag.mxevecinv) (* the result is INTEGER; Round serves uniquely for conversion real->int *)
] (* mxPowerClosedForm3x3*)

MU3SseqClosedFormN[mx_,x_]:=
	(* this algorithm is based on the fillowing property (spectral theorem)
	m^x == v.d^x.MatrixPower[v,-1]
	m == v.d.Inverse[v] or m == v.d.vinv
	where 
		m = mx
		v = Transpose[Eigenvectors[m]]
		d = DiagonalMatrix[Eigenvalues[m]]
		vinv = Inverse[v]
		
		m == v.d.vinv // Simplify
	      
	      citation:
	      Any matrix with unique eigenvectors and eigen values can be diagonalized:
				A=V.D.MatrixPower[V,-1]
			Where D is a diagonal matrix of the eign values
			and the ith column of V is the eign vector which corresponds to the eign value on the diagnal of the ith column of D.
			In general 
				A^N=V.D^N.MatrixPower[mx,-1]
	*******************************************************)
Block[{mxdiag,mxevec,mxevecinv,evalues,evectors,mxpow},
	evalues=Eigenvalues[mx];
	evectors=Eigenvectors[mx];
	mxdiag = DiagonalMatrix[evalues^x];
	mxevec = Transpose[evectors];
	mxevecinv = MatrixPower[mxevec, -1]//Chop;
	mxpow = (mxevec.mxdiag.mxevecinv);
	(Total@mxpow[[1]])  (*// ToRadicals // Simplify*)
] (* mxPowerClosedForm3x3*)


mxPowerClosedForm2x2[mx2x2_,x_]:=
Block[{a, b, c, d, ev1, ev2},
	{{a, b}, {c, d}} = mx2x2;
	{ev1,ev2}=Eigenvalues[mx2x2];
	{{
		(* 1,1 *)
		  ev1^x*(a - d + (ev1 - ev2))/2   / (ev1 - ev2)
		+ ev2^x*(a - d - (ev1 - ev2))/2  / (ev2 - ev1),

		(* 1,2 *)
		  ev1^x * b / (ev1 - ev2)
		+ ev2^x * b /(ev2 - ev1) },

		(* 2,1 *)
		{  ev1^x * c  / (ev1 - ev2)
		+  ev2^x * c  / (ev2 - ev1),

		(* 2,2 *)
		- ev1^x*(a - d - (ev1 - ev2)) / 2  / (ev1 - ev2)
		- ev2^x*(a - d + (ev1 - ev2)) / 2  / (ev2 - ev1)
	}} 
] (* mxPowerClosedForm2x2 *)


(****************** test:
mx2x2 = Partition[Take[Prime[RandomSample[Range[2, 8]]], 4], 2]
Print[Table[{i, MatrixForm[MatrixPower[mx2x2, i]]} // mf, {i, 0, 5}]]
Table[{i, mf[mxPowerClosedForm2x2[x2, i]]} // mf, {i, 0, 5}]
*******************)



mxPowerClosedForm3x3[mx3x3_,x_]:=
Block[{a, b, c, d, e, f, g, h, i, ev1, ev2, ev3},
	{{a, b, c}, {d, e, f}, {g, h, i}} = mx3x3;
	{ev1,ev2,ev3}=Eigenvalues[{{a, b, c}, {d, e, f}, {g, h, i}}];
	
	(* 1,1 *)
	{{(ev1^x*( (ev1 - e)*(ev1 - i) -(f*h) ) )/((ev1 - ev2)*(ev1 - ev3)) + 
	(ev2^x*( (ev2 - e)*(ev2 - i) -(f*h) ) )/((ev2 - ev1)*(ev2 - ev3)) + 
	(ev3^x*( (ev3 - e)*(ev3 - i) -(f*h) ) )/((ev3 - ev1)*(ev3 - ev2)),
	
	(* 1,2 *)
	(ev1^x*( b*ev1 + (c*h) -(b*i) ) )/((ev1 - ev2)*(ev1 - ev3)) + 
	(ev2^x*( b*ev2 + (c*h) -(b*i) ) )/((ev2 - ev1)*(ev2 - ev3)) + 
	(ev3^x*( b*ev3 + (c*h) -(b*i) ) )/((ev3 - ev1)*(ev3 - ev2)),
	
	(* 1,3 *)
	(ev1^x*( c*ev1 + (b*f) -(c*e) ) )/((ev1 - ev2)*(ev1 - ev3)) + 
	(ev2^x*( c*ev2 + (b*f) -(c*e) ) )/((ev2 - ev1)*(ev2 - ev3)) + 
	(ev3^x*( c*ev3 + (b*f) -(c*e) ) )/((ev3 - ev1)*(ev3 - ev2))},

	(* 2,1 *)
	{(ev1^x*( d*ev1 + (f*g) -(d*i) ) )/((ev1 - ev2)*(ev1 - ev3)) + 
	(ev2^x*( d*ev2 + (f*g) -(d*i) ) )/((ev2 - ev1)*(ev2 - ev3)) + 
	(ev3^x*( d*ev3 + (f*g) -(d*i) ) )/((ev3 - ev1)*(ev3 - ev2)),

	(* 2,2 *)
	(ev1^x*( (ev1 - a)*(ev1 - i) -(c*g) ) )/((ev1 - ev2)*(ev1 - ev3)) + 
	(ev2^x*( (ev2 - a)*(ev2 - i) -(c*g) ) )/((ev2 - ev1)*(ev2 - ev3)) + 
	(ev3^x*( (ev3 - a)*(ev3 - i) -(c*g) ) )/((ev3 - ev1)*(ev3 - ev2)),

	(* 2,3 *)
	(ev1^x*( f*ev1 + d c - a f  ) )/((ev1 - ev2)*(ev1 - ev3)) + 
	(ev2^x*( f*ev2 + d c - a f  ) )/((ev2 - ev1)*(ev2 - ev3)) + 
	(ev3^x*( f*ev3 + d c - a f  ) )/((ev3 - ev1)*(ev3 - ev2))},

	(* 3,1 *)
	{(ev1^x*( g*ev1 + (d*h) -(e*g) ) )/((ev1 - ev2)*(ev1 - ev3)) + 
	(ev2^x*( g*ev2 + (d*h) -(e*g) ) )/((ev2 - ev1)*(ev2 - ev3)) + 
	(ev3^x*( g*ev3 + (d*h) -(e*g) ) )/((ev3 - ev1)*(ev3 - ev2)),

	(* 3,2 *)
	(ev1^x*( h*ev1 + g b - a h ) )/((ev1 - ev2)*(ev1 - ev3)) + 
	(ev2^x*( h*ev2 + g b - a h ) )/((ev2 - ev1)*(ev2 - ev3)) + 
	(ev3^x*( h*ev3 + g b - a h ) )/((ev3 - ev1)*(ev3 - ev2)),

	(* 3,3 *)
	(ev1^x*( (ev1 - e)*(ev1 - a) -(b*d) ) )/((ev1 - ev2)*(ev1 - ev3)) + 
	(ev2^x*( (ev2 - e)*(ev2 - a) -(b*d) ) )/((ev2 - ev1)*(ev2 - ev3)) + 
	(ev3^x*( (ev3 - e)*(ev3 - a) -(b*d) ) )/((ev3 - ev1)*(ev3 - ev2))}}
] (* mxPowerClosedForm3x3*)

findAnalyticalEigenSystem[mx_] :=
    Module[ {},
        {evals, evecs} = N[Eigensystem[mx] ];
        lambda = evals /. {(x_ /; Im[x] != 0) -> 0} // Max;
        keyIndex = Position[evals,lambda][[1,1]];
        {aevals, aevecs} = Eigensystem[mx];
        aeval = aevals[[keyIndex]]//ToRadicals//Simplify;
        aevec = aevecs[[keyIndex]]//ToRadicals//Simplify;
        eval = aevals[[keyIndex]]//N;
        evec = aevecs[[keyIndex]]//N;
        cp = CharacteristicPolynomial[mx, x];
        Print[mx//mf,mx//T//mf," eval: " -> cp -> evals[[keyIndex]]];
        Print["evecs: ",evec/Max[evec]," ratio:",Max[evec]/Min[evec]];
        Print["analytical eval: ",aeval];
        Print["analyticalevec: ",aevec];
        Print["analytical eval: ",aeval//InputForm];
        Print["analyticalevec: ",aevec//InputForm];
        cp
    ]

mxMU2SseqClosedForm[x_]:=
Block[{ev1, ev2},
	{ev1,ev2}=Eigenvalues[mxMU2];
	(ev1^x (3+ev1-ev2)+(-3+ev1-ev2) ev2^x)/(2 (ev1-ev2))// FullSimplify
] (* mxPowerClosedForm2x2 *)

mxMU3SseqClosedForm[x_]:=
Block[{ev1, ev2, ev3},
	{ev1,ev2,ev3}=Eigenvalues[mxMU3];
	(*{ev1,ev2,ev3}={1/3 (1+(1/2 (29-3 Sqrt[93]))^(1/3)+(1/2 (29+3 Sqrt[93]))^(1/3)),1/3-1/6 (1+I Sqrt[3]) (1/2 (29-3 Sqrt[93]))^(1/3)+1/6 I (I+Sqrt[3]) (1/2 (29+3 Sqrt[93]))^(1/3),1/3+1/6 I (I+Sqrt[3]) (1/2 (29-3 Sqrt[93]))^(1/3)-1/6 (1+I Sqrt[3]) (1/2 (29+3 Sqrt[93]))^(1/3)}*);
	(-ev2^x (1+ev2+ev2^2) (ev1-ev3)+ev1^x (1+ev1+ev1^2) (ev2-ev3)+(ev1-ev2) ev3^x (1+ev3+ev3^2))/((ev1-ev2) (ev1-ev3) (ev2-ev3))// FullSimplify
] (* mxMU3SseqClosedForm*)

mxMU4SseqClosedForm[x_]:=
Block[{ev1, ev2,ev3,ev4,xev1,xev2,xev3,xev4},
	{ev2,ev4,ev3,ev1} = Eigenvalues[mxMU4];
	{xev1,xev2,xev3,xev4} = (Root[1 - 9 #1 - 5 #1^2 - 283 #1^3 + 283 #1^4 &, #])& /@ {1,2,3,4};
	(ev1^(1 + x) xev1 + ev2^(1 + x) xev2 + ev3^(1 + x) xev3 + ev4^(1 + x) xev4)// FullSimplify
] (* mxMU4SseqClosedForm *)

(****************** test:
mx3x3 = Partition[Take[Prime[RandomSample[Range[2, 12]]], 9], 3]
Print[Table[{i, MatrixForm[MatrixPower[mx3x3, i]]} // mf, {i, 0, 5}]]
Table[{i, mf[mxPowerClosedForm3x3[mx3x3, i]]} // mf, {i, 0, 5}]
*******************)

(*
exp = mxPowerClosedForm[mxMU4, x]
simplerexp = FullSimplify@(Total@exp[[1]])
(simplerexp /. {Root[-1 - #1^3 + #1^4 &, 1] :> ev1, 
    Root[-1 - #1^3 + #1^4 &, 2] :> ev2, 
    Root[-1 - #1^3 + #1^4 &, 3] :> ev3, 
    Root[-1 - #1^3 + #1^4 &, 4] :> ev4, 
    Root[1 - 9 #1 - 5 #1^2 - 283 #1^3 + 283 #1^4 &, 1] :> xev1, 
    Root[1 - 9 #1 - 5 #1^2 - 283 #1^3 + 283 #1^4 &, 2] :> xev2, 
    Root[1 - 9 #1 - 5 #1^2 - 283 #1^3 + 283 #1^4 &, 3] :> xev3, 
    Root[1 - 9 #1 - 5 #1^2 - 283 #1^3 + 283 #1^4 &, 4] :>xev4}) // FullSimplify
*)
genMU2[x_]:=x/(1-x-x^2) (* Graham-Knuth-Patashnik p.297 *)
genMU3[x]:=x/(1-x-x^3)
genMU4[x]:=x/(1-x-x^4)

seqMU3ClosedForm[n_]:=Module[{\[Alpha],\[Beta],\[Gamma]},
	(*{\[Alpha],\[Beta],\[Gamma]} = {Root[-1-#1^2+#1^3&,1],Root[-1-#1^2+#1^3&,2],Root[-1-#1^2+#1^3&,3]};*)
	{\[Alpha],\[Beta],\[Gamma]} = {1/3 (1+(1/2 (29-3 Sqrt[93]))^(1/3)+(1/2 (29+3 Sqrt[93]))^(1/3)),
		1/3+1/6 I (I+Sqrt[3]) (1/2 (29-3 Sqrt[93]))^(1/3)-1/6 (1+I Sqrt[3]) (1/2 (29+3 Sqrt[93]))^(1/3),
		1/3-1/6 (1+I Sqrt[3]) (1/2 (29-3 Sqrt[93]))^(1/3)+1/6 I (I+Sqrt[3]) (1/2 (29+3 Sqrt[93]))^(1/3)};
	\[Alpha]^(n+1)/((\[Alpha]-\[Beta]) (\[Alpha]-\[Gamma])) + \[Beta]^(n+1)/((\[Beta]-\[Alpha]) (\[Beta]-\[Gamma])) + \[Gamma]^(n+1)/((\[Gamma]-\[Alpha]) (\[Gamma]-\[Beta])) 
] // N // Round (* the expression is EXCT! rounding only to speed-up *)

seqMU4ClosedForm[n_]:=Module[{\[Alpha],\[Beta],\[Gamma],\[Delta]},
	{\[Alpha],\[Beta],\[Gamma],\[Delta]} = Root[-1-#1^3+#1^4&,#]& /@ {2,1,4,3};	
	(\[Alpha]^(n+2)/((\[Alpha]-\[Beta]) (\[Alpha]-\[Gamma]) (\[Alpha]-\[Delta]) ) 
	+ \[Beta]^(n+2)/((\[Beta]-\[Alpha]) (\[Beta]-\[Gamma]) (\[Beta]-\[Delta])) 
	+ \[Gamma]^(n+2)/((\[Gamma]-\[Alpha]) (\[Gamma]-\[Beta]) (\[Gamma]-\[Delta]) ) 
	+ \[Delta]^(n+2)/((\[Delta]-\[Alpha]) (\[Delta]-\[Beta]) (\[Delta]-\[Gamma]))  )  

] (*// N // Round*) (* the expression is EXCT! rounding only to speed-up *)


(*

mf/@Table[{i,seqMU4ColosedForm[i]},{i,-6,10}]
-----------------
(*MU3:*)
generatorFuncion = genMU3[x]
lhe = A/(1 - a x) + B/(1 - b x) + C/(1 - c x)  

(*now, findinf {a,b,c}:*)
exp = Apart @ Denominator[Together@lhe]
coefs = CoefficientList[exp,x]
gencoefs = CoefficientList[#, x] & @ (coefs[[1]] Denominator[generatorFuncion]) (*<<<<<<<<<<<<< here coefs[[1]] == -1 *)
sol = Solve[{coefs == gencoefs}, {a, b, c}] // FullSimplify
Replace[#, sol[[1]] ]& /@ {a,b,c}
(*gives {Root[-1-#1^2+#1^3&,1],Root[-1-#1^2+#1^3&,2],Root[-1-#1^2+#1^3&,3]}*)

(*now, findinf {A,B,C}:*)
exp = Apart @ Numerator[Together@lhe]
coefs = CoefficientList[exp,x]
gencoefs = CoefficientList[#, x] & @ ( Numerator[generatorFuncion] )
sol = Solve[{coefs[[1]] == 0, coefs[[2]] == 1, coefs[[3]] == 0}, {A, B, C}] // FullSimplify
(*gives {{A->1/((-a+b) (a-c)),B->1/((a-b) (b-c)),C->1/((a-c) (-b+c))}} *)

{Root[-1 - #1^2 + #1^3 &, 1], Root[-1 - #1^2 + #1^3 &, 2], Root[-1 - #1^2 + #1^3 &, 3]} // ToRadicals // Simplify
{Root[-1 - #1^2 + #1^3 &, 1], Root[-1 - #1^2 + #1^3 &, 2], Root[-1 - #1^2 + #1^3 &, 3]} // ToRadicals // Simplify

(*test:*)

mf /@ Table[{i,seqMU3ClosedForm[i]},{i,-10,20}]

TexForm of the final expression  

form1: 
exp = HoldForm @ ( 
	(1+\[Alpha]^2)\[Alpha]^n/((\[Alpha]-\[Beta]) (\[Alpha]-\[Gamma])) + (1+\[Beta]^2)\[Beta]^n/((\[Beta]-\[Alpha]) (\[Beta]-\[Gamma])) + (1+\[Gamma]^2)\[Gamma]^n/((\[Gamma]-\[Alpha]) (\[Gamma]-\[Beta])) 
	)
TeXForm[exp] // Print

form2: 
exp = HoldForm @ ( 
	-(\[Alpha]^n (\[Beta]-\[Gamma]) + \[Beta]^n (\[Gamma]-\[Alpha]) + \[Gamma]^n (\[Alpha]-\[Beta]))/((\[Alpha]-\[Beta])(\[Beta]-\[Gamma])(\[Gamma]-\[Alpha]) )
	)



###########################################################################################################################
MU4:
generatorFuncion = genMU4[x]
lhe = A/(1 - \[Alpha] x) + B/(1 - \[Beta] x) + C/(1 - \[Gamma] x) + D/(1 - \[Delta] x)  

{\[Alpha],\[Beta],\[Gamma],\[Delta]} = Root[-1-#1^3+#1^4&,#]& /@ {2,1,4,3};

exp = Hold @ (-(alpha^n/((alpha-beta) (gamma-alpha)) + beta^n/((alpha-beta) (beta-gamma)) + gamma^n/((gamma-alpha) (beta-gamma)) ) /.{alpha:>\[Alpha],beta:>\[Beta],gamma:>\[Gamma],delta:>\[Delta]} )
TexForm[ ]

now, findinf {A,B,C,D} ----------------------------------
generatorFuncion = genMU4[x]
lhe = A/(1 - a x) + B/(1 - b x) + C/(1 - c x) + D/(1 - d x)  
exp = Apart @ Numerator[Together@lhe]
coefs = CoefficientList[exp,x]
gencoefs = CoefficientList[#, x] & @ ( Numerator[generatorFuncion] )
sol = Solve[{coefs == gencoefs}, {A, B, C, D}]
sol /. {a :> alpha, b :> beta, c :> gamma, d :> delta} // FullSimplify // Print
{{A->1/((alpha-beta) (alpha-delta) (alpha-gamma)),B->1/((-alpha+beta) (beta-delta) (beta-gamma)),C->1/((beta-gamma) (delta-gamma) (-alpha+gamma)),D->1/((alpha-delta) (beta-delta) (delta-gamma))}}

test:
mf @ Table[{i,seqMU4ClosedForm[i]},{i,20}]

form1: 
exp = HoldForm @ ( 
	(\[Alpha]^n/((\[Alpha]-\[Beta]) (\[Alpha]-\[Gamma]) (\[Alpha]-\[Delta]) ) 
	+ \[Beta]^n/((\[Beta]-\[Alpha]) (\[Beta]-\[Gamma]) (\[Beta]-\[Delta])) 
	+ \[Gamma]^n/((\[Gamma]-\[Alpha]) (\[Gamma]-\[Beta]) (\[Gamma]-\[Delta]) ) 
	+ \[Delta]^n/((\[Delta]-\[Alpha]) (\[Delta]-\[Beta]) (\[Delta]-\[Gamma]))  )  
	)
TeXForm[exp] // Print

{\[Alpha], \[Beta], \[Gamma], \[Delta]} = Root[-1 - #1^3 + #1^4 &, #] & /@ {2, 1, 4, 3} // ToRadicals // Simplify  ;
\[Alpha] // ToRadicals // Simplify // TeXForm
\[Beta] // ToRadicals // Simplify // TeXForm
\[Gamma] // ToRadicals // Simplify // TeXForm
\[Delta] // ToRadicals // Simplify // TeXForm

{\[Alpha], \[Beta], \[Gamma], \[Delta]} = Root[-1 - #1^3 + #1^4 &, #] & /@ {2, 1, 4, 3} // ToRadicals // Simplify 
{\[Alpha], \[Beta], \[Gamma], \[Delta]} // InputForm // Print
{1/4 + Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)]/4 + Sqrt[1/2 + 4*(2/(3*(-9 + Sqrt[849])))^(1/3) - ((-9 + Sqrt[849])/2)^(1/3)/3^(2/3) + 1/(2*Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)])]/2, 1/4 + Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)]/4 - Sqrt[1/2 + 4*(2/(3*(-9 + Sqrt[849])))^(1/3) - ((-9 + Sqrt[849])/2)^(1/3)/3^(2/3) + 1/(2*Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)])]/2, 1/4 - Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)]/4 + Sqrt[1/2 + 4*(2/(3*(-9 + Sqrt[849])))^(1/3) - ((-9 + Sqrt[849])/2)^(1/3)/3^(2/3) - 1/(2*Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)])]/2, 1/4 - Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)]/4 - Sqrt[1/2 + 4*(2/(3*(-9 + Sqrt[849])))^(1/3) - ((-9 + Sqrt[849])/2)^(1/3)/3^(2/3) - 1/(2*Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)])]/2}
>>>> replace Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)] by r1
exp = {1/4 + r1/4 + Sqrt[1/2 + 4*(2/(3*(-9 + Sqrt[849])))^(1/3) - ((-9 + Sqrt[849])/2)^(1/3)/3^(2/3) + 1/(2*r1)]/2, 1/4 + r1/4 - Sqrt[1/2 + 4*(2/(3*(-9 + Sqrt[849])))^(1/3) - ((-9 + Sqrt[849])/2)^(1/3)/3^(2/3) + 1/(2*r1)]/2, 1/4 - r1/4 + Sqrt[1/2 + 4*(2/(3*(-9 + Sqrt[849])))^(1/3) - ((-9 + Sqrt[849])/2)^(1/3)/3^(2/3) - 1/(2*r1)]/2, 1/4 - r1/4 - Sqrt[1/2 + 4*(2/(3*(-9 + Sqrt[849])))^(1/3) - ((-9 + Sqrt[849])/2)^(1/3)/3^(2/3) - 1/(2*r1)]/2}
exp//FullSimplify//Print
{1/12 (3+3 r1+Sqrt[6] Sqrt[3/r1+Root[-675+171 #1-9 #1^2+#1^3&,1]]),1/12 (3+3 r1-Sqrt[6] Sqrt[3/r1+Root[-675+171 #1-9 #1^2+#1^3&,1]]),1/12 (3-3 r1+Sqrt[6] Sqrt[-(3/r1)+Root[-675+171 #1-9 #1^2+#1^3&,1]]),1/12 (3-3 r1-Sqrt[6] Sqrt[-(3/r1)+Root[-675+171 #1-9 #1^2+#1^3&,1]])}
>>>> replace Root[-675+171 #1-9 #1^2+#1^3&,1] by (r2)
{1/12 (3+3 r1+Sqrt[6] Sqrt[3/r1+(r2)]),1/12 (3+3 r1-Sqrt[6] Sqrt[3/r1+(r2)]),1/12 (3-3 r1+Sqrt[6] Sqrt[-(3/r1)+(r2)]),1/12 (3-3 r1-Sqrt[6] Sqrt[-(3/r1)+(r2)])}

{\[Alpha], \[Beta], \[Gamma], \[Delta]} =  {1/12 (3+3 r1+Sqrt[6] Sqrt[3/r1+(r2)]),1/12 (3+3 r1-Sqrt[6] Sqrt[3/r1+(r2)]),1/12 (3-3 r1+Sqrt[6] Sqrt[-(3/r1)+(r2)]),1/12 (3-3 r1-Sqrt[6] Sqrt[-(3/r1)+(r2)])}

\[Alpha]  // FullSimplify // TeXForm
\[Beta]  // FullSimplify // TeXForm
\[Gamma]  // FullSimplify // TeXForm
\[Delta]  // FullSimplify // TeXForm

Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)]  // Simplify // TeXForm
Sqrt[1 - 16*(2/(3*(-9 + Sqrt[849])))^(1/3) + 2*(2/3)^(2/3)*(-9 + Sqrt[849])^(1/3)]  // N // TeXForm

exp = Root[-675 + 171 #1 - 9 #1^2 + #1^3 &, 1] // ToRadicals // Simplify
exp  // TeXForm
exp // N // TeXForm

*)

(*------------------------ After SIGGRAPH-2016 submission ------------------------------*)

MU3buildCCVTbasedTilesBNprepPivots[inbasicShift_:14, showGraphics_:True] :=
    Module[ {basicShift,mindistLimit},
		lenindtab = {0,2,1};
		basicShift = inbasicShift;
		mindistLimit = Switch[basicShift, 12, 0, 14, 0];

		pivots = pivotsCodes =Table[{},{3}];
		pivots = Table[{},{3}];
		{pivotsCodes[[1]],pivots[[1]]} = MU3getPivot[1,1,basicShift,mindistLimit,showGraphics]; (* AApivot *)
		{pivotsCodes[[2]],pivots[[2]]} = MU3getPivot[2,2,basicShift,mindistLimit,showGraphics]; (* BBpivot *)
		{pivotsCodes[[3]],pivots[[3]]} = MU3getPivot[3,3,basicShift,mindistLimit,showGraphics]; (* CCpivot *)
	] (* MU3buildCCVTbasedTilesBNprepPivots *)

MU3getPivot[ix_,iy_,basicShift_,mindistLimit_:0,showGraphics_:False,freeFlag_:True] :=
    Module[ {lenindtab,xType,yType,ddx,ddy,xsymbols,ysymbols,npts,pts,xmax,ymax,found,iter,dx,dy,xpts,ypts,ysort,order,codes,ptsxy,mindist},
		lenindtab = {0,2,1};
		{xType,yType} = MU3index2symbols@{ix,iy};
		{ddx,ddy} = {lenindtab[[ix]], lenindtab[[iy]]};		
		xsymbols = Join[#,Table[a,{ddy}]]& /@ MU3getCodes1d[basicShift-ddy, xType];
		ysymbols = Join[#,Table[a,{ddx}]]& /@ MU3getCodes1d[basicShift-ddx, yType];
		npts = Length[xsymbols]; 
		{xmax,ymax} = {1/lambda^ddx,1/lambda^ddy};

        found = False;
        iter  = 0;
        While[ !found,
			pts = MU3getCCVTpts[npts,xmax,ymax];
			{dx,dy} = pts[[1]];
			If[!freeFlag, pts = ({Mod[Subtract[#[[1]],dx],xmax],Mod[Subtract[#[[2]],dy],ymax]}& /@ pts) ];
			{xpts,ypts} = {First/@pts,Last/@pts};
			ysort = {ypts, Range[Length[pts]]} // T // Sort;
	        order = permut2order[Last /@ ysort];
	        codes = Table[{xsymbols[[ i ]], ysymbols[[ order[[i]] ]]},{i,Length[pts]}];
	        found = If[mindistLimit == 0, True,
		        ptsxy = MU3PhiXY /@ codes;        	
				mindist = Round[1000000 getptsMinDist1[ptsxy]];
				found = mindist > mindistLimit;
				iter++;
	        ];
        ];
		If[showGraphics, ptsxy = MU3PhiXY /@ codes; 
						{
		            	 Graphics[{PointSize[.01], Point /@ pts}, Frame -> True, FrameTicks -> None, PlotLabel->{iter -> {xType,yType},Length[pts] (*-> Round[1000000 getptsMinDist1[pts]]*) }, PlotRange->{{0,1},{0,1}}, ImageSize -> {600,600}/2] 
		            	,Graphics[{
		            		MU3makeFigureProductionGL[basicShift/2+5-ddx,basicShift/2+5-ddy,xType,yType,True,{Magenta,AbsoluteThickness[5]},True,{Cyan,AbsoluteThickness[2]},False]
		            				, PointSize[.01], Point /@ ptsxy
		            				,Table[Line[{pts[[i]],ptsxy[[i]]}],{i,Length[pts]}]
		            				,Red, Point /@ pts
		            			}
		            			,Axes->True
		            		, Frame -> True, FrameTicks -> None, PlotRange->All(*{{0,xmax},{0,ymax}}*), ImageSize -> {600,600} ]
						 }//Print
		 ];
		{codes,pts}
] (* MU3getPivot *)


MU3getCCVTpts[npts_:131,xsz_:1,ysz_:1] :=
    Module[ {outfname,execstr},
    	outfname = "tmp/pts"<>pid<>".dat";
    	If[ FileExistsQ[outfname], DeleteFile[outfname] ];
		execstr = "ccvtTor "<>ToString[npts]<>" 1024 "<>ToString[xsz]<>" "<>ToString[ysz]<>" "<>outfname<>" > /dev/null";
		(*Print["executing ",execstr];*)
		Run[execPrefix<>execstr];
		Sort @ Import[outfname]
] (* MU3getPivot *)
 
MU3prepL1Tiles[x0_:a, y0_:a ] :=
    Module[ {},
    	xsz = Switch[x0,a,1,b,1/lambdaMU3^2,c,1/lambdaMU3];
    	ysz = Switch[y0,a,1,b,1/lambdaMU3^2,c,1/lambdaMU3];
        resTiles = {};
        count = 0;
        While[True,
	        Do[
	            codes = MU3getActiveCodes @ MU3recursiveSubdivSIMPLEST[ilevel, x0, y0];
	            codes = Select[codes, MU3Phi@#[[1]] < xsz && MU3Phi@#[[2]] < ysz &];
	        ,{ilevel,1,1}];
	        If[!MemberQ[resTiles,codes],
	        	resTiles = Join[resTiles,{codes}];
	        	Print[count -> Length[resTiles] ];
	        ];         
	        If[count++ > 1, Break[] ];
        ]; (*While*)
        tab = Reverse @ (Sort @ Table[
			mindist = getptsMinDist1[MU3PhiXY /@ resTiles[[i]]];
			{mindist,resTiles[[i]]}
		,{i,Length[resTiles]}]);
		resTiles = Last /@ tab;
		Do[
			codes = resTiles[[i]];
    		ptsXY = MU3PhiXY /@ codes;
    		gridThickness = .002;
            g = Graphics[{{ MU3getGrid4Figures[4,x0,y0, False, {Blue,AbsoluteThickness[3]},  True,  {Magenta,AbsoluteThickness[12]}, False]} 
                    ,PointSize[.03],Point/@ ptsXY
                    ,Table[Text[Style[codes[[j]],16],ptsXY[[j]],{-1,-1}],{j,Length[ptsXY]}]
                    ,Table[Text[Style[j,36],ptsXY[[j]],{1,1}],{j,Length[ptsXY]}]
                    (*,Table[Text[Style[Mod[j,100],24],ptsXY[[j]],{-1,-1}],{j,Length[ptsXY]}]*)
                } 
                ,PlotLabel->{x0,y0}
                ,Axes->True
                ,ImageSize -> 1/2 {1200,1200}   ];
            g//Print;
		,{i,Length[resTiles]}];
		resTiles
    ] (*MU3prepL1Tiles *)


MU3prepAllL1Tiles[] :=
    Module[ {},
		dirName = "data/MU3_L1"; If[!DirectoryQ[dirName], CreateDirectory[dirName] ];
		Do[
			resTiles = MU3prepL1Tiles[MU3index2symbols@ix,MU3index2symbols@iy];
			fname = dirName<>"/MU3_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";		
			Put[resTiles,fname];
			Print["Writing into ",fname -> Length[resTiles]];

			order = Switch[{ix,iy}
				,{1,1},{{0,0,0,0},{0,0,0,1},{0,0,1,0}}
				,{1,2},{{0,0}}
				,{1,3},{{0,0,0},{0,0,1}}
				,{2,1},{{0,0}}
				,{2,2},{{}}
				,{2,3},{{0}}
				,{3,1},{{0,0,0},{0,0,1}}
				,{3,2},{{0}}
				,{3,3},{{0,0}}
			];
			resOrderPlusCodes = {order,codes}//T;
			
			fname = dirName<>"/MU3_Order+Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
			Put[MU3symbols2binCode/@resOrderPlusCodes,fname];
			Print["Writing into ",fname -> Length[resOrderPlusCodes] ];

		,{ix,3},{iy,3}];
        
    ] (* MU3prepAllL1Tiles *)

MU3buildCCVTbasedTilesBN[inbasicShift_:14, nPatterns_:64, randomizedRankFlag_:False, showGraphics_:False] := 
(* 	inbasicShift=8 ->L1 : 6-1-3 
	inbasicShift=10 ->L2 : 13-3-6 
	inbasicShift=12 ->L3 : 28-6-13
	inbasicShift=14 ->L4 : 60-13-28
	inbasicShift=16 ->L5 : 129-28-60
	inbasicShift=18 ->L6 : 277-60-129
	inbasicShift=12 ->L7 : 595-129-277
************************************)
    Module[ {},
    	nLloydIterations = 20;
		basicShift = inbasicShift;
		lenindtab = {0,2,1};
		MU3buildCCVTbasedTilesBNprepPivots[basicShift-4,showGraphics];
		rescodes = Table[{},{3},{3},{nPatterns}];
		resOrderPlusCodes = Table[{},{4},{4},{nPatterns}];
		meandist = 1./Sqrt[Length[pivots[[1]] ] ];
		targetLevel = (basicShift-6)/2;
        Do[
			Do[
				{xType,yType} = MU3index2symbols@{ix,iy};
				{xsz,ysz} = {1./lambda^(lenindtab[[ix]]),1./lambda^(lenindtab[[iy]])};
				npts = MU3basicSeq[[basicShift-lenindtab[[ix]]-lenindtab[[iy]]-3 ]];
				pts = MU3getCCVTpts[npts,xsz,ysz];
				{x0,y0} = {Min[First/@pts],Min[Last/@pts]};
				pts = ((#-{x0,y0})& /@ pts);
				{x0,y0} = First@pts;
				pts = {Mod[#[[1]]-x0,xsz],Mod[#[[2]]-y0,ysz]}& /@ pts;
				gl0 = {Point/@pts};
				ptsLloyd = Join[#,{0}]& /@ pts;
				gl = {Blue};

				pts = Plus[#,{0,ysz}]& /@ pivots[[ix]];
				AppendTo[gl, Point/@pts];
				ptsLloyd = Join[ptsLloyd, (Join[#,{-1}]& /@ pts)];
				pts = Plus[#,{0,-xsz}]& /@ pivots[[ix]];
				AppendTo[gl, Point/@pts];
				ptsLloyd = Join[ptsLloyd, (Join[#,{-1}]& /@ pts)];
				pts = Plus[#,{xsz,0}]& /@ pivots[[iy]];
				AppendTo[gl, Point/@pts];
				ptsLloyd = Join[ptsLloyd, (Join[#,{-1}]& /@ pts)];
				pts = Plus[#,{-ysz,0}]& /@ pivots[[iy]];
				AppendTo[gl, Point/@pts];
				ptsLloyd = Join[ptsLloyd, (Join[#,{-1}]& /@ pts)];
				
				pts = {{0,ysz},{xsz,0},{xsz,ysz},{-meandist,-meandist/2},{-meandist/2,-meandist}};
				AppendTo[gl, {Green,Point/@pts}];
				ptsLloyd = Join[ptsLloyd, (Join[#,{-1}]& /@ pts)];
				
				Export["tmp/ptsLloyd"<>pid<>".dat",ptsLloyd];
				Run[execPrefix<>"my_lloyd2d tmp/ptsLloyd"<>pid<>".dat tmp/outLloyd"<>pid<>".dat "<>ToString[nLloydIterations]<>" > /dev/null"];
				pts = Sort @ (Drop[#,-1]& /@ (Take[#,npts] & @ Import["tmp/outLloyd"<>pid<>".dat"]));
				
				{xpts,ypts} = {First/@pts,Last/@pts};

				{ddx,ddy} = {lenindtab[[ix]], lenindtab[[iy]]};		
	            xsymbols = Join[#,Table[a,{ddy}]]& /@ MU3getCodes1d[basicShift-ddy-4, xType];
	            ysymbols = Join[#,Table[a,{ddx}]]& /@ MU3getCodes1d[basicShift-ddx-4, yType];
	            ysort = {ypts, Range[Length[pts]]} // T // Sort;
	            order = permut2order[Last /@ ysort];
	            codes = Table[
	            	{xsymbols[[ i ]], ysymbols[[ order[[i]] ]]}
	            ,{i,Length[pts]}];

				orderSymbols = MU3getCodes1d[ basicShift-lenindtab[[ix]]-lenindtab[[iy]]-4 , a] ;
				orderPlusCodes = MU3getOrder[ptsLloyd,codes,orderSymbols,randomizedRankFlag];
				Print[ipattern,"/",nPatterns -> {ix,iy} -> {lenindtab[[ix]],lenindtab[[iy]]} -> npts -> Length[orderSymbols] -> (MU3F /@ orderSymbols)];
				
				If[ showGraphics,         
	        		ptsxy = MU3PhiXY /@ codes;
	        		g1 = Graphics[{PointSize[.02], {Red,Point/@pts},gl }, Frame -> None, FrameTicks -> None, (*PlotRange->{{0,xsz},{0,ysz}},*) ImageSize -> {600,600}/2 ];
	        		g2 = Graphics[{PointSize[.02], {Red,Point/@ptsxy},gl}, Frame -> None, FrameTicks -> None, (*PlotRange->{{0,xsz},{0,ysz}},*) ImageSize -> {600,600}/2 ];
	        		g3 = Graphics[{MU3getGridAxesSeparateSubdiv[basicShift/2+3-ddx,basicShift/2+3-ddy,xType,yType,True, {Magenta,AbsoluteThickness[12]}, False, {Cyan,AbsoluteThickness[2]}  ] 
	        							, Text[Style[MU3F@#[[1]],36],MU3PhiXY@#[[2]],{-1,-1}]& /@ orderPlusCodes
	        							, PointSize[.01] , Point /@ ptsxy
			            				,Table[Line[{pts[[i]],ptsxy[[i]]}],{i,Length[pts]}]
			            				,Red, Point /@ pts }
			            		(*, Frame -> True, FrameTicks -> None*) (*PlotRange->{{0,xsz},{0,ysz}},*) 
			            		,ImageSize -> {600,600} ];
					{g1,g2,g3}//Print;

					If[ipattern == 1 && ix == 1 && iy == 1,
						Export["prep-figs/optim_MU3blockers_L"<>ToString[targetLevel]<>"_11.pdf", g1];
						Export["prep-figs/optim_MU3shifts_L"<>ToString[targetLevel]<>"_11.pdf", g3];
					];
				];
				If[ipattern == 1 && ix == 1 && iy == 3,
						Export["prep-figs/optim_MU3blockers_L"<>ToString[targetLevel]<>"_13.pdf", g1];
				];
				rescodes[[ix,iy,ipattern]] = codes;
				resOrderPlusCodes[[ix,iy,ipattern]] = orderPlusCodes;
			,{ix,3},{iy,3}];
        ,{ipattern,nPatterns}];	

		Print["all done !"];
		dirName = If[randomizedRankFlag, "data/MU3_L"<>ToString[targetLevel]<>"_RandomizedRank_"<>ToString[nPatterns], "data/MU3_L"<>ToString[targetLevel]<>"_"<>ToString[nPatterns] ];
		If[!DirectoryQ[dirName], CreateDirectory[dirName] ];
		Do[
			fname = dirName<>"/MU3_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
			Put[rescodes[[ix,iy]],fname];
			Print["Writing into ",fname -> Length[rescodes[[ix,iy]]] -> Length[rescodes[[ix,iy,1]]]];

			fname = dirName<>"/MU3_Order+Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
			Put[MU3symbols2binCode/@resOrderPlusCodes[[ix,iy]],fname];
			Print["Writing into ",fname -> Length[resOrderPlusCodes[[ix,iy]]] -> Length[resOrderPlusCodes[[ix,iy,1]]]];
		,{ix,3},{iy,3}];

] (* MU3buildCCVTbasedTilesBN *)

MU3getOrder[ptsLloyd_,incodes_,orderSymbols_,randomizedRankFlag_] :=
    Module[ {codes = incodes,orderCodes,ind,count,res,ptsMovable,ptsFixed,dtab,pt},
        orderCodes = MU3symbols2binCode /@ orderSymbols;
        ind = If[randomizedRankFlag,RandomInteger[{1,Length[codes]}],1];
        count = 1;
        res = { {orderCodes[[count]],codes[[ind]]} };
        While[True,
            codes = Complement[codes,(Last/@res)];
            If[ Length[codes] == 0,
                Break[]
            ];
			ptsMovable = MU3PhiXY /@ codes;
            ptsFixed = Join[ Drop[#,-1]& /@ Select[ptsLloyd, Last[#] == -1&], MU3PhiXY /@ (Last/@res)];
            dtab = Table[
                    pt = ptsMovable[[i]];
                    Sort[euclidlen[pt - #]& /@ ptsFixed] //First
                ,{i,Length[ptsMovable]}];
            ind = Position[dtab, Max[dtab]][[1, 1]];
            count++;
            res = Join[res, { {orderCodes[[count]], codes[[ind]]} } ];
        ];
        If[Length[res] == 1, res[[1,1]] = {} ];
        Return[res]
    ]

MU3consolidateCCVTbased[] :=
    Module[ {},
    resPatterns = Table[{},{4},{4}];
	Do[
		count = 0;
        Do[
        	Do[
            	infname = "trial"<>ToString[itrial]<>"/MU3_L7_set"<>ToString[iset]<>"/MU3_bestTiles_"<>ToString[ix]<>ToString[iy]<>".dat";
            	data = Get[infname];
            	resPatterns[[ix,iy]] = Join[resPatterns[[ix,iy]], data];
            	count++;
            	(*Print[infname -> {ix,iy} -> Length[data] -> count -> (Length @ resPatterns[[ix,iy]] )]*);
            ,{iset,16}]
    	,{itrial,12}];
    	outfname = "data/MU3_L7/MU3_bestTiles_"<>ToString[ix]<>ToString[iy]<>".dat";
    	Union@ (resPatterns[[ix,iy]] );
    	Print["Writing into ",outfname -> Length[data] ];
    	Put[data,outfname];
    ,{ix,4},{iy,4}];
    ] (* MU3consolidateCCVTbased *)

MU3choose16best[] :=
    Module[ {},
        data = Table[{},{4},{4}];
        Table[
            fname = "data/MU3_L7/MU3_bestTiles_"<>ToString[ix]<>ToString[iy]<>".dat";
            data[[ix,iy]] = Get[fname];
            Print["Reading ",fname -> Length[data[[ix,iy]]]];
        ,{iy,4},{ix,4}];
	nsets = Length[data[[1,1]]];
    MU3goodPatterns = Table[{},{4},{4}];
    tab = Sort@Table[
		Do[
            MU3goodPatterns[[ix,iy]] = data[[ix,iy,iset;;iset]];
        ,{iy,4},{ix,4}];
        codes = MU3recursiveSubdiv[4];
        ptsXY = MU3PhiXY /@ codes;
        Graphics[{Point /@ ptsXY}, Frame -> True, FrameTicks -> None, PlotRange->{{0,1},{0,1}}, ImageSize -> {600,600}/2]//Print;
        mindist = Round[1000000 getptsMinDist1[ptsXY]];
        Print[iset -> mindist];
        {mindist,iset}
     ,{iset,nsets}];
     	
	
       
    ] (* MU3consolidateCCVTbased *)


MU3mkFigureFourier[innlevels_:7, patternsLevel_:10, nPatterns__:64 ] := (* MU3mkFigureFourier[7, 10] *)
    Module[ {},
        nTrials = 1;
        nlevels = innlevels;
        myRandomChoice := RandomChoice;
        fouriertabsz = 2 4096 ;
        fsum = Table[0,{fouriertabsz},{fouriertabsz}];
        discrepancyMU3 = Table[{0,0},{nlevels}];

        MU3goodPatterns = Table[{},{4},{4}];
        Table[
            fname = "data/MU3_L"<>ToString[patternsLevel]<>"_"<>ToString[nPatterns]<>"/MU3_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU3goodPatterns[[ix,iy]] = Get[fname];
            Print["Reading ",fname -> Length[MU3goodPatterns[[ix,iy]]]];
        ,{iy,4},{ix,4}];
		randomTabX = Table[ Table[RandomChoice[{True,False}],{MU3basicSeq[[2+2 (ilevel+patternsLevel)]] }] ,{ilevel,1,nlevels}];
        randomTabY = Table[ Table[RandomChoice[{True,False}],{MU3basicSeq[[2+2 (ilevel+patternsLevel)]] }] ,{ilevel,1,nlevels}];

		Do[
	        Do[
	            codes = MU3recursiveSubdivRandomized[ilevel];
	            (*codes = MU3recursiveSubdiv[ilevel];
	            *)ptsXY = MU3PhiXY /@ codes;
	            Print[ilevel -> Length[ codes] ];
		                    If [ilevel <= 1,
		                   		g = Graphics[{PointSize[.02/1.3^ilevel],Point/@ptsXY},PlotRange->{{0,1},{0,1}},Frame->True,FrameTicks->None];
		                    	Export["prep-figs/fig-MU3_pts_L"<>ToString[ilevel]<>".pdf",g];
		                    	g//Print
	              			  ];
	        ,{ilevel,1,nlevels}];
	        fsum += getFourier2D[Ceiling[(fouriertabsz ptsXY)],fouriertabsz];
		,{iTrial, nTrials}];
            
            
            (*fsum[[1,1]] = 0;*)
            centralPartSz = fouriertabsz/8;
            fsum = Reorg[fsum];
            centralPart = (fsum[[fouriertabsz/2-centralPartSz/2+1 ;; fouriertabsz/2+centralPartSz/2, fouriertabsz/2-centralPartSz/2+1 ;; fouriertabsz/2+centralPartSz/2]])^2;
            psprectrum = niceRaster[50000./Sqrt[nTrials] centralPart /Max[centralPart],zoom->1];
            Print[psprectrum];
            Export["prep-figs/fig-MU3-spectrum.png",psprectrum];
        
        bins = Table[{},{centralPartSz}];
        maxval = 0;
        Do[
        	r = Round[euclidlen[{ix,iy}]];
        	angle = getAngle[{ix,iy},{0,0},{1,0}]//N;
        	If[angle < PI/60. || angle > PI/2 - PI/60., Continue[] ];
        	val = centralPart[[centralPartSz/2+1+ix,centralPartSz/2+1+iy]];
        	AppendTo[bins[[r]], val];
        	maxval = Max[maxval,val];
        ,{ix,centralPartSz/2-2},{iy,centralPartSz/2-2}];
        Print["maxval = ", maxval -> maxval/centralPart[[centralPartSz/2+1,centralPartSz/2+1]] ];
        binsmean = Table[If[Length[bins[[i]]] > 0, Mean[bins[[i]]], 0], {i,centralPartSz}];
        radial = ListPlot[binsmean[[;;Round[1.3 centralPartSz/2] ]], (*Frame->True,*) PlotStyle->{Red}, Joined -> True, Ticks->None, PlotRange->All,PlotLabel->Style["Radial Power Spectrum",36] ];
        radial//Print;
        Export["prep-figs/fig-MU3-spectrum-radial.pdf",radial];
        	
    ] (*MU3mkFigureFourier *)

getAngle[z0_,z1_,z2_] :=
	Module[{res},
		If[z0==z1||z2==z1,
			res=0,
			res=ArcTan@@(z0-z1)-ArcTan@@(z2-z1)];
		If[res<0,res+=2 Pi];
		If[res > Pi,res = 2 Pi - res];
		Return[res(*Mod[res, 2 Pi]*)]
	] (* getAngle*)

MU3mkFigureMultiplePoitnsGL[xlevels_:2,ylevels_:2,xType_:a,yType_:a, showFrame_:True, frameStyle_:{Magenta,AbsoluteThickness[5]},showSymbols_:False,gridStyle_:{Cyan,AbsoluteThickness[2]},showAreas_:True,lambdaShift_:0,textSz_:12, MU3basicSeqShift_:0 ] :=
    Module[ {hlevels, gl ,txtcoltab,(*xSymbols,ySymbols,*)xvaluesFracDir,yvaluesFracDir,xmax,ymax,xind,yind,sx,sy,sxy,xSymbols,ySymbols,lenindtab,len,axeLabelSz=48},
        txtcoltab = {Red, Red,Red, Red,Red, Red,Red, Red};
        {xind,yind} = {Switch[xType,a,1,b,3,c,2],Switch[yType,a,1,b,3,c,2]};
        {xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
		lenindtab = {0,2,1};
        gl = gridStyle;
        gl = Join[gl,{{ Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] } }];
            xSymbols = MU3getCodes1dVoidZero[xlevels-1,xType];
            xvaluesFracDir = MU3Phi /@ xSymbols;
            AppendTo[xvaluesFracDir,xmax];
            Do[AppendTo[gl, { Line[{{xvaluesFracDir[[i]],0},{xvaluesFracDir[[i]],ymax}}]}],{i,Length[xSymbols]}];

            ySymbols = MU3getCodes1dVoidZero[ylevels-1,yType];
            yvaluesFracDir = MU3Phi /@ ySymbols;
            AppendTo[yvaluesFracDir,ymax];
            Do[AppendTo[gl, { Line[{{0,yvaluesFracDir[[i]]},{xmax,yvaluesFracDir[[i]]}}]}],{i,Length[ySymbols]}];

        If[showFrame,
        	gl = Join[gl, frameStyle];
        	AppendTo[gl,Line[{{0,0},{xmax,0},{xmax,ymax},{0,ymax},{0,0}}] ];
        ];

        If[xSymbols === {{}}, xSymbols = {{xType}} ];
        If[ySymbols ==={{}}, ySymbols = {{yType}} ];
        hlevels = Floor[nlevels/2];
        If[ showSymbols,
        	AppendTo[gl, {
        			Table[ Text[Style[#,axeLabelSz,Black]& @ (Last@xSymbols[[ix]]), {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2.,-.02},{0,1}] , {ix,Length[xSymbols]}] ,
        			Table[ Text[Style[Rotate[#,Pi/2],axeLabelSz,Black]& @ (Last@ySymbols[[iy]]), {-.02, (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{1,0}] , {iy,Length[ySymbols]}] 
        	}];
        ];

        If[ showAreas,
        	AppendTo[gl, {
         			Table[ 
         				{sx,sy} = {Last@xSymbols[[ix]], Last@ySymbols[[iy]]};
         				sxy = ToString[sx]<>ToString[sy];
         				len = Switch[{sx,sy}
         					,{a,a}, MU3basicSeq[[ 0+4+MU3basicSeqShift ]]
         					,{a,b}, MU3basicSeq[[ -2+4+MU3basicSeqShift ]]
         					,{a,c}, MU3basicSeq[[ -1+4+MU3basicSeqShift ]]
          					,{b,a}, MU3basicSeq[[ -2+4+MU3basicSeqShift ]]
         					,{b,b}, MU3basicSeq[[ -4+4+MU3basicSeqShift ]]
         					,{b,c}, MU3basicSeq[[ -3+4+MU3basicSeqShift ]]
         					,{c,a}, MU3basicSeq[[ -1+4+MU3basicSeqShift ]]
         					,{c,b}, MU3basicSeq[[ -3+4+MU3basicSeqShift ]]
         					,{c,c}, MU3basicSeq[[ -2+4+MU3basicSeqShift ]]
          				];
         				{Text[Style[len,textSz,Red], {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,0}] (*,
         				Text[Style[sxy,textSz,Red], {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,1}]*) }
         			, {ix,Length[xSymbols]}, {iy,Length[ySymbols]}] 
        	}];
        ];

        gl
    ] (* MU3mkFigureMultiplePoitnsGL *)

MU3mkFigureMultiplePoitns[] :=
    Module[ {},
        nlevels = 3;
        mxsz = 2;
        base = mxsz;
        baselog = Log[2,base];
        myRandomChoice := RandomChoice;
        MU3goodPatterns = Table[{},{3},{3}];
        Table[
            fname = "data/MU3_L1_16/MU3_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU3goodPatterns[[ix,iy]] = Get[fname];
            Print["Reading ",fname -> Length[MU3goodPatterns[[ix,iy]]] -> Length[MU3goodPatterns[[ix,iy,1]]]];
        ,{iy,3},{ix,3}];
            codes = MU3recursiveSubdiv[nlevels];
            ptsXY = MU3PhiXY /@ codes;
            Print[nlevels -> Length[ codes] ];
            	gridThickness = .005;
                    g = Graphics[{
                    		MU3mkFigureMultiplePoitnsGL[3,3,a,a,True,{Magenta,AbsoluteThickness[8]},True,{Blue,AbsoluteThickness[5]},True,0, 64, 1],
                    		MU3mkFigureMultiplePoitnsGL[9,9,a,a,True,{Magenta,AbsoluteThickness[8]},False,{Cyan,AbsoluteThickness[2]},False,0, 64, 1],
                            PointSize[.015],Point/@ ptsXY
                        } 
                        ,ImageSize ->{1200,1200}/2   ];
        g1 = g;

        MU3goodPatterns = Table[{},{3},{3}];
        Table[
            fname = "data/MU3_L3_16/MU3_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU3goodPatterns[[ix,iy]] = Get[fname];
            Print["Reading ",fname -> Length[MU3goodPatterns[[ix,iy]]] -> Length[MU3goodPatterns[[ix,iy,1]]]];
        ,{iy,3},{ix,3}];
            codes = MU3recursiveSubdiv[nlevels];
            ptsXY = MU3PhiXY /@ codes;
            Print[nlevels -> Length[ codes] ];
            	gridThickness = .005;
                    g = Graphics[{
                    		MU3mkFigureMultiplePoitnsGL[3,3,a,a,True,{Magenta,AbsoluteThickness[8]},True,{Blue,AbsoluteThickness[5]},True,0, 64, 5],
                            PointSize[.015],Point/@ ptsXY
                        } 
                        ,ImageSize ->{1200,1200}/2   ];
        g2 = g;
        
        MU3goodPatterns = Table[{},{3},{3}];
        Table[
            fname = "data/MU3_L5_16/MU3_Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU3goodPatterns[[ix,iy]] = Get[fname];
            Print["Reading ",fname -> Length[MU3goodPatterns[[ix,iy]]] -> Length[MU3goodPatterns[[ix,iy,1]]]];
        ,{iy,3},{ix,3}];
            codes = MU3recursiveSubdiv[nlevels];
            ptsXY = MU3PhiXY /@ codes;
            Print[nlevels -> Length[ codes] ];
            	gridThickness = .005;
                    g = Graphics[{
                    		MU3mkFigureMultiplePoitnsGL[3,3,a,a,True,{Magenta,AbsoluteThickness[8]},True,{Blue,AbsoluteThickness[5]},True,0, 64, 9],
                            PointSize[.015],Point/@ ptsXY
                        } 
                        ,ImageSize ->{1200,1200}/2   ];
        g3 = g;
        
        gRow = GraphicsRow[{g1,g2,g3}];
        gRow//Print;
        
        Export["prep-figs/fig-MU3multi-points.pdf",gRow];
    ] (* MU3mkFigureMultiplePoitns *)

(*getOneHexagon[z0_:{0,0}]:=Plus[z0,#]& /@ {{-(1/2),-(Sqrt[3]/2)},{1/2,-(Sqrt[3]/2)},{1,0},{1/2,Sqrt[3]/2},{-(1/2),Sqrt[3]/2},{-1,0},{-(1/2),-(Sqrt[3]/2)}}*)
(*uv2xy[uv_]:= {{3/2,-(3/2)},{Sqrt[3]/2,Sqrt[3]/2}}.uv*)
(*xy2uv[xy_]:= {{1/3,1/Sqrt[3]},{-(1/3),1/Sqrt[3]}}.xy*)

uv2xy[uv_]:= {{Sqrt[3]/2,-Sqrt[3]},{3/2,0}}.uv
xy2uv[xy_]:= {{0,2/3},{-(1/Sqrt[3]),1/3}}.xy

getOneHexagon[z0_:{0,0}]:=Plus[z0,#]& /@ {{0,-1},{Sqrt[3]/2,-(1/2)},{Sqrt[3]/2,1/2},{0,1},{-(Sqrt[3]/2),1/2},{-(Sqrt[3]/2),-(1/2)},{0,-1}}

getOneHexagonUV[uv_:{0,0}]:=getOneHexagon[uv2xy@uv]

getOneMarkedHexagonGL[uv_:{0,0},val_:1]:= With[{xy = uv2xy@uv}, {Line@getOneHexagon[xy],Text[Style[val,markstyle,Bold],xy]} ]

MU3mkFigurePascalTriangle[] :=
    Module[ {},
    	markstyle = {Black,12};
    	gl = {
    		getOneMarkedHexagonGL[{0,0},	1]
    		
    		,getOneMarkedHexagonGL[{-1,0},	1]
   			,getOneMarkedHexagonGL[{-1,-1},	1]
    		
    		,getOneMarkedHexagonGL[{-2,0},	1]
   			,getOneMarkedHexagonGL[{-2,-1},	2]
    		,getOneMarkedHexagonGL[{-2,-2},	1]
    		
    		,getOneMarkedHexagonGL[{-3,0},	1]
   			,getOneMarkedHexagonGL[{-3,-1},	3]
   			,getOneMarkedHexagonGL[{-3,-2},	3]
    		,getOneMarkedHexagonGL[{-3,-3},	1]
    		
    		,getOneMarkedHexagonGL[{-4,0},	1]
   			,getOneMarkedHexagonGL[{-4,-1},	4]
   			,getOneMarkedHexagonGL[{-4,-2},	6]
    		,getOneMarkedHexagonGL[{-4,-3},	4]
    		,getOneMarkedHexagonGL[{-4,-4},	1]
    		
    		,getOneMarkedHexagonGL[{-5,0},	1]
   			,getOneMarkedHexagonGL[{-5,-1},	5]
   			,getOneMarkedHexagonGL[{-5,-2},	10]
    		,getOneMarkedHexagonGL[{-5,-3},	10]
    		,getOneMarkedHexagonGL[{-5,-4},	5]
    		,getOneMarkedHexagonGL[{-5,-5},	1]

    		,getOneMarkedHexagonGL[{-6,0},	1]
   			,getOneMarkedHexagonGL[{-6,-1},	6]
   			,getOneMarkedHexagonGL[{-6,-2},	15]
    		,getOneMarkedHexagonGL[{-6,-3},	20]
    		,getOneMarkedHexagonGL[{-6,-4},	15]
    		,getOneMarkedHexagonGL[{-6,-5},	6]
    		,getOneMarkedHexagonGL[{-6,-6},	1]

    		,getOneMarkedHexagonGL[{-7,0},	1]
   			,getOneMarkedHexagonGL[{-7,-1},	7]
   			,getOneMarkedHexagonGL[{-7,-2},	21]
    		,getOneMarkedHexagonGL[{-7,-3},	35]
    		,getOneMarkedHexagonGL[{-7,-4},	35]
    		,getOneMarkedHexagonGL[{-7,-5},	21]
    		,getOneMarkedHexagonGL[{-7,-6},	7]
    		,getOneMarkedHexagonGL[{-7,-7},	1]

    		,getOneMarkedHexagonGL[{-8,0},	1]
   			,getOneMarkedHexagonGL[{-8,-1},	8]
   			,getOneMarkedHexagonGL[{-8,-2},	28]
    		,getOneMarkedHexagonGL[{-8,-3},	56]
    		,getOneMarkedHexagonGL[{-8,-4},	70]
    		,getOneMarkedHexagonGL[{-8,-5},	56]
    		,getOneMarkedHexagonGL[{-8,-6},	28]
    		,getOneMarkedHexagonGL[{-8,-7},	8]
    		,getOneMarkedHexagonGL[{-8,-8},	1]

    		,getOneMarkedHexagonGL[{-9,0},	1]
   			,getOneMarkedHexagonGL[{-9,-1},	9]
   			,getOneMarkedHexagonGL[{-9,-2},	36]
    		,getOneMarkedHexagonGL[{-9,-3},	84]
    		,getOneMarkedHexagonGL[{-9,-4},	126]
    		,getOneMarkedHexagonGL[{-9,-5},	126]
    		,getOneMarkedHexagonGL[{-9,-6},	84]
    		,getOneMarkedHexagonGL[{-9,-7},	36]
    		,getOneMarkedHexagonGL[{-9,-8},	9]
    		,getOneMarkedHexagonGL[{-9,-9},	1]

    		,getOneMarkedHexagonGL[{-10,0},	1]
   			,getOneMarkedHexagonGL[{-10,-1},	10]
   			,getOneMarkedHexagonGL[{-10,-2},	45]
    		,getOneMarkedHexagonGL[{-10,-3},	120]
    		,getOneMarkedHexagonGL[{-10,-4},	210]
    		,getOneMarkedHexagonGL[{-10,-5},	252]
    		,getOneMarkedHexagonGL[{-10,-6},	210]
    		,getOneMarkedHexagonGL[{-10,-7},	120]
    		,getOneMarkedHexagonGL[{-10,-8},	45]
    		,getOneMarkedHexagonGL[{-10,-9},	10]
    		,getOneMarkedHexagonGL[{-10,-10},1]

    		,getOneMarkedHexagonGL[{-11,0},	1]
   			,getOneMarkedHexagonGL[{-11,-1},	11]
   			,getOneMarkedHexagonGL[{-11,-2},	55]
    		,getOneMarkedHexagonGL[{-11,-3},	165]
    		,getOneMarkedHexagonGL[{-11,-4},	330]
    		,getOneMarkedHexagonGL[{-11,-5},	462]
    		,getOneMarkedHexagonGL[{-11,-6},	462]
    		,getOneMarkedHexagonGL[{-11,-7},	330]
    		,getOneMarkedHexagonGL[{-11,-8},	165]
    		,getOneMarkedHexagonGL[{-11,-9},	55]
    		,getOneMarkedHexagonGL[{-11,-10},	11]
    		,getOneMarkedHexagonGL[{-11,-11},1]

    		,getOneMarkedHexagonGL[{-12,0},	1]
   			,getOneMarkedHexagonGL[{-12,-1},	12]
   			,getOneMarkedHexagonGL[{-12,-2},	66]
    		,getOneMarkedHexagonGL[{-12,-3},	220]
    		,getOneMarkedHexagonGL[{-12,-4},	495]
    		,getOneMarkedHexagonGL[{-12,-5},	792]
    		,getOneMarkedHexagonGL[{-12,-6},	924]
    		,getOneMarkedHexagonGL[{-12,-7},	792]
    		,getOneMarkedHexagonGL[{-12,-8},	495]
    		,getOneMarkedHexagonGL[{-12,-9},	220]
    		,getOneMarkedHexagonGL[{-12,-10},	66]
    		,getOneMarkedHexagonGL[{-12,-11},	12]
    		,getOneMarkedHexagonGL[{-12,-12},1]

    		,getOneMarkedHexagonGL[{-13,0},	1]
   			,getOneMarkedHexagonGL[{-13,-1},	13]
   			,getOneMarkedHexagonGL[{-13,-2},	78]
    		,getOneMarkedHexagonGL[{-13,-3},	286]
    		,getOneMarkedHexagonGL[{-13,-4},	715]
    		,getOneMarkedHexagonGL[{-13,-5},	1287]
    		,getOneMarkedHexagonGL[{-13,-6},	1716]
    		,getOneMarkedHexagonGL[{-13,-7},	1716]
    		,getOneMarkedHexagonGL[{-13,-8},	1287]
    		,getOneMarkedHexagonGL[{-13,-9},	715]
    		,getOneMarkedHexagonGL[{-13,-10},	286]
    		,getOneMarkedHexagonGL[{-13,-11},	78]
    		,getOneMarkedHexagonGL[{-13,-12},	13]
    		,getOneMarkedHexagonGL[{-13,-13},1]
    	};
    	ggl = (Flatten[#, 1] & @ gl);
    	{	col0, 			col1, 	col2, 		col3, 			col4, 			col5, col6, col7, col8, col9, col10, col11,  col12,  col13,  col14} =
    		{Lighter@Red, Green,Lighter@Magenta, Darker@Orange,Lighter@Gray,Lighter@Lighter@Blue,Lighter@Red,Green,Lighter@Magenta, Darker@Orange, Lighter@Gray, Lighter@Lighter@Blue,Lighter@Red,  Green,Lighter@Magenta};

    	line0 = {Line[{uv2xy@({ 1,0}-{2,-1} ), uv2xy@({ 1,0}+{2,-1} 0/3 )}] };
      	line1 = {Line[{uv2xy@({ 0,0}-{2,-1} ), uv2xy@({ 0,0}+{2,-1} 1/3 )}] };    	
    	line2 = {Line[{uv2xy@({-1,0}-{2,-1} ), uv2xy@({-1,0}+{2,-1} 2/3 )}] };
    	line3 = {Line[{uv2xy@({-2,0}-{2,-1} ), uv2xy@({-2,0}+{2,-1} 3/3 )}] };
    	line4 = {Line[{uv2xy@({-3,0}-{2,-1} ), uv2xy@({-3,0}+{2,-1} 4/3 )}] };
    	line5 = {Line[{uv2xy@({-4,0}-{2,-1} ), uv2xy@({-4,0}+{2,-1} 5/3 )}] };
    	line6 = {Line[{uv2xy@({-5,0}-{2,-1} ), uv2xy@({-5,0}+{2,-1} 6/3 )}] };
    	line7 = {Line[{uv2xy@({-6,0}-{2,-1} ), uv2xy@({-6,0}+{2,-1} 7/3 )}] };
    	line8 = {Line[{uv2xy@({-7,0}-{2,-1} ), uv2xy@({-7,0}+{2,-1} 8/3 )}] };
    	line9 = {Line[{uv2xy@({-8,0}-{2,-1} ), uv2xy@({-8,0}+{2,-1} 9/3 )}] };
    	line10 = {Line[{uv2xy@({-9,0}-{2,-1} ), uv2xy@({-9,0}+{2,-1} 10/3 )}] };
    	line11 = {Line[{uv2xy@({-10,0}-{2,-1} ), uv2xy@({-10,0}+{2,-1} 11/3 )}] };
    	line12 = {Line[{uv2xy@({-11,0}-{2,-1} ), uv2xy@({-11,0}+{2,-1} 12/3 )}] };
    	line13 = {Line[{uv2xy@({-12,0}-{2,-1} ), uv2xy@({-12,0}+{2,-1} 13/3 )}] };
    	line14 = {Line[{uv2xy@({-13,0}-{2,-1} ), uv2xy@({-13,0}+{2,-1} 14/3 )}] };
    	

    	lhex0 = {	 									Text[Style[" 0",markstyle],uv2xy@({ 1,0}+{2,-1} 0/3)  ,{-1,-.5}] };
    	lhex1 = {Polygon@getOneHexagonUV[{-0,0}], 		Text[Style[" 1",markstyle],uv2xy@({ 0,0}+{2,-1} 1/3 ) ,{-1,-.5}] };
    	lhex2 = {Polygon@getOneHexagonUV[{-1,0}], 		Text[Style[" 1",markstyle],uv2xy@({-1,0}+{2,-1} 2/3 ) ,{-1,-.5}] };
    	lhex3 = {Polygon@getOneHexagonUV[{-2,0}], 		Text[Style[" 1",markstyle],uv2xy@({-2,0}+{2,-1} 3/3 ) ,{-1,-.5}] };
    	lhex4 = {Polygon@getOneHexagonUV[{-3,-0}],Polygon@getOneHexagonUV[{-1,-1}],  	Text[Style[" 2",markstyle],uv2xy@({-3,0}+{2,-1} 4/3 ) ,{-1,-.5}] };
    	lhex5 = {Polygon@getOneHexagonUV[{-4,-0}],Polygon@getOneHexagonUV[{-2,-1}],  	Text[Style[" 3",markstyle],uv2xy@({-4,0}+{2,-1} 5/3 ) ,{-1,-.5}] };
    	lhex6 = {Polygon@getOneHexagonUV[{-5,-0}],Polygon@getOneHexagonUV[{-3,-1}],  	Text[Style[" 4",markstyle],uv2xy@({-5,0}+{2,-1} 6/3 ) ,{-1,-.5}] };
    	lhex7 = {Polygon@getOneHexagonUV[{-6,-0}],Polygon@getOneHexagonUV[{-4,-1}],Polygon@getOneHexagonUV[{-2,-2}],  	Text[Style[" 6",markstyle],uv2xy@({-6,0}+{2,-1} 7/3 ) ,{-1,-.5}] };
    	lhex8 = {Polygon@getOneHexagonUV[{-7,-0}],Polygon@getOneHexagonUV[{-5,-1}],Polygon@getOneHexagonUV[{-3,-2}],  	Text[Style[" 9",markstyle],uv2xy@({-7,0}+{2,-1} 8/3 ) ,{-1,-.5}] };
    	lhex9 = {Polygon@getOneHexagonUV[{-8,-0}],Polygon@getOneHexagonUV[{-6,-1}],Polygon@getOneHexagonUV[{-4,-2}],  	Text[Style[" 13",markstyle],uv2xy@({-8,0}+{2,-1} 9/3 ) ,{-1,-.5}] };
    	lhex10 = {Polygon@getOneHexagonUV[{-9,-0}],Polygon@getOneHexagonUV[{-7,-1}],Polygon@getOneHexagonUV[{-5,-2}],Polygon@getOneHexagonUV[{-3,-3}],  	Text[Style[" 19",markstyle],uv2xy@({-9,0}+{2,-1}10/3 ) ,{-1,-.5}] };
    	lhex11 = {Polygon@getOneHexagonUV[{-10,-0}],Polygon@getOneHexagonUV[{-8,-1}],Polygon@getOneHexagonUV[{-6,-2}],Polygon@getOneHexagonUV[{-4,-3}],  	Text[Style[" 28",markstyle],uv2xy@({-10,0}+{2,-1} 11/3 ) ,{-1,-.5}] };
    	lhex12 = {Polygon@getOneHexagonUV[{-11,-0}],Polygon@getOneHexagonUV[{-9,-1}],Polygon@getOneHexagonUV[{-7,-2}],Polygon@getOneHexagonUV[{-5,-3}],  	Text[Style[" 41",markstyle],uv2xy@({-11,0}+{2,-1} 12/3 ) ,{-1,-.5}] };
    	lhex13 = {Polygon@getOneHexagonUV[{-12,-0}],Polygon@getOneHexagonUV[{-10,-1}],Polygon@getOneHexagonUV[{-8,-2}],Polygon@getOneHexagonUV[{-6,-3}],Polygon@getOneHexagonUV[{-4,-4}],  	Text[Style[" 60",markstyle],uv2xy@({-12,0}+{2,-1} 13/3 ) ,{-1,-.5}] };
    	lhex14 = {Polygon@getOneHexagonUV[{-13,-0}],Polygon@getOneHexagonUV[{-11,-1}],Polygon@getOneHexagonUV[{-9,-2}],Polygon@getOneHexagonUV[{-7,-3}],Polygon@getOneHexagonUV[{-5,-4}],  	Text[Style[" 88",markstyle],uv2xy@({-13,0}+{2,-1} 14/3 ) ,{-1,-.5}] };

    	g = Graphics[{Thickness[.01]
    		, col0,lhex0, col1,lhex1, col2,lhex2, col3,lhex3, col4,lhex4, col5,lhex5, col6,lhex6, col7,lhex7, col8,lhex8, col9,lhex9, col10,lhex10, col11,lhex11, col12,lhex12, col13,lhex13, col14,lhex14
    		,Black,Thickness[.005],ggl , Text[Style[HoldForm@(Subscript[S, Subscript[\[Mu],3] ] "(n) = "), 16,Italic] , uv2xy@({3,-1}+{3,-1} (-2)/3 ) + {-2.1,.2} ] 
    		,  col0,line0, col1,line1, col2,line2, col3,line3, col4,line4, col5,line5, col6,line6, col7,line7, col8,line8, col9,line9 , col10,line10 , col11,line11, col12,line12, col13,line13, col14,line14 
    		, Black, Select[ggl, Head[#] == Text &] }
    		,PlotRange->{{-13,13},{2.5,-21}}
    		,ImageSize ->{600,Automatic} ];
        g//Print;
        Export["prep-figs/fig-MU3PascalTriangle.pdf",g];
    ] (* MU3mkFigurePascalTriangle *)
    
showBNOTpointsets[] :=
    Module[ {},
        fname = "data/pointsets_BNOT/pointset_bbnot_n1024.pts";
        data = Import[fname];
        Graphics[{Point/@data,Red,Point/@(Plus[#,{0,1}]& /@ data),Red,Point/@(Plus[#,{1,0}]& /@ data) }
            ,ImageSize ->2{600,600} ]//Print;

        fname = "data/pointsets_BNOT/pointset_bbnot_n110218.pts";
        data = Import[fname];
        Graphics[{Point/@data,Red,Point/@(Plus[#,{0,1}]& /@ data),Red,Point/@(Plus[#,{1,0}]& /@ data) }
            ,ImageSize ->8{600,600} ]//Print;

        fname = "data/BNOT-2puissance20.dat";
        data = Import[fname];
        Graphics[{Point/@data,Red,Point/@(Plus[#,{0,1}]& /@ data),Red,Point/@(Plus[#,{1,0}]& /@ data) }
            ,ImageSize ->8{600,600} ]//Print;
    ]


testHierarchicalStratified2D[set_] := Module[{sz,powers,tests,i,tab},
	sz=Length[set];
	powers = Table[2^i,{i,0,Log[2,sz]}];
	tests = Select[Tuples[powers, 2], (Times @@ #) == sz &];
	tab = Table[Length[Union[Quotient[#, tests[[i]]] & /@ set]] == sz,{i,Length[tests]}];
	If[And @@ tab == False, Print["testHierarchicalStratified2D: ",Select[{tests,tab}//T,Last[#]==False&]//mf, " -> ", Select[{tests,tab}//T,Last[#]==False&]//Length] ];
	And @@ tab
] (* testHierarchicalStratified2D *)

MU3getGridDiadic[xlevels_:2,ylevels_:2,xType_:a,yType_:a, showFrame_:True, frameStyle_:{Magenta,AbsoluteThickness[5]},showSymbols_:False,gridStyle_:{Cyan,AbsoluteThickness[2]},showAreas_:False ] :=
    Module[ {hlevels, gl ,txtcoltab,xSymbols,ySymbols,xvaluesFracDir,yvaluesFracDir,xmax,ymax,xind,yind,sx,sy,pow},
        txtcoltab = {Red, Red,Red, Red,Red, Red,Red, Red};
        {xind,yind} = {Switch[xType,a,1,b,4,c,3,d,2],Switch[yType,a,1,b,4,c,3,d,2]};
        {xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
        gl = gridStyle;
        gl = Join[gl,{{ Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] } }];
        Do[
            xSymbols = MU3getCodes1d[ilevel-1,xType];
            xvaluesFracDir = MU3Phi /@ xSymbols;
            AppendTo[xvaluesFracDir,1.];
            Do[AppendTo[gl, { Line[{{xvaluesFracDir[[i]],0},{xvaluesFracDir[[i]],ymax}}]}],{i,Length[xSymbols]}];
        ,{ilevel,1,xlevels}];
        Do[
            ySymbols = MU3getCodes1d[ilevel-1,yType];
            yvaluesFracDir = MU3Phi /@ ySymbols;
            AppendTo[yvaluesFracDir,1.];
            Do[AppendTo[gl, { Line[{{0,yvaluesFracDir[[i]]},{xmax,yvaluesFracDir[[i]]}}]}],{i,Length[ySymbols]}];
        ,{ilevel,1,ylevels}];
        If[showFrame,
        	gl = Join[gl, frameStyle];
        	AppendTo[gl,Line[{{0,0},{xmax,0},{xmax,ymax},{0,ymax},{0,0}}] ];
        ];
        hlevels = Floor[nlevels/2];
        If[ showSymbols,
        	AppendTo[gl, {
        			Table[ Text[Style[#,36]& @ (Last@xSymbols[[ix]]), {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2.,-.02},{0,1}] , {ix,Length[xSymbols]}] ,
        			Table[ Text[Style[#,36]& @ (Last@ySymbols[[iy]]), {-.02, (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{1,0}] , {iy,Length[ySymbols]}] 
        	}];
        ];

		(*xSymbols = MU3getCodes1d[xlevels,xType];
		ySymbols = MU3getCodes1d[xlevels,xType];*)
Print[xSymbols,ySymbols];
        If[ showAreas,
        	AppendTo[gl, {
         			Table[ 
         				Print[{ xSymbols[[ix]],  ySymbols[[iy]]} -> {Last@xSymbols[[ix]], Last@ySymbols[[iy]]} ];
         				{sx,sy} = {Last@xSymbols[[ix]], Last@ySymbols[[iy]]};
         				pow = Switch[{sx,sy}
         					,{a,a}, 4
         					,_, 0
         				];
         				Text[Style[pow,36,Blue], 
         					{(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,0}] 
         			, {ix,Length[xSymbols]}, {iy,Length[ySymbols]}] 
        	}];
        ];

        gl
    ] (* MU3getGridDiadic*)

MU3makeFigureRanking[nlevels_:4, randomizedRankFlag_:False] :=
    Module[ {},
        targetLevel = 1 ;
        nPatterns = 64;
        rankPatterns = Table[{},{3},{3}];
		(*dirName = If[randomizedRankFlag, "data/MU3_L"<>ToString[targetLevel]<>"_RandomizedRank_"<>ToString[nPatterns], "data/MU3_L"<>ToString[targetLevel]<>"_"<>ToString[nPatterns] ];
        Table[
            fname = dirName<>"/MU3_Order+Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            rankPatterns[[ix,iy]] =  Get[fname];
            Print["Reading ",fname -> Length[rankPatterns[[ix,iy]] ] -> Length[rankPatterns[[ix,iy,1]] ] ];
        ,{iy,3},{ix,3}];*)

		dirName = "data/MU3_L1";
        Table[
            fname = dirName<>"/MU3_Order+Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            rankPatterns[[ix,iy]] =  {Get[fname]};
            Print["Reading ",fname -> Length[rankPatterns[[ix,iy]] ] -> Length[rankPatterns[[ix,iy,1]] ] ];
        ,{iy,3},{ix,3}];

		myRandomChoice = First;
		myRandomChoice = RandomChoice;
		
		gtab = Table[
			{rankcodes,codes} = MU3recursiveSubdivWithRank[ilevel]//T;
	        ptsXY = MU3PhiXY /@ codes;
            lbl = Switch[ilevel,1,"Initial aa-tile",2,"1 Subdivision",_,ToString[ilevel-1]<>" Subdivisions"];              
			g1 = Graphics[{ MU3getGridAxesSeparateSubdiv[ilevel+2,ilevel+2,a,a,True, {Magenta,AbsoluteThickness[12]}, False, {Cyan,AbsoluteThickness[2]}, False ]
	                    ,AbsolutePointSize[50]
	                    ,Table[
	                    	rank = MU3F @ rankcodes[[i]] ;
	                     	rankReal = MU3Phi @ rankcodes[[i]] ;
	                    	{AbsolutePointSize[52], Point @ ptsXY[[i]], AbsolutePointSize[50], GrayLevel[rankReal], Point @ ptsXY[[i]], If[rankReal < .5, White, Black], Text[Style[rank,30],ptsXY[[i]]] }
	                    ,{i,Length[codes]}]
	                  } ,ImageSize -> {800,800} ,PlotLabel->Style[lbl, 48]   ];
	        g1
	    ,{ilevel,nlevels}];
	    g = GraphicsRow[gtab];
	    g//Print;
	    Export["prep-figs/fig-rnaking_L"<>ToString[targetLevel]<>".pdf",g];


		(*gtab = Table[
			{rankcodes,codes} = MU3recursiveSubdivWithRank[ilevel]//T;
	        ptsXY = MU3PhiXY /@ codes;
            lbl = Switch[ilevel,1,"Initial aa-tile",2,"1 Subdivision",_,ToString[ilevel-1]<>" Subdivisions"];              
			g1 = Graphics[{ MU3getGridAxesSeparateSubdiv[ilevel,ilevel,a,a,True, {Magenta,AbsoluteThickness[12]}, True, {Cyan,AbsoluteThickness[2]}, False ]
	                    ,AbsolutePointSize[50]
	                  } ,ImageSize -> {800,800} ,PlotLabel->Style[lbl, 48]   ];
	        g1
	    ,{ilevel,8}];
	    g1 = GraphicsRow[gtab[[;;4]]];
	    g1//Print;
	    Export["prep-figs/grids_1.pdf",g1];

	    g2 = GraphicsRow[gtab[[{1,3,5,7}]]];
	    g2//Print;
	    Export["prep-figs/grids_2.pdf",g2];

	    g3 = GraphicsRow[gtab[[{2,4,6,8}]]];
	    g3//Print;
	    Export["prep-figs/grids_3.pdf",g3];
	    
	    gg = GraphicsGrid[Partition[gtab,4]];
	    gg//Print;
	    Export["prep-figs/grids_4.pdf",gg];
*)
(*Abort[];*)
        targetLevel = 3 ;
        nPatterns = 64;
        rankPatterns = Table[{},{3},{3}];
		dirName = If[randomizedRankFlag, "data/MU3_L"<>ToString[targetLevel]<>"_RandomizedRank_"<>ToString[nPatterns], "data/MU3_L"<>ToString[targetLevel]<>"_"<>ToString[nPatterns] ];
        Table[
            fname = dirName<>"/MU3_Order+Patterns_"<>ToString[ix]<>ToString[iy]<>".dat";
            rankPatterns[[ix,iy]] =  Get[fname];
            Print["Reading ",fname -> Length[rankPatterns[[ix,iy]] ] -> Length[rankPatterns[[ix,iy,1]] ] ];
        ,{iy,3},{ix,3}];

		myRandomChoice = First;
		myRandomChoice = RandomChoice;
		
		gtab = Table[
			{rankcodes,codes} = MU3recursiveSubdivWithRank[ilevel]//T;
	        ptsXY = MU3PhiXY /@ codes;
            lbl = Switch[ilevel,1,"Initial aa-tile",2,"1 Subdivision",_,ToString[ilevel-1]<>" Subdivisions"];              
			g1 = Graphics[{ MU3getGridAxesSeparateSubdiv[ilevel,ilevel,a,a,True, {Magenta,AbsoluteThickness[12]}, False, {Blue,AbsoluteThickness[2]}, False ]
	                    ,AbsolutePointSize[50]
	                    ,Table[
	                    	rank = MU3F @ rankcodes[[i]] ;
	                     	rankReal = MU3Phi @ rankcodes[[i]] ;
	                    	{AbsolutePointSize[52], Point @ ptsXY[[i]], AbsolutePointSize[50], GrayLevel[rankReal], Point @ ptsXY[[i]], If[rankReal < .5, White, Black], Text[Style[rank,30],ptsXY[[i]]] }
	                    ,{i,Length[codes]}]
	                  } ,ImageSize -> {800,800} ,PlotLabel->Style[lbl, 48]   ];
	        g1
	    ,{ilevel,3}];
	    g = GraphicsRow[gtab,Spacings->Scaled[0.0]];
	    g//Print;
	    Export["prep-figs/fig-rnaking_L"<>ToString[targetLevel]<>".pdf",g];

] (*MU3makeFigureRanking *)

MU3getGridAxesSeparateSubdiv[xlevels_:2,ylevels_:2,xType_:a,yType_:a, showFrame_:True, frameStyle_:{Magenta,AbsoluteThickness[5]},showSymbols_:False,gridStyle_:{Cyan,AbsoluteThickness[2]},showAreas_:False ] :=
    Module[ {hlevels, gl ,txtcoltab,(*xSymbols,ySymbols,*)xvaluesFracDir,yvaluesFracDir,xmax,ymax,xind,yind,sx,sy,pow},
        txtcoltab = {Red, Red,Red, Red,Red, Red,Red, Red};
        {xind,yind} = {Switch[xType,a,1,b,3,c,2],Switch[yType,a,1,b,3,c,2]};
        {xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
        gl = gridStyle;
        gl = Join[gl,{{ Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] } }];
        Do[
            xSymbols = MU3getCodes1d[ilevel-1,xType];
            xvaluesFracDir = MU3Phi /@ xSymbols;
            AppendTo[xvaluesFracDir,xmax];
            Do[AppendTo[gl, { Line[{{xvaluesFracDir[[i]],0},{xvaluesFracDir[[i]],ymax}}]}],{i,Length[xSymbols]}];
        ,{ilevel,1,xlevels}];
        Do[
            ySymbols = MU3getCodes1d[ilevel-1,yType];
            yvaluesFracDir = MU3Phi /@ ySymbols;
            AppendTo[yvaluesFracDir,ymax];
            Do[AppendTo[gl, { Line[{{0,yvaluesFracDir[[i]]},{xmax,yvaluesFracDir[[i]]}}]}],{i,Length[ySymbols]}];
        ,{ilevel,1,ylevels}];
        If[showFrame,
        	gl = Join[gl, frameStyle];
        	AppendTo[gl,Line[{{0,0},{xmax,0},{xmax,ymax},{0,ymax},{0,0}}] ];
        ];

        If[xSymbols === {{}}, xSymbols = {{xType}} ];
        If[ySymbols ==={{}}, ySymbols = {{yType}} ];
        hlevels = Floor[nlevels/2];
        If[ showSymbols,
        	AppendTo[gl, {
        			Table[ Text[Style[#,36,Black]& @ (Last@xSymbols[[ix]]), {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2.,-.02},{0,1}] , {ix,Length[xSymbols]}] ,
        			Table[ Text[Style[Rotate[#,Pi/2],36,Black]& @ (Last@ySymbols[[iy]]), {-.02, (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{1,0}] , {iy,Length[ySymbols]}] 
        	}];
        ];
        
		xxSymbols = MU3getCodes1d[xlevels,yType];
		yySymbols = MU3getCodes1d[ylevels,yType];
        If[ showAreas,
        	AppendTo[gl, {
         			Table[ 
         				{sx,sy} = {Last@xxSymbols[[ix]], Last@yySymbols[[iy]]};
         				pow = Switch[{sx,sy}
         					,{a,a}, 4
         					,{a,b}, 1
         					,{a,c}, 2
         					,{b,a}, 1
         					,{b,b}, 1
         					,{b,c}, 1
          					,{c,a}, 2
         					,{c,b}, 1
         					,{c,c}, 2
        					,_, 0
         				];
         				(*Text[Style[ToString[sx]<>ToString[sy],36,Blue], *)
         				Text[Style[pow,36,Blue], 
         					{(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,0}] 
         			, {ix,Length[xSymbols]}, {iy,Length[ySymbols]}] 
        	}];
        ];

        gl
    ] (* MU3getGridAxesSeparateSubdiv*)


makeFigureDiadicPartitioningSobol[] :=
    Module[ {},
        grid2 = { Thickness[.02],Yellow,Table[{Line[{{0,i},{2,i}}/2],Line[{{i,0},{i,2}}/2]},{i,0,2,1}] };
        grid4 = { Thickness[.01],Orange,Table[{Line[{{0,i},{4,i}}/4],Line[{{i,0},{i,4}}/4]},{i,0,4,1}] };
        grid8 = { Thickness[.005],Cyan,Table[{Line[{{0,i},{8,i}}/8],Line[{{i,0},{i,8}}/8]},{i,0,8,1}] };
        grid16 = { Thickness[.002],Red,Table[{Line[{{0,i},{16,i}}/16],Line[{{i,0},{i,16}}/16]},{i,0,16,1}] };
        grid32 = { Thickness[.001],Blue,Table[{Line[{{0,i},{32,i}}/32],Line[{{i,0},{i,32}}/32]},{i,0,32,1}] };
        grid64 = { Thickness[.0005],Orange,Table[{Line[{{0,i},{64,i}}/64],Line[{{i,0},{i,64}}/64]},{i,0,64,1}] };

		col = Red;
		th = .003;
        grid1x16 = 	{ Thickness[th],col,Table[Line[{{0,i},{16,i}}/16],{i,0,16,16}],	Table[Line[{{i,0},{i,16}}/16],{i,0,16,1}] };
        grid2x8 = 	{ Thickness[th],col,Table[Line[{{0,i},{16,i}}/16],{i,0,16,8}],	Table[Line[{{i,0},{i,16}}/16],{i,0,16,2}] };
        grid4x4 =	{ Thickness[th],col,Table[Line[{{0,i},{16,i}}/16],{i,0,16,4}],	Table[Line[{{i,0},{i,16}}/16],{i,0,16,4}] };
        grid8x2 =	{ Thickness[th],col,Table[Line[{{0,i},{16,i}}/16],{i,0,16,2}],	Table[Line[{{i,0},{i,16}}/16],{i,0,16,8}] };
        grid16x1 =	{ Thickness[th],col,Table[Line[{{0,i},{16,i}}/16],{i,0,16,1}],	Table[Line[{{i,0},{i,16}}/16],{i,0,16,16}] };

        {ind1, ind2} = {1,2};
        buildMSobol[{ind1, ind2}];
        nf = 1; (* x *)
            npts =  16;
			ptsx =  Table[sobol1d[nf,i],{i,0,npts-1}];
        Print["Sobol dir number ind=",ind1," a058947[[ind1]]=", a058947[[ind1]] -> (IntegerDigits @ a058947[[ind1]]) -> ptsx];
        nf = 2; (* x *)
            npts =  16;
			ptsy =  Table[sobol1d[nf,i],{i,0,npts-1}];
        Print["Sobol dir number ind=",ind1," a058947[[ind1]]=", a058947[[ind1]] -> (IntegerDigits @ a058947[[ind1]]) -> ptsy];
        set = {ptsx,ptsy}//T;
        
        ptsz = .03;
        g1x16 = Graphics[{grid1x16, Black, PointSize[ptsz], Point/@set}
        	(* ,Frame->True, FrameTicks->None *)];
        g2x8 = Graphics[{grid2x8, Black, PointSize[ptsz], Point/@set}
        	(* ,Frame->True, FrameTicks->None *)];
        g4x4 = Graphics[{grid4x4, Black, PointSize[ptsz], Point/@set}
        	(* ,Frame->True, FrameTicks->None *)];
        g8x2 = Graphics[{grid8x2, Black, PointSize[ptsz], Point/@set}
        	(* ,Frame->True, FrameTicks->None *)];
        g16x11 = Graphics[{grid16x1, Black, PointSize[ptsz], Point/@set}
        	(* ,Frame->True, FrameTicks->None *)];
        plot = GraphicsRow[{g1x16,g2x8,g4x4,g8x2,g16x11},ImageSize ->{600,Automatic}];
        plot//Print;
        Export["prep-figs/fig-DiadicPartitioningSobol.pdf",plot];
    ] (* makeFigureDiadicPartitioningSobol *)

blobbyFunction[{x_,y_}]:=E^(-20 x^2 - 20 y^2) + 0.2 (Sin[Pi x])^2 (Sin[Pi y])^2

blobbyFunction01[{x_,y_}]:=With[{xx = (x-.5) 2, yy = (y-.5) 2 }, blobbyFunction[{xx,yy}] ]

MU3makeFigureMUadicPartitioning[] :=
    Module[ {},
        	nlevels = 3;
        	{xType,yType} = {a,a};
        	        
            codes = MU3getActiveCodes @ MU3recursiveSubdivSIMPLEST[nlevels,xType,yType];
            
		MU3AAmuPartitioningQ[codes,7, True]//Print ; tab7 = gtab;
		MU3AAmuPartitioningQ[codes,6, True]//Print ; tab6 = gtab;
		MU3AAmuPartitioningQ[codes,5, True]//Print ; tab5 = gtab;
		MU3AAmuPartitioningQ[codes,4, True]//Print ; tab4 = gtab;
		MU3AAmuPartitioningQ[codes,3, True]//Print ; tab3 = gtab;
		MU3AAmuPartitioningQ[codes,2, True]//Print ; tab2 = gtab;

		ggrid = GraphicsGrid@{tab7,tab6,tab5,tab4,tab3,tab2};
		Export["prep-figs/fig-MU3adicPartitioning.pdf",ggrid];
		Print[ggrid];
	(*	ggrid = GraphicsGrid@Partition[gtab,3];
            Print[ggrid];
        Export["prep-figs/fig-MUadicPartitioning.pdf",ggrid];*)
    ] (* MU3makeFigureMUadicPartitioning *)

    
getMU3basicSeqIndex[int_]:=If[int == 1, 1,  (Round[Log[lambda, #]] & @ int) ]


MU3AAmuPartitioningQ[codes_,imposednlevels_:0, dbg_:False] :=
    Module[ {ptsXY,nlevels,xSymbols,ySymbols,xvaluesFracDir,yvaluesFracDir,pow,actual,ilevel,gl,tab,xmax,ymax,codelen,res},
    	ptsXY = MU3PhiXY /@ codes;
    	codelen = getMU3basicSeqIndex@Length[codes];
    	nlevels = If[imposednlevels == 0, codelen, imposednlevels];
    	gtab = {};
    	res = And @@ Table[
			xSymbols = MU3getCodes1d[nlevels-ilevel,a];
			ySymbols = MU3getCodes1d[ilevel-1,a];
			xvaluesFracDir = MU3Phi /@ xSymbols;
			yvaluesFracDir = MU3Phi /@ ySymbols;
			AppendTo[xvaluesFracDir,1.];
			AppendTo[yvaluesFracDir,1.];
			
	        If[ dbg,
        		{xmax,ymax} = {1,1};
	        	gl = { Magenta,AbsoluteThickness[10], Line[{{0,0},{xmax,0},{xmax,ymax},{0,ymax},{0,0}}] ,
	        			Table[ Text[Style[#,36,Black]& @ (Last@xSymbols[[ix]]), {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2.,-.02},{0,1}] , {ix,Length[xSymbols]}] ,
	        			Table[ Text[Style[Rotate[#,Pi/2],36,Black]& @ (Last@ySymbols[[iy]]), {-.02, (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{1,0}] , {iy,Length[ySymbols]}],
 						Red,AbsoluteThickness[2],
						Table[ Line[{{xvaluesFracDir[[i]],0},{xvaluesFracDir[[i]],ymax}}],{i,2,Length[xSymbols] }],
            			Table[ Line[{{0,yvaluesFracDir[[i]]},{xmax,yvaluesFracDir[[i]]}}],{i,2,Length[ySymbols] }]
	        	};
	         ];

			tab = And @@ (Flatten @ Table[
         		pow = Switch[{xSymbols[[ix,-1]],ySymbols[[iy,-1]]}
         					,{a,a}, MU3basicSeqExtended[[codelen-nlevels+6-0]] ,	{a,b}, MU3basicSeqExtended[[codelen-nlevels+6-2]] ,	{a,c}, MU3basicSeqExtended[[codelen-nlevels+6-1]]  
         					,{b,a}, MU3basicSeqExtended[[codelen-nlevels+6-2]] ,	{b,b}, MU3basicSeqExtended[[codelen-nlevels+6-4]] ,	{b,c}, MU3basicSeqExtended[[codelen-nlevels+6-3]] 
         					,{c,a}, MU3basicSeqExtended[[codelen-nlevels+6-1]] ,	{c,b}, MU3basicSeqExtended[[codelen-nlevels+6-3]] ,	{c,c}, MU3basicSeqExtended[[codelen-nlevels+6-2]]  
         					,_, Print[{sx,sy} ->" boyond the range"]
         				];
         		actual = Length @ Select[ptsXY, xvaluesFracDir[[ix+1]] > #[[1]] >= xvaluesFracDir[[ix]] && yvaluesFracDir[[iy+1]] > #[[2]] >= yvaluesFracDir[[iy]] &];
         		If[dbg,
         			AppendTo[gl, {	Black, AbsolutePointSize[20],Point/@ ptsXY,
         				If[pow == actual,
	         				Text[Style[pow,36,Blue], {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,0}]
         				,
         					{
	         				Text[Style[pow,36,Blue], {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,-1}]
	         				,Text[Style[actual,36,Red], {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2., (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{0,1}] 
	         				}
         				] } ];
         		];
         		pow == actual
			, {ix,Length[xSymbols]}, {iy,Length[ySymbols]}] );
         	If[dbg,AppendTo[gtab, Graphics[gl,(*PlotLabel->{ilevel,nlevels}, *)ImageSize -> {600,600}] ] ];
			tab
    	,{ilevel,nlevels}];
		If[dbg,gtab//Print];
    	res
    ] (* MU3AAmuPartitioningQ *)


MU3getRandomAATile[nlevels_] := T[RandomSample /@ {MU3getCodes1d[nlevels,a],MU3getCodes1d[nlevels,a]}]

MU3builsAAtilesL123456[ntrials_:100000] :=
    Module[ {},
    	Parallelize @ Do[
	        nlevels = ilevel;
	        
	        count = 0;
	        resTiles = {};
	        Do[
				{codes, zzz} = Sort /@ MU3getPivot[1, 1, nlevels, 0, False];
				(*codes = MU3getRandomAATile[nlevels];*)
				ptsXY = MU3PhiXY /@ codes;

				If[MemberQ[resTiles, codes], Continue[] ];
				If[MU3AAmuPartitioningQ[codes],
			        (*nPartitionLevels = nlevels - 2;
					Table[
		           		Graphics[{ showmuPartitioningQ[ptsXY, nPartitionLevels+1-i,i,a,a,True ]
		                    ,AbsolutePointSize[20],Point/@ ptsXY } ,ImageSize -> {800,800}   ]
		            ,{i,nPartitionLevels}]//Print;*)
		            count++;
					Print[nlevels -> itrial -> Length[codes] -> count ];
		            resTiles = Union @ Join[resTiles, {codes} ];
				];
	        ,{itrial,ntrials}];
	        fname = "data/AAtilesL"<>ToString[nlevels]<>".dat";
	        Put[resTiles,fname];
	        Print[{ilevel,itrial}," Written into ",fname -> Length[resTiles]];
	    ,{ilevel,6}];
    ] (* MU3builsAAtilesL123456 *)

MU3recursiveAATileCodes[level_:1] :=
    Module[ {},
        If[ level <= 6, Return[RandomChoice @ aaTiles[[level]]] ];
        Join[
	        (Join[#,{a}]& /@ #)& /@ MU3recursiveAATileCodes[level-1],
	        (Join[#,{a,a,a,b}]& /@ #)& /@ MU3recursiveAATileCodes[level-4]
        ]
    ] (* MU3recursiveSubdiv *)

fGaussian[{x_,y_}] := E^(-8 ((x-.5)^2+(y-.5)^2))//N

fGaussianClamped[{x_,y_}] := With[{r2 = (x-.5)^2+(y-.5)^2}, If[r2 < .07, E^(-8 r2), .2 ]//N ]

tstStrat[ntrials_:100] :=
    Module[ {},
        {Plot3D[fGaussian[{x,y}],{x,0,1},{y,0,1}], Plot3D[fGaussianClamped[{x,y}],{x,0,1},{y,0,1},PlotRange->All]}//Print;
        {nsubdivsPowFrom,nsubdivsPowTo} = {2,8};

        variancetab1 = Table[
        	var = Variance @ Table[
		        nsubdivs = 2^iPow;
		        npts = nsubdivs^2;
		        pts = Flatten[#,1]& @ Table[{RandomReal[{(ix-1)/nsubdivs,(ix)/nsubdivs}],RandomReal[{(iy-1)/nsubdivs,(iy)/nsubdivs}]} ,{ix,nsubdivs},{iy,nsubdivs}];
		        {xshift,yshift} = {0,0};
		        pts = {Mod[#[[1]] + xshift, 1], Mod[#[[2]] + yshift, 1]}& /@ pts;
		        Mean @ (fGaussian /@ pts)
			,{itrial,ntrials}];
			Print[ntrials," trials " -> iPow -> nsubdivs -> npts ];
			var
		,{iPow,nsubdivsPowFrom,nsubdivsPowTo}];

        variancetab2 = Table[
        	var = Variance @ Table[
		        nsubdivs = 2^iPow;
		        npts = nsubdivs^2;
		        pts = Flatten[#,1]& @ Table[{RandomReal[{(ix-1)/nsubdivs,(ix)/nsubdivs}],RandomReal[{(iy-1)/nsubdivs,(iy)/nsubdivs}]} ,{ix,nsubdivs},{iy,nsubdivs}];
		        {xshift,yshift} = {RandomReal[]-.5,RandomReal[]-.5};
		        pts = {Mod[#[[1]] + xshift, 1], Mod[#[[2]] + yshift, 1]}& /@ pts;
		        Mean @ (fGaussian /@ pts)
			,{itrial,ntrials}];
			Print[ntrials," shifted trials " -> iPow -> nsubdivs -> npts ];
			var
		,{iPow,nsubdivsPowFrom,nsubdivsPowTo}];


        variancetab3 = Table[
        	var = Variance @ Table[
		        nsubdivs = 2^iPow;
		        npts = nsubdivs^2;
		        pts = Flatten[#,1]& @ Table[{RandomReal[{(ix-1)/nsubdivs,(ix)/nsubdivs}],RandomReal[{(iy-1)/nsubdivs,(iy)/nsubdivs}]} ,{ix,nsubdivs},{iy,nsubdivs}];
		        {xshift,yshift} = {0,0};
		        pts = {Mod[#[[1]] + xshift, 1], Mod[#[[2]] + yshift, 1]}& /@ pts;
		        Mean @ (fGaussianClamped /@ pts)
			,{itrial,ntrials}];
			Print[ntrials," clamped trials " -> iPow -> nsubdivs -> npts ];
			var
		,{iPow,nsubdivsPowFrom,nsubdivsPowTo}];

        variancetab4 = Table[
        	var = Variance @ Table[
		        nsubdivs = 2^iPow;
		        npts = nsubdivs^2;
		        pts = Flatten[#,1]& @ Table[{RandomReal[{(ix-1)/nsubdivs,(ix)/nsubdivs}],RandomReal[{(iy-1)/nsubdivs,(iy)/nsubdivs}]} ,{ix,nsubdivs},{iy,nsubdivs}];
		        {xshift,yshift} = {RandomReal[]-.5,RandomReal[]-.5};
		        pts = {Mod[#[[1]] + xshift, 1], Mod[#[[2]] + yshift, 1]}& /@ pts;
		        Mean @ (fGaussianClamped /@ pts)
			,{itrial,ntrials}];
			Print[ntrials," clamped+shifted trials " -> iPow -> nsubdivs -> npts ];
			var
		,{iPow,nsubdivsPowFrom,nsubdivsPowTo}];

		purePow2 = Table[
				nsubdivs = 2^iPow;
		        npts = nsubdivs^2;
		        k = 1;
		        k npts^-2
			,{iPow,nsubdivsPowFrom,nsubdivsPowTo}];
		purePow15 = Table[
				nsubdivs = 2^iPow;
		        npts = nsubdivs^2;
		        k = 1;
		        k npts^-1.5
			,{iPow,nsubdivsPowFrom,nsubdivsPowTo}];
		ListPlot[{Log/@variancetab1,Log/@variancetab2,Log/@variancetab3,Log/@variancetab4,Log/@purePow15,Log/@purePow2 }
				, PlotLegends ->  {"fGaussian","fGaussian+Shift","fGaussianClamped","fGaussianClamped+Shift","N^1.5","N^2" }
			,PlotStyle->{Red,Blue,Green,Gray,{Black,Dashed},{Black,Dotted}},Joined->True]//Print
		(*Graphics[Point/@pts]//Print*)
    ] (* tstStrat*)