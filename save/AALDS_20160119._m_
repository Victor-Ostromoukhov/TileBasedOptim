(* AALDS Anti-Aliased Low-Discrepacy Sequences
	VO 2004-2015

	previous projects: mxBasedNumberSystems mxBasedFastMultidimensionalSampling PiGoodPermutations fastMultidimensionalSampling OmegaSampling first-LDSwithBlueNoise PiSystemBasedLDS LDSwBN etc.

		matrix generation
		<very narrow> 	mx_64x64_0.12-0.13/mx_64.NNN.dat generated with AALDS1dBuildMX[64, 6, 1, 1.]
		<very narrow> 	mx_64x64_0.11-0.13/mx_64.NNN.dat generated with  AALDS1dBuildMX[64, 1, .05, 1]
		<narrow> 		mx_64x64_0.11-0.14/mx_64.NNN.dat generated with  AALDS1dBuildMX[64, 3, 1, .5]
		<large> 		mx_64x64_0.08-0.15/mx_64.NNN.dat generated with  AALDS1dBuildMX[64, 4, 3]

		<medium>		matrices/mx_64x64_medium/mx_64.NNN.dat generated with AALDS1dBuildMX[64, 3, 2] 

dbgSobol[]

pocDweRuKi[] -- works well for mx21 only

------- FIBO:
FIBOpoc2DRecursive[]
FIBOrecursiveSubdiv[]
prepFIBOGrids[]
tstFIBOPermutTrees[]
goodFIBOSetQ[]
FIBOshowAllPermutTrees[4]
consolidateFIBOLen8Patterns[]
goodFIBOSetQ[]
goodFIBOSetQHorizontalOrVerticalRectangles[]
goodFIBOSetQSmallSquares[]
pocAALDSFIBO2D[] -- old version

------- MU4:
MU4pocRecursive[]
MU4recursiveSubdiv[]
MU4getGrid[]
MU4subdiv1d[]
MU4getCodes1d[]
MU4basicSeq
MU4F[]
MU4Finv[]
MU4FXY[]
MU4Phi[]
MU4PhiXY[]

----------DweRuKi
DweRuKiShowInflation[]
getDweRuKiGrid[]
prepDweRuKiBestPatterns[]
pocDweRuKi[]    	
recursiveSubdivDweRuKi2D[]


pocAALDSBinary2D[]
pocAALDSBinary2DBase4[]

getGoodPattern[]
getBayerOrdering[]
getGoodOrderedPattern[]
tstGoodOrderedActivePattern[]


mkAALDSmx[]

AALDS1dDemo[]
AALDS2dPOC[20]


FIBOF[symbols_] := With[{s=Reverse[symbols]}, Total@Table[Fibonacci[i+1 ] s[[i]], {i, Length[s]}] ]
FIBOFinv[symbols_] := Total@Table[Fibonacci[i+1 ] symbols[[i]], {i, Length[symbols]}]
FIBOFxy[symbols_]:=FIBOF/@symbols
phitab = Table[phi^-i, {i, 32}] // N;
FIBOPhi[s_] := Sum[phitab[[i]] s[[i]], {i, Length[s]}] 

Table[mx = getMyFamilyRadixInvertible[i]; CharacteristicPolynomial[mx, x], {i, 2, 10}] // mf
{
-1 - x + x^2, 
 1 + x^2 - x^3, 
-1 - x^3 + x^4, 
 1 + x^4 - x^5, 
-1 - x^5 + x^6,
 1 + x^6 - x^7,
-1 - x^7 + x^8, 
 1 + x^8 - x^9,
-1 - x^9 + x^10}


showAllBinaryPermutTrees[]

**********************************************************)

(**************** System-dependent setup ******************)
SetDirectory[ToFileName[$HomeDirectory,"AALDS"]];
SetOptions[Graphics, ImageSize -> { 1/4 1024,Automatic},AspectRatio->Automatic, PlotRange->All];
SetOptions[ListPlot, ImageSize -> { 600,Automatic},AspectRatio->.2, PlotRange->All];
SetOptions[ListLogLogPlot, ImageSize -> { 600,Automatic},AspectRatio->.61, PlotRange->All];
SetOptions[ListDensityPlot, ImageSize -> {512,Automatic},AspectRatio->Automatic, PlotRange->All];
pid :=
    "_pid"<>ToString[$ProcessID]<>"_kid"<>ToString[$KernelID]
systemID = StringSplit[$System][[1]];
execPrefix = "~/bin/";

epsilon = eps = 10^-10.;

Print["AALDS (sumitted version) loaded."];



(**************** useful common constants, macros and routines ******************)
mf :=
    MatrixForm
if :=
    InputForm
T :=
    Transpose
gr = GoldenRatio // N
PI = Pi//N;
phi = 1/2 (Sqrt[5]+1);
phiN = 1/2 (Sqrt[5]+1)//N;
known :=
    ValueQ
eps = epsilon = 10^-6;

euclidlen[z_] :=
    Sqrt[Total[z^2]]
euclidlen2[z_] :=
    Total[z^2]
euclidlenN[z_] :=
    Sqrt[Total[z^2]]//N

colTable = Join[{Darker@Gray,Red,Green,Blue,Gray,Magenta,LightGray,Cyan,Magenta,Orange,Brown,Pink,Purple}
    (*,Table[Hue[RandomReal[]],{120}]*) ];

getColor[ind_:Infinity] :=
    If[ ind==Infinity,
        colTable[[ RandomInteger[{1,Length[colTable]}] ]],
        colTable[[Mod[ind,Length[colTable],1] ]]
    ]
getRandomColor[] :=
    getColor[RandomInteger[{1, 128}]]
getLightColor[ind_] :=
    Lighter@(Lighter@(Lighter@colTable[[Mod[ind,Length[colTable],1 ] ]]))

colSolidTable = {Red,Blue,Orange,Gray,Magenta,Yellow,Cyan,Green};
getColorSolid[ind_] :=
    colSolidTable[[Mod[ind,Length[colSolidTable],1] ]]

lightColSolidTable = Lighter /@ (Lighter /@ {Red,Blue,Orange,Gray,Magenta,Yellow,Cyan,Green});
getLightColorSolid[ind_] :=
    lightColSolidTable[[Mod[ind,Length[lightColSolidTable],1] ]]

order2permut[s_] :=
    (Flatten[Drop[#,1]& /@ Sort[Table[{s[[i]],i},{i,Length[s]}]]]); (* 1..n *)
permut2order :=
    order2permut


order2permut1toN :=
    order2permut
order2permut0toNminus1[s_] :=
    ((s+1)//order2permut)-1

(* getMyFamilyNew *)
getMyFamilyRadixInvertible[sz_:4] := (* RadixInvertible *)
    Module[ {mx},
        mx = RotateRight /@ IdentityMatrix[sz];
        mx[[1, 1]] = 1;
        mx
    ] (* getMyFamilyRadixInvertible *)

getMyFamilyNew[sz_:4] := (* Wed Aug 19 11:08:35 CEST 2015 *)
    Module[ {mx},
        mx = RotateRight /@ IdentityMatrix[sz];
        mx[[1, Mod[3, sz, 1]]] = 1;
        mx
    ] (* getMyFamilyNew *)

(**************** useful common constants, macros and routines ******************)
reorg2D[lst2D_] :=
    With[ {sz = Floor[Length[lst2D]/2]},
        If[ sz == 0,
            Print["reorg3D: void data"];
            Break[]
        ];
        (RotateLeft[#,sz]& /@ (RotateLeft[#,sz]& @ lst2D))
    ] (* reorg2D *)
Reorg :=
    reorg2D

reorg3D[lst3D_] :=
    With[ {sz = Floor[Length[lst3D]/2]},
        If[ sz == 0,
            Print["reorg3D: void data"];
            Break[]
        ];
        (RotateLeft[#,sz]& /@ #)& /@ (RotateLeft[#,sz]& /@ (RotateLeft[#,sz]& @ lst3D))
    ] (* reorg3D *)

reorg4D[lst4D_] :=
    With[ {sz = Floor[Length[lst4D]/2]},
        If[ sz == 0,
            Print["reorg3D: void data"];
            Break[]
        ];
        (RotateLeft[#,sz]& /@ #)& /@   ((RotateLeft[#,sz]& /@ #)& /@ (RotateLeft[#,sz]& /@ (RotateLeft[#,sz]& @ lst4D)))
    ] (* reorg4D *)


niceRaster[img_,OptionsPattern[]] :=
    Block[ {sx,sy,z},
        z = OptionValue[zoom];
        {sy,sx} = Dimensions[img];
        Return[Graphics[Raster[img],PlotRange->{{0,sx},{0,sy}},ImageSize->{z sx,z sy}]];
    ];
Options[niceRaster] = {zoom->1};

getFourier1D[xvals_,fouriertabsz_] :=
    Module[ {tab,pos},
        tab = Table[0,{fouriertabsz}];
        If[ Min[xvals] <= 0,
            Print["getFourier1D: min=",Min[xvals]];
            Abort[]
        ];
        If[ Max[xvals] > fouriertabsz,
            Print["getFourier1D: max=",Max[xvals]];
            Abort[]
        ];
        Do[
            pos = xvals[[i]];
            If[ (pos <= 0) || (pos > fouriertabsz),
                Continue[]
            ];
            tab[[ pos ]] += 1
        ,{i,Length[xvals]}];
        (*tab[[xvals+1]] = 1;*)
        Return[Fourier[tab]// Abs]
    ] (* getFourier1D *)


getFourier2D[pts_,fouriertabsz_:512] :=
    Module[ {tab,sel},
        tab = Table[0,{fouriertabsz},{fouriertabsz}];
        sel = Select[Ceiling[pts], Min[#] > 0 && Max[#] <= fouriertabsz &];
        (tab[[#[[2]], #[[1]]]] = 1) & /@ sel;
        Return[Fourier[tab]// Abs]
    ] (* getFourier2D *)

getFourier3D[pts_,fouriertabsz_:256] :=
    Module[ {tab,sel},
        tab = Table[0,{fouriertabsz},{fouriertabsz},{fouriertabsz}];
        sel = Select[Ceiling[pts], Min[#] > 0 && Max[#] <= fouriertabsz &];
        (tab[[#[[3]], #[[2]], #[[1]]]] = 1) & /@ sel;
        Return[Fourier[tab]// Abs]
    ] (* getFourier3D *)


getFourier4D[pts_,fouriertabsz_:64] :=
    Module[ {tab,sel},
        tab = Table[0,{fouriertabsz},{fouriertabsz},{fouriertabsz},{fouriertabsz}];
        sel = Select[Ceiling[pts], Min[#] > 0 && Max[#] <= fouriertabsz &];
        (tab[[#[[4]], #[[3]], #[[2]], #[[1]]]] = 1) & /@ sel;
        Return[Fourier[tab]// Abs]
    ] (* getFourier4D *)

   
(*---------------------- sobol ----------------------*)
(*---------------------- see: Bratley & Fox, 1988 ----------------------*)
(*
 f1(z)=z+1                  powers: 1 0
 f2(z)=z^2+z+1              powers: 2 1 0
 f3(z)=z^3+z+1              powers: 3 1 0
 f4(z)=z^3+z^2+1              powers: 3 2 0
 f5(z)=z^4+z+1              powers: 4 1 0
 f6(z)=z^4+z^3+1              powers: 4 3 0
 f7(z)=z^5+z^2+1              powers: 5 2 0
 f8(z)=z^5+z^3+1              powers: 5 3 0
 f9(z)=z^5+z^3+z^2+z+1        powers: 5 3 2 1 0
 f10(z)=z^5+z^4+z^2+z+1        powers: 5 4 2 1 0
 f11(z)=z^5+z^4+z^3+z+1        powers: 5 4 3 1 0
 f12(z)=z^5+z^4+z^3+z^2+1    powers: 5 4 3 2 0
 etc. see a058947
*)

a011260 = (* Number of primitive polynomials of degree n over GF(2). 
               src: http://www.research.att.com/~njas/sequences/A011260 *)
    {1, 1, 2, 2, 6, 6, 18, 16, 48, 60, 176, 144, 630, 756, 1800, 2048, \
7710, 7776, 27594, 24000, 84672, 120032, 356960, 276480, 1296000, \
1719900, 4202496, 4741632, 18407808, 17820000, 69273666, 67108864, \
211016256};
a058947 = (* Coefficients of primitive irreducible polynomials over GF(2) listed in lexicographic order.  
            src: http://www.research.att.com/~njas/sequences/A058947 
            T. D. Noe, Table of n, a(n) for n=1..1110 (through degree 13) 
            Note that Take[a011260, 13] // Total -> 1110 (1111 with first 1)
            For higher degree < 32, http://www.theory.cs.uvic.ca/~cos/gen/poly.html
            VO: extra first entry is added to match Kuo,s implementation (by default, parameters direction vectors 1 and 2
            *)
{1,    (*1*)
11, (*2*)
111, (*3*)
1011, 1101, (*4,5*)
10011, 11001, (*6,7*)
100101, 101001, 101111, 110111, 111011, 111101, (*9..14*)
1000011, 1011011, 1100001, 1100111, 1101101, 1110011, (*15..20*)
10000011, 10001001, 10001111, 10010001, 10011101, 10100111, 10101011, \
10111001, 10111111, 11000001, 11001011, 11010011, 11010101, 11100101, \
11101111, 11110001, 11110111, 11111101, 100011101, 100101011, \
100101101, 101001101, 101011111, 101100011, 101100101, 101101001, \
101110001, 110000111, 110001101, 110101001, 111000011, 111001111, \
111100111, 111110101, 1000010001, 1000011011, 1000100001, 1000101101, \
1000110011, 1001011001, 1001011111, 1001101001, 1001101111, \
1001110111, 1001111101, 1010000111, 1010010101, 1010100011, \
1010100101, 1010101111, 1010110111, 1010111101, 1011001111, \
1011010001, 1011011011, 1011110101, 1011111001, 1100010011, \
1100010101, 1100011111, 1100100011, 1100110001, 1100111011, \
1101001111, 1101011011, 1101100001, 1101101011, 1101101101, \
1101110011, 1101111111, 1110000101, 1110001111, 1110110101, \
1110111001, 1111000111, 1111001011, 1111001101, 1111010101, \
1111011001, 1111100011, 1111101001, 1111111011, 10000001001, \
10000011011, 10000100111, 10000101101, 10001100101, 10001101111, \
10010000001, 10010001011, 10011000101, 10011010111, 10011100111, \
10011110011, 10011111111, 10100001101, 10100011001, 10100100011, \
10100110001, 10100111101, 10101000011, 10101010111, 10101101011, \
10110000101, 10110001111, 10110010111, 10110100001, 10111000111, \
10111100101, 10111110111, 10111111011, 11000010011, 11000010101, \
11000100101, 11000110111, 11001000011, 11001001111, 11001011011, \
11001111001, 11001111111, 11010001001, 11010110101, 11011000001, \
11011010011, 11011011111, 11011111101, 11100010111, 11100011101, \
11100100001, 11100111001, 11101000111, 11101001101, 11101010101, \
11101011001, 11101100011, 11101111101, 11110001101, 11110010011, \
11110110001, 11111011011, 11111110011, 11111111001, 100000000101, \
100000010111, 100000101011, 100000101101, 100001000111, 100001100011, \
100001100101, 100001110001, 100001111011, 100010001101, 100010010101, \
100010011111, 100010101001, 100010110001, 100011001111, 100011010001, \
100011100001, 100011100111, 100011101011, 100011110101, 100100001101, \
100100010011, 100100100101, 100100101001, 100100111011, 100100111101, \
100101000101, 100101001001, 100101010001, 100101011011, 100101110011, \
100101110101, 100101111111, 100110000011, 100110001111, 100110101011, \
100110101101, 100110111001, 100111000111, 100111011001, 100111100101, \
100111110111, 101000000001, 101000000111, 101000010011, 101000010101, \
101000101001, 101001001001, 101001100001, 101001101101, 101001111001, \
101001111111, 101010000101, 101010010001, 101010011101, 101010100111, \
101010101011, 101010110011, 101010110101, 101011010101, 101011011111, \
101011101001, 101011101111, 101011110001, 101011111011, 101100000011, \
101100001001, 101100010001, 101100110011, 101100111111, 101101000001, \
101101001011, 101101011001, 101101011111, 101101100101, 101101101111, \
101101111101, 101110000111, 101110001011, 101110010011, 101110010101, \
101110101111, 101110110111, 101110111101, 101111001001, 101111011011, \
101111011101, 101111100111, 101111101101, 110000001011, 110000001101, \
110000011001, 110000011111, 110001010111, 110001100001, 110001101011, \
110001110011, 110010000101, 110010001001, 110010010111, 110010011011, \
110010011101, 110010110011, 110010111111, 110011000111, 110011001101, \
110011010011, 110011010101, 110011100011, 110011101001, 110011110111, \
110100000011, 110100001111, 110100011101, 110100100111, 110100101101, \
110101000001, 110101000111, 110101010101, 110101011001, 110101100011, \
110101101111, 110101110001, 110110010011, 110110011111, 110110101001, \
110110111011, 110110111101, 110111001001, 110111010111, 110111011011, \
110111100001, 110111100111, 110111110101, 111000000101, 111000011101, \
111000100001, 111000100111, 111000101011, 111000110011, 111000111001, \
111001000111, 111001001011, 111001010101, 111001011111, 111001110001, \
111001111011, 111001111101, 111010000001, 111010010011, 111010011111, \
111010100011, 111010111011, 111011001111, 111011011101, 111011110011, \
111011111001, 111100001011, 111100011001, 111100110001, 111100110111, \
111101011101, 111101101011, 111101101101, 111101110101, 111110000011, \
111110010001, 111110010111, 111110011011, 111110100111, 111110101101, \
111110110101, 111111001101, 111111010011, 111111100101, 111111101001, \
1000001010011, 1000001101001, 1000001111011, 1000001111101, \
1000010011001, 1000011010001, 1000011101011, 1000100000111, \
1000100011111, 1000100100011, 1000100111011, 1000101001111, \
1000101010111, 1000101100001, 1000101101011, 1000110000101, \
1000110110011, 1000111011001, 1000111011111, 1001000001101, \
1001000110111, 1001000111101, 1001001100111, 1001001110011, \
1001001111111, 1001010111001, 1001011000001, 1001011001011, \
1001100001111, 1001100011101, 1001100100001, 1001100111001, \
1001100111111, 1001101001101, 1001101110001, 1001110011001, \
1001110100011, 1001110101001, 1010000000111, 1010000110001, \
1010000110111, 1010001001111, 1010001011101, 1010001100111, \
1010001110101, 1010010100111, 1010010101101, 1010011010011, \
1010100001111, 1010100011101, 1010101001101, 1010110010011, \
1010111000101, 1010111010111, 1010111011101, 1010111101011, \
1011000001001, 1011001000111, 1011001010101, 1011001011001, \
1011010100101, 1011010111101, 1011100010101, 1011100011001, \
1011101000011, 1011101000101, 1011101110101, 1011110001001, \
1011110101101, 1011110110011, 1011110111111, 1011111000001, \
1100001010111, 1100001011101, 1100010010001, 1100010010111, \
1100010111001, 1100011101111, 1100100011011, 1100100110101, \
1100101000001, 1100101100101, 1100101111011, 1100110001011, \
1100110110001, 1100110111101, 1100111001001, 1100111001111, \
1100111100111, 1101000011011, 1101000101011, 1101000110011, \
1101001101001, 1101010001011, 1101011010001, 1101011100001, \
1101011110101, 1101100001011, 1101100010011, 1101100011111, \
1101101010111, 1101110010001, 1101110100111, 1101110111111, \
1101111000001, 1101111010011, 1110000000101, 1110000010001, \
1110000010111, 1110000100111, 1110001001101, 1110010000111, \
1110010011111, 1110010100101, 1110010111011, 1110011000101, \
1110011001001, 1110011001111, 1110011110011, 1110100000111, \
1110100100011, 1110101000011, 1110101010001, 1110101011011, \
1110101110101, 1110110000101, 1110110001001, 1111000010101, \
1111000011001, 1111000101111, 1111001000101, 1111001010001, \
1111001100111, 1111001110011, 1111010001111, 1111011100011, \
1111100010001, 1111100011011, 1111100100111, 1111101110001, \
1111110011001, 1111110111011, 1111110111101, 1111111001001, \
10000000011011, 10000000100111, 10000000110101, 10000001010011, \
10000001100101, 10000001101111, 10000010001011, 10000010001101, \
10000010011111, 10000010100101, 10000010101111, 10000010111011, \
10000010111101, 10000011000011, 10000011001001, 10000011100001, \
10000011110011, 10000100001101, 10000100010101, 10000100101001, \
10000100101111, 10000100111011, 10000101000011, 10000101100111, \
10000101101011, 10000101111001, 10000110001001, 10000110010111, \
10000110011101, 10000110111111, 10000111000001, 10000111000111, \
10000111001101, 10000111011111, 10000111100011, 10000111110001, \
10000111111011, 10001000011001, 10001000100101, 10001000110111, \
10001000111101, 10001001000011, 10001001011011, 10001001011101, \
10001001111001, 10001001111111, 10001010001001, 10001010010111, \
10001010011011, 10001010110011, 10001010111111, 10001011001101, \
10001011101111, 10001011110111, 10001011111011, 10001100000101, \
10001100100111, 10001100101011, 10001101000111, 10001101010101, \
10001101011001, 10001101101111, 10001101110001, 10001101111101, \
10001110000111, 10001110001101, 10001110010101, 10001110100011, \
10001110101001, 10001110110001, 10001110110111, 10001110111011, \
10001111100001, 10001111101101, 10001111111001, 10010000001011, \
10010000010011, 10010000011111, 10010000100101, 10010000101001, \
10010000111101, 10010001010001, 10010001010111, 10010001100001, \
10010001101101, 10010001111111, 10010010000011, 10010010011011, \
10010010011101, 10010010110101, 10010010111111, 10010011000001, \
10010011000111, 10010011001011, 10010011100011, 10010100001001, \
10010100010111, 10010100011101, 10010100100001, 10010100101101, \
10010100111001, 10010101010011, 10010101010101, 10010101100011, \
10010101110001, 10010101110111, 10010110000111, 10010110001011, \
10010110010101, 10010110011001, 10010110011111, 10010110101111, \
10010110111101, 10010111000101, 10010111001111, 10010111010111, \
10010111101011, 10011000000011, 10011000000101, 10011000010001, \
10011000101101, 10011000111111, 10011001001011, 10011001010011, \
10011001011001, 10011001101001, 10011001110111, 10011001111011, \
10011010000111, 10011010010011, 10011010011001, 10011010110001, \
10011010110111, 10011010111101, 10011011000011, 10011011101011, \
10011011110101, 10011100010011, 10011100101001, 10011100111011, \
10011101001111, 10011101010111, 10011101011101, 10011101101011, \
10011101110011, 10011101111001, 10011110000011, 10011110010001, \
10011110100001, 10011110111001, 10011111000111, 10011111001011, \
10011111011111, 10011111101111, 10011111110001, 10100000000111, \
10100000011001, 10100000011111, 10100000100011, 10100000110001, \
10100000111011, 10100000111101, 10100001000101, 10100001100111, \
10100001110101, 10100010000101, 10100010101011, 10100010101101, \
10100010111111, 10100011001101, 10100011010101, 10100011011111, \
10100011100011, 10100011101001, 10100011111011, 10100100001001, \
10100100001111, 10100100010001, 10100100011011, 10100100101011, \
10100100110101, 10100100111111, 10100101000001, 10100101001011, \
10100101010101, 10100101110111, 10100101111101, 10100110000001, \
10100110010011, 10100110011111, 10100110101111, 10100110110111, \
10100110111101, 10100111000011, 10100111010111, 10100111110011, \
10100111110101, 10101000000011, 10101000001111, 10101000011101, \
10101000100001, 10101000110011, 10101000110101, 10101001001101, \
10101001101001, 10101001101111, 10101001110001, 10101001111011, \
10101001111101, 10101010100101, 10101010101001, 10101010110001, \
10101011000101, 10101011010111, 10101011011011, 10101011101011, \
10101011110011, 10101100000001, 10101100010101, 10101100100011, \
10101100100101, 10101100101111, 10101100110111, 10101101000011, \
10101101001001, 10101101101101, 10101101111111, 10101110000101, \
10101110010111, 10101110011011, 10101110101101, 10101110110011, \
10101111011001, 10101111100101, 10101111111101, 10110000001111, \
10110000100001, 10110000101011, 10110000101101, 10110000111111, \
10110001000001, 10110001001101, 10110001110001, 10110010001011, \
10110010001101, 10110010010101, 10110010100011, 10110010101111, \
10110010111101, 10110011000101, 10110011010001, 10110011010111, \
10110011100001, 10110011100111, 10110011101011, 10110100001101, \
10110100011001, 10110100101001, 10110100101111, 10110100110111, \
10110100111011, 10110101000101, 10110101011011, 10110101100111, \
10110101110101, 10110110001001, 10110110001111, 10110110100111, \
10110110101011, 10110110110101, 10110111100011, 10110111110001, \
10110111111101, 10111000000111, 10111000010011, 10111000010101, \
10111000101001, 10111001001001, 10111001001111, 10111001011011, \
10111001011101, 10111001100001, 10111001101011, 10111010001111, \
10111010010001, 10111010010111, 10111010011101, 10111010101011, \
10111010110011, 10111010111001, 10111011011111, 10111011111011, \
10111011111101, 10111100000101, 10111100001001, 10111100010001, \
10111100010111, 10111100111111, 10111101000001, 10111101001011, \
10111101001101, 10111101011001, 10111101011111, 10111101100101, \
10111101101001, 10111110010101, 10111110100101, 10111110101111, \
10111110110001, 10111111001111, 10111111011101, 10111111100111, \
10111111101101, 10111111110101, 10111111111111, 11000000000111, \
11000000010101, 11000000011001, 11000000101111, 11000001001001, \
11000001001111, 11000001100111, 11000001111001, 11000001111111, \
11000010010001, 11000010100001, 11000010110101, 11000010111111, \
11000011000001, 11000011010011, 11000011011001, 11000011100101, \
11000011101111, 11000100000101, 11000100001111, 11000100110101, \
11000101000111, 11000101001101, 11000101011111, 11000101100011, \
11000101110001, 11000101111011, 11000110100011, 11000110101001, \
11000110110111, 11000111000101, 11000111001001, 11000111011011, \
11000111100001, 11000111101011, 11000111101101, 11000111110011, \
11000111111111, 11001000001001, 11001000001111, 11001000011101, \
11001000100111, 11001000111001, 11001001001011, 11001001010011, \
11001001011001, 11001001100101, 11001010000001, 11001010010011, \
11001010011001, 11001010011111, 11001010101001, 11001010110111, \
11001010111011, 11001011000011, 11001011010111, 11001011011011, \
11001011100111, 11001100000111, 11001100010101, 11001100101111, \
11001101010001, 11001101011101, 11001101110101, 11001110010111, \
11001110011011, 11001110101011, 11001110111001, 11001111000001, \
11001111000111, 11001111010101, 11001111100011, 11001111100101, \
11001111110111, 11001111111011, 11010000001001, 11010000011011, \
11010000100111, 11010001000001, 11010001001101, 11010001011111, \
11010001101001, 11010001110111, 11010001111011, 11010010000111, \
11010010010011, 11010010011001, 11010010100101, 11010010111101, \
11010011001001, 11010011011011, 11010011100111, 11010011111001, \
11010100001101, 11010100011111, 11010100100101, 11010100110001, \
11010100110111, 11010101000101, 11010101001111, 11010101011101, \
11010101101101, 11010101110011, 11010101111111, 11010110011101, \
11010110100001, 11010110111001, 11010111001101, 11010111010101, \
11010111011001, 11010111100011, 11010111101001, 11010111101111, \
11011000000001, 11011000001011, 11011000011111, 11011000100101, \
11011000101111, 11011000111011, 11011001001001, 11011001010001, \
11011001011011, 11011001110011, 11011001110101, 11011010010001, \
11011010011011, 11011010011101, 11011010101101, 11011011001011, \
11011011010011, 11011011010101, 11011011100011, 11011011101111, \
11011100000101, 11011100001111, 11011100011011, 11011100100001, \
11011100101101, 11011100111001, 11011101000001, 11011101000111, \
11011101010011, 11011101110001, 11011101110111, 11011110001011, \
11011110010101, 11011110011001, 11011110100011, 11011111000101, \
11011111001111, 11011111010001, 11011111010111, 11011111011101, \
11011111100001, 11011111110011, 11100000000011, 11100000000101, \
11100000010111, 11100000011101, 11100000100111, 11100000110011, \
11100001001011, 11100001011001, 11100001101001, 11100001110001, \
11100010100011, 11100010110001, 11100010111011, 11100011001001, \
11100011001111, 11100011100001, 11100011110011, 11100011111001, \
11100100000001, 11100100000111, 11100100001011, 11100100010011, \
11100100110001, 11100101001111, 11100101100111, 11100101101101, \
11100110000011, 11100110000101, 11100110010111, 11100110100001, \
11100110100111, 11100110101101, 11100111001011, 11100111001101, \
11100111010011, 11100111101111, 11100111110111, 11100111111101, \
11101000000111, 11101000101001, 11101000101111, 11101000111101, \
11101001010001, 11101001011101, 11101001100001, 11101001100111, \
11101001110011, 11101001110101, 11101010001001, 11101010111001, \
11101010111111, 11101011001101, 11101011010011, 11101011010101, \
11101011011111, 11101011100101, 11101011101001, 11101011111011, \
11101100010001, 11101100101011, 11101100101101, 11101100110101, \
11101100111111, 11101101010011, 11101101011001, 11101101100011, \
11101101100101, 11101101101111, 11101101110001, 11101101110111, \
11101110001011, 11101110011001, 11101110100101, 11101110101001, \
11101110110111, 11101110111011, 11101111010001, 11101111100111, \
11101111110011, 11101111111111, 11110000001101, 11110000010011, \
11110000010101, 11110000011111, 11110000100011, 11110000100101, \
11110000111011, 11110001001111, 11110001011101, 11110001101101, \
11110010000011, 11110010001111, 11110010011101, 11110010100111, \
11110010101011, 11110010111001, 11110011000111, 11110011101001, \
11110011111011, 11110011111101, 11110100000011, 11110100010111, \
11110100011011, 11110100100001, 11110100101101, 11110100110011, \
11110100110101, 11110101000001, 11110101001101, 11110101100101, \
11110101101001, 11110101111101, 11110110000001, 11110110010101, \
11110110110001, 11110110110111, 11110111000011, 11110111010001, \
11110111011011, 11110111100111, 11110111101011, 11110111111001, \
11111000000101, 11111000001001, 11111000001111, 11111000011011, \
11111000101011, 11111000111111, 11111001000001, 11111001010011, \
11111001100101, 11111001101001, 11111010001011, 11111010100011, \
11111010111101, 11111011000101, 11111011010111, 11111011011101, \
11111011100001, 11111011111001, 11111100001101, 11111100011001, \
11111100011111, 11111100100101, 11111100110111, 11111100111101, \
11111101000011, 11111101000101, 11111101001001, 11111101010001, \
11111101010111, 11111101100001, 11111110000011, 11111110001001, \
11111110010001, 11111110101011, 11111110110101, 11111111100011, \
11111111110111, 11111111111101};

primitivePolynomialsDegree31 = (* first 1001 polynomials; src: http://www.theory.cs.uvic.ca/~cos/gen/poly.html *)
    {{31, 3, 0}, {31, 3, 2, 1, 0}, {31, 13, 8, 3, 0}, {31, 27, 23, 19, 15,
   11, 7, 3, 0}, {31, 21, 12, 3, 2, 1, 0}, {31, 20, 18, 7, 5, 3, 
  0}, {31, 20, 15, 5, 4, 3, 0}, {31, 25, 19, 14, 7, 3, 2, 1, 0}, {31, 
  16, 8, 4, 3, 2, 0}, {31, 23, 22, 15, 14, 7, 4, 3, 0}, {31, 27, 23, 
  19, 15, 11, 10, 9, 7, 6, 5, 3, 2, 1, 0}, {31, 26, 19, 9, 7, 6, 3, 2,
   0}, {31, 15, 13, 12, 7, 5, 4, 3, 0}, {31, 15, 14, 7, 6, 5, 4, 3, 2,
   1, 0}, {31, 28, 22, 19, 14, 10, 7, 4, 3, 2, 0}, {31, 30, 29, 28, 
  27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 
  10, 9, 8, 7, 6, 5, 4, 2, 1, 0}, {31, 20, 18, 17, 15, 10, 9, 8, 7, 6,
   4, 3, 2, 1, 0}, {31, 27, 24, 23, 20, 19, 16, 15, 11, 7, 6, 2, 
  0}, {31, 20, 19, 18, 16, 12, 11, 7, 4, 1, 0}, {31, 20, 18, 13, 12, 
  11, 9, 7, 2, 1, 0}, {31, 26, 22, 20, 17, 16, 13, 12, 11, 10, 9, 5, 
  3, 2, 0}, {31, 14, 12, 11, 10, 9, 7, 5, 2, 1, 0}, {31, 29, 25, 23, 
  17, 16, 15, 13, 4, 3, 2, 1, 0}, {31, 23, 22, 18, 17, 14, 13, 11, 10,
   8, 7, 5, 4, 2, 0}, {31, 27, 26, 23, 21, 19, 16, 15, 12, 8, 6, 1, 
  0}, {31, 26, 22, 21, 16, 14, 11, 9, 8, 7, 5, 4, 2, 1, 0}, {31, 20, 
  19, 15, 14, 7, 6, 5, 3, 2, 0}, {31, 15, 14, 9, 8, 6, 2, 1, 0}, {31, 
  28, 25, 23, 20, 19, 18, 17, 16, 15, 12, 11, 9, 8, 4, 3, 2, 1, 
  0}, {31, 30, 28, 27, 26, 20, 19, 18, 4, 2, 0}, {31, 28, 25, 18, 15, 
  12, 10, 9, 8, 7, 6, 1, 0}, {31, 27, 24, 23, 19, 17, 15, 12, 11, 7, 
  6, 3, 2, 1, 0}, {31, 21, 19, 17, 12, 10, 9, 7, 6, 5, 4, 3, 2, 1, 
  0}, {31, 26, 24, 22, 21, 18, 15, 13, 12, 11, 7, 4, 2, 1, 0}, {31, 
  27, 26, 22, 21, 20, 17, 16, 15, 11, 6, 5, 4, 3, 2, 1, 0}, {31, 25, 
  22, 21, 18, 16, 15, 14, 12, 9, 7, 5, 4, 3, 0}, {31, 27, 25, 21, 20, 
  18, 15, 14, 13, 12, 8, 7, 4, 1, 0}, {31, 25, 23, 22, 19, 17, 16, 14,
   11, 10, 9, 8, 7, 6, 2, 1, 0}, {31, 27, 25, 23, 22, 21, 19, 18, 17, 
  16, 15, 13, 12, 7, 4, 1, 0}, {31, 26, 16, 14, 13, 11, 10, 8, 7, 6, 
  5, 1, 0}, {31, 23, 22, 21, 20, 15, 13, 11, 10, 9, 8, 7, 6, 5, 4, 3, 
  2, 1, 0}, {31, 27, 20, 19, 16, 15, 14, 12, 11, 8, 7, 2, 0}, {31, 28,
   21, 20, 18, 17, 16, 15, 14, 12, 11, 10, 9, 7, 4, 1, 0}, {31, 30, 
  29, 27, 26, 19, 18, 14, 13, 12, 4, 3, 2, 1, 0}, {31, 25, 19, 14, 10,
   7, 4, 3, 2, 1, 0}, {31, 27, 23, 21, 17, 16, 12, 11, 10, 9, 8, 4, 3,
   1, 0}, {31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,
   16, 15, 14, 13, 11, 10, 9, 8, 7, 6, 5, 4, 2, 0}, {31, 26, 24, 22, 
  21, 19, 18, 14, 12, 7, 6, 5, 0}, {31, 27, 24, 23, 16, 11, 8, 5, 3, 
  1, 0}, {31, 24, 22, 18, 15, 14, 12, 11, 10, 9, 7, 5, 4, 1, 0}, {31, 
  29, 27, 24, 23, 22, 20, 19, 14, 13, 12, 5, 4, 1, 0}, {31, 23, 17, 
  15, 13, 12, 11, 9, 7, 5, 4, 1, 0}, {31, 27, 24, 23, 20, 19, 18, 16, 
  15, 14, 13, 12, 6, 5, 4, 3, 0}, {31, 29, 27, 26, 24, 22, 19, 16, 12,
   7, 6, 5, 4, 2, 0}, {31, 23, 17, 15, 6, 5, 3, 1, 0}, {31, 27, 26, 
  23, 22, 21, 13, 7, 5, 4, 2, 1, 0}, {31, 28, 25, 23, 22, 21, 20, 18, 
  14, 11, 10, 7, 5, 4, 2, 1, 0}, {31, 30, 27, 23, 18, 11, 10, 9, 4, 1,
   0}, {31, 25, 20, 19, 17, 16, 15, 14, 13, 11, 9, 7, 5, 4, 3, 2, 
  0}, {31, 27, 25, 21, 20, 16, 15, 14, 13, 12, 11, 8, 7, 5, 4, 3, 
  0}, {31, 30, 29, 28, 27, 25, 22, 17, 13, 9, 4, 1, 0}, {31, 28, 22, 
  21, 20, 19, 17, 15, 13, 12, 11, 10, 9, 4, 3, 1, 0}, {31, 24, 23, 21,
   20, 18, 14, 12, 11, 10, 9, 8, 5, 1, 0}, {31, 25, 24, 18, 16, 14, 
  12, 11, 10, 9, 8, 5, 4, 3, 0}, {31, 24, 23, 21, 19, 16, 14, 13, 7, 
  6, 5, 4, 0}, {31, 27, 25, 24, 22, 20, 18, 16, 12, 11, 10, 5, 3, 2, 
  0}, {31, 27, 26, 24, 23, 20, 15, 14, 8, 4, 3, 2, 0}, {31, 26, 25, 
  23, 20, 19, 15, 13, 12, 10, 8, 7, 6, 5, 4, 3, 2, 1, 0}, {31, 24, 20,
   18, 15, 14, 13, 11, 8, 7, 5, 3, 2, 1, 0}, {31, 26, 25, 23, 21, 20, 
  18, 17, 15, 14, 12, 11, 10, 9, 8, 7, 2, 1, 0}, {31, 28, 22, 21, 18, 
  12, 11, 7, 5, 3, 0}, {31, 30, 29, 28, 27, 25, 18, 15, 10, 9, 8, 7, 
  4, 3, 0}, {31, 28, 27, 24, 23, 22, 18, 17, 16, 12, 10, 9, 8, 7, 5, 
  4, 2, 1, 0}, {31, 28, 27, 26, 25, 24, 22, 19, 18, 15, 14, 12, 11, 
  10, 7, 3, 2, 1, 0}, {31, 29, 28, 26, 22, 21, 17, 14, 13, 7, 4, 1, 
  0}, {31, 28, 26, 23, 22, 21, 20, 19, 18, 16, 14, 13, 12, 11, 10, 8, 
  6, 5, 3, 2, 0}, {31, 28, 26, 25, 22, 20, 19, 18, 17, 15, 13, 12, 9, 
  8, 7, 5, 4, 3, 0}, {31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 
  14, 8, 6, 5, 4, 1, 0}, {31, 29, 25, 17, 16, 13, 9, 3, 0}, {31, 27, 
  22, 18, 17, 14, 13, 10, 6, 5, 4, 3, 2, 1, 0}, {31, 27, 23, 22, 21, 
  18, 17, 16, 14, 13, 10, 9, 7, 6, 4, 2, 0}, {31, 27, 26, 24, 23, 21, 
  20, 19, 17, 15, 14, 12, 11, 10, 9, 8, 5, 1, 0}, {31, 21, 20, 17, 15,
   13, 11, 5, 4, 3, 0}, {31, 26, 23, 21, 20, 17, 16, 14, 11, 7, 6, 5, 
  3, 2, 0}, {31, 29, 28, 26, 22, 21, 19, 17, 16, 15, 14, 13, 11, 10, 
  8, 6, 5, 1, 0}, {31, 30, 28, 27, 21, 20, 19, 18, 16, 14, 13, 9, 8, 
  6, 4, 3, 2, 1, 0}, {31, 27, 26, 23, 22, 20, 19, 17, 12, 7, 5, 3, 2, 
  1, 0}, {31, 27, 26, 24, 23, 22, 21, 20, 18, 17, 16, 15, 13, 11, 10, 
  7, 6, 3, 0}, {31, 29, 23, 21, 19, 18, 15, 14, 13, 12, 8, 7, 6, 4, 
  0}, {31, 26, 22, 21, 20, 18, 16, 11, 8, 5, 4, 3, 2, 1, 0}, {31, 27, 
  26, 22, 20, 18, 15, 14, 13, 12, 10, 9, 6, 4, 3, 2, 0}, {31, 30, 28, 
  26, 25, 24, 23, 22, 20, 19, 18, 15, 13, 9, 7, 6, 4, 3, 2, 1, 
  0}, {31, 28, 27, 26, 24, 21, 20, 19, 18, 15, 14, 13, 12, 11, 9, 6, 
  5, 3, 0}, {31, 27, 26, 24, 23, 20, 19, 17, 13, 10, 9, 7, 5, 4, 2, 1,
   0}, {31, 27, 23, 21, 19, 18, 17, 16, 15, 13, 12, 9, 8, 5, 4, 1, 
  0}, {31, 23, 22, 21, 15, 14, 13, 12, 11, 7, 6, 5, 0}, {31, 27, 26, 
  23, 21, 19, 16, 15, 10, 9, 8, 7, 2, 1, 0}, {31, 27, 24, 23, 22, 20, 
  18, 15, 14, 12, 10, 9, 7, 6, 5, 4, 2, 1, 0}, {31, 28, 27, 24, 23, 
  19, 16, 15, 13, 12, 11, 10, 9, 1, 0}, {31, 30, 29, 27, 25, 24, 22, 
  21, 20, 19, 17, 15, 14, 13, 12, 11, 10, 9, 7, 5, 4, 2, 0}, {31, 28, 
  27, 25, 24, 21, 17, 16, 15, 14, 12, 11, 10, 9, 6, 4, 3, 2, 0}, {31, 
  27, 24, 23, 19, 17, 15, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 
  0}, {31, 30, 28, 27, 26, 22, 20, 19, 17, 16, 15, 11, 10, 7, 6, 5, 4,
   3, 0}, {31, 27, 24, 22, 20, 19, 17, 13, 12, 10, 8, 6, 5, 3, 2, 1, 
  0}, {31, 27, 25, 22, 20, 17, 14, 13, 12, 11, 10, 8, 6, 5, 4, 2, 
  0}, {31, 30, 28, 25, 20, 17, 16, 15, 12, 11, 6, 5, 4, 1, 0}, {31, 
  29, 28, 27, 26, 24, 21, 17, 16, 15, 12, 11, 9, 7, 5, 3, 2, 1, 
  0}, {31, 27, 25, 23, 21, 18, 17, 13, 12, 11, 10, 8, 6, 5, 3, 2, 
  0}, {31, 30, 29, 28, 23, 22, 21, 20, 15, 11, 7, 4, 0}, {31, 29, 26, 
  25, 22, 21, 19, 18, 17, 16, 15, 8, 7, 6, 4, 3, 2, 1, 0}, {31, 27, 
  18, 10, 6, 5, 4, 3, 2, 1, 0}, {31, 27, 20, 19, 18, 17, 16, 15, 14, 
  13, 12, 11, 7, 6, 5, 4, 0}, {31, 29, 28, 26, 23, 20, 19, 18, 17, 16,
   13, 10, 6, 3, 0}, {31, 30, 27, 25, 22, 21, 20, 19, 18, 16, 15, 7, 
  4, 1, 0}, {31, 28, 27, 24, 22, 18, 16, 15, 14, 13, 11, 9, 8, 7, 6, 
  3, 0}, {31, 29, 28, 26, 25, 21, 20, 18, 15, 14, 13, 10, 8, 7, 2, 1, 
  0}, {31, 30, 28, 27, 26, 23, 22, 19, 18, 15, 9, 6, 4, 3, 0}, {31, 
  27, 25, 24, 23, 21, 14, 13, 10, 9, 8, 3, 2, 1, 0}, {31, 25, 24, 23, 
  22, 20, 19, 18, 15, 8, 7, 5, 4, 1, 0}, {31, 30, 29, 26, 22, 21, 20, 
  19, 18, 16, 12, 7, 6, 5, 4, 3, 0}, {31, 28, 25, 24, 19, 17, 16, 15, 
  11, 9, 6, 4, 0}, {31, 28, 25, 23, 22, 20, 17, 15, 14, 12, 11, 8, 7, 
  6, 5, 3, 2, 1, 0}, {31, 30, 29, 28, 27, 26, 25, 24, 22, 21, 20, 18, 
  17, 16, 13, 12, 11, 9, 8, 5, 4, 1, 0}, {31, 28, 26, 25, 23, 19, 17, 
  16, 13, 10, 3, 2, 0}, {31, 24, 21, 18, 14, 13, 12, 5, 3, 2, 0}, {31,
   24, 21, 18, 16, 14, 13, 11, 9, 8, 7, 6, 5, 2, 0}, {31, 28, 26, 23, 
  22, 21, 18, 15, 14, 11, 8, 7, 5, 4, 0}, {31, 30, 29, 28, 26, 24, 22,
   21, 18, 13, 12, 11, 10, 9, 5, 3, 2, 1, 0}, {31, 25, 23, 20, 19, 18,
   16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 1, 0}, {31, 27, 25, 24, 23,
   21, 19, 18, 14, 12, 9, 8, 5, 1, 0}, {31, 28, 27, 25, 24, 21, 20, 
  14, 11, 7, 6, 3, 2, 1, 0}, {31, 28, 26, 23, 22, 20, 18, 16, 15, 14, 
  11, 7, 6, 4, 2, 1, 0}, {31, 26, 19, 18, 17, 14, 13, 9, 8, 6, 5, 4, 
  3, 2, 0}, {31, 29, 25, 24, 23, 22, 20, 18, 14, 13, 11, 10, 9, 8, 6, 
  3, 2, 1, 0}, {31, 29, 28, 27, 26, 25, 23, 22, 20, 18, 12, 11, 9, 5, 
  4, 3, 0}, {31, 28, 25, 24, 22, 18, 14, 12, 9, 8, 7, 5, 3, 2, 
  0}, {31, 26, 25, 24, 22, 21, 20, 19, 16, 14, 13, 10, 9, 8, 0}, {31, 
  26, 25, 23, 21, 20, 18, 16, 15, 14, 13, 10, 8, 7, 6, 5, 4, 3, 2, 1, 
  0}, {31, 28, 24, 21, 19, 14, 12, 10, 9, 5, 3, 2, 0}, {31, 30, 29, 
  28, 27, 26, 25, 24, 23, 22, 18, 17, 16, 15, 14, 13, 12, 11, 9, 7, 5,
   2, 0}, {31, 28, 27, 25, 24, 21, 19, 18, 17, 16, 13, 12, 7, 4, 3, 2,
   0}, {31, 30, 28, 26, 25, 21, 20, 19, 18, 17, 15, 12, 11, 10, 8, 5, 
  4, 1, 0}, {31, 28, 23, 22, 21, 20, 18, 16, 12, 7, 6, 5, 4, 2, 
  0}, {31, 27, 24, 21, 19, 18, 16, 14, 11, 10, 8, 5, 3, 2, 0}, {31, 
  28, 27, 26, 25, 24, 23, 21, 17, 16, 12, 10, 9, 8, 6, 5, 4, 3, 
  0}, {31, 26, 25, 24, 22, 21, 20, 19, 17, 16, 15, 14, 13, 12, 11, 8, 
  7, 3, 0}, {31, 29, 28, 27, 22, 21, 19, 18, 17, 16, 11, 9, 5, 3, 2, 
  1, 0}, {31, 29, 27, 25, 22, 21, 20, 18, 17, 16, 15, 14, 12, 11, 10, 
  9, 6, 5, 4, 2, 0}, {31, 28, 25, 21, 18, 16, 15, 14, 13, 12, 11, 7, 
  4, 1, 0}, {31, 22, 21, 19, 18, 17, 16, 13, 11, 6, 4, 3, 0}, {31, 28,
   20, 18, 17, 15, 14, 13, 10, 8, 7, 6, 4, 3, 0}, {31, 26, 25, 22, 17,
   16, 15, 14, 13, 11, 10, 9, 8, 6, 5, 1, 0}, {31, 28, 25, 23, 22, 18,
   16, 15, 8, 7, 6, 5, 2, 1, 0}, {31, 30, 28, 26, 23, 22, 21, 18, 17, 
  14, 13, 10, 8, 7, 4, 1, 0}, {31, 25, 23, 20, 19, 17, 16, 14, 11, 6, 
  5, 1, 0}, {31, 30, 29, 26, 25, 23, 21, 20, 16, 15, 14, 13, 5, 1, 
  0}, {31, 25, 23, 20, 19, 17, 16, 15, 14, 13, 11, 10, 8, 7, 6, 5, 4, 
  3, 2, 1, 0}, {31, 27, 25, 23, 22, 21, 20, 19, 18, 16, 14, 13, 12, 
  11, 10, 6, 4, 1, 0}, {31, 30, 29, 26, 25, 21, 17, 15, 13, 11, 10, 8,
   4, 2, 0}, {31, 26, 25, 24, 23, 22, 20, 18, 8, 6, 4, 3, 0}, {31, 25,
   22, 21, 20, 17, 16, 13, 12, 11, 10, 9, 7, 6, 3, 2, 0}, {31, 29, 27,
   25, 24, 23, 20, 18, 14, 12, 10, 8, 6, 1, 0}, {31, 29, 26, 25, 24, 
  23, 22, 18, 15, 14, 11, 9, 8, 7, 5, 3, 2, 1, 0}, {31, 21, 20, 16, 
  15, 14, 13, 9, 7, 5, 4, 2, 0}, {31, 29, 26, 25, 24, 23, 22, 21, 17, 
  12, 11, 10, 7, 5, 4, 3, 0}, {31, 29, 26, 25, 24, 21, 20, 19, 18, 16,
   13, 10, 8, 5, 4, 1, 0}, {31, 20, 16, 13, 12, 9, 7, 5, 4, 3, 
  0}, {31, 30, 29, 27, 26, 22, 20, 16, 14, 13, 12, 10, 9, 8, 7, 6, 5, 
  3, 0}, {31, 28, 27, 25, 24, 22, 21, 20, 18, 17, 16, 11, 8, 6, 5, 2, 
  0}, {31, 30, 25, 23, 22, 19, 11, 8, 5, 3, 0}, {31, 30, 29, 28, 27, 
  26, 25, 24, 20, 19, 18, 17, 16, 15, 14, 11, 10, 4, 0}, {31, 26, 21, 
  20, 19, 18, 17, 15, 13, 12, 9, 7, 5, 2, 0}, {31, 30, 29, 26, 23, 21,
   20, 18, 17, 15, 14, 13, 12, 11, 9, 8, 7, 6, 5, 4, 2, 1, 0}, {31, 
  26, 23, 20, 19, 18, 17, 16, 14, 13, 11, 10, 9, 6, 5, 4, 0}, {31, 29,
   27, 23, 22, 21, 17, 16, 14, 13, 8, 7, 3, 2, 0}, {31, 29, 26, 23, 
  22, 18, 17, 14, 12, 11, 10, 6, 5, 4, 2, 1, 0}, {31, 27, 25, 21, 20, 
  14, 13, 12, 10, 8, 7, 5, 0}, {31, 29, 25, 24, 21, 18, 15, 14, 10, 9,
   8, 5, 3, 1, 0}, {31, 29, 25, 24, 20, 18, 17, 15, 12, 10, 8, 7, 5, 
  4, 2, 1, 0}, {31, 27, 26, 22, 17, 13, 11, 7, 6, 3, 2, 1, 0}, {31, 
  26, 24, 23, 21, 18, 17, 16, 15, 14, 9, 8, 6, 4, 3, 1, 0}, {31, 30, 
  28, 27, 24, 23, 20, 19, 18, 17, 16, 14, 13, 12, 11, 10, 9, 8, 5, 4, 
  2, 1, 0}, {31, 28, 26, 23, 22, 20, 19, 16, 15, 14, 12, 11, 8, 5, 4, 
  2, 0}, {31, 30, 29, 28, 25, 23, 22, 21, 18, 16, 14, 12, 11, 10, 9, 
  8, 0}, {31, 30, 29, 27, 26, 25, 24, 18, 15, 14, 13, 12, 10, 9, 7, 6,
   5, 3, 0}, {31, 27, 25, 23, 18, 17, 11, 10, 8, 6, 5, 4, 2, 1, 
  0}, {31, 29, 27, 21, 18, 14, 13, 10, 9, 6, 3, 1, 0}, {31, 26, 20, 
  19, 15, 14, 12, 4, 2, 1, 0}, {31, 21, 20, 17, 16, 13, 12, 10, 9, 8, 
  7, 6, 5, 3, 0}, {31, 30, 28, 26, 16, 15, 14, 13, 12, 10, 7, 6, 4, 1,
   0}, {31, 29, 27, 26, 25, 23, 17, 16, 10, 7, 5, 3, 2, 1, 0}, {31, 
  27, 26, 24, 21, 18, 17, 15, 10, 7, 5, 2, 0}, {31, 25, 24, 22, 21, 
  20, 16, 14, 13, 12, 10, 8, 5, 3, 0}, {31, 27, 24, 23, 20, 19, 17, 
  16, 15, 14, 13, 12, 7, 6, 5, 4, 3, 2, 0}, {31, 26, 24, 22, 21, 19, 
  18, 17, 16, 15, 14, 11, 10, 9, 8, 5, 4, 2, 0}, {31, 30, 28, 27, 26, 
  25, 24, 23, 22, 20, 19, 18, 17, 15, 13, 11, 10, 9, 8, 7, 3, 2, 
  0}, {31, 29, 28, 26, 24, 23, 21, 19, 18, 17, 16, 15, 13, 12, 11, 8, 
  4, 1, 0}, {31, 30, 28, 25, 23, 20, 19, 15, 14, 12, 10, 8, 6, 5, 4, 
  3, 0}, {31, 29, 28, 26, 23, 22, 20, 19, 17, 15, 14, 12, 11, 10, 9, 
  7, 5, 4, 0}, {31, 28, 27, 25, 24, 21, 18, 17, 16, 13, 9, 7, 6, 4, 2,
   1, 0}, {31, 29, 27, 25, 22, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5,
   0}, {31, 30, 29, 28, 27, 26, 25, 24, 23, 19, 14, 12, 10, 9, 8, 4, 
  0}, {31, 29, 26, 25, 19, 18, 16, 15, 12, 10, 9, 7, 6, 4, 2, 1, 
  0}, {31, 30, 29, 26, 25, 24, 23, 18, 17, 16, 14, 13, 9, 8, 7, 5, 3, 
  1, 0}, {31, 24, 20, 18, 15, 14, 12, 11, 10, 9, 4, 2, 0}, {31, 24, 
  23, 22, 20, 19, 17, 8, 7, 1, 0}, {31, 24, 20, 19, 16, 14, 12, 11, 
  10, 9, 3, 2, 0}, {31, 26, 25, 20, 15, 14, 13, 12, 11, 9, 7, 6, 
  0}, {31, 29, 27, 24, 23, 22, 19, 16, 15, 10, 8, 2, 0}, {31, 30, 29, 
  27, 25, 24, 22, 21, 18, 15, 14, 12, 10, 6, 4, 1, 0}, {31, 28, 26, 
  23, 22, 19, 17, 15, 14, 11, 7, 4, 2, 1, 0}, {31, 30, 29, 26, 25, 24,
   23, 22, 21, 20, 19, 16, 15, 14, 13, 12, 10, 8, 6, 3, 2, 1, 0}, {31,
   29, 23, 20, 19, 16, 14, 12, 11, 10, 9, 7, 6, 5, 0}, {31, 27, 24, 
  23, 22, 19, 18, 13, 11, 10, 9, 5, 4, 3, 2, 1, 0}, {31, 30, 26, 23, 
  22, 19, 14, 13, 12, 10, 9, 8, 7, 5, 2, 1, 0}, {31, 30, 28, 27, 26, 
  24, 23, 22, 17, 13, 11, 9, 7, 4, 0}, {31, 23, 21, 20, 19, 18, 16, 
  15, 12, 11, 7, 5, 4, 3, 0}, {31, 30, 29, 26, 24, 23, 21, 20, 10, 9, 
  7, 6, 4, 3, 0}, {31, 29, 20, 19, 16, 15, 14, 13, 11, 10, 9, 8, 7, 6,
   2, 1, 0}, {31, 27, 25, 23, 22, 16, 15, 12, 10, 9, 8, 5, 3, 2, 
  0}, {31, 30, 28, 25, 22, 20, 19, 18, 17, 15, 14, 13, 11, 10, 9, 5, 
  4, 3, 2, 1, 0}, {31, 29, 27, 26, 23, 22, 20, 19, 17, 16, 12, 10, 9, 
  7, 6, 5, 3, 2, 0}, {31, 25, 23, 18, 17, 14, 13, 10, 3, 2, 0}, {31, 
  30, 28, 24, 23, 22, 20, 18, 16, 14, 12, 7, 6, 4, 2, 1, 0}, {31, 29, 
  28, 24, 19, 17, 15, 13, 12, 10, 7, 6, 4, 3, 0}, {31, 30, 23, 22, 21,
   20, 18, 16, 15, 9, 8, 6, 5, 4, 0}, {31, 30, 29, 27, 25, 24, 22, 19,
   18, 17, 16, 13, 12, 11, 2, 1, 0}, {31, 29, 28, 26, 25, 19, 18, 16, 
  15, 14, 6, 5, 2, 1, 0}, {31, 30, 28, 27, 24, 22, 21, 19, 18, 16, 12,
   11, 9, 8, 6, 4, 3, 2, 0}, {31, 30, 27, 26, 25, 24, 22, 21, 18, 17, 
  15, 12, 7, 5, 4, 3, 2, 1, 0}, {31, 29, 25, 23, 21, 20, 19, 18, 16, 
  15, 14, 12, 11, 10, 9, 8, 7, 5, 0}, {31, 30, 27, 24, 23, 22, 21, 20,
   19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 8, 5, 0}, {31, 30, 29, 28, 
  25, 24, 23, 22, 16, 15, 14, 12, 11, 9, 8, 3, 2, 1, 0}, {31, 29, 27, 
  25, 22, 21, 20, 18, 17, 15, 14, 13, 11, 9, 6, 3, 2, 1, 0}, {31, 30, 
  28, 27, 26, 23, 22, 20, 18, 16, 15, 14, 11, 4, 3, 1, 0}, {31, 27, 
  26, 25, 23, 22, 21, 20, 17, 16, 12, 10, 9, 7, 6, 5, 2, 1, 0}, {31, 
  29, 24, 22, 17, 16, 15, 14, 10, 7, 5, 4, 0}, {31, 30, 29, 26, 25, 
  24, 22, 20, 19, 18, 17, 16, 15, 14, 12, 7, 6, 5, 4, 1, 0}, {31, 28, 
  27, 25, 24, 21, 19, 18, 17, 16, 14, 13, 12, 10, 7, 6, 4, 3, 2, 1, 
  0}, {31, 30, 27, 26, 25, 23, 15, 12, 11, 9, 8, 7, 6, 5, 4, 2, 
  0}, {31, 30, 29, 28, 27, 25, 23, 20, 19, 17, 16, 14, 13, 11, 7, 6, 
  4, 3, 0}, {31, 28, 26, 25, 24, 22, 16, 15, 14, 12, 11, 8, 7, 2, 
  0}, {31, 28, 26, 24, 23, 22, 21, 19, 18, 16, 15, 14, 12, 10, 5, 4, 
  3, 1, 0}, {31, 30, 29, 28, 24, 22, 21, 20, 19, 15, 14, 13, 12, 11, 
  10, 8, 6, 5, 3, 2, 0}, {31, 28, 26, 24, 23, 21, 19, 18, 16, 15, 11, 
  8, 5, 4, 2, 1, 0}, {31, 28, 27, 23, 22, 21, 20, 19, 18, 17, 14, 12, 
  11, 9, 6, 3, 0}, {31, 30, 28, 26, 23, 21, 20, 19, 18, 17, 16, 15, 
  14, 12, 10, 5, 0}, {31, 25, 24, 23, 21, 20, 19, 18, 17, 11, 9, 5, 2,
   1, 0}, {31, 27, 26, 24, 21, 19, 18, 17, 16, 14, 12, 9, 8, 7, 
  0}, {31, 26, 22, 21, 20, 19, 18, 17, 16, 12, 11, 10, 7, 4, 3, 1, 
  0}, {31, 26, 24, 19, 17, 15, 14, 9, 6, 5, 4, 3, 2, 1, 0}, {31, 29, 
  27, 26, 24, 23, 21, 20, 18, 17, 16, 15, 14, 13, 10, 9, 6, 4, 3, 1, 
  0}, {31, 28, 26, 25, 24, 23, 22, 21, 20, 19, 18, 16, 14, 12, 11, 9, 
  8, 4, 3, 1, 0}, {31, 30, 28, 27, 26, 24, 22, 19, 17, 15, 14, 13, 12,
   11, 10, 8, 7, 6, 3, 1, 0}, {31, 25, 23, 20, 17, 15, 14, 10, 8, 6, 
  4, 2, 0}, {31, 28, 27, 24, 23, 19, 18, 16, 15, 12, 11, 10, 9, 8, 7, 
  5, 4, 3, 2, 1, 0}, {31, 25, 23, 21, 20, 19, 18, 17, 16, 15, 14, 1, 
  0}, {31, 27, 24, 23, 22, 21, 20, 18, 15, 12, 9, 7, 6, 5, 3, 1, 
  0}, {31, 27, 26, 23, 22, 21, 19, 12, 11, 10, 9, 6, 4, 2, 0}, {31, 
  27, 23, 22, 21, 17, 16, 15, 12, 9, 7, 6, 3, 1, 0}, {31, 28, 27, 26, 
  25, 24, 23, 22, 21, 19, 14, 13, 12, 11, 8, 5, 4, 3, 0}, {31, 26, 24,
   23, 22, 21, 17, 14, 13, 12, 11, 10, 7, 6, 5, 3, 0}, {31, 27, 24, 
  22, 20, 19, 17, 15, 12, 10, 9, 8, 7, 6, 3, 1, 0}, {31, 30, 29, 28, 
  27, 24, 23, 22, 21, 20, 18, 16, 15, 13, 11, 9, 8, 6, 5, 3, 2, 1, 
  0}, {31, 22, 21, 20, 14, 12, 11, 9, 4, 1, 0}, {31, 29, 27, 26, 24, 
  23, 21, 20, 19, 17, 13, 12, 11, 10, 8, 6, 5, 2, 0}, {31, 28, 26, 24,
   23, 16, 14, 13, 11, 10, 9, 8, 7, 6, 0}, {31, 30, 29, 27, 26, 25, 
  24, 20, 18, 16, 12, 10, 8, 7, 6, 5, 4, 3, 2, 1, 0}, {31, 28, 26, 21,
   20, 17, 14, 10, 9, 7, 5, 4, 3, 1, 0}, {31, 27, 26, 24, 23, 21, 20, 
  17, 15, 14, 11, 10, 8, 6, 5, 4, 3, 1, 0}, {31, 30, 28, 27, 25, 23, 
  20, 17, 13, 12, 10, 9, 8, 3, 2, 1, 0}, {31, 27, 24, 22, 20, 17, 16, 
  14, 9, 8, 3, 1, 0}, {31, 26, 25, 22, 19, 16, 12, 11, 10, 9, 8, 7, 5,
   1, 0}, {31, 27, 23, 21, 14, 12, 10, 8, 5, 2, 0}, {31, 29, 28, 27, 
  25, 24, 23, 20, 17, 16, 14, 12, 8, 7, 6, 5, 3, 1, 0}, {31, 25, 24, 
  23, 22, 21, 20, 17, 15, 14, 10, 9, 8, 7, 4, 3, 0}, {31, 28, 25, 24, 
  20, 19, 18, 14, 13, 12, 10, 7, 5, 4, 0}, {31, 30, 29, 26, 24, 23, 
  22, 21, 16, 15, 14, 13, 11, 10, 8, 6, 4, 1, 0}, {31, 24, 23, 18, 15,
   10, 9, 8, 7, 5, 2, 1, 0}, {31, 29, 26, 25, 23, 22, 21, 20, 17, 16, 
  15, 14, 13, 12, 8, 6, 3, 2, 0}, {31, 28, 25, 22, 21, 20, 18, 16, 15,
   13, 12, 11, 9, 6, 0}, {31, 30, 27, 24, 23, 22, 21, 19, 18, 17, 14, 
  13, 12, 11, 10, 7, 6, 4, 0}, {31, 29, 28, 27, 21, 18, 16, 12, 11, 9,
   6, 3, 2, 1, 0}, {31, 27, 26, 23, 18, 17, 14, 12, 11, 9, 7, 6, 4, 1,
   0}, {31, 30, 29, 28, 26, 25, 21, 20, 18, 13, 11, 8, 7, 6, 2, 1, 
  0}, {31, 28, 27, 26, 24, 23, 21, 19, 13, 11, 7, 6, 2, 1, 0}, {31, 
  28, 25, 23, 16, 15, 14, 13, 9, 8, 4, 2, 0}, {31, 27, 26, 25, 24, 22,
   21, 20, 19, 17, 15, 14, 6, 5, 3, 2, 0}, {31, 28, 27, 26, 25, 24, 
  23, 21, 18, 17, 15, 13, 10, 9, 7, 5, 3, 2, 0}, {31, 28, 27, 26, 25, 
  20, 18, 16, 15, 9, 5, 2, 0}, {31, 28, 23, 19, 17, 16, 15, 13, 12, 
  11, 7, 6, 5, 4, 2, 1, 0}, {31, 30, 29, 27, 25, 24, 23, 22, 20, 17, 
  11, 10, 9, 8, 6, 5, 0}, {31, 28, 26, 25, 21, 18, 17, 13, 11, 5, 3, 
  2, 0}, {31, 29, 28, 26, 25, 22, 20, 19, 18, 17, 16, 15, 14, 9, 8, 7,
   6, 3, 0}, {31, 30, 29, 22, 21, 18, 12, 11, 9, 7, 6, 1, 0}, {31, 30,
   29, 28, 27, 24, 23, 22, 21, 20, 18, 17, 15, 14, 12, 9, 8, 4, 3, 1, 
  0}, {31, 29, 24, 23, 22, 20, 19, 18, 11, 7, 5, 2, 0}, {31, 27, 23, 
  22, 21, 20, 18, 17, 15, 14, 10, 7, 6, 1, 0}, {31, 28, 25, 24, 21, 
  18, 12, 10, 9, 4, 0}, {31, 28, 27, 26, 25, 24, 22, 20, 15, 12, 11, 
  10, 8, 7, 4, 1, 0}, {31, 27, 26, 24, 21, 17, 14, 13, 10, 9, 8, 6, 5,
   4, 0}, {31, 30, 28, 27, 26, 23, 21, 20, 17, 16, 14, 12, 11, 5, 3, 
  1, 0}, {31, 29, 28, 27, 26, 23, 22, 21, 16, 14, 12, 10, 9, 3, 
  0}, {31, 28, 24, 20, 19, 18, 14, 13, 11, 8, 7, 4, 3, 1, 0}, {31, 27,
   25, 24, 23, 20, 18, 16, 12, 8, 7, 6, 4, 3, 2, 1, 0}, {31, 30, 28, 
  27, 23, 19, 18, 16, 13, 12, 11, 10, 3, 1, 0}, {31, 28, 25, 24, 21, 
  18, 9, 8, 6, 5, 3, 1, 0}, {31, 29, 28, 26, 23, 21, 17, 16, 15, 14, 
  9, 8, 7, 6, 4, 1, 0}, {31, 30, 18, 17, 15, 14, 10, 8, 7, 6, 4, 2, 
  0}, {31, 30, 28, 27, 26, 23, 22, 21, 20, 14, 13, 12, 9, 6, 5, 3, 
  0}, {31, 28, 25, 24, 20, 19, 18, 17, 15, 14, 11, 10, 9, 8, 7, 6, 4, 
  3, 2, 1, 0}, {31, 28, 27, 25, 24, 23, 22, 21, 19, 16, 14, 13, 11, 
  10, 9, 8, 6, 5, 0}, {31, 29, 28, 26, 24, 23, 22, 19, 17, 16, 15, 12,
   10, 7, 5, 2, 0}, {31, 29, 28, 26, 21, 18, 17, 16, 13, 11, 10, 7, 6,
   2, 0}, {31, 28, 27, 26, 25, 23, 22, 20, 18, 17, 16, 12, 11, 10, 9, 
  8, 7, 3, 2, 1, 0}, {31, 30, 26, 22, 18, 17, 16, 15, 13, 11, 10, 8, 
  7, 6, 4, 1, 0}, {31, 28, 27, 23, 22, 21, 19, 18, 17, 16, 14, 12, 11,
   10, 8, 7, 6, 4, 2, 1, 0}, {31, 28, 27, 26, 25, 24, 20, 18, 16, 13, 
  7, 6, 3, 1, 0}, {31, 28, 27, 25, 21, 20, 18, 16, 15, 12, 9, 8, 5, 4,
   3, 1, 0}, {31, 30, 29, 28, 23, 21, 20, 17, 15, 14, 11, 10, 8, 6, 5,
   1, 0}, {31, 28, 27, 25, 23, 22, 19, 15, 14, 13, 12, 10, 9, 8, 7, 6,
   5, 1, 0}, {31, 29, 28, 26, 25, 24, 22, 21, 20, 18, 17, 12, 5, 2, 
  0}, {31, 29, 27, 24, 22, 21, 18, 14, 12, 8, 2, 1, 0}, {31, 30, 29, 
  28, 25, 23, 21, 19, 18, 16, 15, 10, 9, 6, 3, 1, 0}, {31, 25, 24, 23,
   21, 19, 18, 17, 16, 15, 10, 7, 4, 3, 0}, {31, 30, 29, 28, 23, 18, 
  17, 16, 15, 14, 10, 8, 5, 4, 0}, {31, 30, 29, 27, 26, 24, 23, 22, 
  21, 19, 18, 15, 11, 10, 9, 6, 3, 2, 0}, {31, 29, 26, 25, 23, 21, 20,
   15, 13, 11, 10, 8, 0}, {31, 24, 23, 21, 20, 19, 17, 15, 14, 13, 11,
   8, 3, 1, 0}, {31, 30, 28, 25, 22, 20, 17, 16, 14, 12, 11, 10, 9, 5,
   3, 2, 0}, {31, 29, 27, 26, 22, 20, 19, 17, 15, 14, 12, 10, 9, 8, 6,
   4, 3, 1, 0}, {31, 27, 22, 21, 19, 18, 14, 7, 6, 5, 4, 3, 2, 1, 
  0}, {31, 30, 28, 27, 21, 20, 19, 18, 16, 14, 12, 10, 6, 4, 3, 1, 
  0}, {31, 30, 29, 25, 21, 20, 19, 17, 16, 14, 12, 10, 6, 5, 2, 1, 
  0}, {31, 23, 22, 19, 17, 16, 13, 11, 9, 8, 6, 5, 3, 2, 0}, {31, 29, 
  27, 26, 19, 12, 9, 7, 4, 2, 0}, {31, 28, 27, 25, 24, 23, 22, 20, 16,
   15, 14, 12, 11, 9, 6, 5, 3, 2, 0}, {31, 30, 27, 25, 23, 20, 18, 17,
   15, 11, 10, 9, 8, 5, 3, 1, 0}, {31, 29, 28, 26, 22, 20, 18, 17, 16,
   14, 13, 12, 9, 5, 2, 1, 0}, {31, 30, 29, 28, 27, 26, 25, 23, 22, 
  19, 17, 16, 15, 14, 13, 12, 11, 10, 7, 6, 5, 4, 3, 2, 0}, {31, 30, 
  27, 26, 25, 23, 21, 20, 18, 17, 16, 15, 13, 12, 8, 6, 5, 4, 2, 1, 
  0}, {31, 29, 26, 25, 24, 21, 20, 17, 15, 12, 8, 6, 4, 2, 0}, {31, 
  24, 22, 21, 20, 18, 17, 15, 13, 12, 11, 10, 9, 7, 6, 4, 3, 2, 
  0}, {31, 30, 29, 27, 26, 25, 24, 18, 17, 15, 12, 10, 6, 1, 0}, {31, 
  29, 26, 25, 20, 16, 15, 14, 13, 12, 9, 7, 5, 4, 0}, {31, 26, 23, 22,
   17, 15, 14, 13, 12, 11, 10, 6, 4, 3, 2, 1, 0}, {31, 30, 29, 25, 24,
   22, 21, 19, 17, 14, 13, 11, 10, 9, 8, 7, 6, 4, 3, 2, 0}, {31, 30, 
  29, 25, 23, 18, 14, 9, 6, 5, 3, 1, 0}, {31, 26, 25, 24, 23, 21, 20, 
  18, 16, 12, 8, 7, 5, 2, 0}, {31, 29, 27, 26, 24, 20, 19, 18, 14, 13,
   12, 11, 9, 7, 6, 5, 4, 1, 0}, {31, 30, 27, 26, 25, 23, 21, 20, 18, 
  12, 10, 8, 5, 4, 0}, {31, 30, 29, 28, 26, 25, 24, 23, 19, 16, 15, 
  12, 10, 9, 8, 5, 2, 1, 0}, {31, 29, 27, 23, 19, 18, 17, 16, 15, 10, 
  6, 5, 4, 3, 2, 1, 0}, {31, 30, 28, 27, 23, 21, 20, 19, 18, 15, 14, 
  12, 11, 10, 8, 7, 6, 3, 2, 1, 0}, {31, 29, 25, 23, 21, 17, 14, 13, 
  12, 10, 8, 7, 6, 5, 4, 2, 0}, {31, 29, 28, 26, 25, 23, 19, 18, 17, 
  15, 13, 12, 8, 7, 6, 5, 4, 1, 0}, {31, 30, 29, 28, 26, 25, 24, 22, 
  18, 17, 16, 13, 11, 10, 9, 8, 6, 5, 2, 1, 0}, {31, 24, 23, 17, 16, 
  15, 14, 12, 9, 2, 0}, {31, 23, 22, 21, 20, 17, 11, 10, 9, 6, 5, 1, 
  0}, {31, 27, 26, 24, 22, 20, 19, 18, 17, 16, 14, 13, 12, 9, 6, 5, 4,
   3, 0}, {31, 29, 26, 25, 24, 23, 22, 21, 19, 17, 16, 15, 12, 11, 8, 
  5, 3, 2, 0}, {31, 30, 28, 27, 24, 23, 22, 21, 20, 19, 16, 13, 12, 
  11, 9, 7, 3, 2, 0}, {31, 27, 22, 21, 20, 16, 15, 14, 13, 11, 10, 9, 
  8, 6, 3, 1, 0}, {31, 30, 29, 27, 25, 24, 20, 17, 16, 14, 9, 8, 7, 6,
   5, 4, 2, 1, 0}, {31, 30, 22, 21, 18, 17, 16, 15, 14, 11, 10, 9, 6, 
  3, 2, 1, 0}, {31, 30, 28, 27, 25, 24, 20, 17, 10, 9, 8, 7, 2, 1, 
  0}, {31, 28, 26, 25, 24, 22, 20, 17, 14, 10, 7, 6, 5, 3, 2, 1, 
  0}, {31, 30, 29, 27, 26, 25, 24, 23, 20, 18, 16, 14, 13, 12, 11, 10,
   6, 1, 0}, {31, 27, 26, 24, 23, 12, 9, 8, 7, 6, 5, 2, 0}, {31, 28, 
  27, 23, 20, 19, 16, 15, 14, 10, 8, 7, 6, 5, 0}, {31, 30, 28, 27, 26,
   24, 23, 22, 19, 18, 17, 14, 13, 12, 9, 8, 7, 4, 3, 1, 0}, {31, 29, 
  28, 26, 25, 23, 22, 20, 18, 17, 16, 14, 11, 10, 8, 7, 6, 5, 3, 1, 
  0}, {31, 26, 25, 24, 20, 18, 12, 11, 10, 9, 7, 5, 0}, {31, 25, 24, 
  22, 19, 17, 15, 11, 6, 1, 0}, {31, 25, 24, 23, 21, 19, 16, 15, 11, 
  9, 7, 5, 4, 2, 0}, {31, 30, 28, 25, 24, 23, 22, 21, 19, 18, 17, 16, 
  14, 10, 7, 6, 3, 2, 0}, {31, 26, 25, 24, 23, 21, 20, 17, 15, 13, 12,
   11, 10, 9, 7, 6, 5, 3, 0}, {31, 30, 29, 24, 23, 21, 20, 19, 15, 13,
   12, 10, 9, 8, 7, 3, 0}, {31, 28, 27, 26, 25, 23, 21, 20, 19, 16, 
  12, 11, 9, 7, 5, 3, 2, 1, 0}, {31, 30, 29, 26, 25, 22, 18, 17, 14, 
  9, 8, 7, 6, 5, 4, 3, 0}, {31, 26, 25, 24, 22, 18, 17, 14, 12, 10, 9,
   6, 2, 1, 0}, {31, 29, 25, 24, 23, 20, 17, 15, 13, 11, 8, 5, 3, 1, 
  0}, {31, 30, 26, 24, 22, 20, 18, 17, 13, 12, 10, 7, 6, 1, 0}, {31, 
  28, 27, 24, 22, 19, 17, 12, 11, 10, 8, 4, 0}, {31, 26, 24, 23, 22, 
  20, 18, 16, 15, 12, 7, 6, 4, 2, 0}, {31, 29, 26, 22, 19, 18, 15, 13,
   10, 9, 8, 3, 2, 1, 0}, {31, 29, 26, 25, 23, 21, 19, 16, 15, 13, 10,
   7, 3, 1, 0}, {31, 30, 29, 28, 27, 22, 19, 17, 14, 9, 7, 6, 4, 3, 2,
   1, 0}, {31, 29, 25, 24, 22, 21, 20, 19, 16, 14, 11, 10, 9, 6, 5, 4,
   2, 1, 0}, {31, 30, 28, 25, 24, 23, 21, 20, 19, 18, 16, 15, 13, 9, 
  8, 7, 6, 2, 0}, {31, 26, 24, 23, 22, 21, 14, 12, 5, 4, 3, 1, 
  0}, {31, 30, 28, 27, 26, 25, 24, 22, 19, 18, 15, 8, 6, 1, 0}, {31, 
  28, 25, 24, 23, 22, 17, 16, 15, 14, 11, 9, 8, 4, 0}, {31, 30, 25, 
  21, 20, 19, 13, 11, 10, 9, 7, 6, 5, 4, 3, 2, 0}, {31, 30, 29, 26, 
  25, 24, 22, 20, 19, 18, 17, 16, 13, 12, 11, 10, 7, 5, 0}, {31, 29, 
  25, 24, 20, 19, 18, 17, 13, 11, 9, 8, 5, 4, 3, 1, 0}, {31, 30, 29, 
  28, 27, 26, 25, 23, 21, 20, 19, 18, 17, 16, 15, 13, 11, 10, 9, 8, 5,
   1, 0}, {31, 27, 26, 21, 20, 19, 17, 15, 13, 12, 6, 5, 3, 1, 
  0}, {31, 29, 28, 26, 25, 24, 17, 16, 15, 14, 13, 10, 7, 4, 0}, {31, 
  29, 27, 25, 23, 18, 17, 15, 13, 12, 9, 8, 5, 1, 0}, {31, 24, 22, 18,
   17, 14, 13, 12, 11, 9, 8, 6, 5, 1, 0}, {31, 30, 29, 28, 20, 13, 11,
   10, 9, 8, 7, 6, 3, 1, 0}, {31, 29, 28, 27, 24, 23, 21, 20, 19, 18, 
  17, 15, 13, 10, 7, 4, 0}, {31, 30, 28, 26, 25, 24, 23, 21, 20, 16, 
  15, 10, 9, 7, 6, 5, 4, 3, 2, 1, 0}, {31, 25, 24, 23, 21, 20, 19, 18,
   16, 15, 12, 9, 8, 7, 6, 4, 0}, {31, 30, 29, 27, 26, 25, 22, 20, 17,
   15, 14, 11, 10, 9, 7, 6, 4, 3, 0}, {31, 30, 24, 23, 22, 18, 16, 15,
   12, 10, 9, 8, 4, 1, 0}, {31, 30, 29, 28, 26, 20, 18, 17, 16, 15, 
  14, 12, 11, 10, 5, 4, 3, 2, 0}, {31, 30, 27, 25, 24, 22, 21, 20, 18,
   17, 15, 14, 13, 12, 11, 10, 9, 8, 7, 2, 0}, {31, 29, 28, 27, 26, 
  25, 24, 22, 21, 19, 16, 13, 12, 3, 0}, {31, 28, 27, 24, 23, 22, 20, 
  17, 15, 14, 12, 11, 8, 6, 5, 4, 3, 2, 0}, {31, 27, 25, 21, 18, 15, 
  11, 6, 5, 4, 3, 1, 0}, {31, 29, 27, 26, 25, 24, 19, 18, 16, 15, 14, 
  13, 11, 10, 8, 7, 2, 1, 0}, {31, 30, 29, 26, 25, 24, 18, 16, 11, 9, 
  8, 4, 3, 1, 0}, {31, 29, 28, 26, 24, 22, 20, 19, 18, 15, 9, 8, 6, 5,
   2, 1, 0}, {31, 30, 29, 28, 27, 25, 23, 22, 19, 18, 17, 15, 14, 13, 
  12, 4, 3, 1, 0}, {31, 28, 27, 22, 21, 20, 18, 17, 15, 14, 12, 7, 6, 
  4, 3, 2, 0}, {31, 30, 29, 28, 25, 24, 21, 17, 16, 15, 12, 11, 8, 5, 
  3, 2, 0}, {31, 30, 29, 28, 27, 26, 25, 23, 19, 16, 15, 14, 13, 7, 6,
   4, 3, 2, 0}, {31, 30, 29, 26, 23, 19, 17, 16, 13, 9, 8, 6, 4, 1, 
  0}, {31, 30, 29, 28, 26, 20, 18, 16, 14, 11, 10, 9, 7, 6, 3, 2, 
  0}, {31, 30, 28, 26, 24, 23, 22, 21, 18, 17, 16, 15, 14, 13, 11, 10,
   4, 3, 2, 1, 0}, {31, 27, 23, 22, 16, 15, 13, 12, 9, 6, 5, 2, 
  0}, {31, 29, 26, 24, 22, 20, 19, 18, 16, 13, 12, 11, 9, 8, 6, 4, 
  0}, {31, 29, 21, 19, 17, 15, 14, 13, 11, 9, 7, 4, 3, 1, 0}, {31, 30,
   29, 28, 27, 25, 23, 18, 15, 11, 9, 8, 7, 5, 4, 2, 0}, {31, 27, 26, 
  23, 20, 19, 16, 15, 14, 11, 9, 8, 7, 6, 3, 1, 0}, {31, 30, 29, 24, 
  23, 20, 19, 14, 11, 10, 8, 7, 3, 2, 0}, {31, 28, 23, 22, 20, 13, 10,
   8, 7, 6, 5, 1, 0}, {31, 30, 28, 27, 26, 23, 21, 20, 19, 18, 16, 15,
   14, 13, 11, 6, 2, 1, 0}, {31, 23, 22, 21, 20, 19, 15, 12, 11, 9, 8,
   6, 4, 1, 0}, {31, 30, 28, 27, 25, 24, 19, 17, 16, 15, 14, 13, 12, 
  10, 8, 6, 5, 3, 0}, {31, 30, 28, 26, 25, 24, 23, 22, 21, 14, 13, 12,
   11, 9, 7, 2, 0}, {31, 30, 26, 24, 22, 20, 13, 12, 11, 10, 8, 6, 3, 
  1, 0}, {31, 29, 28, 26, 25, 24, 23, 22, 21, 20, 19, 18, 16, 14, 12, 
  11, 10, 7, 6, 5, 2, 1, 0}, {31, 30, 29, 26, 24, 18, 16, 15, 14, 13, 
  11, 10, 8, 6, 4, 2, 0}, {31, 29, 28, 27, 26, 25, 20, 19, 17, 15, 14,
   12, 10, 6, 4, 3, 2, 1, 0}, {31, 30, 29, 25, 23, 16, 6, 4, 0}, {31, 
  30, 29, 27, 24, 21, 19, 18, 17, 13, 12, 10, 9, 7, 6, 5, 4, 2, 
  0}, {31, 30, 29, 28, 27, 26, 25, 22, 20, 18, 17, 12, 8, 7, 6, 5, 4, 
  1, 0}, {31, 25, 24, 21, 15, 13, 8, 5, 0}, {31, 30, 29, 28, 27, 25, 
  21, 20, 18, 17, 15, 13, 11, 10, 9, 7, 5, 2, 0}, {31, 29, 28, 26, 25,
   24, 23, 22, 19, 18, 17, 14, 11, 10, 9, 5, 3, 2, 0}, {31, 30, 28, 
  27, 24, 21, 20, 19, 18, 12, 11, 9, 7, 6, 4, 1, 0}, {31, 30, 29, 28, 
  27, 22, 21, 18, 16, 15, 13, 11, 7, 6, 5, 4, 2, 1, 0}, {31, 30, 28, 
  24, 22, 18, 16, 15, 14, 11, 6, 4, 2, 1, 0}, {31, 29, 25, 24, 22, 19,
   18, 17, 16, 12, 8, 6, 4, 3, 0}, {31, 30, 29, 28, 27, 23, 22, 20, 
  17, 16, 15, 14, 10, 7, 2, 1, 0}, {31, 28, 27, 26, 22, 20, 18, 16, 
  14, 13, 10, 9, 6, 4, 3, 1, 0}, {31, 19, 18, 15, 11, 2, 0}, {31, 30, 
  29, 28, 27, 21, 20, 16, 15, 4, 3, 2, 0}, {31, 30, 29, 28, 25, 24, 
  23, 22, 21, 20, 19, 18, 16, 14, 12, 11, 10, 9, 7, 5, 3, 1, 0}, {31, 
  30, 28, 27, 22, 19, 16, 14, 13, 12, 11, 9, 5, 4, 3, 1, 0}, {31, 30, 
  29, 28, 27, 25, 24, 23, 22, 21, 18, 17, 16, 15, 14, 13, 11, 10, 9, 
  6, 3, 2, 0}, {31, 29, 28, 27, 25, 24, 22, 21, 19, 17, 15, 14, 13, 
  11, 9, 8, 7, 6, 5, 1, 0}, {31, 30, 25, 24, 23, 17, 15, 14, 12, 11, 
  10, 8, 7, 2, 0}, {31, 30, 29, 26, 22, 18, 17, 15, 12, 11, 7, 5, 4, 
  2, 0}, {31, 30, 26, 23, 21, 18, 17, 16, 14, 12, 10, 9, 8, 4, 3, 2, 
  0}, {31, 30, 27, 26, 24, 23, 22, 21, 20, 18, 17, 13, 12, 8, 7, 6, 
  0}, {31, 30, 24, 23, 21, 19, 15, 13, 9, 8, 7, 4, 2, 1, 0}, {31, 25, 
  19, 16, 15, 13, 11, 8, 7, 5, 4, 3, 2, 1, 0}, {31, 30, 27, 26, 25, 
  21, 20, 19, 15, 14, 12, 11, 9, 7, 6, 4, 2, 1, 0}, {31, 30, 29, 26, 
  25, 24, 19, 16, 15, 14, 13, 11, 10, 8, 6, 4, 3, 1, 0}, {31, 29, 26, 
  25, 23, 21, 20, 17, 15, 14, 13, 7, 4, 1, 0}, {31, 30, 26, 24, 23, 
  21, 19, 18, 17, 16, 13, 11, 10, 7, 5, 4, 3, 2, 0}, {31, 30, 28, 27, 
  25, 23, 22, 18, 17, 15, 14, 13, 12, 10, 9, 7, 4, 2, 0}, {31, 29, 28,
   27, 26, 25, 24, 19, 18, 17, 16, 15, 14, 13, 10, 9, 2, 1, 0}, {31, 
  30, 28, 26, 25, 14, 12, 11, 9, 6, 3, 1, 0}, {31, 30, 29, 28, 25, 20,
   17, 15, 14, 13, 11, 9, 8, 7, 5, 4, 0}, {31, 29, 26, 24, 23, 18, 17,
   16, 15, 10, 9, 6, 5, 4, 2, 1, 0}, {31, 30, 29, 28, 26, 25, 24, 19, 
  18, 17, 12, 9, 3, 2, 0}, {31, 30, 28, 27, 26, 22, 20, 19, 18, 16, 
  14, 13, 12, 10, 8, 7, 6, 5, 3, 2, 0}, {31, 29, 28, 22, 21, 20, 16, 
  14, 9, 8, 5, 4, 3, 1, 0}, {31, 30, 29, 27, 26, 25, 24, 23, 22, 21, 
  20, 19, 17, 15, 12, 8, 7, 6, 4, 3, 0}, {31, 30, 29, 28, 27, 23, 21, 
  20, 18, 16, 12, 11, 9, 3, 2, 1, 0}, {31, 29, 27, 26, 24, 23, 22, 21,
   17, 15, 14, 11, 7, 6, 0}, {31, 30, 29, 27, 24, 22, 20, 18, 14, 13, 
  12, 11, 10, 9, 7, 4, 3, 1, 0}, {31, 29, 27, 23, 21, 20, 17, 15, 14, 
  13, 12, 9, 7, 6, 3, 1, 0}, {31, 29, 28, 24, 21, 18, 17, 16, 15, 14, 
  13, 12, 11, 6, 3, 1, 0}, {31, 30, 29, 28, 27, 26, 23, 22, 17, 12, 
  10, 7, 5, 4, 0}, {31, 30, 29, 27, 26, 24, 23, 22, 21, 20, 18, 17, 
  13, 9, 8, 7, 3, 1, 0}, {31, 29, 28, 27, 26, 25, 24, 23, 22, 21, 17, 
  16, 14, 12, 10, 7, 4, 3, 2, 1, 0}, {31, 30, 29, 28, 27, 26, 23, 19, 
  15, 14, 13, 12, 8, 7, 5, 1, 0}, {31, 28, 27, 26, 23, 22, 21, 20, 18,
   16, 14, 12, 10, 9, 8, 7, 5, 4, 0}, {31, 29, 28, 27, 25, 23, 22, 21,
   19, 16, 15, 14, 13, 12, 10, 9, 8, 6, 4, 3, 2, 1, 0}, {31, 30, 29, 
  28, 26, 25, 24, 20, 18, 17, 16, 14, 11, 10, 5, 4, 3, 2, 0}, {31, 28,
   25, 24, 22, 21, 15, 13, 11, 7, 6, 5, 0}, {31, 28, 24, 23, 21, 20, 
  19, 18, 17, 15, 13, 12, 10, 7, 6, 4, 3, 1, 0}, {31, 30, 29, 28, 24, 
  20, 18, 17, 15, 13, 11, 9, 5, 4, 0}, {31, 28, 27, 22, 21, 20, 18, 
  16, 15, 14, 13, 12, 11, 8, 4, 2, 0}, {31, 26, 25, 24, 23, 22, 20, 
  15, 10, 9, 8, 7, 5, 4, 0}, {31, 29, 28, 27, 24, 21, 18, 17, 15, 14, 
  13, 12, 9, 7, 6, 5, 4, 1, 0}, {31, 22, 20, 18, 14, 13, 12, 10, 9, 8,
   7, 5, 4, 1, 0}, {31, 28, 27, 25, 23, 17, 13, 12, 10, 9, 7, 5, 2, 1,
   0}, {31, 29, 27, 26, 25, 24, 23, 20, 19, 17, 16, 13, 12, 11, 9, 8, 
  4, 3, 0}, {31, 23, 21, 20, 19, 18, 16, 14, 12, 6, 5, 1, 0}, {31, 27,
   24, 21, 20, 14, 13, 12, 11, 10, 5, 4, 3, 1, 0}, {31, 24, 23, 22, 
  21, 18, 17, 14, 13, 11, 6, 5, 3, 1, 0}, {31, 29, 27, 26, 25, 24, 20,
   18, 17, 16, 15, 13, 12, 10, 9, 8, 6, 5, 4, 3, 0}, {31, 26, 25, 23, 
  22, 19, 18, 17, 16, 12, 11, 10, 8, 7, 6, 3, 2, 1, 0}, {31, 27, 26, 
  25, 22, 21, 18, 17, 16, 14, 13, 8, 6, 4, 0}, {31, 27, 26, 25, 24, 
  21, 20, 16, 12, 9, 7, 6, 5, 3, 0}, {31, 25, 23, 21, 20, 19, 18, 17, 
  14, 13, 12, 9, 6, 1, 0}, {31, 26, 24, 23, 22, 20, 19, 17, 13, 11, 9,
   8, 6, 4, 3, 1, 0}, {31, 28, 26, 25, 24, 22, 17, 15, 13, 12, 11, 9, 
  8, 7, 5, 4, 3, 2, 0}, {31, 30, 27, 26, 25, 23, 21, 20, 19, 13, 11, 
  8, 7, 6, 4, 3, 0}, {31, 28, 24, 22, 21, 18, 15, 13, 11, 8, 3, 1, 
  0}, {31, 27, 25, 23, 20, 17, 16, 13, 9, 7, 6, 4, 2, 1, 0}, {31, 30, 
  29, 26, 25, 24, 23, 22, 21, 20, 19, 18, 14, 12, 11, 10, 9, 6, 5, 3, 
  2, 1, 0}, {31, 28, 25, 24, 23, 21, 18, 17, 16, 12, 11, 7, 6, 5, 4, 
  3, 0}, {31, 28, 24, 23, 22, 18, 15, 14, 13, 12, 10, 8, 7, 4, 3, 1, 
  0}, {31, 30, 29, 28, 27, 26, 23, 22, 21, 20, 17, 16, 15, 13, 11, 8, 
  6, 4, 0}, {31, 25, 24, 21, 19, 18, 16, 14, 13, 12, 11, 10, 9, 8, 7, 
  6, 3, 1, 0}, {31, 27, 24, 23, 22, 19, 18, 16, 14, 11, 10, 7, 6, 5, 
  4, 3, 0}, {31, 27, 24, 22, 19, 15, 13, 12, 11, 8, 5, 4, 3, 2, 
  0}, {31, 29, 26, 25, 24, 22, 20, 19, 17, 16, 9, 7, 5, 3, 0}, {31, 
  25, 24, 21, 20, 19, 18, 15, 14, 7, 6, 4, 0}, {31, 27, 25, 24, 23, 
  20, 19, 17, 16, 15, 13, 10, 4, 2, 0}, {31, 28, 27, 23, 22, 21, 20, 
  19, 18, 17, 12, 7, 6, 5, 4, 1, 0}, {31, 30, 29, 28, 27, 26, 20, 19, 
  16, 15, 13, 11, 10, 9, 8, 7, 3, 2, 0}, {31, 27, 25, 17, 16, 15, 13, 
  12, 6, 2, 0}, {31, 27, 26, 25, 24, 22, 18, 16, 15, 14, 10, 8, 7, 4, 
  3, 1, 0}, {31, 29, 27, 24, 23, 22, 21, 20, 19, 18, 16, 12, 10, 8, 7,
   6, 5, 4, 2, 1, 0}, {31, 28, 25, 24, 23, 21, 20, 19, 16, 15, 12, 10,
   6, 1, 0}, {31, 28, 26, 23, 21, 17, 16, 14, 8, 7, 3, 2, 0}, {31, 27,
   26, 25, 23, 20, 17, 12, 10, 7, 6, 1, 0}, {31, 29, 25, 24, 23, 22, 
  21, 18, 16, 14, 13, 12, 10, 9, 8, 5, 4, 2, 0}, {31, 27, 24, 23, 22, 
  18, 14, 12, 11, 10, 8, 7, 3, 1, 0}, {31, 27, 25, 24, 23, 22, 15, 10,
   9, 6, 3, 2, 0}, {31, 29, 26, 25, 22, 19, 18, 17, 16, 15, 13, 10, 9,
   7, 6, 5, 0}, {31, 26, 23, 22, 21, 18, 17, 13, 11, 4, 0}, {31, 27, 
  25, 24, 23, 20, 17, 16, 12, 11, 10, 6, 3, 2, 0}, {31, 28, 25, 20, 
  18, 14, 9, 8, 7, 6, 0}, {31, 30, 28, 27, 26, 24, 23, 21, 20, 19, 16,
   14, 9, 8, 7, 6, 5, 4, 3, 1, 0}, {31, 28, 25, 24, 23, 22, 20, 19, 
  18, 16, 15, 13, 12, 11, 8, 7, 5, 3, 2, 1, 0}, {31, 28, 27, 26, 24, 
  23, 22, 21, 20, 19, 18, 17, 15, 14, 12, 10, 9, 5, 0}, {31, 29, 26, 
  24, 23, 22, 18, 17, 16, 15, 11, 10, 8, 6, 3, 1, 0}, {31, 26, 24, 22,
   20, 19, 16, 15, 11, 3, 0}, {31, 27, 26, 23, 22, 21, 19, 18, 17, 16,
   13, 12, 11, 10, 9, 8, 7, 6, 5, 1, 0}, {31, 28, 25, 23, 22, 20, 19, 
  16, 15, 14, 6, 5, 3, 2, 0}, {31, 28, 27, 25, 24, 23, 19, 17, 14, 12,
   10, 7, 5, 2, 0}, {31, 27, 25, 24, 20, 19, 18, 16, 15, 14, 7, 6, 4, 
  2, 0}, {31, 30, 29, 28, 24, 20, 18, 14, 12, 11, 5, 3, 0}, {31, 29, 
  24, 23, 22, 21, 18, 17, 16, 14, 13, 11, 9, 6, 4, 3, 2, 1, 0}, {31, 
  27, 26, 25, 24, 23, 19, 18, 15, 14, 13, 12, 11, 10, 9, 8, 4, 3, 
  0}, {31, 24, 23, 22, 21, 19, 17, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 
  2, 0}, {31, 29, 28, 27, 23, 22, 21, 18, 17, 15, 13, 10, 9, 8, 7, 5, 
  4, 3, 2, 1, 0}, {31, 30, 29, 27, 26, 25, 24, 23, 18, 15, 12, 11, 10,
   4, 0}, {31, 24, 23, 22, 19, 18, 17, 12, 11, 7, 6, 5, 4, 3, 0}, {31,
   27, 26, 24, 23, 20, 18, 17, 15, 14, 12, 11, 10, 9, 8, 3, 0}, {31, 
  30, 27, 26, 25, 22, 20, 18, 17, 16, 15, 14, 13, 12, 10, 6, 4, 3, 
  0}, {31, 28, 27, 24, 23, 22, 20, 17, 12, 8, 6, 5, 4, 3, 0}, {31, 27,
   26, 25, 22, 21, 12, 11, 9, 8, 6, 1, 0}, {31, 29, 26, 20, 18, 15, 6,
   1, 0}, {31, 29, 27, 26, 25, 23, 20, 19, 18, 17, 15, 14, 13, 10, 8, 
  5, 3, 1, 0}, {31, 28, 27, 23, 21, 20, 19, 15, 14, 13, 11, 7, 6, 1, 
  0}, {31, 29, 27, 25, 24, 23, 21, 15, 14, 12, 11, 10, 9, 7, 3, 2, 
  0}, {31, 26, 23, 22, 21, 15, 14, 13, 12, 11, 8, 4, 2, 1, 0}, {31, 
  27, 25, 24, 23, 22, 21, 20, 19, 14, 11, 10, 9, 8, 7, 6, 4, 2, 
  0}, {31, 26, 23, 22, 21, 20, 14, 10, 7, 4, 0}, {31, 29, 28, 27, 23, 
  21, 19, 18, 16, 15, 13, 11, 8, 7, 5, 4, 3, 1, 0}, {31, 30, 27, 25, 
  24, 23, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 8, 2, 0}, {31, 27, 
  26, 20, 16, 9, 8, 5, 3, 2, 0}, {31, 28, 26, 22, 21, 15, 13, 12, 10, 
  7, 6, 5, 4, 3, 2, 1, 0}, {31, 30, 28, 27, 26, 25, 24, 22, 17, 12, 6,
   5, 2, 1, 0}, {31, 26, 25, 21, 16, 14, 13, 10, 6, 1, 0}, {31, 28, 
  23, 21, 20, 19, 16, 14, 13, 7, 2, 1, 0}, {31, 29, 28, 27, 25, 23, 
  21, 20, 18, 14, 13, 12, 10, 8, 7, 5, 4, 3, 0}, {31, 25, 23, 21, 17, 
  16, 15, 14, 13, 12, 11, 8, 7, 6, 5, 1, 0}, {31, 23, 22, 21, 17, 14, 
  13, 12, 11, 10, 7, 6, 5, 4, 3, 2, 0}, {31, 30, 25, 18, 17, 15, 10, 
  8, 5, 4, 0}, {31, 29, 26, 24, 23, 22, 21, 20, 19, 17, 15, 13, 12, 
  11, 5, 4, 3, 1, 0}, {31, 28, 26, 25, 23, 21, 17, 13, 12, 11, 10, 5, 
  3, 2, 0}, {31, 30, 29, 28, 26, 25, 24, 22, 18, 14, 11, 10, 8, 6, 5, 
  4, 0}, {31, 28, 26, 24, 22, 20, 19, 18, 16, 13, 12, 10, 9, 7, 6, 5, 
  4, 2, 0}, {31, 30, 29, 28, 26, 24, 23, 20, 19, 17, 14, 13, 12, 11, 
  9, 8, 7, 5, 4, 2, 0}, {31, 28, 26, 24, 23, 22, 21, 19, 18, 17, 13, 
  10, 5, 2, 0}, {31, 29, 28, 27, 26, 21, 20, 16, 13, 12, 9, 6, 4, 3, 
  2, 1, 0}, {31, 28, 26, 25, 24, 22, 17, 13, 12, 11, 9, 4, 3, 2, 
  0}, {31, 27, 25, 23, 21, 20, 19, 18, 17, 15, 14, 12, 11, 10, 6, 4, 
  3, 2, 0}, {31, 27, 24, 23, 20, 19, 15, 10, 9, 8, 7, 4, 3, 1, 
  0}, {31, 30, 29, 20, 19, 18, 11, 7, 4, 3, 0}, {31, 29, 28, 27, 26, 
  24, 21, 20, 19, 18, 17, 16, 15, 14, 13, 11, 10, 9, 8, 6, 5, 3, 
  0}, {31, 28, 26, 24, 23, 21, 18, 16, 14, 12, 10, 7, 4, 3, 0}, {31, 
  29, 28, 27, 25, 23, 21, 20, 19, 18, 17, 16, 15, 11, 9, 8, 7, 6, 5, 
  4, 3, 1, 0}, {31, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 
  13, 12, 11, 10, 9, 6, 4, 2, 1, 0}, {31, 28, 26, 25, 23, 22, 21, 20, 
  15, 13, 12, 9, 8, 4, 3, 1, 0}, {31, 27, 26, 23, 22, 18, 16, 11, 10, 
  9, 6, 3, 2, 1, 0}, {31, 29, 28, 27, 26, 24, 21, 18, 14, 13, 11, 9, 
  7, 3, 0}, {31, 30, 28, 26, 25, 24, 22, 21, 19, 18, 15, 14, 13, 11, 
  10, 9, 6, 5, 2, 1, 0}, {31, 27, 25, 23, 22, 20, 18, 17, 16, 15, 14, 
  13, 12, 10, 6, 5, 2, 1, 0}, {31, 29, 28, 27, 26, 25, 23, 21, 20, 19,
   17, 13, 12, 11, 10, 9, 8, 5, 4, 1, 0}, {31, 27, 26, 25, 23, 21, 20,
   18, 15, 13, 12, 1, 0}, {31, 28, 27, 26, 20, 18, 13, 11, 9, 5, 4, 1,
   0}, {31, 27, 26, 25, 23, 19, 16, 15, 11, 10, 9, 8, 7, 6, 5, 2, 
  0}, {31, 30, 28, 27, 26, 23, 20, 17, 16, 12, 11, 7, 5, 4, 0}, {31, 
  27, 23, 22, 21, 20, 19, 16, 15, 13, 12, 11, 9, 6, 4, 2, 0}, {31, 26,
   25, 19, 15, 14, 13, 11, 7, 4, 2, 1, 0}, {31, 30, 28, 27, 26, 25, 
  24, 23, 22, 21, 19, 14, 12, 10, 8, 3, 0}, {31, 29, 28, 24, 23, 22, 
  19, 16, 15, 14, 11, 10, 9, 8, 7, 4, 2, 1, 0}, {31, 26, 22, 21, 20, 
  19, 18, 13, 11, 8, 3, 1, 0}, {31, 29, 28, 27, 23, 21, 19, 16, 14, 
  12, 8, 7, 6, 5, 3, 2, 0}, {31, 29, 28, 27, 23, 21, 19, 18, 15, 14, 
  12, 6, 3, 2, 0}, {31, 30, 29, 24, 22, 21, 20, 15, 13, 11, 10, 8, 7, 
  1, 0}, {31, 30, 29, 27, 26, 25, 17, 16, 15, 12, 11, 10, 9, 7, 4, 3, 
  0}, {31, 29, 25, 23, 22, 19, 18, 17, 16, 14, 13, 11, 9, 6, 5, 3, 
  0}, {31, 30, 29, 27, 24, 21, 18, 16, 13, 12, 8, 7, 6, 1, 0}, {31, 
  28, 27, 26, 25, 23, 22, 21, 20, 15, 14, 9, 7, 6, 4, 3, 0}, {31, 29, 
  25, 24, 22, 20, 19, 18, 14, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 
  0}, {31, 30, 29, 28, 25, 24, 23, 21, 19, 18, 17, 16, 13, 11, 10, 7, 
  4, 1, 0}, {31, 29, 28, 27, 26, 25, 21, 20, 19, 18, 14, 13, 12, 9, 8,
   7, 6, 3, 0}, {31, 23, 22, 21, 19, 18, 16, 14, 13, 12, 11, 9, 7, 2, 
  0}, {31, 30, 29, 28, 26, 22, 21, 20, 19, 18, 16, 15, 11, 6, 5, 1, 
  0}, {31, 25, 21, 16, 13, 12, 11, 7, 4, 3, 0}, {31, 24, 23, 22, 17, 
  16, 15, 11, 10, 9, 8, 7, 6, 5, 4, 3, 0}, {31, 29, 28, 27, 26, 24, 
  23, 21, 19, 18, 17, 15, 6, 4, 3, 2, 0}, {31, 28, 27, 26, 21, 20, 19,
   18, 17, 16, 15, 12, 8, 7, 6, 1, 0}, {31, 30, 28, 27, 26, 22, 20, 
  19, 18, 16, 14, 13, 11, 6, 4, 3, 2, 1, 0}, {31, 29, 28, 27, 26, 19, 
  17, 16, 14, 13, 7, 4, 3, 1, 0}, {31, 27, 26, 25, 22, 21, 19, 16, 15,
   14, 12, 10, 9, 7, 5, 1, 0}, {31, 30, 29, 28, 27, 25, 22, 20, 18, 
  17, 13, 12, 10, 9, 8, 4, 0}, {31, 21, 19, 18, 14, 13, 9, 8, 6, 5, 4,
   3, 0}, {31, 29, 27, 26, 22, 21, 20, 18, 15, 14, 11, 9, 8, 7, 6, 5, 
  3, 2, 0}, {31, 30, 26, 24, 19, 17, 15, 14, 11, 9, 8, 7, 4, 3, 2, 1, 
  0}, {31, 28, 27, 19, 18, 17, 7, 5, 3, 1, 0}, {31, 24, 23, 22, 21, 
  12, 11, 10, 7, 6, 5, 2, 0}, {31, 29, 27, 26, 25, 22, 21, 19, 15, 8, 
  4, 1, 0}, {31, 29, 28, 25, 24, 22, 19, 17, 16, 13, 12, 11, 8, 7, 5, 
  3, 2, 1, 0}, {31, 28, 25, 24, 23, 20, 19, 18, 17, 16, 13, 12, 8, 7, 
  3, 1, 0}, {31, 30, 29, 25, 21, 20, 19, 17, 14, 13, 11, 6, 4, 3, 2, 
  1, 0}, {31, 28, 27, 26, 24, 23, 20, 18, 17, 15, 14, 13, 10, 7, 6, 2,
   0}, {31, 30, 29, 27, 25, 24, 22, 21, 15, 13, 12, 10, 9, 7, 3, 2, 
  0}, {31, 30, 29, 25, 22, 21, 17, 16, 14, 12, 9, 7, 6, 1, 0}, {31, 
  28, 26, 25, 21, 20, 19, 17, 13, 10, 9, 8, 7, 5, 3, 2, 0}, {31, 29, 
  25, 23, 22, 15, 14, 13, 12, 11, 10, 9, 6, 4, 3, 1, 0}, {31, 30, 29, 
  28, 27, 25, 24, 19, 18, 16, 15, 14, 12, 10, 9, 8, 7, 3, 2, 1, 
  0}, {31, 28, 25, 24, 19, 16, 15, 14, 12, 11, 9, 7, 5, 3, 0}, {31, 
  29, 25, 24, 22, 21, 19, 13, 10, 4, 3, 2, 0}, {31, 29, 28, 27, 23, 
  22, 21, 20, 17, 16, 11, 10, 9, 7, 6, 4, 2, 1, 0}, {31, 29, 27, 26, 
  25, 23, 22, 16, 12, 10, 9, 7, 5, 4, 3, 1, 0}, {31, 28, 27, 25, 24, 
  23, 22, 20, 19, 17, 16, 15, 13, 11, 9, 7, 5, 4, 3, 1, 0}, {31, 29, 
  27, 24, 20, 18, 17, 15, 14, 12, 11, 9, 8, 6, 4, 1, 0}, {31, 28, 27, 
  26, 24, 23, 19, 18, 16, 15, 14, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 
  0}, {31, 30, 29, 27, 23, 21, 20, 19, 17, 16, 15, 11, 10, 9, 8, 7, 6,
   5, 4, 3, 0}, {31, 25, 23, 20, 19, 16, 14, 13, 12, 9, 8, 5, 2, 1, 
  0}, {31, 30, 28, 25, 21, 20, 19, 16, 14, 13, 11, 9, 8, 7, 4, 1, 
  0}, {31, 29, 28, 27, 26, 25, 23, 14, 10, 9, 7, 6, 4, 3, 0}, {31, 26,
   25, 22, 21, 18, 13, 12, 11, 3, 0}, {31, 29, 27, 26, 22, 21, 16, 13,
   12, 8, 6, 5, 0}, {31, 27, 26, 25, 23, 19, 18, 14, 13, 7, 6, 5, 2, 
  1, 0}, {31, 29, 28, 27, 26, 23, 22, 20, 19, 17, 14, 12, 10, 9, 8, 6,
   3, 1, 0}, {31, 29, 26, 25, 16, 15, 14, 11, 7, 2, 0}, {31, 26, 23, 
  22, 19, 17, 16, 14, 13, 10, 8, 5, 4, 1, 0}, {31, 29, 27, 25, 22, 20,
   19, 17, 16, 15, 14, 13, 12, 10, 9, 8, 6, 4, 2, 1, 0}, {31, 30, 29, 
  27, 26, 25, 24, 22, 21, 20, 15, 14, 13, 12, 10, 9, 7, 6, 5, 4, 3, 1,
   0}, {31, 29, 27, 23, 22, 21, 19, 16, 15, 13, 12, 11, 10, 6, 5, 3, 
  0}, {31, 27, 19, 17, 15, 14, 11, 10, 9, 7, 6, 5, 4, 3, 2, 1, 
  0}, {31, 30, 28, 26, 25, 23, 20, 17, 16, 14, 13, 10, 9, 7, 4, 3, 
  0}, {31, 29, 28, 27, 26, 25, 24, 21, 20, 17, 16, 14, 13, 12, 11, 10,
   8, 7, 6, 5, 3, 1, 0}, {31, 30, 29, 26, 25, 23, 22, 14, 13, 12, 11, 
  7, 6, 5, 4, 2, 0}, {31, 28, 27, 26, 25, 24, 22, 15, 14, 13, 12, 10, 
  9, 8, 2, 1, 0}, {31, 26, 24, 21, 20, 19, 18, 17, 14, 12, 10, 9, 7, 
  6, 5, 4, 3, 1, 0}, {31, 30, 27, 26, 25, 23, 20, 18, 17, 14, 13, 10, 
  7, 6, 5, 4, 3, 2, 0}, {31, 26, 24, 22, 19, 17, 16, 15, 14, 12, 11, 
  8, 7, 5, 0}, {31, 28, 27, 26, 25, 24, 22, 21, 19, 18, 16, 13, 12, 
  11, 10, 7, 5, 4, 2, 1, 0}, {31, 27, 25, 21, 19, 18, 17, 16, 14, 12, 
  10, 9, 7, 6, 5, 3, 2, 1, 0}, {31, 30, 26, 24, 23, 22, 18, 16, 15, 
  11, 7, 5, 3, 1, 0}, {31, 29, 27, 23, 21, 20, 18, 15, 11, 10, 9, 7, 
  6, 4, 3, 1, 0}, {31, 27, 23, 21, 19, 15, 14, 11, 10, 8, 6, 5, 3, 1, 
  0}, {31, 24, 22, 21, 20, 19, 18, 14, 10, 9, 8, 2, 0}, {31, 29, 25, 
  23, 20, 19, 18, 15, 12, 5, 0}, {31, 30, 29, 27, 26, 23, 22, 21, 19, 
  18, 16, 12, 11, 8, 7, 5, 0}, {31, 29, 28, 26, 23, 20, 13, 12, 11, 9,
   4, 3, 2, 1, 0}, {31, 30, 23, 22, 20, 17, 14, 12, 8, 5, 3, 1, 
  0}, {31, 30, 27, 26, 23, 22, 20, 19, 18, 16, 12, 6, 5, 4, 0}, {31, 
  28, 27, 26, 25, 24, 23, 21, 20, 18, 17, 14, 10, 9, 7, 6, 5, 3, 
  0}, {31, 30, 22, 18, 17, 15, 13, 12, 10, 9, 7, 5, 4, 2, 0}, {31, 29,
   28, 26, 25, 24, 22, 21, 19, 16, 14, 13, 12, 9, 8, 7, 6, 2, 0}, {31,
   29, 28, 26, 25, 24, 22, 21, 20, 17, 15, 11, 7, 6, 4, 2, 0}, {31, 
  28, 27, 26, 25, 21, 17, 16, 13, 9, 8, 2, 0}, {31, 29, 28, 27, 26, 
  23, 20, 18, 17, 16, 12, 11, 8, 7, 6, 5, 3, 1, 0}, {31, 28, 26, 22, 
  19, 17, 16, 15, 14, 12, 9, 6, 3, 1, 0}, {31, 30, 29, 25, 23, 19, 18,
   17, 15, 13, 12, 11, 10, 5, 4, 2, 0}, {31, 29, 25, 23, 22, 19, 18, 
  17, 15, 12, 11, 9, 8, 7, 4, 3, 0}, {31, 29, 27, 26, 24, 22, 21, 19, 
  17, 12, 11, 10, 7, 5, 3, 2, 0}, {31, 27, 26, 24, 23, 17, 15, 14, 12,
   11, 8, 7, 6, 4, 3, 1, 0}, {31, 28, 27, 26, 23, 20, 18, 17, 14, 12, 
  10, 9, 8, 3, 0}, {31, 30, 29, 28, 24, 21, 20, 19, 18, 17, 16, 12, 
  11, 10, 9, 8, 5, 1, 0}, {31, 30, 29, 27, 25, 21, 19, 16, 15, 14, 13,
   10, 8, 7, 6, 1, 0}, {31, 29, 24, 23, 18, 9, 7, 6, 5, 3, 2, 1, 
  0}, {31, 27, 26, 22, 18, 16, 13, 11, 10, 8, 7, 6, 4, 1, 0}, {31, 26,
   25, 22, 21, 19, 17, 14, 6, 3, 0}, {31, 27, 26, 25, 19, 12, 11, 9, 
  6, 3, 0}, {31, 30, 28, 27, 26, 25, 21, 19, 16, 15, 13, 10, 8, 7, 6, 
  5, 2, 1, 0}, {31, 30, 29, 27, 26, 24, 23, 22, 18, 15, 5, 4, 0}, {31,
   29, 27, 26, 20, 18, 16, 14, 11, 8, 7, 6, 5, 3, 2, 1, 0}, {31, 29, 
  28, 27, 24, 20, 19, 18, 16, 13, 12, 10, 5, 2, 0}, {31, 30, 26, 24, 
  23, 22, 21, 19, 16, 8, 7, 6, 4, 3, 2, 1, 0}, {31, 26, 23, 20, 19, 
  18, 17, 16, 13, 11, 10, 6, 4, 2, 0}, {31, 30, 28, 27, 24, 21, 19, 
  18, 14, 13, 11, 10, 7, 6, 4, 3, 2, 1, 0}, {31, 29, 28, 22, 21, 20, 
  18, 14, 13, 9, 7, 6, 3, 1, 0}, {31, 30, 29, 27, 26, 25, 24, 23, 22, 
  21, 20, 18, 17, 16, 14, 13, 10, 5, 3, 2, 0}, {31, 28, 27, 25, 24, 
  23, 21, 20, 11, 10, 9, 7, 3, 1, 0}, {31, 29, 27, 21, 20, 17, 15, 13,
   11, 9, 7, 6, 0}, {31, 27, 23, 22, 21, 19, 16, 13, 12, 11, 10, 9, 8,
   6, 5, 1, 0}, {31, 30, 29, 27, 26, 25, 24, 21, 20, 16, 15, 14, 7, 5,
   4, 3, 2, 1, 0}, {31, 29, 27, 26, 22, 20, 19, 16, 13, 12, 9, 8, 7, 
  6, 3, 2, 0}, {31, 30, 29, 25, 24, 23, 21, 20, 17, 16, 11, 10, 8, 7, 
  5, 1, 0}, {31, 29, 24, 22, 15, 14, 13, 11, 10, 9, 8, 1, 0}, {31, 29,
   26, 23, 22, 21, 20, 19, 17, 16, 15, 13, 11, 9, 6, 3, 0}, {31, 30, 
  26, 23, 19, 15, 12, 11, 9, 8, 7, 6, 5, 1, 0}, {31, 29, 27, 25, 24, 
  23, 22, 21, 18, 16, 14, 12, 8, 5, 3, 2, 0}, {31, 29, 28, 27, 25, 21,
   20, 19, 17, 15, 14, 12, 10, 7, 4, 3, 2, 1, 0}, {31, 30, 28, 25, 24,
   23, 21, 20, 19, 16, 14, 13, 12, 11, 10, 9, 7, 6, 4, 3, 2, 1, 
  0}, {31, 29, 28, 25, 23, 20, 19, 16, 15, 13, 10, 5, 0}, {31, 30, 28,
   26, 24, 23, 22, 21, 20, 19, 17, 16, 15, 14, 13, 11, 10, 9, 5, 1, 
  0}, {31, 30, 28, 27, 26, 24, 23, 21, 19, 18, 16, 13, 11, 8, 7, 2, 
  0}, {31, 29, 26, 24, 19, 18, 17, 16, 15, 12, 11, 10, 9, 7, 6, 5, 4, 
  2, 0}, {31, 30, 29, 28, 26, 22, 21, 20, 19, 18, 17, 13, 12, 9, 7, 6,
   5, 2, 0}, {31, 30, 28, 27, 23, 17, 16, 15, 12, 9, 4, 1, 0}, {31, 
  29, 26, 23, 22, 21, 19, 17, 14, 12, 11, 5, 3, 1, 0}, {31, 30, 28, 
  27, 26, 25, 24, 22, 21, 18, 15, 14, 12, 11, 7, 6, 5, 4, 3, 1, 
  0}, {31, 30, 28, 27, 24, 23, 21, 18, 17, 15, 14, 13, 12, 8, 5, 4, 2,
   1, 0}, {31, 29, 27, 25, 24, 22, 21, 18, 17, 15, 11, 10, 8, 1, 
  0}, {31, 30, 27, 26, 25, 23, 21, 20, 19, 15, 11, 8, 7, 5, 3, 2, 
  0}, {31, 29, 25, 22, 16, 15, 12, 11, 10, 9, 7, 4, 3, 1, 0}, {31, 29,
   23, 21, 20, 15, 14, 13, 11, 10, 8, 7, 6, 3, 0}, {31, 30, 29, 25, 
  23, 22, 19, 17, 14, 13, 12, 11, 10, 9, 8, 2, 0}, {31, 30, 29, 27, 
  25, 23, 22, 21, 17, 13, 11, 10, 0}, {31, 30, 29, 28, 24, 22, 21, 17,
   16, 15, 14, 13, 12, 10, 8, 7, 6, 3, 0}, {31, 30, 29, 23, 22, 15, 
  14, 8, 7, 5, 2, 1, 0}, {31, 26, 25, 18, 16, 13, 12, 10, 9, 7, 4, 1, 
  0}, {31, 30, 27, 26, 24, 21, 19, 16, 15, 10, 9, 8, 6, 3, 0}, {31, 
  30, 29, 28, 26, 24, 23, 22, 19, 18, 16, 15, 13, 9, 7, 4, 0}, {31, 
  27, 26, 25, 23, 22, 21, 16, 15, 14, 13, 12, 10, 9, 8, 7, 3, 1, 
  0}, {31, 30, 29, 27, 26, 25, 22, 19, 18, 15, 14, 12, 10, 8, 6, 4, 3,
   1, 0}, {31, 30, 29, 27, 26, 23, 22, 20, 18, 16, 15, 14, 13, 12, 11,
   7, 4, 1, 0}, {31, 24, 23, 22, 19, 13, 9, 4, 3, 1, 0}, {31, 28, 26, 
  23, 22, 21, 20, 18, 14, 13, 12, 11, 10, 7, 0}, {31, 28, 25, 22, 20, 
  15, 13, 10, 9, 6, 5, 4, 0}, {31, 25, 23, 20, 19, 18, 15, 11, 10, 9, 
  7, 3, 2, 1, 0}, {31, 29, 25, 23, 22, 19, 18, 16, 9, 8, 5, 4, 3, 1, 
  0}, {31, 29, 26, 25, 24, 22, 21, 20, 19, 17, 15, 14, 12, 11, 10, 9, 
  8, 6, 5, 4, 0}, {31, 30, 29, 25, 20, 19, 14, 11, 10, 9, 8, 7, 4, 2, 
  0}, {31, 29, 28, 26, 25, 23, 21, 18, 17, 15, 14, 13, 12, 9, 7, 6, 4,
   3, 0}, {31, 28, 27, 24, 21, 19, 17, 16, 14, 13, 12, 10, 7, 5, 4, 3,
   0}, {31, 28, 27, 26, 25, 23, 22, 19, 18, 17, 16, 15, 14, 12, 11, 9,
   4, 3, 2, 1, 0}, {31, 29, 28, 27, 23, 22, 21, 20, 19, 17, 16, 15, 
  14, 13, 12, 11, 10, 9, 7, 6, 5, 3, 0}, {31, 28, 27, 26, 24, 23, 20, 
  15, 14, 11, 10, 9, 7, 3, 0}, {31, 28, 27, 26, 24, 22, 17, 9, 8, 7, 
  6, 5, 4, 1, 0}, {31, 29, 27, 25, 24, 21, 20, 16, 13, 11, 10, 8, 7, 
  4, 3, 1, 0}, {31, 26, 24, 22, 19, 15, 13, 9, 2, 1, 0}, {31, 28, 27, 
  26, 25, 23, 22, 18, 13, 12, 10, 9, 8, 7, 4, 3, 0}, {31, 30, 29, 28, 
  20, 16, 15, 13, 10, 8, 7, 5, 3, 2, 0}, {31, 28, 25, 22, 21, 18, 13, 
  8, 7, 5, 3, 2, 0}, {31, 29, 28, 24, 23, 21, 20, 16, 15, 13, 9, 7, 6,
   2, 0}, {31, 30, 29, 24, 23, 20, 19, 18, 17, 16, 14, 13, 12, 9, 7, 
  6, 2, 1, 0}, {31, 30, 26, 20, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9,
   5, 4, 0}, {31, 28, 27, 26, 25, 22, 20, 19, 18, 17, 15, 14, 11, 10, 
  9, 8, 7, 6, 4, 2, 0}, {31, 30, 29, 28, 26, 25, 24, 23, 16, 13, 12, 
  10, 8, 7, 6, 5, 2, 1, 0}, {31, 29, 26, 22, 19, 17, 13, 11, 10, 8, 7,
   3, 0}, {31, 26, 25, 24, 23, 21, 20, 18, 16, 15, 14, 13, 7, 6, 4, 1,
   0}, {31, 27, 24, 23, 22, 21, 20, 19, 16, 15, 14, 13, 11, 10, 7, 5, 
  4, 3, 0}, {31, 29, 27, 25, 24, 22, 18, 14, 13, 10, 8, 7, 5, 2, 
  0}, {31, 28, 27, 24, 22, 21, 20, 18, 16, 14, 13, 12, 11, 9, 8, 7, 3,
   1, 0}, {31, 27, 26, 24, 23, 22, 18, 17, 16, 15, 12, 11, 9, 8, 7, 6,
   4, 1, 0}, {31, 30, 29, 28, 27, 25, 24, 21, 17, 16, 15, 14, 10, 7, 
  4, 1, 0}, {31, 30, 28, 27, 26, 25, 23, 17, 14, 13, 8, 3, 0}, {31, 
  24, 23, 22, 21, 20, 19, 17, 14, 13, 12, 11, 10, 9, 8, 7, 5, 3, 
  0}, {31, 29, 26, 23, 22, 19, 16, 13, 10, 9, 8, 7, 6, 1, 0}, {31, 28,
   27, 26, 25, 23, 22, 21, 20, 19, 17, 16, 10, 8, 6, 5, 4, 3, 0}, {31,
   30, 29, 27, 26, 23, 22, 21, 19, 14, 13, 12, 10, 8, 7, 6, 5, 4, 2, 
  1, 0}, {31, 28, 26, 25, 24, 23, 22, 21, 19, 18, 17, 16, 12, 10, 9, 
  5, 4, 2, 0}, {31, 25, 20, 19, 17, 16, 15, 14, 12, 10, 9, 6, 5, 4, 3,
   2, 0}, {31, 30, 29, 28, 27, 25, 20, 19, 18, 17, 14, 13, 9, 1, 
  0}, {31, 27, 25, 23, 22, 21, 20, 19, 13, 12, 9, 6, 5, 4, 3, 2, 
  0}, {31, 26, 25, 22, 21, 20, 17, 16, 15, 11, 10, 8, 6, 5, 0}, {31, 
  25, 24, 22, 21, 20, 19, 14, 10, 3, 0}, {31, 28, 26, 24, 21, 18, 16, 
  12, 8, 6, 4, 3, 0}, {31, 27, 25, 22, 17, 15, 12, 11, 8, 6, 4, 3, 
  0}, {31, 29, 23, 22, 21, 18, 17, 15, 13, 12, 11, 10, 9, 7, 3, 1, 
  0}, {31, 30, 28, 27, 26, 25, 24, 21, 20, 19, 18, 15, 14, 13, 12, 9, 
  6, 5, 2, 1, 0}, {31, 28, 26, 25, 21, 17, 14, 12, 10, 9, 8, 7, 6, 1, 
  0}, {31, 29, 27, 25, 23, 22, 21, 20, 19, 18, 16, 15, 14, 13, 11, 8, 
  5, 4, 2, 1, 0}, {31, 28, 27, 26, 24, 23, 22, 21, 20, 18, 17, 16, 15,
   13, 11, 10, 9, 8, 3, 1, 0}, {31, 30, 27, 23, 22, 20, 18, 16, 15, 
  13, 11, 7, 6, 5, 2, 1, 0}, {31, 29, 28, 27, 26, 25, 23, 22, 21, 19, 
  18, 16, 14, 11, 10, 8, 5, 4, 2, 1, 0}, {31, 28, 24, 22, 20, 15, 14, 
  11, 10, 9, 8, 7, 6, 4, 0}, {31, 30, 27, 26, 22, 20, 18, 14, 13, 11, 
  10, 9, 8, 4, 3, 1, 0}, {31, 27, 26, 25, 24, 23, 22, 21, 20, 19, 16, 
  15, 12, 10, 5, 4, 3, 1, 0}, {31, 30, 29, 28, 27, 26, 25, 22, 21, 16,
   13, 11, 9, 7, 2, 1, 0}, {31, 27, 26, 25, 23, 21, 20, 19, 18, 16, 
  10, 8, 7, 6, 5, 3, 2, 1, 0}, {31, 28, 27, 24, 23, 18, 16, 13, 12, 
  11, 8, 7, 4, 2, 0}, {31, 28, 25, 24, 22, 21, 17, 16, 14, 11, 7, 4, 
  2, 1, 0}, {31, 30, 29, 27, 25, 23, 19, 18, 17, 10, 5, 1, 0}, {31, 
  30, 28, 26, 25, 24, 23, 19, 17, 13, 12, 10, 9, 7, 6, 3, 2, 1, 
  0}, {31, 28, 27, 24, 22, 21, 20, 19, 16, 15, 13, 11, 8, 7, 4, 3, 
  0}, {31, 30, 27, 26, 23, 19, 18, 17, 15, 14, 12, 11, 9, 8, 7, 4, 
  0}, {31, 30, 27, 26, 25, 24, 21, 20, 19, 18, 15, 14, 13, 12, 11, 6, 
  4, 1, 0}, {31, 30, 29, 28, 27, 25, 20, 19, 18, 17, 13, 9, 5, 4, 3, 
  2, 0}, {31, 29, 27, 26, 25, 22, 21, 20, 18, 15, 14, 13, 12, 7, 6, 3,
   2, 1, 0}, {31, 25, 24, 23, 22, 20, 17, 16, 15, 14, 9, 8, 6, 4, 2, 
  1, 0}, {31, 29, 27, 25, 22, 21, 19, 18, 17, 13, 10, 9, 7, 6, 5, 4, 
  2, 1, 0}, {31, 27, 26, 25, 23, 21, 20, 17, 15, 14, 4, 3, 2, 1, 
  0}, {31, 29, 28, 24, 21, 19, 18, 15, 14, 13, 12, 11, 9, 6, 5, 4, 3, 
  1, 0}, {31, 30, 29, 28, 25, 24, 22, 21, 20, 19, 18, 17, 14, 13, 12, 
  9, 8, 2, 0}, {31, 28, 27, 25, 24, 23, 21, 19, 18, 16, 15, 13, 12, 
  11, 8, 7, 6, 5, 2, 1, 0}, {31, 28, 27, 26, 20, 16, 14, 12, 11, 10, 
  9, 8, 7, 6, 2, 1, 0}, {31, 28, 27, 26, 23, 22, 18, 16, 14, 13, 12, 
  8, 7, 6, 4, 3, 0}, {31, 30, 27, 18, 16, 13, 12, 11, 10, 4, 2, 1, 
  0}, {31, 28, 27, 26, 25, 23, 20, 19, 18, 16, 15, 13, 10, 8, 3, 1, 
  0}, {31, 29, 28, 25, 24, 23, 22, 21, 20, 17, 14, 12, 7, 6, 5, 3, 2, 
  1, 0}, {31, 30, 29, 27, 25, 22, 21, 20, 17, 14, 9, 7, 4, 3, 0}, {31,
   30, 20, 17, 10, 9, 8, 7, 5, 4, 3, 2, 0}, {31, 28, 27, 26, 24, 21, 
  19, 16, 15, 14, 13, 11, 10, 7, 6, 4, 3, 2, 0}, {31, 25, 20, 18, 17, 
  16, 15, 12, 7, 6, 5, 3, 2, 1, 0}, {31, 27, 22, 21, 19, 18, 17, 15, 
  14, 12, 11, 10, 9, 8, 4, 1, 0}, {31, 29, 28, 23, 22, 19, 15, 14, 12,
   10, 9, 6, 5, 3, 2, 1, 0}, {31, 30, 24, 19, 18, 17, 16, 15, 14, 13, 
  7, 6, 4, 1, 0}, {31, 30, 29, 26, 25, 22, 20, 15, 14, 13, 9, 8, 5, 3,
   0}, {31, 14, 12, 11, 9, 8, 3, 2, 0}, {31, 30, 29, 28, 27, 26, 24, 
  20, 19, 17, 16, 15, 14, 12, 6, 4, 3, 2, 0}, {31, 30, 28, 27, 26, 25,
   23, 22, 21, 18, 17, 16, 15, 12, 11, 10, 9, 8, 7, 4, 2, 1, 0}, {31, 
  30, 28, 27, 25, 24, 20, 19, 18, 16, 14, 11, 9, 8, 7, 6, 5, 2, 
  0}, {31, 27, 23, 21, 18, 13, 10, 7, 6, 5, 4, 3, 2, 1, 0}, {31, 29, 
  27, 25, 23, 22, 20, 19, 18, 15, 13, 11, 7, 4, 0}, {31, 29, 28, 27, 
  26, 20, 19, 18, 17, 16, 15, 14, 12, 11, 7, 5, 2, 1, 0}, {31, 30, 29,
   24, 23, 22, 21, 17, 16, 15, 14, 12, 11, 9, 7, 4, 3, 1, 0}, {31, 30,
   29, 28, 26, 24, 23, 22, 21, 20, 15, 14, 12, 11, 10, 9, 8, 6, 5, 2, 
  0}, {31, 30, 28, 27, 26, 24, 23, 17, 16, 15, 12, 11, 9, 8, 6, 5, 4, 
  3, 0}, {31, 30, 25, 24, 23, 22, 21, 20, 17, 16, 14, 13, 12, 11, 10, 
  9, 2, 1, 0}, {31, 29, 27, 25, 24, 23, 22, 20, 19, 15, 14, 8, 7, 5, 
  3, 1, 0}, {31, 28, 25, 24, 22, 21, 20, 18, 17, 16, 14, 11, 9, 7, 6, 
  5, 4, 1, 0}, {31, 30, 28, 25, 23, 19, 17, 14, 11, 8, 6, 5, 4, 3, 
  0}, {31, 28, 25, 20, 19, 17, 16, 13, 11, 10, 8, 6, 5, 4, 3, 2, 
  0}, {31, 26, 24, 23, 22, 18, 15, 14, 13, 11, 9, 8, 7, 3, 0}, {31, 
  30, 28, 24, 23, 22, 21, 18, 17, 16, 15, 14, 12, 8, 3, 2, 0}, {31, 
  30, 28, 26, 25, 23, 22, 21, 20, 19, 18, 14, 13, 12, 11, 10, 7, 6, 4,
   1, 0}, {31, 25, 24, 17, 16, 14, 12, 11, 5, 3, 2, 1, 0}, {31, 29, 
  26, 24, 17, 16, 15, 14, 11, 10, 8, 7, 6, 4, 0}, {31, 29, 28, 27, 20,
   18, 15, 14, 13, 12, 11, 10, 7, 4, 0}, {31, 30, 26, 25, 22, 19, 18, 
  13, 10, 9, 6, 5, 3, 2, 0}, {31, 28, 25, 22, 19, 18, 17, 8, 2, 1, 
  0}, {31, 30, 28, 24, 20, 18, 16, 15, 14, 12, 11, 10, 9, 8, 7, 6, 5, 
  2, 0}, {31, 30, 29, 26, 24, 23, 22, 21, 20, 19, 18, 15, 13, 11, 9, 
  7, 4, 2, 0}, {31, 29, 27, 26, 25, 24, 23, 19, 16, 14, 12, 10, 7, 1, 
  0}, {31, 30, 29, 26, 25, 23, 22, 20, 19, 17, 16, 15, 13, 11, 10, 9, 
  7, 6, 5, 4, 3, 1, 0}, {31, 30, 29, 26, 23, 22, 21, 20, 18, 17, 16, 
  6, 5, 4, 3, 1, 0}, {31, 29, 21, 18, 15, 13, 12, 11, 5, 2, 0}, {31, 
  29, 27, 24, 21, 19, 17, 16, 15, 13, 12, 11, 10, 9, 8, 5, 4, 3, 
  0}, {31, 28, 26, 25, 23, 20, 19, 18, 16, 15, 14, 12, 10, 9, 8, 7, 3,
   1, 0}, {31, 30, 25, 23, 19, 18, 17, 16, 10, 9, 5, 4, 0}, {31, 30, 
  29, 28, 21, 19, 17, 16, 11, 6, 4, 2, 0}, {31, 30, 29, 27, 25, 20, 
  19, 17, 10, 9, 7, 6, 5, 4, 0}, {31, 30, 29, 28, 27, 26, 25, 23, 20, 
  19, 16, 15, 14, 13, 12, 11, 9, 8, 0}, {31, 30, 29, 28, 27, 25, 24, 
  23, 21, 20, 17, 16, 15, 14, 13, 8, 7, 6, 4, 3, 2, 1, 0}, {31, 30, 
  29, 27, 23, 22, 17, 15, 10, 9, 7, 6, 5, 3, 0}, {31, 30, 29, 27, 26, 
  18, 17, 16, 12, 11, 10, 8, 7, 6, 5, 4, 2, 1, 0}, {31, 27, 25, 22, 
  20, 17, 15, 14, 13, 12, 11, 9, 8, 7, 6, 4, 0}, {31, 30, 28, 24, 23, 
  22, 20, 15, 12, 11, 6, 5, 4, 3, 0}, {31, 30, 29, 27, 26, 25, 17, 12,
   11, 9, 7, 5, 2, 1, 0}, {31, 29, 27, 26, 21, 20, 19, 18, 17, 12, 8, 
  3, 2, 1, 0}, {31, 29, 26, 24, 21, 19, 18, 12, 11, 9, 5, 4, 2, 1, 
  0}, {31, 26, 22, 20, 19, 13, 12, 11, 10, 9, 8, 7, 5, 2, 0}, {31, 28,
   25, 21, 20, 18, 15, 14, 12, 10, 8, 7, 3, 1, 0}, {31, 30, 23, 22, 
  21, 20, 19, 17, 16, 15, 14, 11, 10, 8, 5, 1, 0}, {31, 29, 26, 24, 
  23, 22, 19, 15, 14, 13, 12, 11, 10, 9, 7, 6, 4, 2, 0}, {31, 30, 28, 
  27, 25, 23, 21, 20, 19, 17, 16, 15, 13, 12, 11, 9, 8, 6, 5, 4, 3, 1,
   0}, {31, 30, 26, 25, 23, 15, 14, 8, 7, 6, 4, 2, 0}, {31, 30, 28, 
  26, 23, 22, 21, 19, 18, 17, 16, 13, 12, 9, 7, 6, 5, 1, 0}, {31, 28, 
  25, 23, 19, 18, 17, 16, 14, 12, 10, 9, 8, 7, 4, 1, 0}, {31, 30, 29, 
  28, 27, 26, 24, 23, 20, 19, 17, 16, 15, 14, 12, 10, 5, 2, 0}, {31, 
  29, 26, 25, 24, 21, 17, 16, 15, 14, 13, 11, 10, 9, 8, 1, 0}, {31, 
  28, 25, 23, 19, 18, 17, 13, 12, 11, 5, 4, 0}, {31, 27, 26, 25, 22, 
  21, 20, 17, 16, 14, 13, 12, 9, 8, 7, 4, 3, 2, 0}, {31, 27, 23, 22, 
  21, 20, 19, 18, 16, 14, 9, 8, 6, 4, 2, 1, 0}, {31, 26, 25, 24, 23, 
  20, 17, 16, 14, 11, 6, 5, 3, 1, 0}, {31, 30, 28, 26, 20, 19, 18, 17,
   16, 15, 13, 12, 11, 10, 9, 8, 6, 5, 4, 1, 0}, {31, 30, 29, 28, 27, 
  23, 21, 19, 16, 12, 11, 9, 7, 6, 5, 4, 3, 2, 0}, {31, 30, 29, 27, 
  24, 22, 20, 19, 17, 15, 14, 9, 8, 7, 6, 4, 3, 1, 0}, {31, 30, 29, 
  28, 25, 24, 21, 20, 18, 17, 11, 9, 8, 1, 0}, {31, 30, 29, 28, 26, 
  20, 19, 18, 17, 13, 12, 11, 9, 7, 6, 5, 3, 1, 0}, {31, 28, 27, 25, 
  22, 21, 20, 19, 18, 17, 15, 9, 6, 5, 4, 3, 2, 1, 0}, {31, 29, 28, 
  27, 25, 24, 23, 22, 21, 19, 17, 16, 14, 12, 10, 6, 5, 4, 2, 1, 
  0}, {31, 27, 25, 24, 15, 12, 11, 7, 5, 3, 2, 1, 0}, {31, 29, 27, 25,
   24, 23, 22, 21, 17, 16, 13, 9, 7, 6, 5, 4, 2, 1, 0}, {31, 30, 29, 
  28, 27, 26, 25, 24, 23, 20, 18, 10, 7, 6, 0}, {31, 29, 26, 25, 24, 
  22, 20, 19, 16, 12, 11, 8, 7, 5, 3, 1, 0}, {31, 26, 24, 16, 14, 11, 
  10, 5, 4, 2, 0}, {31, 29, 26, 24, 22, 21, 19, 16, 13, 11, 9, 8, 7, 
  2, 0}, {31, 30, 29, 23, 21, 15, 14, 13, 12, 11, 9, 6, 4, 1, 0}, {31,
   30, 28, 25, 24, 23, 21, 19, 18, 14, 9, 7, 5, 1, 0}, {31, 28, 26, 
  22, 19, 16, 15, 13, 11, 10, 9, 6, 5, 3, 2, 1, 0}, {31, 30, 29, 27, 
  24, 21, 20, 19, 18, 17, 13, 12, 10, 8, 7, 4, 3, 2, 0}, {31, 27, 19, 
  18, 16, 15, 9, 6, 5, 1, 0}, {31, 30, 28, 26, 25, 23, 21, 20, 18, 15,
   14, 9, 8, 7, 6, 3, 0}, {31, 26, 23, 22, 19, 18, 16, 15, 11, 10, 9, 
  8, 7, 4, 3, 1, 0}, {31, 30, 27, 26, 25, 24, 21, 20, 19, 15, 10, 8, 
  5, 4, 3, 1, 0}, {31, 30, 28, 27, 26, 25, 24, 21, 19, 17, 16, 15, 12,
   11, 7, 5, 4, 3, 2, 1, 0}, {31, 29, 28, 26, 25, 24, 22, 20, 19, 17, 
  14, 13, 11, 5, 4, 1, 0}, {31, 30, 28, 27, 25, 22, 20, 17, 16, 12, 
  10, 7, 6, 5, 4, 3, 0}, {31, 28, 26, 23, 22, 21, 20, 19, 18, 17, 16, 
  15, 14, 12, 11, 10, 6, 5, 4, 2, 0}, {31, 30, 29, 27, 21, 19, 16, 14,
   13, 11, 10, 9, 8, 7, 3, 1, 0}, {31, 29, 28, 26, 25, 24, 22, 21, 19,
   16, 15, 13, 9, 8, 5, 4, 3, 1, 0}, {31, 29, 28, 26, 23, 20, 17, 16, 
  14, 13, 12, 11, 10, 7, 6, 5, 0}, {31, 30, 28, 26, 21, 18, 14, 13, 
  11, 10, 6, 3, 2, 1, 0}, {31, 30, 27, 25, 24, 21, 19, 18, 17, 16, 15,
   13, 11, 7, 6, 3, 0}, {31, 30, 29, 28, 26, 25, 24, 22, 19, 18, 17, 
  11, 10, 9, 5, 4, 2, 1, 0}, {31, 29, 26, 25, 20, 19, 17, 16, 15, 12, 
  8, 7, 6, 4, 3, 2, 0}, {31, 29, 28, 25, 23, 22, 20, 19, 18, 15, 13, 
  11, 6, 3, 0}, {31, 30, 29, 28, 27, 25, 23, 14, 13, 11, 10, 6, 
  0}, {31, 30, 29, 27, 26, 25, 23, 21, 17, 14, 10, 8, 7, 1, 0}, {31, 
  30, 24, 23, 22, 20, 19, 18, 16, 10, 9, 7, 6, 4, 3, 1, 0}, {31, 29, 
  27, 24, 22, 21, 20, 19, 18, 15, 13, 11, 10, 9, 7, 4, 3, 1, 0}, {31, 
  30, 28, 27, 22, 20, 19, 18, 17, 15, 12, 11, 9, 8, 7, 4, 3, 2, 
  0}, {31, 29, 28, 25, 22, 20, 19, 18, 15, 14, 13, 10, 4, 2, 0}, {31, 
  28, 26, 24, 21, 18, 17, 16, 15, 14, 12, 7, 6, 4, 3, 2, 0}, {31, 30, 
  27, 24, 23, 22, 20, 14, 12, 11, 10, 9, 7, 2, 0}, {31, 30, 29, 26, 
  24, 23, 18, 16, 14, 12, 11, 10, 9, 6, 5, 3, 2, 1, 0}, {31, 30, 28, 
  26, 25, 24, 23, 21, 20, 18, 15, 9, 8, 6, 5, 2, 0}, {31, 28, 27, 26, 
  24, 22, 20, 19, 16, 15, 13, 10, 9, 7, 5, 4, 3, 2, 0}, {31, 29, 28, 
  24, 21, 16, 11, 3, 0}, {31, 30, 27, 23, 21, 18, 16, 13, 9, 8, 4, 1, 
  0}, {31, 30, 29, 28, 26, 24, 22, 21, 18, 16, 15, 14, 10, 8, 7, 6, 5,
   4, 3, 1, 0}, {31, 30, 28, 25, 24, 23, 22, 20, 17, 16, 15, 11, 8, 7,
   5, 3, 0}, {31, 30, 24, 21, 20, 18, 17, 15, 14, 12, 10, 8, 3, 2, 
  0}, {31, 29, 28, 27, 26, 25, 24, 18, 16, 15, 13, 12, 10, 5, 4, 1, 
  0}, {31, 29, 27, 25, 24, 23, 22, 20, 19, 17, 16, 14, 12, 10, 8, 6, 
  4, 1, 0}, {31, 29, 26, 24, 22, 17, 16, 15, 14, 11, 10, 9, 8, 5, 4, 
  1, 0}, {31, 30, 28, 27, 26, 25, 18, 16, 15, 14, 13, 8, 6, 5, 4, 2, 
  0}, {31, 30, 29, 27, 26, 23, 21, 20, 18, 15, 9, 7, 5, 3, 0}, {31, 
  30, 28, 27, 26, 25, 23, 21, 17, 11, 5, 1, 0}, {31, 28, 27, 26, 23, 
  21, 19, 17, 16, 15, 11, 9, 6, 4, 0}, {31, 27, 21, 20, 19, 12, 8, 6, 
  3, 1, 0}, {31, 30, 27, 25, 24, 23, 21, 17, 16, 15, 14, 12, 9, 8, 6, 
  4, 3, 2, 0}, {31, 30, 29, 28, 27, 26, 22, 21, 20, 19, 18, 16, 15, 
  13, 12, 10, 8, 7, 3, 2, 0}, {31, 30, 28, 27, 26, 23, 19, 15, 14, 12,
   4, 3, 0}, {31, 30, 27, 26, 24, 22, 21, 16, 14, 8, 7, 6, 5, 2, 
  0}, {31, 29, 28, 27, 26, 25, 24, 23, 22, 17, 14, 11, 9, 8, 7, 6, 5, 
  4, 3, 1, 0}, {31, 30, 28, 24, 23, 16, 15, 13, 12, 11, 10, 6, 
  0}, {31, 30, 26, 25, 24, 23, 22, 19, 14, 12, 7, 6, 5, 3, 0}, {31, 
  30, 28, 27, 26, 25, 23, 22, 21, 20, 18, 15, 11, 9, 8, 7, 6, 5, 4, 1,
   0}, {31, 29, 28, 25, 24, 23, 22, 21, 18, 17, 13, 8, 7, 1, 0}, {31, 
  30, 28, 27, 26, 22, 19, 17, 16, 15, 14, 11, 9, 7, 5, 3, 2, 1, 
  0}, {31, 27, 25, 21, 19, 18, 14, 13, 12, 11, 9, 7, 4, 3, 0}, {31, 
  29, 28, 24, 23, 22, 15, 14, 12, 10, 7, 5, 3, 1, 0}, {31, 30, 29, 28,
   26, 23, 22, 21, 19, 17, 13, 11, 5, 4, 3, 1, 0}, {31, 30, 29, 26, 
  25, 23, 21, 19, 16, 15, 13, 12, 11, 8, 7, 6, 4, 2, 0}, {31, 30, 29, 
  25, 24, 23, 19, 18, 16, 13, 11, 9, 8, 4, 3, 1, 0}, {31, 30, 29, 27, 
  26, 25, 24, 23, 21, 20, 19, 17, 15, 13, 9, 8, 7, 5, 4, 3, 0}, {31, 
  29, 28, 26, 25, 24, 16, 15, 13, 12, 11, 9, 3, 2, 0}, {31, 30, 29, 
  26, 25, 24, 23, 21, 17, 11, 9, 7, 6, 3, 2, 1, 0}, {31, 30, 27, 26, 
  25, 24, 21, 18, 17, 12, 9, 8, 6, 5, 0}, {31, 29, 28, 24, 23, 22, 16,
   15, 10, 9, 8, 7, 6, 3, 2, 1, 0}, {31, 30, 29, 28, 26, 24, 23, 21, 
  19, 18, 14, 12, 11, 10, 9, 8, 7, 6, 0}, {31, 30, 28, 27, 26, 25, 22,
   21, 19, 16, 15, 14, 13, 12, 9, 5, 4, 2, 0}, {31, 30, 29, 27, 25, 
  23, 22, 21, 20, 16, 15, 14, 12, 11, 8, 7, 6, 4, 3, 1, 0}, {31, 30, 
  29, 28, 26, 25, 23, 19, 17, 14, 13, 12, 10, 9, 7, 6, 5, 1, 0}, {31, 
  30, 29, 27, 25, 23, 22, 21, 20, 18, 17, 15, 14, 13, 12, 9, 8, 7, 6, 
  5, 3, 1, 0}, {31, 30, 28, 27, 24, 20, 18, 15, 12, 10, 7, 6, 5, 4, 
  0}, {31, 30, 29, 28, 27, 26, 22, 19, 18, 17, 16, 12, 10, 9, 5, 1, 
  0}, {31, 30, 27, 26, 25, 24, 21, 20, 19, 18, 14, 12, 11, 10, 8, 7, 
  5, 4, 3, 1, 0}, {31, 29, 23, 22, 19, 17, 16, 10, 9, 8, 6, 5, 2, 1, 
  0}, {31, 30, 29, 28, 27, 26, 24, 23, 17, 16, 14, 13, 11, 9, 8, 6, 4,
   3, 2, 1, 0}, {31, 30, 29, 26, 24, 22, 21, 19, 18, 17, 15, 13, 11, 
  9, 6, 5, 3, 2, 0}, {31, 29, 28, 26, 23, 19, 17, 9, 8, 7, 4, 3, 2, 1,
   0}, {31, 30, 29, 28, 27, 24, 23, 21, 19, 16, 13, 11, 9, 8, 6, 4, 3,
   1, 0}, {31, 26, 22, 21, 18, 17, 16, 14, 12, 11, 7, 6, 3, 2, 
  0}, {31, 29, 28, 26, 25, 23, 10, 9, 7, 5, 2, 1, 0}, {31, 30, 29, 27,
   25, 24, 18, 17, 16, 15, 13, 11, 9, 7, 5, 4, 3, 2, 0}, {31, 30, 28, 
  27, 26, 25, 22, 20, 17, 14, 12, 10, 9, 8, 5, 4, 0}, {31, 29, 23, 19,
   17, 15, 14, 11, 9, 8, 6, 4, 2, 1, 0}, {31, 30, 29, 28, 27, 26, 23, 
  22, 20, 18, 16, 13, 12, 11, 6, 5, 2, 1, 0}, {31, 29, 24, 20, 19, 13,
   12, 10, 8, 6, 4, 3, 2, 1, 0}, {31, 27, 19, 18, 17, 16, 12, 11, 10, 
  9, 8, 7, 5, 4, 0}, {31, 30, 29, 27, 26, 23, 19, 17, 16, 14, 13, 12, 
  6, 4, 3, 1, 0}, {31, 30, 29, 20, 19, 14, 12, 10, 9, 8, 7, 6, 5, 3, 
  0}, {31, 29, 28, 27, 26, 22, 20, 19, 17, 16, 9, 5, 4, 3, 2, 1, 
  0}, {31, 30, 29, 28, 27, 26, 25, 24, 23, 19, 17, 16, 14, 12, 11, 10,
   8, 6, 5, 4, 3, 1, 0}, {31, 28, 27, 23, 21, 20, 18, 17, 16, 15, 13, 
  12, 10, 9, 8, 7, 5, 4, 2, 1, 0}, {31, 24, 20, 18, 12, 9, 8, 4, 3, 1,
   0}, {31, 28, 27, 24, 23, 22, 19, 16, 15, 14, 13, 11, 10, 9, 7, 5, 
  4, 3, 2, 1, 0}, {31, 28, 26, 25, 21, 19, 18, 17, 15, 14, 13, 12, 9, 
  7, 6, 5, 0}, {31, 29, 28, 27, 26, 25, 23, 22, 20, 17, 16, 15, 14, 
  10, 7, 6, 5, 3, 2, 1, 0}, {31, 30, 28, 20, 18, 17, 16, 15, 14, 13, 
  10, 6, 3, 2, 0}, {31, 27, 26, 25, 24, 20, 19, 15, 14, 13, 12, 11, 8,
   2, 0}, {31, 28, 27, 26, 24, 22, 21, 19, 18, 15, 10, 9, 8, 7, 6, 4, 
  3, 1, 0}, {31, 29, 28, 23, 22, 19, 18, 13, 12, 11, 10, 9, 8, 7, 5, 
  3, 2, 1, 0}, {31, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 14, 12, 
  11, 7, 6, 5, 4, 3, 1, 0}, {31, 27, 26, 24, 22, 20, 19, 17, 16, 13, 
  10, 3, 0}, {31, 30, 28, 27, 24, 23, 22, 20, 18, 14, 12, 10, 9, 8, 6,
   4, 3, 1, 0}, {31, 28, 27, 24, 23, 13, 12, 10, 9, 7, 4, 2, 0}, {31, 
  27, 26, 23, 17, 16, 15, 14, 13, 10, 9, 7, 5, 3, 2, 1, 0}, {31, 27, 
  26, 25, 22, 21, 20, 19, 18, 15, 8, 7, 4, 3, 0}, {31, 28, 23, 22, 21,
   20, 19, 18, 15, 14, 8, 6, 4, 3, 2, 1, 0}, {31, 30, 29, 26, 20, 18, 
  14, 13, 10, 8, 2, 1, 0}, {31, 28, 27, 26, 25, 22, 20, 18, 17, 16, 
  15, 13, 11, 9, 8, 6, 4, 1, 0}, {31, 18, 17, 11, 8, 6, 4, 2, 0}, {31,
   30, 26, 25, 24, 22, 19, 18, 14, 13, 12, 11, 9, 8, 2, 1, 0}, {31, 
  28, 27, 26, 25, 24, 21, 16, 15, 14, 13, 11, 5, 3, 0}, {31, 28, 27, 
  24, 21, 20, 19, 16, 15, 14, 12, 11, 10, 7, 6, 2, 0}};
  
buildMSobol[indtab_,dbg_:False] :=
    Module[ {i},
        msobol = Table[getMSobol1d[indtab[[i]], dbg],{i,Length[indtab]}];
        If[ dbg,
            Print["buildMSobol:  msobol=",msobol//mf]
        ];
    ]

sobolseqLength = 32;

getMSobol1d[ind_,dbg_:False] :=
    Module[ {seq,seqlen,i,j,msobol},
        msobol = Table[1,{sobolseqLength}];
        seq = a058947[[ind]]//IntegerDigits;
        seqlen = Length[seq];
        Do[
            msobol[[i]] = ( (2^(i-1)-1)*2 + 1); (* must be even!!! *)
            (*msobol[[i]] = RandomInteger[{0,2^(i-1)-1}]*2 + 1*); (* must be even!!! *)
        ,{i,2,seqlen-1}];
        If[ dbg,
            Print["getMSobol1d:  ind=",ind," seq=",seq," of len=",seqlen -> msobol[[;;seqlen-1]] ]
        ];
        Do[
            msobol[[i]] = BitXor @@ Join[Table[2^(j) seq[[j+1]] msobol[[i-j]],{j,1,seqlen-1}],{msobol[[i-seqlen+1]]}];
            (*Print[i -> seq ->msobol[[;;i-1]] -> {msobol[[i-seqlen+1]]}
                -> Table[2^(j) msobol[[i-j]],{j,1,seqlen-1}]
                -> Table[2^(j) seq[[j+1]] msobol[[i-j]],{j,1,seqlen-1}]
                   -> Table[ seq[[j+1]] ,{j,1,seqlen-1}]
                -> Table[IntegerDigits[2^(j) seq[[j+1]] msobol[[i-j]] ,2,seqlen] ,{j,1,seqlen-1}] 
                ->  (IntegerDigits[#,2,i]& @ msobol[[i-seqlen+1]]) 
                -> (IntegerDigits[#,2,i]& @ msobol[[i]] ) 
                ];*)
        ,{i,seqlen,sobolseqLength}];
        Return[msobol]
    ] (* getMSobol1d *)

sobol1d[nf_,n_] := (* original Sobol's construction *)
    Module[ {i,seq = IntegerDigits[n,2] //Reverse,seqlen,nn},
        seqlen = Length[seq];
        nn = BitXor @@ Table[ seq[[i]] msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}];
        Return[ FromDigits[IntegerDigits[nn,2,seqlen] ,2] / 2^seqlen ]
    ]

sobol2d[n_] :=
    {sobol1d[1,n],sobol1d[2,n]}

rot345[{u_,v_}] :=
    Round[{3 u - 4 v, 4 u + 3 v}/5]
rot51213[{u_,v_}] :=
    Round[{5 u - 12 v, 12 u + 5 v}/13]

digits2str[digits_] :=
    StringJoin[ToString /@ digits] 
str2n[str_] :=
    FromDigits[#, 2] & @ Table[StringTake[str, {i}] // ToExpression, {i, StringLength[str]}]
str2nFIBO[str_] :=
    FIBOF @ Table[StringTake[str, {i}] // ToExpression, {i, StringLength[str]}]




dbgSobol[innlevels_:4, ind1_:1, ind2_:2, dbgTxt_:True ] :=
    Module[ {},
        ptsz = .01;
        nlevels = innlevels;
        buildMSobol[{ind1, ind2}];
        nf = 1; (* x *)
        Print["Sobol dir number ind=",ind1," a058947[[ind1]]=", a058947[[ind1]] -> (IntegerDigits @ a058947[[ind1]])];
        If[ dbgTxt,
            Print["msobol"-> msobol[[1,;;20]]];
            Print["msobol"
                -> mf[ Table[Join[ Table[" ",{20-i}], Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]) ], {i,20}] ] 
                -> mf[ Table[Join[Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]),  Table[" ",{20-i}] ], {i,20}] ] 
                ];
        ];
        Do[
            npts =  2^ilevel;
            npos = Ceiling[Log[2,npts]];
            newtab = Table[
                n = inunmber;
                nf = 1;
                seq = IntegerDigits[n,2] //Reverse;
                seqlen = Length[seq];
                seqpadded = PadRight[#,ilevel]& @ seq;
                nn = BitXor @@ Table[ seq[[i]] msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}];
                nnpadded = PadRight[#,ilevel]& @ (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  );
                newval = FromDigits[ nnpadded ,2];
                If[ dbgTxt,
                    Print[n > Reverse[seqpadded] -> seqpadded 
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (seq[[i]] msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  )
                     -> nnpadded -> newval -> (newval / 2^ilevel)
                     ];
                ];
                {x,y} = {n,npts sobol1d[nf,n]};
                newval
            ,{inunmber,0,npts-1}];
            ptsx = Table[npts sobol1d[nf,i],{i,0,npts-1}];
        ,{ilevel,nlevels}];

(*Abort[]*);
        nf = 2; (* y *)
        Print["Sobol dir number ind=",ind2," a058947[[ind1]]=", a058947[[ind2]] -> (IntegerDigits @ a058947[[ind2]])];
        If[ dbgTxt,
            Print["msobol"-> msobol[[2,;;20]]];
            Print["msobol"
                -> mf[ Table[Join[ Table[" ",{20-i}], Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]) ], {i,20}] ] 
                -> mf[ Table[Join[Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]),  Table[" ",{20-i}] ], {i,20}] ] 
                ];
        ];
        Table[
            npts =  2^ilevel;
            npos = Ceiling[Log[2,npts]];
            gobj = Table[
                n = inunmber;
                nf = 2;
                seq = IntegerDigits[n,2] //Reverse;
                seqlen = Length[seq];
                seqpadded = PadRight[#,ilevel]& @ seq;
                nn = BitXor @@ Table[ seq[[i]] msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}];
                nnpadded = PadRight[#,ilevel]& @ (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  );
                newval = FromDigits[ nnpadded ,2];
                If[ dbgTxt,
                    Print[ilevel,"|",n > Reverse[seqpadded] -> seqpadded 
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (seq[[i]] msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  )
                     -> nnpadded -> newval -> (newval / 2^ilevel)
                     ];
                ];
                {x,y} = {n,npts sobol1d[nf,n]};
                lbl = StringJoin[ToString/@IntegerDigits[n,2]];
                col = If[ seqlen < 6,
                          getColor[n],
                          getColor[seqlen]
                      ];
                {col,PointSize[.02],Point[{x,y}],Black,Text[lbl,{x,y},{-1,-1}]}
            ,{inunmber,0,npts-1}];
            ptsy = Table[npts sobol1d[nf,i],{i,0,npts-1}];
        ,{ilevel,nlevels}];
        {g1,g2} = {getBinaryTree[ptsx,nlevels,"Sobol ind="<>ToString[ind1]], getBinaryTree[ptsy,nlevels,"Sobol ind="<>ToString[ind2]]};
        pts = T[{ptsx,ptsy}];
        scale = Length[pts];
        xcodes = IntegerDigits[#, 2, nlevels]& /@ ptsx;
        ycodes = IntegerDigits[#, 2, nlevels]& /@ ptsy;
        xycodes = {xcodes,ycodes}//T;
        xycodesFIBOSel = Select[xycodes, Max[(ListConvolve[{1, 1}, #] & /@ #)] < 2 &];
        g3 = Graphics[{PointSize[ptsz],Point /@ (pts/scale)
            ,Table[{
                  Text[Style[ToString[(i-1)],24],pts[[i]]/scale,{-1,-1}]
                 ,Text[Style[ToString[IntegerDigits[#,2,nlevels]& @ (i-1)],Red,12],pts[[i]]/scale,{-1,1}]
                },{i,Length[pts]}]   }
            (*,Frame->True,FrameTicks->Automatic,AspectRatio->1,GridLines->{Range[0,npts-1],Range[0,npts-1]}*)
               , PlotRange->{{-eps,1+eps},{-eps,1+eps}} (*{{-eps,2^nlevels+eps},{-eps,2^nlevels+eps}}*)
            ,PlotLabel->"Sobol xy: dir numbers="<>ToString[{ind1,ind2}]];
        {g1,g2}//Print;
        Print[mf@ {ptsx,ptsy} 
            -> (mf @ { ptsx//order2permut0toNminus1,ptsy//order2permut0toNminus1 })
             ];
        Print[(ptsy)
            -> ( mf /@ (Reverse @  ( IntegerDigits[#,2,nlevels] )& /@ (ptsy ) ) )
        ];
        Print[(ptsy//order2permut0toNminus1)
            -> ( mf /@ (Reverse @  ( IntegerDigits[#,2,nlevels] )& /@ (ptsy//order2permut0toNminus1 ) ) )
        ];
        Print[Show[Graphics@getBinaryGrid[nlevels],g3,ImageSize->{1,1}32 2^nlevels] ];
    ] (* dbgSobol *)


showSobol1d[ind1_:1] :=
    Module[ {},
        npts = 16;
        npos = Ceiling[Log[2,npts]];
        Print["Sobol dir number: ",ind1];
        buildMSobol[{ind1, 123}];
        gobj = Table[
            {x,y} = {i,npts sobol1d[1,i]};
            octave = Log[2, i]//Floor;
            lbl = StringJoin[ToString/@IntegerDigits[i,2]];
            col = If[ octave < 6,
                      getColor[i],
                      getColor[octave]
                  ];
            {col,PointSize[.05],Point[{x,y}],Black,Text[lbl,{x,y},{-1,-1}]}
        ,{i,0,npts-1}];
        Graphics[gobj,Frame->True,FrameTicks->Automatic,AspectRatio->1,GridLines->{Range[0,npts-1],Range[0,npts-1]}]//Print;
        ptscodes = IntegerDigits[#,2,npos]& /@ Table[npts sobol1d[1,i],{i,0,npts-1}];
        Print[{Range[0,npts-1],ptscodes, FromDigits[#,2]& /@ ptscodes,FromDigits[Reverse[#],2]& /@ ptscodes}//T//mf];
    (*ptscodes = IntegerDigits[#,2,8]& /@ Table[256 sobol1d[1,i],{i,0,255}];
        Print[{Range[0,255],ptscodes, FromDigits[#,2]& /@ ptscodes,FromDigits[Reverse[#],2]& /@ ptscodes}//T//mf];*)
    ] (* showSobol1d *)

showSobol2D[npts_:16,ind1_:1,ind2_:2] := (* showSobol2D[n,1,2] produces output identical to that of Kuo's sobol.c *)
    Module[ {},
        grid4 = { Thickness[.01],Yellow,Table[{Line[{{0,i},{4,i}}/4],Line[{{i,0},{i,4}}/4]},{i,0,4,1}] };
        grid8 = { Thickness[.005],Yellow,Table[{Line[{{0,i},{8,i}}/8],Line[{{i,0},{i,8}}/8]},{i,0,8,1}] };
        grid16 = { Thickness[.0003],Red,Table[{Line[{{0,i},{16,i}}/16],Line[{{i,0},{i,16}}/16]},{i,0,16,1}] };
        grid16bold = { Thickness[.001],Red,Table[{Line[{{0,i},{16,i}}/16],Line[{{i,0},{i,16}}/16]},{i,0,16,1}] };
        grid64 = { Thickness[.0002],Blue,Table[{Line[{{0,i},{64,i}}/64],Line[{{i,0},{i,64}}/64]},{i,0,64,1}] };
        grid256 = { Thickness[.0002],Cyan,Table[{Line[{{0,i},{256,i}}/256],Line[{{i,0},{i,256}}/256]},{i,0,256,1}] };
        dbgFlag = If[ npts <= 256,
                      True,
                      False
                  ];

        (*Print["Processing showSobol2D ",{npts,{ind1,ind2}}];*)
        buildMSobol[{ind1, ind2},True];
        pts = {};
        gobj = Table[
            {x,y} = {sobol1d[1,i],sobol1d[2,i]};
            AppendTo[pts,{x,y}];
            octave = Log[2, i]//Floor;
            lbl = StringJoin[ToString/@IntegerDigits[i,2,4]];
            col = If[ octave < 6,
                      Gray,
                      getColor[octave]
                  ];
            If[ dbgFlag,
                {(*col,*)Gray,Rectangle[{x,y},{x,y}+1/npts](*,Cyan,Text[lbl,{x,y},{-1,1}]*),Red,Text[i,{x,y},{1,1}]},(*ELSE*)
                {(*col,*)Gray,Rectangle[{x,y},{x,y}+1/npts] }
            ]
        ,{i,0,npts-1}];
        {g1,g2} = Switch[npts
            ,16,{grid4,grid16}
            ,64,{grid8,grid64}
            ,256,{grid16bold,grid256}
            ,_,{grid4,grid16}
        ];
        If[ npts > 256,
            Graphics[{Point/@pts},Frame->True,FrameTicks->None,ImageSize->2{256,256},PlotLabel->"Sobol "<>ToString[{npts,ind1,ind2,discrepancyIndicator2D[npts pts]}]<>" "<>ToString[testHierarchicalStratified2D[npts pts]] ]//Print,(*ELSE*)
            Graphics[{g1,g2,gobj},Frame->True,FrameTicks->None,ImageSize->2{256,256},PlotLabel->"Sobol "<>ToString[{npts,ind1,ind2,discrepancyIndicator2D[npts pts]}]<>" "<>ToString[testHierarchicalStratified2D[npts pts]] ]//Print
        ];
    ] (* showSobol2D *)
(*---------------------- end of Sobol ----------------------*)

(*--------------------------------- pocDweRuKiSobol -does not work!!! -------------------------------*)
pocDweRuKiSobolBase4[innlevels_:4, ind1_:1, ind2_:3, dbgTxt_:False ] :=
    Module[ {},
        ptsz = .005;
        nlevels = innlevels;
        buildMSobol[{ind1, ind2}];
        nf = 1; (* x *)
        Print["Sobol dir number ind=",ind1," a058947[[ind1]]=", a058947[[ind1]] -> (IntegerDigits @ a058947[[ind1]])];
        If[ dbgTxt,
            Print["msobol"-> msobol[[1,;;20]]];
            Print["msobol"
                -> mf[ Table[Join[ Table[" ",{20-i}], Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]) ], {i,20}] ] 
                -> mf[ Table[Join[Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]),  Table[" ",{20-i}] ], {i,20}] ] 
                ];
        ];
        Do[
            npts =  2^ilevel;
            npos = Ceiling[Log[2,npts]];
            newtab = Table[
                n = inunmber;
                nf = 1;
                seq = IntegerDigits[n,2] //Reverse;
                seqlen = Length[seq];
                seqpadded = PadRight[#,ilevel]& @ seq;
                nn = BitXor @@ Table[ seq[[i]] msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}];
                nnpadded = PadRight[#,ilevel]& @ (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  );
                newval = FromDigits[ nnpadded ,2];
                If[ dbgTxt,
                    Print[n > Reverse[seqpadded] -> seqpadded 
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (seq[[i]] msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  )
                     -> nnpadded -> newval -> (newval / 2^ilevel)
                     ];
                ];
                {x,y} = {n,npts sobol1d[nf,n]};
                newval
            ,{inunmber,0,npts-1}];
            ptsx = Table[npts sobol1d[nf,i],{i,0,npts-1}];
        ,{ilevel,nlevels}];
        nf = 2; (* y *)
        Print["Sobol dir number ind=",ind2," a058947[[ind1]]=", a058947[[ind2]] -> (IntegerDigits @ a058947[[ind2]])];
        If[ dbgTxt,
            Print["msobol"-> msobol[[2,;;20]]];
            Print["msobol"
                -> mf[ Table[Join[ Table[" ",{20-i}], Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]) ], {i,20}] ] 
                -> mf[ Table[Join[Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]),  Table[" ",{20-i}] ], {i,20}] ] 
                ];
        ];
        Table[
            npts =  2^ilevel;
            npos = Ceiling[Log[2,npts]];
            gobj = Table[
                n = inunmber;
                nf = 2;
                seq = IntegerDigits[n,2] //Reverse;
                seqlen = Length[seq];
                seqpadded = PadRight[#,ilevel]& @ seq;
                nn = BitXor @@ Table[ seq[[i]] msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}];
                nnpadded = PadRight[#,ilevel]& @ (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  );
                newval = FromDigits[ nnpadded ,2];
                If[ dbgTxt,
                    Print[ilevel,"|",n > Reverse[seqpadded] -> seqpadded 
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (seq[[i]] msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  )
                     -> nnpadded -> newval -> (newval / 2^ilevel)
                     ];
                ];
                {x,y} = {n,npts sobol1d[nf,n]};
                lbl = StringJoin[ToString/@IntegerDigits[n,2]];
                col = If[ seqlen < 6,
                          getColor[n],
                          getColor[seqlen]
                      ];
                {col,PointSize[.02],Point[{x,y}],Black,Text[lbl,{x,y},{-1,-1}]}
            ,{inunmber,0,npts-1}];
            ptsy = Table[npts sobol1d[nf,i],{i,0,npts-1}];
        ,{ilevel,nlevels}];
        pts = T[{ptsx,ptsy}];
        codes = {1+(IntegerDigits[#, 4, nlevels/2] & /@ ptsx), 1+(IntegerDigits[#, 4, nlevels/2] & /@ ptsy)} // T;
        scale = Length[pts];
        g3 = Graphics[{PointSize[ptsz],Point /@ (pts/scale)
            ,Table[{
                  Text[Style[ToString[(i-1)],12],pts[[i]]/scale,{-1,-1}]
                  ,Text[( Style[codes[[i]], 6]),pts[[i]]/scale,{-1,1}]
                 (*,Text[Style[ToString[IntegerDigits[#,4,nlevels/2]& @ (i-1)],Red,12],pts[[i]]/scale,{-1,1}]*)
                },{i,Length[pts]}]   }
            (*,Frame->True,FrameTicks->Automatic,AspectRatio->1,GridLines->{Range[0,npts-1],Range[0,npts-1]}*)
               , PlotRange->{{-eps,1+eps},{-eps,1+eps}} (*{{-eps,2^nlevels+eps},{-eps,2^nlevels+eps}}*)
            ,PlotLabel->"Sobol xy: dir numbers="<>ToString[{ind1,ind2}]];
        If[ dbgTxt,
            Print[mf@ {ptsx,ptsy} -> (mf @ { IntegerDigits[#,4,nlevels/2]& /@ ptsx, IntegerDigits[#,4,nlevels/2]& /@ ptsy }) ]
        ];
        Print[Show[Graphics@getBinaryGridBase4[nlevels/2],g3,ImageSize-> {750,750} ] ];
    
(*------------------------- DweRuKiBase4 -----------------------*)
        xcodes = IntegerDigits[#, 4, nlevels/2]& /@ ptsx;
        ycodes = IntegerDigits[#, 4, nlevels/2]& /@ ptsy;
        xycodes = {xcodes,ycodes}//T;
        labelDweRuKi = "mx4233";
        mx = mx4233;
        mxsz = Length[mx];
        myRandomSampleDir = myRandomSampleInv = Identity;
        init[mx,False, True];
        Table[
                {ix0,iy0} = {ix,iy};
                codes = ({Join[{ix0},#[[1]]],  Join[{iy0},#[[2]]]}& /@ ( (1 + #) & /@xycodes) );
                activeCodes = DweRuKiselectactiveCodes[codes];
                pts = (getFracValueDir /@ #)& /@ activeCodes;
                gl = Table[
                    {Point[pts[[i]]]
                        ,Text[Style[ToString[(i-1)],18],pts[[i]],{-1,-1}]
                        ,Text[( Style[activeCodes[[i]],6]),pts[[i]],{-1,1}]
                    }
                ,{i,Length[activeCodes]}];
                grid = getDweRuKiGrid[nlevels/2,ix0,iy0];
                Graphics[{Opacity[.5],grid,Opacity[1]
                    , PointSize[.005], gl }, ImageSize -> {750,750} 
                    ,PlotLabel->{ix,iy}
                ]
        ,{ix,4},{iy,4}]//Flatten//Print;
    ] (* pocDweRuKiSobolBase4 *)
(*--------------------------------- end of pocDweRuKiSobol -does not work!!! -------------------------------*)

AALDS1dBuildMX[insz_:64, inmxType_:1, inalpha_:2, k_:1] :=
    Module[ {mx},
        {sz,mxType,alpha} = {insz,inmxType,inalpha};
        npow = 10;
        ntrials = 100;
        nmx = 1;
        Print["{sz,mxType,alpha} = ",{sz,mxType,alpha,k}];
    
        (*Parallelize @*)
        Do[
        restab = Sort @ Table[
        Print["trial ", itrial];
        mx = mkAALDSmx[sz, mxType,alpha,k];
        tab = T @ (Total /@ (Table[MatrixPower[mx, i], {i, npow}]));
        mxpow = MatrixPower[mx, npow];
        intevec = Total /@ mxpow;
        evec = N[intevec / Norm[intevec] ];
        evecdiff = Differences[Sort @ evec];
        {evecdiffmin,evecdiffmax} = {Min[evecdiff],Max[evecdiff]};
        {{evecdiffmax,evecdiffmin},mx}
        ,{itrial,ntrials}];
        mx = restab[[1,-1]];
            
            (*mx = BitOr[mx, UpperTriangularize[restab[[-2,-1]]]];*)
        {eval,evecDir,evecInv} = getAALDSmxEV[mx];
        {niceRaster[1 - Reverse[mx], zoom -> Round[128/insz]]
        ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{Min[evecDir],Max[evecDir]},{Min[evecInv],Max[evecInv]}},PlotLabel->imx]
        ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{0,Max[evecDir]},{0,Max[evecInv]}},PlotLabel->imx]}//Print;
        (*fname = "matrices/mx_64x64_lenear_decrease/mx_64."<>ToString[NumberForm[imx, 2, NumberPadding -> "0"]]<>".dat";
        Export[fname,mx];
        Print["mx written into ",fname];*)
        ,{imx,0,nmx-1}];
        ArrayPlot[mx,  Mesh -> True,ImageSize->4{256,256}]//Print;
        Print[mx];
    ] (* AALDS1dBuildMX *)


mkAALDSmx[sz_:16,mxType_:1,alpha_:.01,k_:.1] :=
    Module[ {mx,x,y},
        Switch[mxType
            ,1,
                mx = Table[1,{sz},{sz}];
                Do[
                    nzeros = Ceiling[k y / 2];
                    line = Flatten @ Join[ RandomSample @ Join[ RandomSample /@ Table[{0,1},{nzeros}], Table[{1,1},{sz/2 - nzeros }] ] ];
                    line[[1]] = 1;
                    mx[[y]] = line;
                ,{y,2,sz}];
                (*mx = BitXor[mx, T[mx]]*);
                (*mx = BitAnd[mx, T[mx]]*);
        
            ,2,
                mx = Table[1,{sz},{sz}];
                limit = Min[sz, 2 Round[sz/4/k]];
                (*Print[k -> limit];*)
                Do[
                    Do[
                        m2x2 = If[ (RandomReal[])^k > 2 k y / sz,
                                   {{1,1},{1,1}},
                                   RandomChoice[{ {{0,1},{1,1}}, {{1,0},{1,1}}, {{1,1},{0,1}}, {{1,1},{1,0}} } ]
                               ];
                        mx[[y;;y+1, x;;x+1]] = m2x2;
                    ,{x,1,y,2}];
                ,{y,1,limit,2}];
                Do[
                    Do[
                        m2x2 = If[ (RandomReal[])^k > k y / sz /2,
                                   RandomChoice[{{{1,1},{1,1}},        {{0,1},{1,1}}, {{1,0},{1,1}}, {{1,1},{0,1}}, {{1,1},{1,0}} } ],
                                   RandomChoice[{ {{1,0},{0,1}}, {{0,1},{1,0}} } ]
                               ];
                        mx[[y;;y+1, x;;x+1]] = m2x2;
                    ,{x,1,y,2}];
                ,{y,limit+1,sz,2}];
                mx[[;;,1]] = 1;
                mx = BitAnd[mx, T[mx]];
        
            ,11,
                mx = Table[1,{sz},{sz}];
                Do[
                    line = Join[{1}, RandomChoice[{alpha (y/sz)^k, 1 - alpha (y/sz)^k} -> {0, 1}, sz-1] ];
                    mx[[y]] = line;
                ,{y,2,sz}];
                mx = BitAnd[mx, T[mx]];
            ,22,
                mx = Table[1,{sz},{sz}];
                (* first pass *)
                modifiers = {Range[2,sz],Range[2,sz]//RandomSample}//Transpose;
                ({ix,iy} = #;
                 mx[[iy,ix]] = 0) & /@ modifiers;
                (* second pass *)
                nskip = Round[alpha sz];
                modifiers = {Range[2,sz],Join[Range[1+nskip,sz],Range[sz-nskip+2,sz]]//RandomSample}//Transpose;
                ({ix,iy} = #;
                 mx[[iy,ix]] = 0) & /@ modifiers;
                mx = BitAnd[mx, T[mx]];
            ,3,
                data = Get["data/L5_BN.dat"];
                set = RandomChoice[data];
                mx = Table[1,{sz},{sz}];
                modifiers = Ceiling[(sz-1)/64 set/16];
                ({ix,iy} = #;
                 If[ ix > 0 && iy > 0 && RandomReal[] < k (iy /(sz-1))^alpha,
                     mx[[1+iy,1+ix]] = 0
                 ]
                    ) & /@ modifiers;
                mx = BitAnd[mx, T[mx]];
            ,4,
                data = Get["data/L5_BN.dat"]; (* 1024 *)
                set = RandomChoice[data];
                mx = Table[1,{sz},{sz}];
                modifiers = Ceiling[(sz-1)/64 set/16];
                ({ix,iy} = #;
                 If[ ix > 0 && iy > 0 && RandomReal[] < k ((ix / 64)^alpha + (iy / 64)^alpha),
                     mx[[1+iy,1+ix]] = 0
                 ]
                    ) & /@ modifiers;
                mx = BitAnd[mx, T[mx]];
            ,5,
                data = Get["data/L6_BN.dat"]; (* 4096 *)
                set = RandomChoice[data];
                mx = Table[1,{sz},{sz}];
                modifiers = Ceiling[(sz-1)/64 set/64];
                ({ix,iy} = #;
                 If[ ix > 0 && iy > 0 && RandomReal[] < k (iy /(sz-1))^alpha,
                     mx[[1+iy,1+ix]] = 0
                 ]
                    ) & /@ modifiers;
                mx = BitAnd[mx, T[mx]];
            ,6,
                data = Get["data/L4_BN.dat"]; (* 256 *)
                set = RandomChoice[data];
                mx = Table[1,{sz},{sz}];
                modifiers = Ceiling[(sz-1)/64 set/4];
                ({ix,iy} = #; 
                    (*If[RandomReal[] < k (iy /(sz-1))^alpha, mx[[1+iy,1+ix]] = 0 ]*)
                 If[ ix > 0 && iy > 0 && RandomReal[] < k ((ix / 64)^alpha + (iy / 64)^alpha),
                     mx[[1+iy,1+ix]] = 0
                 ]
                    ) & /@ modifiers;
                mx = BitAnd[mx, T[mx]];
            ,7,
                 mx = Table[1,{sz},{sz}];
                 Do[
                     line = Join[{1}, RandomChoice[{alpha (y/sz)^k, 1 - alpha (y/sz)^k} -> {0, 1}, sz-1] ];
                     mx[[y]] = line;
                 ,{y,2,sz}];
                (*mx = BitAnd[mx, T[mx]];*)
            ,8,
                mx = Table[1,{sz},{sz}];
                modifiers = Table[{i+1,i},{i,2,sz}];
                ({ix,iy} = #;
                 mx[[iy,ix]] = 0) & /@ modifiers;
                (*modifiers = Table[{2 i+2,2 i},{i,2,sz/2}];
                ({ix,iy} = #; mx[[iy,ix]] = 0) & /@ modifiers;*)
                (*mx[[-1,2]] = 0*);
                mx[[2,4]] = 0;
                modifiers = {{Round[sz/3] 2,Round[sz/3]}};
                ({ix,iy} = #;
                 mx[[iy,ix]] = 0) & /@ modifiers;
            ,10,
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,2;;y]] = RandomChoice[{alpha (y/sz)^k, 1 - alpha (y/sz)^k} -> {0, 1}, y-1];
                ,{y,2,sz}];
            ,1100, (* lower diagonal checkerboard *)
               Print["producing #1100 "];
               checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                        1,
                                        0
                                    ],{iy,sz},{ix,sz}];
               mx = Table[1,{sz},{sz}];
               Do[
                   mx[[y,2;;y]] = checkerboard[[y,2;;y]];
                ,{y,2,sz}];
            ,1101, (* upper diagonal checkerboard *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,y;;]] = checkerboard[[y,y;;]];
                ,{y,2,sz}];
            ,1102, (* upper diagonal Sparse *)
                LshapedSparse = Table[0,{sz},{sz}];
                Do[{iix,iiy} = {2ix-iy,ix+2iy};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       LshapedSparse[[iiy,iix]] = 1
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,y;;]] = LshapedSparse[[y,y;;]];
                ,{y,2,sz}];
            ,1103, (* upper diagonal Dense *)
                LshapedDense = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {2ix-iy,ix+2iy};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       LshapedDense[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,y;;]] = LshapedDense[[y,y;;]];
                ,{y,2,sz}];
            ,1111, (* upper diagonal checkerboard convex*)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    x = Round[ Sqrt[(sz-1)^2 - (sz-y)^2] ] + 2;
                    mx[[y,x;;]] = checkerboard[[y,x;;]];
                ,{y,2,sz}];
            ,1112, (* upper diagonal checkerboard concave*)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    x = sz - Round[ Sqrt[(sz-1)^2 - (y-2)^2] ] + 1;
                    mx[[y,x;;]] = checkerboard[[y,x;;]];
                ,{y,2,sz}];
            ,1201, (* symm checkerboard *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[sz-y+2,y;;]] = checkerboard[[y,y;;]];
                ,{y,2,sz}];
            ,1202, (* symm Sparse mx *)
                LshapedSparse = Table[0,{sz},{sz}];
                Do[{iix,iiy} = {2ix-iy,ix+2iy};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       LshapedSparse[[iiy,iix]] = 1
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[sz-y+2,y;;]] = LshapedSparse[[y,y;;]];
                ,{y,2,sz}];
            ,1203, (* symm Dense mx *)
                LshapedDense = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {2ix-iy,ix+2iy};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       LshapedDense[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[sz-y+2,y;;]] = LshapedDense[[y,y;;]];
                ,{y,2,sz}];
            ,1204, (* symm checkerboard randomized *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[sz-y+2,y;;]] = RandomSample @ checkerboard[[y,y;;]];
                ,{y,2,sz}];
            ,1300, (* pure disk, symm *)
                mx = Table[If[ Mod[ix+iy,2] == 1,
                               1,
                               0
                           ],{iy,sz},{ix,sz}]; (* checkerboard *)
                mx = Table[1,{sz},{sz}];
                disk = DiskMatrix[sz-1][[sz+1;;,sz+1;;]];
                Do[
                    mx[[y,2;;]] = disk[[y-1,;;]];
                ,{y,2,sz}];
            ,1301, (* convex symm, checkerboard*)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    x = Round[ Sqrt[(sz-1)^2 - (y-2)^2] ] + 2;
                    mx[[y,x;;]] = checkerboard[[y,x;;]];
                ,{y,2,sz}];
            ,1302, (* concave symm, checkerboard*)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    x = sz - Round[ Sqrt[(sz-1)^2 - (sz - y)^2] ] + 1;
                    mx[[y,x;;]] = checkerboard[[y,x;;]];
                ,{y,2,sz}];
            ,1401, (* lower diagonal 1/3 *)
                sparsemx = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {ix+iy,2 iy-ix};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       sparsemx[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,;;y]] = sparsemx[[y,;;y]];
                ,{y,2,sz}];
                mx[[-1,-1]] = mx[[1,1]] = 1;
            ,1402, (* upper diagonal 1/3 *)
                sparsemx = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {2ix+iy,iy-ix};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       sparsemx[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,y;;]] = sparsemx[[y,y;;]];
                ,{y,2,sz}];
        
            ,1403, (* upper diagonal 1/3 random *)
                sparsemx = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {2ix+iy,iy-ix};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       sparsemx[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    len = sz - y + 1;
                    start = y;
                    nones = Round[len/3];
                    nzeros = len - nones;
                    line = Join[Table[0,{nzeros}],Table[1,{nones}]]//RandomSample;
                    mx[[y,y;;]] = line;
                ,{y,2,sz}];
            ,1404, (* upper diagonal 1/3 random *)
                sparsemx = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {2ix+iy,iy-ix};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       sparsemx[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    len = sz - y + 1;
                    start = y;
                    nones = Round[len 2/3];
                    nzeros = len - nones;
                    line = Join[Table[0,{nzeros}],Table[1,{nones}]]//RandomSample;
                    mx[[y,y;;]] = line;
                ,{y,2,sz}];
            ,1405, (* symm diagonal 1/3 *)
                sparsemx = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {2ix+iy,iy-ix};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       sparsemx[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[sz-y+2,y;;]] = sparsemx[[y,y;;]];
                ,{y,2,sz}];
            ,1406, (* symm diagonal 1/3 *)
                sparsemx = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {ix+iy,2 iy-ix};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       sparsemx[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[sz-y+2,y;;]] = sparsemx[[y,y;;]];
                ,{y,2,sz}];
            ,1501, (* linear random 1/2 *)
                mx = Table[1,{sz},{sz}];
                zeros = {Range[2, sz], RandomSample@Range[2, sz]} // T;
                ({ix,iy} = #;
                 mx[[iy,ix]] = 0) & /@ zeros;
                Do[
                    len = sz - 1;
                    start = 2;
                    nones = Ceiling[sz/2 + (sz - y-1) 1/2];
                    nzeros = len - nones;
                    line = Join[Table[0,{nzeros}],Table[1,{nones}]]//RandomSample;
                    mx[[y,2;;]] = Table[Min[line[[i]],mx[[y,i+1]]],{i,Length[line]}];
                ,{y,2,sz}];
            ,1502, (* linear random 2/3 *)
                mx = Table[1,{sz},{sz}];
                zeros = {Range[2, sz], RandomSample@Range[2, sz]} // T;
                ({ix,iy} = #;
                 mx[[iy,ix]] = 0) & /@ zeros;
                Do[
                    len = sz - 1;
                    start = 2;
                    nones = Ceiling[sz 2/3 + (sz - y-1) 1/3];
                    nzeros = len - nones;
                    line = Join[Table[0,{nzeros}],Table[1,{nones}]]//RandomSample;
                    mx[[y,2;;]] = Table[Min[line[[i]],mx[[y,i+1]]],{i,Length[line]}];
                ,{y,2,sz}];
            ,1503, (* linear random 3/4 *)
                mx = Table[1,{sz},{sz}];
                Do[
                    len = sz - 1;
                    start = 2;
                    nones = Ceiling[sz 3/4 + (sz - y-1) 1/4];
                    nzeros = len - nones;
                    line = Join[Table[0,{nzeros}],Table[1,{nones}]]//RandomSample;
                    mx[[y,2;;]] = line;
                ,{y,2,sz}];
            ,1601, (* lower diagonal checkerboard *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         0,
                                         1
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,;;y]] = checkerboard[[y,;;y]];
                ,{y,2,sz}];
                mx[[-1,-1]] = 1;
            ,1602, (* lower diagonal checkerboard, randomized *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,;;y]] = RandomSample @ checkerboard[[y,;;y]];
                ,{y,2,sz}];
                mx[[-1,-1]] = 1;
            ,1603,  (* convex symm, checkerboard*)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    x = Round[ Sqrt[(sz-1)^2 - (sz- y)^2] ];
                    mx[[y,;;x]] = checkerboard[[y,;;x]];
                ,{y,2,sz}];
            ,1604,  (* convex symm, checkerboard, randimized *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    x = Round[ Sqrt[(sz-1)^2 - (sz- y)^2] ];
                    mx[[y,;;x]] = RandomSample @ checkerboard[[y,;;x]];
                ,{y,2,sz}];
            ,1605,  (*  *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    x = Round[ Sqrt[(sz-1)^2 - (sz- y)^2] ];
                    nones = Power[Count[ checkerboard[[y,;;x]], 1 ], 1.05] // Round;
                    nzeros = x - nones;
                    line = Join[Table[0,{nzeros}],Table[1,{nones}]]//RandomSample;
                    mx[[y,;;x]] = line;
                ,{y,2,sz}];
            ,1606,  (*  *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    x = Round[ Sqrt[(sz-1)^2 - (sz- y)^2] ];
                    nones = Round @ (Count[ checkerboard[[y,;;x]], 1 ]  3/4);
                    nzeros = x - nones;
                    line = Join[Table[0,{nzeros}],Table[1,{nones}]]//RandomSample;
                    mx[[y,;;x]] = line;
                ,{y,2,sz}];
            ,1607,  (*  *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         1,
                                         0
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    x = Round[ Sqrt[(sz-1)^2 - (sz- y)^2] ];
                    nones = Round @ (Count[ checkerboard[[y,;;x]], 1 ]  3/2);
                    nzeros = x - nones;
                    line = Join[Table[0,{nzeros}],Table[1,{nones}]]//RandomSample;
                    mx[[y,;;x]] = line;
                ,{y,2,sz}];
            ,1608, (* lower diagonal Sparse *)
                LshapedSparse = Table[0,{sz},{sz}];
                Do[{iix,iiy} = {2ix-iy,ix+2iy};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       LshapedSparse[[iiy,iix]] = 1
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,;;y]] = LshapedSparse[[y,;;y]];
                ,{y,2,sz}];
                mx[[-1,-1]] = mx[[1,1]] = 1;
            ,1609, (* lower diagonal 1/3 *)
                sparsemx = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {ix+iy,2 iy-ix};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       sparsemx[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,;;y]] = sparsemx[[y,;;y]];
                ,{y,2,sz}];
                mx[[-1,-1]] = mx[[1,1]] = 1;
            ,1610, (* lower diagonal 1/3 randomized *)
                sparsemx = Table[1,{sz},{sz}];
                Do[{iix,iiy} = {ix+iy,2 iy-ix};
                   If[ 1 <= iix <= sz && 1 <= iiy <= sz,
                       sparsemx[[iiy,iix]] = 0
                   ],{iy,-sz,sz},{ix,-sz,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,;;y]] = RandomSample @ sparsemx[[y,;;y]];
                ,{y,2,sz}];
                mx[[-1,-1]] = mx[[1,1]] = 1;
            ,1900, (* lower diagonal pure checkerboard spread = 1/2 *)
                checkerboard = Table[If[ Mod[ix+iy,2] == 1,
                                         0,
                                         1
                                     ],{iy,sz},{ix,sz}];
                mx = Table[1,{sz},{sz}];
                Do[
                    mx[[y,;;y]] = checkerboard[[y,;;y]];
                ,{y,2,sz}];
                mx[[;;,-1]] = 1;
            ,1901, (* lower diagonal k = spread *)
                mx = Table[1,{sz},{sz}];
                Do[
                    nzeros = Ceiling[k y];
                    zeros = (RandomSample @ Range[y-1])[[;;nzeros]];
                    (mx[[y,#]] =  0)& /@ zeros;
                ,{y,2,sz}];
                mx[[;;,-1]] = 1;
            ,2000, (* ... *)
                mx = Table[1,{sz},{sz}];
                Do[
                    nzeros = Ceiling[y/2.];
                    zeros = Ceiling[# sz]& /@ Table[RandomVariate[TriangularDistribution[{0, 1}, 0]],{nzeros}];
                    (mx[[y,#]] =  0)& /@ zeros;
                ,{y,2,sz}];
            ,2001, (* ... *)
        (*                mx = Table[1,{sz},{sz}];
                Do[
                    nzeros = Ceiling[y/2.];
                    zeros = Ceiling[sz #] & /@ Table[1/4 RandomVariate[ChiSquareDistribution[.5]],{nzeros}];
                    zeros = Ceiling[sz #] & /@ Table[1/2 RandomVariate[FRatioDistribution[2,10]],{nzeros}];
                    zeros = Ceiling[sz #] & /@ Table[1 RandomVariate[ChiDistribution[.5]],{nzeros}];
                    If[# < sz, mx[[y,#]] =  0]& /@ zeros;
                ,{y,2,sz}];
        *)
                mx = Table[1,{sz},{sz}];
                Do[
                    nzeros = Ceiling[y/2.];
                    zeros = Ceiling[# sz y/sz]& /@ Table[RandomVariate[TriangularDistribution[{0, 1}, 0]],{nzeros}];
                    (mx[[y,#]] =  0)& /@ zeros;
                ,{y,2,sz}];
        ];
        Return[mx]
    ] (* mkAALDSmx *)
    
(**************** AALDS routines ******************)

getAALDSmxEV[mx_] :=
    Module[ {mxpow,mxpowPlusOne,pow = 100,rows,cols},
        mxpow = MatrixPower[mx,pow];
        mxpowPlusOne = mxpow.mx;
        rows = Total/@ mxpow;
        cols = Total/@ Transpose[mxpow];
        {    Total[Total /@ mxpowPlusOne]/Total[Total /@ mxpow] // N    (* eigen value *)
            ,N[rows/Total[rows]]    (*  eigen vectors *)
            ,N[cols/Total[cols]]    (*  eigen vectors *)
             }
    ] (* getAALDSmxEV *)
    
(*----------------------------------- Omega 1d basic routines -----------------------------------*)

disambiguateMx[mx_] :=
    Module[ {mxSz,pr,thisentry,rules,ruleno,symbols,substitutions,newrules,equivalentmxSz,equivalentmx},
        mxSz = Length[mx];
        pr = Table[thisentry = mx[[i]];
                   Table[Table[j, {thisentry[[j]]}], {j, Length[thisentry]}] // Flatten
                , {i, mxSz}];
        rules = {};
        Do[
            Do[
                ruleno = pr[[i, j]];
                AppendTo[rules, {ruleno,  #} & /@ Range[pr[[ruleno]]//Length]]
            ,{j, Length[pr[[i]]]}];
        , {i, mxSz}];
        symbols = Flatten[rules, 1] // Union;
        substitutions = (#[[1]] -> #[[2]]) & /@ ({symbols, Range[Length[symbols]]} // T);
        newrules = rules /. substitutions;
        equivalentmxSz = Total[Total[mx]];
        equivalentmx = Table[0, {equivalentmxSz}, {equivalentmxSz}];
        Do[equivalentmx[[i, newrules[[i]]]] = 1, {i, equivalentmxSz}];
        equivalentmx
    ]

getIntValueDir[word_] :=
    Total @ getIntValueTabDir[word]
getIntValueTabDir[word_] :=
    Module[ {i, len = Length[word] },
        Join[
            Table[basicSeqCumulDir[[Mod[i+1,orderTabLength,1],word[[i]],word[[i+1]],len-i ]],{i,len-1}] 
            ]
    ] (* getIntValueTabDir *)

getFracValueDir[word_] :=
    Total @ getFracValueTabDir[word]
getFracValueTabDir[word_] :=
    Module[ {i, len = Length[word] },
        (*Total[evecDir]/Total[Union[evecDir]]*)
        Join[
        Table[basicSeqFracCumulDir[[Mod[i+1,orderTabLength,1],word[[i]],word[[i+1]], i ]],{i,len-1}]
        ]
    ] (* getFracValueTabDir *)


getIntValueInv[word_] :=
    Total @ getIntValueTabInv[word]
getIntValueTabInv[inword_] :=
    Module[ {i, len = Length[inword], word = Join[{1},inword] },
        Join[
            Table[basicSeqCumulInv[[Mod[i+1,orderTabLength,1],word[[i]],word[[i+1]],len-i ]],{i,len-1}] 
            ]
    ] (* getIntValueTabInv *)

getFracValueInv[word_] :=
    Total @ getFracValueTabInv[word]
getFracValueTabInv[inword_] :=
    Module[ {i, len = Length[inword], word = Join[{1},inword] },
        Join[
            Table[basicSeqFracCumulInv[[Mod[i+1,orderTabLength,1],word[[i]],word[[i+1]], i ]],{i,len-1}] 
            ]
    ] (* getIntValueTabInv *)

applyProductionRules[word_] :=
    Module[ {res,lastSybbol,newSymbols},
        lastSybbol = If[ Length[word] == 0,
                         1,
                         word[[-1]]
                     ];
        newSymbols = productionRulesDir[[lastSybbol]];
        res = (Append[word, #] & /@ newSymbols);
        Return[res]
    ] (* applyProductionRules *)


buildRandomOrderTab[showDBG_:True] :=
    Module[ {},
        orderZeroDir = myRandomSampleDir[Range[mxSz] ];
        orderZeroInv = myRandomSampleInv[Range[mxSz] ];
        Do[
            orderDir[[ilevel]] = myRandomSampleDir /@ productionRulesDir;
            orderInv[[ilevel]] = myRandomSampleInv /@ productionRulesInv; (* myRandomSample /@ productionRulesInv; *)
            (*If[ showDBG,
                (*Print["buildRandomOrderTab -------------------------------------------------- level ",ilevel];*)
                Print["level = ",ilevel," Dir: orderDir[[ilevel]]=",orderDir[[ilevel]]//mf,ToString[myRandomSampleDir]];
                Print["level = ",ilevel," Inv: orderInv[[ilevel]]=",orderInv[[ilevel]]//mf,ToString[myRandomSampleInv]];
                
            ];*)
        ,{ilevel,orderTabLength}];
    ] (* buildRandomOrderTab*)


buildBasicSeqCumul[dbg_:False] :=
    Module[ {},
        If[ dbg,
            Print["orderDir=",mf/@orderDir];
            Print["orderInv=",mf/@orderInv];
        ];
        (* ------------------------ Dir ------------------------ *)
        (* finding basicSeqFracCumulZeroDir and  *)
        basicSeqCumulDir = Table[zeros, {orderTabLength},{mxSz}, {mxSz}];
        Do[
            Do[
                indlst = orderDir[[ilevel,i]];
                tmp = basicSeqDir[[indlst ]];
                           (*Print[{ilevel,i},indlst," -> ",tmp]*);
                basicSeqCumulDir[[ilevel,i,indlst]] = Join[{zeros}, Table[Take[tmp, i] // Total, {i, Length[tmp] - 1}]];
            ,{i,mxSz}];
        ,{ilevel,orderTabLength}];
        
        (* finding basicSeqFracCumulZeroDir and basicSeqFracCumulDir *)
        basicSeqFracCumulDir = Table[zeros, {orderTabLength},{mxSz}, {mxSz}];
        Do[
            Do[
                indlst = orderDir[[ilevel,i]];
                tmp = basicSeqFracDir[[indlst ]];
                   (*Print[{ilevel,i},indlst," -> ",tmp]*);
                basicSeqFracCumulDir[[ilevel,i,indlst]] = Join[{zeros}, Table[Take[tmp, i] // Total, {i, Length[tmp] - 1}]];
            ,{i,mxSz}];
        ,{ilevel,orderTabLength}];
 
        (* ------------------------ Inv ------------------------ *)
        (* finding basicSeqFracCumulZeroInv and basicSeqCumulInv *)
        basicSeqCumulInv = Table[zeros, {orderTabLength},{mxSz}, {mxSz}];
        Do[
            Do[
                indlst = orderInv[[ilevel,i]];
                tmp = basicSeqInv[[indlst ]];
                           (*Print[{ilevel,i},indlst," -> ",tmp];*)
                basicSeqCumulInv[[ilevel,i,indlst]] = Join[{zeros}, Table[Take[tmp, i] // Total, {i, Length[tmp] - 1}]];
            ,{i,mxSz}];
        ,{ilevel,orderTabLength}];
        
        (* finding basicSeqFracCumulZeroInv and basicSeqFracCumulInv *)
        basicSeqFracCumulInv = Table[zeros, {orderTabLength},{mxSz}, {mxSz}];
        Do[
            Do[
                indlst = orderInv[[ilevel,i]];
                tmp = basicSeqFracInv[[indlst ]];
                   (*Print[{ilevel,i},indlst," -> ",tmp];*)
                basicSeqFracCumulInv[[ilevel,i,indlst]] = Join[{zeros}, Table[Take[tmp, i] // Total, {i, Length[tmp] - 1}]];
            ,{i,mxSz}];
        ,{ilevel,orderTabLength}];
    ] (* buildBasicSeqCumul *)

randomSampleButFirst[seq_] :=
    Join[{First[seq]},RandomSample[Drop[seq,1]] ]

(*Do[
     mx = getMyFamilyRadixInvertible[sz];
     cp = CharacteristicPolynomial[mx, x];
     (*init[mx,True];*)
     findAnalyticalEigenSystem[mx];
     Print["================= sz=", sz -> cp];
 , {sz, 2, 10}]*)
 
findAnalyticalEigenSystem[mx_] :=
    Module[ {},
        {evals, evecs} = N[Eigensystem[mx] ];
        lambda = evals /. {(x_ /; Im[x] != 0) -> 0} // Max;
        keyIndex = Position[evals,lambda][[1,1]];
        {aevals, aevecs} = Eigensystem[mx];
        aeval = aevals[[keyIndex]]//ToRadicals//Simplify;
        aevec = aevecs[[keyIndex]]//ToRadicals//Simplify;
        eval = aevals[[keyIndex]]//N;
        evec = aevecs[[keyIndex]]//N;
        cp = CharacteristicPolynomial[mx, x];
        Print[mx//mf,mx//T//mf," eval: " -> cp -> evals[[keyIndex]]];
        Print["evecs: ",evec/Max[evec]," ratio:",Max[evec]/Min[evec]];
        Print["analytical eval: ",aeval];
        Print["analyticalevec: ",aevec];
        Print["analytical eval: ",aeval//InputForm];
        Print["analyticalevec: ",aevec//InputForm];
        cp
    ]

init[mx_,showDBG_:True, buildRandomOrderTabFlag_:True] :=
    Module[ {npow = 20, tab},
        mxDir = mx;
        seqSize = 30;
        If[ !known[orderTabLength],
            orderTabLength = 1
        ];
        If[ !known[myRandomSampleDir],
            myRandomSampleDir = myRandomSampleInv = randomSampleButFirst
        ]; (* randomSampleButFirst or Identity *)
        zeros = Table[0, {seqSize}];
        If[ Min[mx] < 0,
            Print["invalid mx:",mx//mf];
            Abort[]
        ];
        (*If[Max[mx] > 1, Print["Converting to 0/1 matrix..."]; mxDir = disambiguateMx[mx] ];*)
        mxInv = mxT = mxDir//Transpose;
        mxRank = MatrixRank[mxDir];
        mxSz = nProductionRules = Length[mxDir];
        productionRulesDir = Table[Flatten[Position[mxDir[[i]], 1]], {i, mxSz}];
        productionRulesInv = Table[Flatten[Position[mxInv[[i]], 1]], {i, mxSz}];        

        (*{evals, evecs} = N[Eigensystem[mxDir] ];*)
        tab = T @ (Total /@ (Table[MatrixPower[mx//T, i], {i, npow}]));
        evec = evecDir = (Last /@ tab)/Total[Last /@ tab] // N;
        eval = areaScale = lambda = maxEVal = N[Total[#[[-1]] & /@ tab]/Total[#[[-2]] & /@ tab]]; (*evals /. {(x_ /; Im[x] != 0) -> 0} // Max;*)
        tab = T @ (Total /@ (Table[MatrixPower[mx, i], {i, npow}]));
        evecInv = (Last /@ tab)/Total[Last /@ tab] // N;

        (*----------------------- building basicSeqDir and basicSeqInv ----------------------- *)
        basicSeqDirT = Table[{}, {seqSize}];
        cvec = Table[1, {mxSz}];
        Do[
            basicSeqDirT[[i]] = cvec;
            cvec = mxDir.cvec
        , {i, seqSize}];
        basicSeqInvT = Table[{},{seqSize}];
        cvec = Table[1,{mxSz}];
        Do[
          basicSeqInvT[[i]] = cvec;
          cvec = mxInv.cvec
        ,{i,seqSize}];
        basicSeqDir = Transpose[basicSeqDirT];
        basicSeqInv = Transpose[basicSeqInvT];
        totalLength = basicSeqDir // Total;
        totalLengthInv = basicSeqDir // Total;
        lambda = N[totalLength[[-1]]/totalLength[[-2]]];
        ratio = N[Max[Last /@ basicSeqDir]/Min[Last /@ basicSeqDir]];
        ratioInv = N[Max[Last /@ basicSeqInv]/Min[Last /@ basicSeqInv]];

        (*----------------------- building basicSeqFracDir and basicSeqFracInv ----------------------- *)
        basicSeqFracDirT = Table[{}, {seqSize}];
        basicSeqFracDirT[[1]] = evecDir/Total[evecDir];
        Do[
            basicSeqFracDirT[[i]] = basicSeqFracDirT[[i-1]]/lambda;
        ,{i,2,seqSize}];
        basicSeqFracDir = basicSeqFracDirT//T;
        basicSeqFracInvT = Table[{}, {seqSize}];
        basicSeqFracInvT[[1]] = evecInv/Total[evecInv];
        rTabDir = (basicSeqFracDir/PI)//Sqrt;
        Do[
            basicSeqFracInvT[[i]] = basicSeqFracInvT[[i-1]]/lambda;
        ,{i,2,seqSize}];
        basicSeqFracInv = basicSeqFracInvT//T;
        evecDirNormSum = evecDir/Total[evecDir];
        evecDirNorm1 = evecDir/Max[evecDir];
        evecDirNormFirst = evecDir(*/evecDir[[1]]*);
        evecDirUnion = Union[evecDir];
        evecDirUnionInv = Union[evecInv];
            (*ratio = If[First[evecDirUnion] == 0., Last[evecDirUnion]/evecDirUnion[[2]], Last[evecDirUnion]/evecDirUnion[[1]] ];
            ratioInv = If[First[evecDirUnionInv] == 0., Last[evecDirUnionInv]/evecDirUnionInv[[2]], Last[evecDirUnionInv]/evecDirUnionInv[[1]] ];*)
        scaleAreaTab = Table[lambda^i, {i, 0, seqSize}];
        If[ showDBG,
            tmp1 = evecDir // DeleteDuplicates;
            symbols = Table[FromCharacterCode[96 + i], {i, Length[tmp1]}];
            substitutions = (#[[1]] -> #[[2]]) & /@ ({tmp1, symbols} // T);
            tmp3 = evecDir /. substitutions;
            colors = Table[getColorSolid[ Position[productionRulesDir // DeleteDuplicates, i][[1, 1]]], {i, mxSz}];
            tmp4 = Table[Style[Subscript[tmp3[[i]],i],colors[[i]] ],{i,mxSz}];
            colors = Table[ getColorSolid[Position[productionRulesDir // DeleteDuplicates ,i][[1,1]] ],{i,mxSz}];
            tmp5 = Table[Style[Subscript[tmp3[[i]],i],getColorSolid[Position[symbols,tmp3[[i]]][[1,1]]] ],{i,mxSz}];
            numTab1 = Join[{Mod[#,10]&/@Range[mxSz]},{tmp4},{Table["|",{mxSz}]}];
            numTab2 = Join[{Mod[#,10]&/@Range[mxSz]},{tmp4},{Table["-",{mxSz}]}];
            numTab3 = Join[{Mod[#,10]&/@Range[mxSz]},{tmp5},{Table["|",{mxSz}]}];
            numTab4 = Join[{Mod[#,10]&/@Range[mxSz]},{tmp5},{Table["-",{mxSz}]}];
            Print[">>>>>>>>>>>>>>>>>>>>>> lambda=",lambda];
            Print[">>>> ratio:",{ratio,ratioInv}];
            Print[
              Join[
                Join[{{"mx"},{"Dir"},{""}}//T,         {{""},{""},{""}}//T,    {{""},{""},{""}}//T,    numTab1//T] //T,
                Join[numTab2,    mxDir] //T
              ]  //T//mf, "  ",
              Join[
                Join[{{"mx"},{"Inv"},{""}}//T,         {{""},{""},{""}}//T,    {{""},{""},{""}}//T,    numTab1//T] //T,
                Join[numTab2,    mxInv] //T
              ]  //T//mf,"   ",
              Join[
                Join[{{"mx"},{"Dir"},{""}}//T,         {{""},{""},{""}}//T,    {{""},{""},{""}}//T,    numTab3//T] //T,
                Join[numTab4,    mxDir] //T
              ]  //T//mf, "  ",
              Join[
                Join[{{"mx"},{"Inv"},{""}}//T,         {{""},{""},{""}}//T,    {{""},{""},{""}}//T,    numTab3//T] //T,
                Join[numTab4,    mxInv] //T
              ]  //T//mf
              
            ];
            x = .;
            Print["mx"<>StringJoin@(ToString/@(Total/@mx))<>" = ",mx,"; (* normevecDir:",normevecDir," lambda:",lambda," ratio:",ratio," CharacteristicPolynomial: ",CharacteristicPolynomial[mx, x] ," factorized CharacteristicPolynomial: ", CharacteristicPolynomial[mx, x]//Factor," *)"];
            Print[">>>> ratio:",ratio];
            Print[">>>>>>>>>>>>>>>>>>>>>> rank:",(*seedmx//mf,*)MatrixRank[seedmx]];
            Print[">>>>>>>>>>>>>>>>>>>>>> evecInv:",evecInv];
            Print["dir:",(*{evecDir/Max[evecDir]}//T//mf,*)mx//mf," -> Total",Transpose[{Total/@mx}]//mf,(*{Total/@mx//Min,Total/@mx//Max},*)
                    " inv:",Transpose[mx]//mf," -> Total",Transpose[{Total/@Transpose[mx]}]//mf];
            Print["evec:",evecDir,"  Union[[evec}:",Union[evecDir]," -> ",Length[Union[evecDir]]];
            Print[" MatrixRank[mx] == Length[mx] ---> ", MatrixRank[mx] == Length[mx]," ",{MatrixRank[mx],Length[mx],Length[Union[evecDir]]}];
            Print["basicSeqDir + totalLength :"];
            Print[Join[basicSeqDir,{Table["-",{seqSize}]},{totalLength}]//mf];
            Print["basicSeqInv  + totalLength :"];
            Print[Join[basicSeqInv,{Table["-",{seqSize}]},{basicSeqInv // Total}]//mf];
            Print["pow:",mf /@ Table[{{i},{mf@MatrixPower[mx,i]},{mf@T[{Total/@MatrixPower[mx,i]}]}},{i,1,10}] ];
            {(*niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]] ]*)
                            MatrixPlot[mx, Mesh -> True, FrameTicks -> Range[Length[mx]]] (* or ArrayPlot *)
            ,ListPlot[{evecDir, evecInv}//T//Sort,Joined->False,PlotRange->{{Min[evec],Max[evec]},{Min[evec],Max[evec]}}]
            ,ListPlot[{evecDir, evecInv}//T//Sort,Joined->False,PlotRange->{{0,Max[evec]},{0,Max[evec]}}]} //Print;
        ]; (* If[ showDBG, *)
        orderDir = orderInv = Table[{},{orderTabLength}];
        If[ buildRandomOrderTabFlag,
            buildRandomOrderTab[showDBG];
            buildBasicSeqCumul[showDBG];
        ];
    ] (* init *)
    
(*----------------------------------- 1d routines -----------------------------------*)
        (*mx = {{1,1,1,1},{1,1,0,1},{1,0,1,0},{1,1,0,0}};
        orderDir = {{{1,3,2,4},{1,4,2},{1,3},{1,2}}};
        orderInv = {{{1,3,2,4},{1,2,4},{1,3},{1,2}}};
        mx = {{1,1,1,1,1,1,1,1},{1,0,0,1,0,0,1,1},{1,0,1,0,1,1,1,1},{1,1,0,1,1,0,0,0},{1,0,1,1,0,1,1,1},{1,0,1,0,1,0,1,0},{1,1,1,0,1,1,1,1},{1,1,1,0,1,0,1,0}};
                (* CharacteristicPolynomial: -4 x-16 x^2+2 x^3+38 x^4+13 x^5-14 x^6-4 x^7+x^8 *)

            mx = {{1,1,1,1,1,1,1,1},{1,1,1,1,0,1,1,1},{1,1,0,1,1,1,0,1},{1,1,1,1,1,1,1,0},{1,1,0,1,0,1,1,1},{1,1,1,0,0,1,1,1},{1,0,0,0,1,1,1,1},{1,0,1,1,1,0,1,0}};
            orderDir = {{{1,6,3,5,7,2,8,4},{1,7,6,4,2,3,8},{1,6,4,8,5,2},{1,5,6,3,4,7,2},{1,2,7,8,4,6},{1,2,8,7,3,6},{1,8,7,6,5},{1,5,3,4,7}}};
            orderInv = {{{1,6,4,2,5,7,8,3},{1,3,2,5,4,6},{1,2,8,4,6},{1,4,8,2,5,3},{1,4,3,7,8},{1,3,5,2,7,6,4},{1,4,6,2,7,8,5},{1,7,6,3,2,5}}};*)
        (* my family in matrices_myFamily_sz1-64.dat *)
        (*mx = {{0, 1, 1}, {1, 0, 0}, {0, 1, 0}};
        mx = {{1,0,0,0,1},{1,0,0,0,0},{0,1,0,0,0},{0,0,1,0,0},{0,0,0,1,0}};
        mx = {{1,0,0,0,0,1},{1,0,0,0,0,0},{0,1,0,0,0,0},{0,0,1,0,0,0},{0,0,0,1,0,0},{0,0,0,0,1,0}};
        mx = {{1,0,0,0,0,0,1},{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0}};
        mx = {{1,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0},{0,0,1,0,0,0,0,0},{0,0,0,1,0,0,0,0},{0,0,0,0,1,0,0,0},{0,0,0,0,0,1,0,0},{0,0,0,0,0,0,1,0}};
        mx = {{1,0,0,1},{1,0,0,0},{0,1,0,0},{0,0,1,0}};*)
            
        (*mx = mkAALDSmx[8,1201];*)
        
        (*mx = getMyFamilyNew[sz];*)

(*getAALDS1dTilesGL[tiles_]:=Module[{gl,h = .02, col},
    gl = {};
    Table[
        {fcode,{start,stop}} = tiles[[i]];
        type = Last@fcode;
        col = getLightColorSolid[type];
        center = (start+stop)/2;
        AppendTo[gl,{Opacity[.5],
            {col,Rectangle[{start,-h},{stop,h}]},Black,Line[{{start,-h},{start,h},{stop,h},{stop,-h},{start,-h}}]
            ,Text[getIntValueInv@(Reverse@fcode) (*{getIntValueDir@fcode, getIntValueInv@(Reverse@fcode)}*),{center,0},{0,-1}],Text[fcode ,{center,0},{0,1}]
        }]l
    ,{i,Length[tiles]}];
    gl
] (* getAALDS1dTilesGL *)
*)


AALDS1dSubdivideTileRandom[tile_] :=
    Module[ {fcode,start,stop,lastSybbol,newSymbols,newLengths,newLengthsCumuls,starts,ends},
        frandom :=
            RandomSample; (* RandomSample or randomSampleButFirst *)
        {fcode,{start,stop}} = tile;
        lastSybbol = Last @ fcode;
        newSymbols = frandom @ productionRulesDir[[lastSybbol]];
        newLengths = evec[[newSymbols]] / eval^(Length[fcode]-1);
        newLengthsCumuls = Join[{0},Accumulate[newLengths] ];
        starts = Plus[#,start]& /@ Drop[newLengthsCumuls, -1];
        ends = Plus[#,start]& /@ Drop[newLengthsCumuls, 1];
        {(Append[fcode, #] & /@ newSymbols), {starts, ends} // T} // T
    ]

AALDS1dSubdivideTile[tile_] :=
    Module[ {fcode,start,stop,lastSybbol,newSymbols,newLengths,newLengthsCumuls,starts,ends},
        frandom :=
            Identity; (* RandomSample or randomSampleButFirst *)
        {fcode,{start,stop}} = tile;
        lastSybbol = Last @ fcode;
        newSymbols = frandom @ productionRulesDir[[lastSybbol]];
        newLengths = evec[[newSymbols]] / eval^(Length[fcode]-1);
        newLengthsCumuls = Join[{0},Accumulate[newLengths] ];
        starts = Plus[#,start]& /@ Drop[newLengthsCumuls, -1];
        ends = Plus[#,start]& /@ Drop[newLengthsCumuls, 1];
        {(Append[fcode, #] & /@ newSymbols), {starts, ends} // T} // T
    ]

getAALDS1dTilesGL[fcodes_] :=
    Module[ {gl,h = .02, col},
        gl = {};
        Table[
            {fcode,{start,stop}} = tiles[[i]];
            type = Last@fcode;
            col = getLightColorSolid[type];
            center = (start+stop)/2;
            AppendTo[gl,{Opacity[.5],
                {col,Rectangle[{start,-h},{stop,h}]},Black,Line[{{start,-h},{start,h},{stop,h},{stop,-h},{start,-h}}]
                ,Text[getIntValueInv@(Reverse@fcode) (*{getIntValueDir@fcode, getIntValueInv@(Reverse@fcode)}*),{center,0},{0,-1}],Text[fcode ,{center,0},{0,1}]
            }]
        ,{i,Length[tiles]}];
        gl
    ] (* getAALDS1dTilesGL *)


getAALDS1dGL[wordsDir_] :=
    Module[ {gl,h = .02, level, col, wordDir},
        level = Length[wordsDir[[1]] ] - 2;
        gl = {};
        wordsInv = (Reverse/@wordsDir );
        intValueDir = getIntValueDir/@wordsDir;
        fracValueDir = getFracValueDir/@wordsDir;
        intValueInv = getIntValueInv/@wordsInv;
        fracValueInv = getFracValueInv/@wordsInv;
        Table[
            wordDir = wordsDir[[i]];
            type = Last@wordDir;
            col = getLightColorSolid[type];
            start = fracValueDir[[i]];
            stop = start + evecDir[[type]] lambda^(-level);
            center = (start+stop)/2;
            AppendTo[gl,{Opacity[.5],
                {col,Rectangle[{start,-h},{stop,h}]},Black,Line[{{start,-h},{start,h},{stop,h},{stop,-h},{start,-h}}]
                ,Text[getIntValueInv@(Reverse@wordDir),{center,0},{0,-1}],Text[{{intValueDir[[i]],intValueInv[[i]]}}//T,{center,0},{0,1}]
            }]
        ,{i,Length[wordsDir]}];
        gl
    ] (* getAALDS1dGL *)

AALDS1dDemo[nlevels_:3,inmxsz_:4] :=
    Module[ {},
        mxsz = inmxsz;
        orderTabLength = 1;
        myRandomSampleDir = randomSampleButFirst;
        myRandomSampleInv = randomSampleButFirst;  (* RandomSample or randomSampleButFirst or Identity *)
        myRandomSampleDir = Identity;
        myRandomSampleInv = Identity;  (* RandomSample or randomSampleButFirst or Identity *)
        fouriertabsz =  64 1024;
        imagesize = {2 1024,Automatic};
        Switch[mxsz
            ,3,    labelDweRuKi = "mx321";
                   mx = mx321;
            ,4, labelDweRuKi = "mx4233";
                mx = mx4233;
            ,8, labelDweRuKi = "mx86665757";
                mx = mx85765667;
        ];
        Switch[mxsz
        ,4,
            init[mx,True, False];
            orderDir[[1]] = Table[Select[getRandomGoodPerms4[], MemberQ[productionRulesDir[[i]], #] &], {i,4}];
            orderInv[[1]] = productionRulesDir;
            buildBasicSeqCumul[True];
        ,_,
            init[mx,True, True];
        ];
        Print["orderDir:",mf@orderDir];
        Print["orderInv:",mf@orderInv];
        wordsDir = {{1}};
        (*tiles = { {{1},{0,1}} };*)
        Do[
            gl = getAALDS1dGL[wordsDir];
            Graphics[{gl}, ImageSize -> imagesize, AspectRatio->.05, PlotRange->{{-.01,1.01},Automatic}, Axes->False]//Print;
            (*tiles = Flatten[#, 2] &@{AALDS1dSubdivideTile /@ tiles};*)
            wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};        
        ,{ilevel,nlevels}];
    ] (* AALDS1dDemo *)


AALDS2dPOC[nlevels_:4,ntrials_:1,mxType_:1101,mxsz_:4,dbg_:True] :=
    Module[ {},
        dbgGraphics = False;
        orderTabLength = 1;
        myRandomSampleDir = myRandomSampleInv = Identity; (* randomSampleButFirst or Identity *)
        imagesize = {2 1024,Automatic};
        grid = {Yellow,Table[{Line[{{0,i},{12,i}}],Line[{{i,0},{i,12}}]},{i,0,12}],
            Cyan, Line[{{0,0},{12,0}}], Line[{{0,4},{12,4}}], Line[{{0,6},{12,6}}], Line[{{0,9},{12,9}}], Line[{{0,12},{12,12}}]
            , Line[{{0,0},{0,12}}], Line[{{4,0},{4,12}}], Line[{{6,0},{6,12}}], Line[{{9,0},{9,12}}], Line[{{12,0},{12,12}}] };
        mx = {{1,1,1,1,1},{1,1,0,0,1},{1,0,0,1,1},{1,0,1,1,1},{1,1,1,1,0}};
        mx = {{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1}};
        mx = {{1,1},{1,1}};
        mx = {{1,1,1},{1,1,0},{1,0,0}};
        mx = {
            {1,1,1,1,1,1,1,1,1},
            {1,1,0,1,1,0,1,1,0},
            {1,0,0,1,0,0,1,0,0},
            {1,1,1,1,1,1,0,0,0},
            {1,1,0,1,1,0,0,0,0},
            {1,0,0,1,0,0,0,0,0},
            {1,1,1,0,0,0,0,0,0},
            {1,1,0,0,0,0,0,0,0},
            {1,0,0,0,0,0,0,0,0}
            };
        init[mx,dbg,True];
        buildBasicSeqCumul[True];
        slen = basicSeqDir[[1,nlevels]];
        fouriertabsz =   8 slen;
        fsum = Table[0,{fouriertabsz}];
        wordsDir = Partition[Range[mxSz],1];
        wordsDir = {{1}};
                (*wordsInv = (Reverse/@wordsDir );*)
        gtab = Table[
            wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};
            wordsInv = (*PadRight[#,16,1]& /@*) (Reverse/@wordsDir );
            If[ dbgGraphics,
                {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
                ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{Min[evec],Max[evec]},{Min[evec],Max[evec]}}]
                ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{0,Max[evec]},{0,Max[evec]}}]}//Print;
            ];
            If[ dbg,
                valuesDir = getIntValueDir/@ wordsDir;
                valuesInv = getIntValueInv/@ wordsInv;
                valuesFracDir = getFracValueDir/@wordsDir;
                valuesFracInv = getFracValueInv/@wordsInv;
                Print["--------------------------------",{ilevel,Length[wordsDir]}];
                Print[MatrixForm[wordsDir],MatrixForm[valuesDir],MatrixForm[getIntValueTabDir/@wordsDir],MatrixForm[valuesDir//Sort]
                    ,"f", MatrixForm[valuesFracDir],MatrixForm[getFracValueTabDir/@wordsDir]
                    ,"i", MatrixForm[wordsInv],MatrixForm[valuesInv//Union],MatrixForm[valuesInv],    MatrixForm[getIntValueTabInv/@wordsInv](*,MatrixForm[myPadRightInv/@wordsInv]*)
                    ,"fi",                                            MatrixForm[valuesFracInv],MatrixForm[getFracValueTabInv/@wordsInv]
                ];
                Print["valuesDir, valuesFracInv"];
                {valuesInv, valuesFracDir}//T//Sort//T//mf//Print;
            ];
                    (*Print["========================" > ilevel,"/",nlevels -> mf[{wordsDir}] -> {Length[wordsDir],Length[wordsDir]}];*)
            If[ dbg,
                getAALDS1dGL @ wordsDir
            ]
        ,{ilevel,nlevels}];
        xvals = getFracValueInv/@wordsInv;
        If[ dbg,
            valuesDir = getIntValueDir/@ wordsDir;
            valuesInv = getIntValueInv/@ wordsInv;
            pts = Sort[{valuesDir,valuesInv}//T];
            (Graphics[#, ImageSize -> imagesize, AspectRatio->.05, PlotRange->{{-.01,1.01},Automatic}, Axes->False]& /@ gtab)//Print;
        (*Graphics[{grid,PointSize[.01],Point/@pts},PlotRange->All, ImageSize->{512,512}]//Print;*)
                ];
(*Abort[]*);
        mx = {{1,1,1,1},{1,0,0,1},{1,0,1,1},{1,1,1,0}};
        mx = {{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}};
        mx = {{1,1,1},{1,1,1},{1,1,1}};
        mx = {{1,1},{1,0}};
        mx = {
            {1,1,1,1,1,1,1,1,1},
            {1,1,0,1,1,0,1,1,0},
            {1,0,0,1,0,0,1,0,0},
            {1,1,1,1,1,1,0,0,0},
            {1,1,0,1,1,0,0,0,0},
            {1,0,0,1,0,0,0,0,0},
            {1,1,1,0,0,0,0,0,0},
            {1,1,0,0,0,0,0,0,0},
            {1,0,0,0,0,0,0,0,0}
            };
        init[mx,dbg,True];
        orderDir = {{{1,2,3,4,5,6,7,8,9},{1,2,4,5,7,8},{1,4,7},{1,2,3,4,5,6},{1,2,4,5},{1,4},{1,2,3},{1,2},{1}}};
        orderInv = {{{1,2,3,4,5,6,7,8,9},{1,2,4,5,7,8},{1,4,7},{1,2,3,4,5,6},{1,2,4,5},{1,4},{1,2,3},{1,2},{1}}};
        orderDir = {{{1,2,3,4,5,6,7,8,9},{1,2,4,5,7,8},{1,4,7},{1,2,3,4,5,6},{1,2,4,5},{1,4},{1,2,3},{1,2},{1}}};
        orderInv = {{{1,4,7,2,5,8,3,6,9},{1,4,7,2,5,8},{1,4,7},{1,4,2,5,3,7},{1,4,2,5},{1,4},{1,2,3},{1,2},{1}}};
        buildBasicSeqCumul[True];
        slen = basicSeqDir[[1,nlevels]];
        fouriertabsz =   8 slen;
        fsum = Table[0,{fouriertabsz}];
        wordsDir = Partition[Range[mxSz],1];
        wordsDir = {{1}};
        wordsInv = (Reverse/@wordsDir );
        gtab = Table[
            wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};
            wordsInv = (*PadRight[#,16,1]& /@*) (Reverse/@wordsDir );
            If[ dbgGraphics,
                {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
                ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{Min[evec],Max[evec]},{Min[evec],Max[evec]}}]
                ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{0,Max[evec]},{0,Max[evec]}}]}//Print;
            ];
            If[ dbg,
                valuesDir = getIntValueDir/@ wordsDir;
                valuesInv = getIntValueInv/@ wordsInv;
                valuesFracDir = getFracValueDir/@wordsDir;
                valuesFracInv = getFracValueInv/@wordsInv;
                Print["--------------------------------",{ilevel,Length[wordsDir]}];
                Print[MatrixForm[wordsDir],MatrixForm[valuesDir],MatrixForm[getIntValueTabDir/@wordsDir],MatrixForm[valuesDir//Sort]
                    ,"f", MatrixForm[valuesFracDir],MatrixForm[getFracValueTabDir/@wordsDir]
                    ,"i", MatrixForm[wordsInv],MatrixForm[valuesInv//Union],MatrixForm[valuesInv],    MatrixForm[getIntValueTabInv/@wordsInv](*,MatrixForm[myPadRightInv/@wordsInv]*)
                    ,"fi",                                            MatrixForm[valuesFracInv],MatrixForm[getFracValueTabInv/@wordsInv]
                ];
                Print["valuesDir, valuesFracInv"];
                {valuesInv, valuesFracDir}//T//Sort//T//mf//Print;
            ];
                    (*Print["========================" > ilevel,"/",nlevels -> mf[{wordsDir}] -> {Length[wordsDir],Length[wordsDir]}];*)
            If[ dbg,
                getAALDS1dGL @ wordsDir
            ]
        ,{ilevel,nlevels}];
        yvals = getFracValueInv/@wordsInv;
        If[ dbg,
            valuesDir = getIntValueDir/@ wordsDir;
            valuesInv = getIntValueInv/@ wordsInv;
            pts = Sort[{valuesDir,valuesInv}//T];
            (Graphics[#, ImageSize -> imagesize, AspectRatio->.05, PlotRange->{{-.01,1.01},Automatic}, Axes->False]& /@ gtab)//Print;
        (*Graphics[{grid,PointSize[.01],Point/@pts},PlotRange->All, ImageSize->{512,512}]//Print;*)
                ];
        len = Min[xvals // Length, yvals // Length];
        xyvals = {Take[xvals,len], Take[yvals,len]}//T//Sort;
        Graphics[{PointSize[.1/nlevels/4],Point/@xyvals},PlotRange->{{0,1},{0,1}}, ImageSize->{512,512}2, Frame->True,PlotLabel->{nlevels,Length[xyvals]}]//Print
    ] (* AALDS2dPOC *)


AALDS2dSameBasisPermuts[nlevels_:2,ntrials_:1,mxType_:1101,mxsz_:4,dbg_:True] :=
    Module[ {},
        dbgGraphics = False;
        imagesize = {2 1024,Automatic};
        mx = {{1,1,1,1},{1,0,0,1},{1,0,1,1},{1,1,1,0}};
        ttab = Tuples[{Permutations[{1, 2, 3, 4}], Permutations[{1, 4}], Permutations[{1, 3, 4}], Permutations[{1, 2, 3}]}];
        grid = {Yellow,Table[{Line[{{0,i},{12,i}}],Line[{{i,0},{i,12}}]},{i,0,12}],
            Cyan, Line[{{0,0},{12,0}}], Line[{{0,4},{12,4}}], Line[{{0,6},{12,6}}], Line[{{0,9},{12,9}}], Line[{{0,12},{12,12}}]
            , Line[{{0,0},{0,12}}], Line[{{4,0},{4,12}}], Line[{{6,0},{6,12}}], Line[{{9,0},{9,12}}], Line[{{12,0},{12,12}}] };
        myRandomSampleDir = myRandomSampleInv = Identity;
        init[mx,dbg,True];
        Do[
            Print[iy];
            (*Parallelize @ *)
            Table[
            (*Print[{ix,iy}];*)
            xorderInv = orderInv[[1]] = ttab[[ix]];
            buildBasicSeqCumul[True];
            slen = basicSeqDir[[1,nlevels]];
            fouriertabsz =   8 slen;
            fsum = Table[0,{fouriertabsz}];
            wordsDir = Partition[Range[mxSz],1];
            wordsDir = {{1}};
            wordsInv = (Reverse/@wordsDir );
            gtab = Table[
                If[ dbgGraphics,
                    {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
                    ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{Min[evec],Max[evec]},{Min[evec],Max[evec]}}]
                    ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{0,Max[evec]},{0,Max[evec]}}]}//Print;
                ];
                If[ dbg,
                    valuesDir = getIntValueDir/@ wordsDir;
                    valuesInv = getIntValueInv/@ wordsInv;
                    valuesFracDir = getFracValueDir/@wordsDir;
                    valuesFracInv = getFracValueInv/@wordsInv;
                    Print["--------------------------------",{ilevel,Length[wordsDir]}];
                    Print[MatrixForm[wordsDir],MatrixForm[valuesDir],MatrixForm[getIntValueTabDir/@wordsDir],MatrixForm[valuesDir//Sort]
                        ,"f", MatrixForm[valuesFracDir],MatrixForm[getFracValueTabDir/@wordsDir]
                        ,"i", MatrixForm[wordsInv],MatrixForm[valuesInv//Union],MatrixForm[valuesInv],    MatrixForm[getIntValueTabInv/@wordsInv](*,MatrixForm[myPadRightInv/@wordsInv]*)
                        ,"fi",                                            MatrixForm[valuesFracInv],MatrixForm[getFracValueTabInv/@wordsInv]
                    ];
                    Print["valuesDir, valuesFracInv"];
                    {valuesInv, valuesFracDir}//T//Sort//T//mf//Print;
                ];
                wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};
                wordsInv = (*PadRight[#,16,1]& /@*) (Reverse/@wordsDir );
                    (*Print["========================" > ilevel,"/",nlevels -> mf[{wordsDir}] -> {Length[wordsDir],Length[wordsDir]}];*)
                getAALDS1dGL @ wordsDir
            ,{ilevel,nlevels}];
            valuesDir = getIntValueDir/@ wordsDir;
            valuesInv = getIntValueInv/@ wordsInv;
            pts = Sort[{valuesDir,valuesInv}//T];
            xvals = Last /@ pts;
            If[ dbg,
                (Graphics[#, ImageSize -> imagesize, AspectRatio->.05, PlotRange->{{-.01,1.01},Automatic}, Axes->False]& /@ gtab)//Print;
                Graphics[{grid,PointSize[.01],Point/@pts},PlotRange->All, ImageSize->{512,512}]//Print;
            ];
            yorderInv = orderInv[[1]] = ttab[[iy]];
            buildBasicSeqCumul[True];
            slen = basicSeqDir[[1,nlevels]];
            fouriertabsz =   8 slen;
            fsum = Table[0,{fouriertabsz}];
            wordsDir = Partition[Range[mxSz],1];
            wordsDir = {{1}};
            wordsInv = (Reverse/@wordsDir );
            gtab = Table[
                If[ dbgGraphics,
                    {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
                    ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{Min[evec],Max[evec]},{Min[evec],Max[evec]}}]
                    ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{0,Max[evec]},{0,Max[evec]}}]}//Print;
                ];
                If[ dbg,
                    valuesDir = getIntValueDir/@ wordsDir;
                    valuesInv = getIntValueInv/@ wordsInv;
                    valuesFracDir = getFracValueDir/@wordsDir;
                    valuesFracInv = getFracValueInv/@wordsInv;
                    Print["--------------------------------",{ilevel,Length[wordsDir]}];
                    Print[MatrixForm[wordsDir],MatrixForm[valuesDir],MatrixForm[getIntValueTabDir/@wordsDir],MatrixForm[valuesDir//Sort]
                        ,"f", MatrixForm[valuesFracDir],MatrixForm[getFracValueTabDir/@wordsDir]
                        ,"i", MatrixForm[wordsInv],MatrixForm[valuesInv//Union],MatrixForm[valuesInv],    MatrixForm[getIntValueTabInv/@wordsInv](*,MatrixForm[myPadRightInv/@wordsInv]*)
                        ,"fi",                                            MatrixForm[valuesFracInv],MatrixForm[getFracValueTabInv/@wordsInv]
                    ];
                    Print["valuesDir, valuesFracInv"];
                    {valuesInv, valuesFracDir}//T//Sort//T//mf//Print;
                ];
                wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};
                wordsInv = (*PadRight[#,16,1]& /@*) (Reverse/@wordsDir );
                    (*Print["========================" > ilevel,"/",nlevels -> mf[{wordsDir}] -> {Length[wordsDir],Length[wordsDir]}];*)
                getAALDS1dGL @ wordsDir
            ,{ilevel,nlevels}];
            valuesDir = getIntValueDir/@ wordsDir;
            valuesInv = getIntValueInv/@ wordsInv;
            pts = Sort[{valuesDir,valuesInv}//T];
            yvals = Last /@ pts;
            If[ dbg,
                (Graphics[#, ImageSize -> imagesize, AspectRatio->.05, PlotRange->{{-.01,1.01},Automatic}, Axes->False]& /@ gtab)//Print;
                Graphics[{grid,PointSize[.01],Point/@pts},PlotRange->All, ImageSize->{512,512}]//Print;
            ];
            xyvals = {xvals,yvals}//T//Sort;
            test = Sort[myMod /@ (Last /@ xyvals[[;;4]])] == {0,1,2,3};
            If[ test,
                Print[">>>>>>>>>>>>>>>>>>>>>>>>>" -> {xorderInv,yorderInv}];
                Graphics[{grid,PointSize[.01],Point/@xyvals},PlotRange->All, ImageSize->{512,512}/2]//Print
            ]
            ,{ix,Length[ttab]}]
        ,{iy,Length[ttab]}];
    ] (* AALDS2dSameBasisPermuts *)

myMod[i_] :=
    Which[0 <= i < 4, 0, 4 <= i < 6, 1, 6 <= i < 9, 2, 9 <= i < 12, 3] 

AALDS1dFourierTest[nlevels_:4,ntrials_:10,mxType_:1101,mxsz_:64,dbg_:False] :=
    Module[ {},
        dbgGraphics = False;
        (*mx = {{1,1,1},{1,1,0},{1,0,0}};*) (* normevec:{0.736976,0.591009,0.327985} lambda:2.24698 ratio:2.24698 CharacteristicPolynomial: -1+x+2 x^2-x^3 factorized CharacteristicPolynomial: -1+x+2 x^2-x^3 *)
         (* analytical eval: (2 + 7^(2/3)/((1 + 3*Sqrt[3])/2)^(1/3) + ((7*(1 + 3*Sqrt[3]))/2)^(1/3))/3 *)

        (*mx = {{1,1,1,1},{1,1,0,1},{1,0,1,0},{1,1,0,0}};*) (* normevec:{0.655496,0.542155,0.33507,0.405119} lambda:2.9563 ratio:1.9563 CharacteristicPolynomial: 1+3 x-x^2-3 x^3+x^4 factorized CharacteristicPolynomial: 1+3 x-x^2-3 x^3+x^4 *)
         (* 
            analytical eval: (3 + Sqrt[5] + Sqrt[6*(5 + Sqrt[5])])/4
            analyticalevec: {2 - (3*(3 + Sqrt[5] + Sqrt[6*(5 + Sqrt[5])])^2)/16 + (3 + Sqrt[5] + Sqrt[6*(5 + Sqrt[5])])^3/64, -2 + (3 + Sqrt[5] + Sqrt[6*(5 + Sqrt[5])])/4 + (3*(3 + Sqrt[5] + Sqrt[6*(5 + Sqrt[5])])^2)/16 - (3 + Sqrt[5] + Sqrt[6*(5 + Sqrt[5])])^3/64, -2 + (-3 - Sqrt[5] - Sqrt[6*(5 + Sqrt[5])])/2 + (3 + Sqrt[5] + Sqrt[6*(5 + Sqrt[5])])^2/16, 1}         
            normalized normalized; {(1 + Sqrt[5])/Sqrt[30 - 2 Sqrt[75 - 30 Sqrt[5]]], 1/2 Sqrt[1 + 1/Sqrt[5] - 1/5 Sqrt[2/3 (5 - Sqrt[5])]], 
                     1/2 Sqrt[1 - 1/Sqrt[5] - 1/5 Sqrt[2/3 (25 - 11 Sqrt[5])]], 
                     2/Sqrt[30 - 2 Sqrt[75 - 30 Sqrt[5]]]}
         *)
        
        (*Parallelize @*)
        Do[
        (*mx = {{1,1,1,1},{1,1,0,1},{1,0,1,0},{1,1,0,0}};
        mx = {{1,1,1,1,1,1,1,1},{1,0,0,1,0,0,1,1},{1,0,1,0,1,1,1,1},{1,1,0,1,1,0,0,0},{1,0,1,1,0,1,1,1},{1,0,1,0,1,0,1,0},{1,1,1,0,1,1,1,1},{1,1,1,0,1,0,1,0}};
        (* CharacteristicPolynomial: -4 x-16 x^2+2 x^3+38 x^4+13 x^5-14 x^6-4 x^7+x^8 *)
        (*mx = {{1,1,1,1,1,1,1,1},{1,1,1,1,0,1,1,1},{1,1,0,1,1,1,0,1},{1,1,1,1,1,1,1,0},{1,1,0,1,0,1,1,1},{1,1,1,0,0,1,1,1},{1,0,0,0,1,1,1,1},{1,0,1,1,1,0,1,0}}*);
        (*mx = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1},{1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1},{1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1},{1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,0,1},{1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,0,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1},{1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},{1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1},{1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1},{1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,1,0,0,1,1,0,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1},{1,1,0,1,1,1,0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1},{1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,0,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1},{1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1},{1,1,1,1,1,0,1,0,1,1,1,0,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,1,0,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1},{1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0},{1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,0,1,1,0,1,1,1,1,0,1,1},{1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1},{1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1},{1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0},{1,1,0,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,0,0,1},{1,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,1,1,0,0,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,1,1,0,1,1,0,1},{1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1},{1,0,1,1,0,1,1,1,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1},{1,1,0,1,0,1,1,0,0,1,0,0,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0},{1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,0,1,0,1,0,0,0,1,1,0,1,1,0,0,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,0,1,0,0,1,0,1},{1,1,0,1,1,1,0,1,1,1,0,0,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0},{1,0,1,1,0,1,1,0,1,1,1,0,0,0,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1},{1,0,1,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,0,0,1,0,1,1,1,0,1,1,1,1,0,0,1,0,0,1,1,1,1,0,0,0,1,1,0,1,0,1,0,1,0,1,1,0,0,1},{1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,1,1,1,1,1,1,0,1,0,0,1,0,0,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,0,0,0,0},{1,0,1,0,1,1,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,0,0,1,0,1,1,1,0,1,1,1,1,0,1,0,0,1,0,0,1,0,1},{1,1,1,1,0,0,1,1,1,1,1,1,0,1,0,0,1,0,1,1,0,1,0,1,0,1,1,1,0,0,1,1,0,1,1,0,1,0,0,1,1,0,1,1,1,1,1,0,0,1,1,0,1,0,1,1,1,1,0,1,1,1,0,1},{1,1,1,1,1,0,1,0,0,0,0,1,1,1,1,1,0,1,0,0,1,0,1,1,1,0,1,0,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0},{1,0,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1},{1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,0,0,1,1},{1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,1,0,0,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,0,1,0,0,1,0,0,1,1,1,1,0,0,0,1,1,1,0},{1,0,1,0,1,1,1,0,1,0,0,0,1,0,0,1,0,1,1,1,0,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,0,0,1,0,0,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1},{1,1,0,1,0,1,0,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,1,0,0,1,1,0,1,0,0,1,1,1,0,1,0,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,0},{1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,1,0,1,1,0,0,0,1,0,0,0,1,0,1,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1},{1,1,1,1,0,1,0,0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,1,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,1,1,1,1,0,1,0,1,0,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,0,1,0,1,0,1,0,1},{1,0,0,1,1,1,0,1,1,1,0,1,0,0,1,1,1,0,1,0,1,0,0,0,1,0,1,1,1,0,1,1,0,1,1,1,1,0,0,0,0,1,1,0,1,0,0,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,1},{1,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,0,1,1,0,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,0,1,1,1},{1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,1},{1,0,0,1,0,0,1,1,0,0,0,1,1,0,0,0,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,0,1,0,0,1,1,1,0,0,1,0,1,0,1},{1,1,0,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,1,0,0,1,1,0,1,1,1,0,1,0,0,0,1,1,0,1,0,1,1,0,0,0,1,0,1,0,1,1},{1,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,1,1,0,1,1,0,0,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,0},{1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,1,0,0,1,0,1,0,0,1,0},{1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,1,0,0,1,1,0,0,0,1,0,1,1,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,1,0,1,0,0,1},{1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,0,1,0,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,0,1,0,0,0,0,1,1,0,0,1,0,1}}*);
        fname = "matrices/mx_64x64_medium/mx_64."<>ToString[NumberForm[imx, 2, NumberPadding -> "0"]]<>".dat";
        fname = "matrices/mx_64x64_lenear_decrease/mx_64."<>ToString[NumberForm[imx, 2, NumberPadding -> "0"]]<>".dat";            
        mx = Import[fname];
        Print[itrial,"============= Reading ",fname -> Dimensions[mx]];*)
        (*mx = Get["matrices/omegaSymmMatrices8x8_minones4.dat"][[10]];*)
        
        mx = mkAALDSmx[mxsz,mxType];
            (*Get["matrices/omegaSymmMatrices8x8_minones4.dat"];*)
        init[mx,dbg,True];
        slen = basicSeqDir[[1,nlevels]];
        fouriertabsz =   8 slen;
        Print["mx of sz=",mxsz," seq len=",slen," fouriertabsz=",fouriertabsz];
        {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
        ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{Min[evecDir],Max[evecDir]},{Min[evecInv],Max[evecInv]}}]
        ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{0,Max[evecDir]},{0,Max[evecInv]}},PlotLabel->imx]}//Print;
        fsum = Table[0,{fouriertabsz}];
        Do[
            init[mx,dbg,True];
            If[ dbgGraphics,
                {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
                ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{Min[evec],Max[evec]},{Min[evec],Max[evec]}}]
                ,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{0,Max[evec]},{0,Max[evec]}}]}//Print;
            ];
            wordsDir = {{1}};
            wordsInv = (Reverse/@wordsDir );
            Do[
                (*wd = fwd /@ wordsDir;
                wi = fwi /@ wordsInv;*)
                
                wd = wordsDir;
                wi = wordsInv;
                If[ dbg,
                    valuesDir = getIntValueDir/@ wd;
                    valuesInv = getIntValueInv/@ wi;
                    valuesFracDir = getFracValueDir/@wd;
                    valuesFracInv = getFracValueInv/@wi;
                    Print["--------------------------------",{ilevel,Length[wd]}];
                    Print[MatrixForm[wd],MatrixForm[valuesDir],MatrixForm[getIntValueTabDir/@wd],MatrixForm[valuesDir//Sort]
                        ,"f", MatrixForm[valuesFracDir],MatrixForm[getFracValueTabDir/@wd]
                        ,"i", MatrixForm[wi],MatrixForm[valuesInv//Union],MatrixForm[valuesInv],    MatrixForm[getIntValueTabInv/@wi](*,MatrixForm[myPadRightInv/@wi]*)
                        ,"fi",                                            MatrixForm[valuesFracInv],MatrixForm[getFracValueTabInv/@wi]
                    ];
                    Print["valuesDir, valuesFracInv"];
                    {valuesInv, valuesFracDir}//T//Sort//T//mf//Print;
                ];
                If[ ilevel!=nlevels,
                    wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};
                    wordsInv = (*PadRight[#,16,1]& /@*) (Reverse/@wordsDir );
                ];
                (*Print[ilevel,"/",nlevels -> {Length[wd],Length[wordsDir]}];*)
            ,{ilevel,nlevels}];
            Print[imx,"   ",itrial,"/",ntrials -> Length[wordsDir]];
            valuesFracDir = getFracValueDir/@wd;
            fsum += getFourier1D[Ceiling[eps + (fouriertabsz valuesFracDir)],fouriertabsz];
        
            (*If[dbgGraphics,
                ListPlot[(valuesDir)//Sort,PlotLabel->"valuesDir: ",Joined->True]//Print;
                ListPlot[(valuesInv)//Sort,PlotLabel->"valuesInv: ",Joined->True]//Print;
                ListPlot[(valuesFracDir)//Sort,PlotLabel->"valuesFracDir: ",Joined->True]//Print;
                ListPlot[(valuesFracInv)//Sort,PlotLabel->"valuesFracInv: ",Joined->True]//Print;
            ];*)
        
        ,{itrial,ntrials}];
        fsum = fsum / ntrials;
        fsum[[1]] = 0;
        ListPlot[fsum[[;;fouriertabsz/2]], Joined->True,PlotLabel->{imx,ntrials}, ImageSize -> { 2 600,Automatic},PlotRange->{0,1}]//Print;
        (*ListPlot[fsum[[;;10000]], Joined->True,PlotLabel->{imx,ntrials}, ImageSize -> { 2 600,Automatic},PlotRange->{0,1}]//Print;
        ListPlot[fsum[[;;1000]], Joined->True,PlotLabel->{imx,ntrials}, ImageSize -> { 2 600,Automatic},PlotRange->{0,1}]//Print;*)
        ,{imx,0, 0 7}]
    ] (* AALDS1dFourierTest *)


AALDS1dFourierTestRandomMake[nlevels_:4,ntrials_:100,mxType_:1602,mxsz_:16,k_:1/2,number_:1] :=
    Module[ {npow = 10},
        dbgGraphics = True;
        dbg = False;
        restab = Sort @ Table[
            mx = mkAALDSmx[mxsz,mxType,0,k];
            tab = T @ (Total /@ (Table[MatrixPower[mx, i], {i, npow}]));
            mxpow = MatrixPower[mx, npow];
            intevec = Total /@ mxpow;
            evec = N[intevec / Norm[intevec] ];
            evecdiff = Differences[Sort @ evec];
            {evecdiffmin,evecdiffmax} = {Min[evecdiff],Max[evecdiff]};
            {{evecdiffmax,evecdiffmin},mx}
        ,{ii,1}];
        mx = restab[[1,-1]];
        init[mx,dbg,True];
        Print[Factor[CharacteristicPolynomial[#, x] & @ mx]];
        slen = basicSeqDir[[1,nlevels]];
        fouriertabsz =   8 slen;
        Print["mx of sz=",mxsz," seq len=",slen," fouriertabsz=",fouriertabsz];
        {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
        ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{Min[evecDir],Max[evecDir]},{Min[evecInv],Max[evecInv]}}]
        ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{0,Max[evecDir]},{0,Max[evecInv]}},PlotLabel->imx]}//Print;
        fsum = Table[0,{fouriertabsz}];
        Do[
            init[mx,dbg,True];
                (*If[dbgGraphics,
                    {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
                    ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{Min[evecDir],Max[evecDir]},{Min[evecInv],Max[evecInv]}}]
                        ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{0,Max[evecDir]},{0,Max[evecInv]}},PlotLabel->imx]}//Print;
                ];*)
            tiles = { {{1},{0,1}} };
            Do[
                If[ ilevel!=nlevels,
                    tiles = Flatten[#, 2] &@{AALDS1dSubdivideTileRandom /@ tiles};
                ];
                    (*Print[ilevel,"/",nlevels -> {Length[wd],Length[wordsDir]}];*)
                ,{ilevel,nlevels}];
            Print[itrial,"/",ntrials -> Length[tiles]];
            valuesFracDir = First /@ (Last /@ tiles);
            fsum += getFourier1D[Ceiling[eps + (fouriertabsz valuesFracDir)],fouriertabsz];
        ,{itrial,ntrials}];
        fsum = fsum / ntrials;
        fsum[[1]] = 0;
        Put[mx,"tmp/mx_"<>ToString[mxsz]<>"_"<>ToString[mxType]<>"_"<>ToString[number]<>"_"<>".dat"];
        Put[fsum,"tmp/fsum_"<>ToString[mxsz]<>"_"<>ToString[mxType]<>"_"<>ToString[number]<>"_"<>".dat"];
        If[ dbgGraphics,
            ListPlot[fsum[[;;fouriertabsz/2]], Joined->True,PlotLabel->{imx,ntrials}, ImageSize -> { 2 600,Automatic},PlotRange->{0,1}]//Print;
        ];
    ] (* AALDS1dFourierTestRandomMake *)

AALDS1dFourierTestRandomVisualize[nlevels_:4,ntrials_:100,mxType_:1502,mxsz_:64] :=
    Module[ {},
        dbgGraphics = dbg = False;
        Do[
            fname1 = "tmp/mx_"<>ToString[mxsz]<>"_"<>ToString[mxType]<>"_"<>ToString[number]<>"_"<>".dat";
            fname2 = "tmp/fsum_"<>ToString[mxsz]<>"_"<>ToString[mxType]<>"_"<>ToString[number]<>"_"<>".dat";
            If[ FileExistsQ[fname1] && FileExistsQ[fname2],
                mx = Get[fname1];
                fsum = Get[fname2];
                init[mx,dbg,True];
                slen = basicSeqDir[[1,nlevels]];
                fouriertabsz =   8 slen;
                Print[fname1 -> "==================== ",number," mx of sz=",mxsz," seq len=",slen," fouriertabsz=",fouriertabsz];
                {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
                ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{Min[evecDir],Max[evecDir]},{Min[evecInv],Max[evecInv]}}]
                ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{0,Max[evecDir]},{0,Max[evecInv]}},PlotLabel->imx]}//Print;
                ListPlot[fsum[[;;fouriertabsz/2]], Joined->True,PlotLabel->{imx,ntrials}, ImageSize -> { 2 600,Automatic},PlotRange->{0,1}]//Print;
                Print[Factor[CharacteristicPolynomial[#, x] & @ mx]];
            ];
        ,{number, 8}];
    ] (* AALDS1dFourierTestRandom *)

AALDS1dFourierTestRandomCharacteristicPolynomial[nlevels_:4,ntrials_:100,mxType_:1502,mxsz_:64] :=
    Module[ {},
        dbgGraphics = dbg = False;
        mxtab = Table[
            fname1 = "matrices/mx_"<>ToString[mxsz]<>"_"<>ToString[mxType]<>"_"<>ToString[number]<>"_"<>".dat";
            fname2 = "matrices/fsum_"<>ToString[mxsz]<>"_"<>ToString[mxType]<>"_"<>ToString[number]<>"_"<>".dat";
            mx = Get[fname1];
            fsum = Get[fname2];
            init[mx,dbg,True];
            slen = basicSeqDir[[1,nlevels]];
            fouriertabsz =   8 slen;
            Print[fname1 -> "==================== ",number," mx of sz=",mxsz," seq len=",slen," fouriertabsz=",fouriertabsz];
            {niceRaster[1 - Reverse[mx], zoom -> Round[128/Length[mx]]]
            ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{Min[evecDir],Max[evecDir]},{Min[evecInv],Max[evecInv]}}]
            ,ListPlot[{evecDir,evecInv}//T//Sort,Joined->False,PlotRange->{{0,Max[evecDir]},{0,Max[evecInv]}},PlotLabel->imx]}//Print;
            ListPlot[fsum[[;;fouriertabsz/2]], Joined->True,PlotLabel->{imx,ntrials}, ImageSize -> { 2 600,Automatic},PlotRange->{0,1}]//Print;
            Print[Factor[CharacteristicPolynomial[#, x] & @ mx]];
            mx
        ,{number, 16}];
        chPolynomials = CharacteristicPolynomial[#, x] & /@ mxtab;
        tab = Table[Factor[ chPolynomials[[i]]/chPolynomials[[j]]],{i,16},{j,16}];
        Do[
            Print["====================",i];
            Print[
                {Range[16],tab[[i]]}//T // mf
            ];
        ,{i,16}];
    ] (* AALDS1dFourierTestRandomCharacteristicPolynomial *)


AALDSpoc2d[ntrials_:10] :=
    Module[ {},
        dbgGraphics = False;
        fouriertabsz = 1024;
        fsum = Table[0,{fouriertabsz},{fouriertabsz}];
        fname = "data/mx_64x64_0.10-0.15/mx_64."<>ToString[NumberForm[0, 2, NumberPadding -> "0"]]<>".dat";
        mx1 = Import[fname];
        fname = "data/mx_64x64_0.10-0.15/mx_64."<>ToString[NumberForm[1, 2, NumberPadding -> "0"]]<>".dat";
        mx2 = Import[fname];
        Print[itrial,"============= Reading ",fname -> Dimensions[mx2]];
        Do[
            init[mx1,dbg];
            wordsDir = {{1}};
            wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};
            wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};
            wordsInv = (Reverse/@wordsDir );
            Print["   ",itrial,"/",ntrials -> Length[wordsDir]];
            xvals = getFracValueInv/@wordsInv;
            init[mx2,dbg];
            wordsDir = {{1}};
            wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};
            wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir};
            wordsInv = (Reverse/@wordsDir );
            Print["   ",itrial,"/",ntrials -> Length[wordsDir]];
            yvals = getFracValueInv/@wordsInv;
            len = Min[Length[xvals], Length[yvals]];
            pts = {xvals[[;; len]], yvals[[;; len]]} // T;
            If[ itrial == 1,
                Graphics[Point /@ pts]//Print
            ];
            fsum += getFourier2D[Ceiling[(fouriertabsz pts)],fouriertabsz];
        ,{itrial,ntrials}];
        fsum[[1,1]] = 0;
        fsum = Reorg[fsum] / ntrials;
        ListDensityPlot[fsum, ImageSize -> {1024,1024}]//Print;
    ] (* AALDSpoc2d *)

mkAllSymmMatrices4x4[] :=
    Module[ {},
        npow = 20;
        tup = Tuples[{0, 1}, 6];
        len = Length[tup];
        res = {};
        count = 1;
        Do[
            t = tup[[i]];
            mx = Table[1,{4},{4}];
            mx[[2,2;;]] = mx[[2;;,2]] = t[[1;;3]];
            mx[[3,3;;]] = mx[[3;;,3]] = t[[4;;5]];
            mx[[4,4;;]] = mx[[4;;,4]] = t[[6;;]];
            mxpow = MatrixPower[mx, npow];
            intevec = Total /@ mxpow;
            If[ Length[Union[intevec]] == 4,
                AppendTo[res,mx];
                Print[{i,count}," adding ",mf@mx];
                init[mx,True,True];
                count++;
            ]
        ,{i,len}];
    (*Put[res,"matrices/omegaSymmMatrices4x4.dat"];*)
    ]

mkAllSymmMatrices8x8[ind_:50000000] :=
    Module[ {}, (* non-parallel version *)
        npow = 10;
        tup = Tuples[{0, 1}, 1+2+3+4+5+6+7];
        len = Length[tup];
        res4 = res5 = res6 = {};
        count = 1;
        {min,max} = {0,0.024158};
        {min,max} = {0.01,.04};
        {min,max} = {0.005,.05};
        {min,max} = {0.001,.1};
        ratiolimit = 1.6;
        from = ind;
        (*Parallelize @*)
        Do[
        If[ Mod[imx,1000000]==0,
            Print[imx,"/",len -> {min,max}];
        (*Put[res4,"matrices/omegaSymmMatrices8x8_minones4.dat"];*)
        ];
        t = tup[[imx]];
        mx = Table[1,{8},{8}];
        mx[[2,2;;]] = mx[[2;;,2]] = t[[1;;7]];
        mx[[3,3;;]] = mx[[3;;,3]] = t[[8;;13]];
        mx[[4,4;;]] = mx[[4;;,4]] = t[[14;;18]];
        mx[[5,5;;]] = mx[[5;;,5]] = t[[19;;22]];
        mx[[6,6;;]] = mx[[6;;,6]] = t[[23;;25]];
        mx[[7,7;;]] = mx[[7;;,7]] = t[[26;;27]];
        mx[[8,8;;]] = mx[[8;;,8]] = t[[28;;28]];
        If[ Min[Count[#, 1] & /@ mx] < 4,
            Continue[]
        ];
        mxpow = MatrixPower[mx, npow];
        intevec = Total /@ mxpow;
        If[ (Length[Union[intevec]] != 8),
            Continue[]
        ];
        evec = Sort @ N[intevec / Norm[intevec] ];
        evecdiff = Differences[evec];
        ratio = Max[intevec]/Min[intevec] // N;
        If[ Min[ListConvolve[{1, 1}, #] & /@ mx] == 0,
            Continue[]
        ];
        (*init[mx,True,True]*);
        (*Abort[];*)
        {evecdiffmin,evecdiffmax} = {Min[evecdiff],Max[evecdiff]};
        (*If[evecdiffmin > min,
            min = evecdiffmin;
            Print[fname ->imx,"/",len," min = ",min, {evecdiffmin,evecdiffmax} -> {min,max}];
        ];*)
        If[ evecdiffmax < max && evecdiffmin > min && ratio < ratiolimit,
            min = evecdiffmin;
            max = evecdiffmax;
            Print[fname -> imx,"/",len" max = ",max, {evecdiffmin,evecdiffmax} -> {min,max}];
            AppendTo[res4,mx];
            Print[Length[res4] -> imx,"/",len," adding ", count++];
            Put[res4,"matrices/omegaSymmMatrices8x8_minones4"<>pid<>".dat"];
        ];
        
        ,{imx,from,len,1}];
    ]


exploreSymmMatrices8x8[infname_] :=
    Module[ {},
        npow = 10;
        fname = "matrices/omegaSymmMatrices8x8_minones6.dat";
        fname = "matrices/omegaSymmMatrices8x8_minones5.dat";
        fname = "matrices/omegaSymmMatrices8x8_minones4.dat";
        fname = "matrices/omegaSymmMatrices8x8_minones4_pid8273_kid0.dat";
        fname = infname;
        mxset = Get[fname];
        Print["reading ",fname];
        count = 1;
        len = Length[mxset];
        {min,max} = {0,1};
        Do[
            mx = mxset[[imx]];
            If[ Mod[imx,100]==0,
                Print[imx,"/",len]
            ];
            If[ Min[ListConvolve[{1, 1}, #] & /@ mx] == 0,
                Continue[]
            ];
            tab = T @ (Total /@ (Table[MatrixPower[mx, i], {i, npow}]));
            mxpow = MatrixPower[mx, npow];
            intevec = Total /@ mxpow;
            evec = N[intevec / Norm[intevec] ];
            evecdiff = Differences[Sort @ evec];
            {evecdiffmin,evecdiffmax} = {Min[evecdiff],Max[evecdiff]};
            (*If[evecdiffmin > min,
                min = evecdiffmin;
                Print[fname ->imx,"/",len" min = ",min, {evecdiffmin,evecdiffmax} -> {min,max}];
            ];
            If[evecdiffmax < max,
                max = evecdiffmax;
                Print[fname -> imx,"/",len" max = ",max, {evecdiffmin,evecdiffmax} -> {min,max}];
            ];*)
            If[ Mod[imx,1]==0,
                Print[imx,"/",len,mf[Total/@mx], mf[T@{evec}]
                (*,niceRaster[1 - Reverse[mx], zoom -> 8]*)
                ,MatrixPlot[mx, Mesh -> True, FrameTicks -> Range[Length[mx]]]
                ,MatrixPlot[ListConvolve[{1,1},#]& /@ mx, Mesh -> True, FrameTicks -> Range[Length[mx]]]
                ,MatrixPlot[ListConvolve[{1,1,1},#]& /@ mx, Mesh -> True, FrameTicks -> Range[Length[mx]]]
                ,BarChart[Total/@mx]
                ,BarChart[Differences@(Total/@mx)]
                (*,ListPlot[{evec, evec}//T//Sort,Joined->False,PlotRange->{{Min[evec],Max[evec]},{Min[evec],Max[evec]}}]*)
                ,ListPlot[{evec, evec}//T//Sort,PlotLabel->{evecdiffmin,evecdiffmax},Joined->False,PlotRange->{{0,Max[evec]},{0,Max[evec]}}]
                ]
            ];
            (*Abort[];*)
            (*init[mx,True];*)
        ,{imx,len}];
    ]
    

mkAllMatrices4x4[] :=
    Module[ {},
        npow = 10;
        tup = Tuples[{0, 1}, 12];
        len = Length[tup];
        res = {};
        count = 1;
        Do[
            t = tup[[i]];
            mx = Table[1,{4},{4}];
            mx[[2,;;]] = t[[1;;4]];
            mx[[3,;;]] = t[[5;;8]];
            mx[[4,;;]] = t[[9;;12]];
            mxT = mx//T;
            mxpow = MatrixPower[mx, npow];
            mxTpow = MatrixPower[mxT, npow];
            intevec = Total /@ mxpow;
            intevecT = Total /@ mxTpow;
            If[ Length[Union[intevec]] == 4 && Length[Union[intevecT]] == 4,
                If[ MemberQ[mxT,{1,1,1,1}],
                    ratio = Max[intevec]/Min[intevec];
                    ratioT = Max[intevecT]/Min[intevecT];
                    If[ ratio > 5 || ratioT > 1.5,
                        Continue[]
                    ];
                    AppendTo[res,mx];
                    Print[{i,count}," adding ",mf@mx -> mf[mxpow] -> mf[mxTpow] -> ({intevec/Norm[intevec],intevecT/Norm[intevecT]}//N//T//mf) -> ({ratio,ratioT}//N//mf)];
                    count++;
                ];
            ]
        ,{i,len}];
    (*Put[res,"matrices/omegaSymmMatrices4x4.dat"];*)
    ] (* mkAllMatrices4x4 *)


FIBOshowAllPermutTrees[inlevel_:4, initfrom_:1] := (* level5 : no solution! *)
    Module[ {},
        {col1,col2,col3} = {Yellow,Red,Cyan(*Lighter@(Lighter@LightGray)*)};
        level = inlevel;
        found = {};
        If[ level != 6,
            permuttab = Tuples[ Table[Tuples[{0, 1}, Fibonacci[i]], {i,level}] ];
            Print["FIBOshowAllPermutTrees level=",level -> Length[permuttab]];
            codetab = Table[
                permuts = permuttab[[ipermut]];
                If[ Mod[ipermut,1000] == 0,
                    Print[{ipermut,permuttab//Length}(* -> mf[permuts]*) ]
                ];
                nodes = {{0}};
                Do[
                    zeroind = 1;
                    newnodes = Table[
                        node = nodes[[in]];
                        If[ Last[node] == 0,
                            permut = permuts[[il,zeroind]];
                            zeroind++
                        ];
                        subdivFIBOWithPermut[node,permut]
                    ,{in,Length[nodes]}];
                    nodes =  Flatten[#,1]& @ newnodes;
                ,{il,level}];
                codes = (Reverse/@(Drop[#, 1] & /@ nodes));
                order = FIBOF /@ codes;
                poslst = order2permut0toNminus1 @ order;
                codes
            ,{ipermut, Length[permuttab] }];(*Put[codetab,"data/FIBO_codetab_L"<>ToString[level]<>".dat"];
            Put[permuttab,"data/FIBO_permuttab_L"<>ToString[level]<>".dat"];*)
        ,(*ELSE*)
            codetab = Get["data/FIBO_codetab_L6.dat"];
            permuttab = Get["data/FIBO_permuttab_L6.dat"];
        ];
        Print["FIBOshowAllPermutTrees level=",level -> Length[permuttab] -> "done."];
        to = Length[codetab];
        fromx = If[ level == 6,
                    initfrom,
                    1
                ];
        Do[
            fromy = ix+1;
            Print[ix,"/",to];
            (*Parallelize @*)
            Do[
            If[ Mod[iy,100000] == 0,
                Print[{ix,iy}]
            ];
            codes = (*Sort @*) T[{codetab[[ix]],codetab[[iy]]}];
            If[ goodFIBOSetQ[codes],
                Print["found " -> {ix,iy} -> codes];
                AppendTo[found, codes];
                FIBOGrid = getFIBOGridNEW[level,codes,{ix,iy}];
                {FIBOGrid,getFIBOTreePermuts[permuttab[[ix]]],getFIBOTreePermuts[permuttab[[iy]]]}//Print;
            ];
            ,{iy,fromy,to,1}]
        ,{ix, fromx,to,1}];
    ] (* FIBOshowAllPermutTrees *)



goodFIBOSetQ[codes_] := (* old version *)
    Module[ {level,testTuples,dx,dy,xodes,ycodes},
        level = Length[First@(First@codes)];
        testTuples = {Range[0, level], level - Range[0, level]} // T;
        And @@ Table[
            {dx,dy} = testTuples[[i]];
            Length[Union[({xodes,ycodes} = #;
                          {Take[xodes,dx],Take[ycodes,dy]} & /@ #) & /@ codes]] == Fibonacci[level + 2]
        ,{i,Length[testTuples]}]
    ] (* goodFIBOSetQ *)

goodFIBOSetQHorizontalOrVerticalRectangles[codes_] := (* old version *)
    Module[ {level,testTuples,dx,dy,xodes,ycodes},
        level = Length[First@(First@codes)];
        testTuples = {Range[0, level], level - Range[0, level]} // T;
        And @@ Table[
            {dx,dy} = testTuples[[i]];
            Length[Union[({xodes,ycodes} = #;
                          {Take[xodes,dx],Take[ycodes,dy]} & /@ #) & /@ codes]] == Fibonacci[level + 1]
        ,{i,Length[testTuples]}]
    ] (* goodFIBOSetQ10 *)

goodFIBOSetQSmallSquares[codes_] := (* old version *)
    Module[ {level,testTuples,dx,dy,xodes,ycodes},
        level = Length[First@(First@codes)];
        testTuples = {Range[0, level], level - Range[0, level]} // T;
        And @@ Table[
            {dx,dy} = testTuples[[i]];
            Length[Union[({xodes,ycodes} = #;
                          {Take[xodes,dx],Take[ycodes,dy]} & /@ #) & /@ codes]] == Fibonacci[level]
        ,{i,Length[testTuples]}]
    ] (* goodFIBOSetQ10 *)

getFIBOGridNEW[nlevels_:2,codes_,{iix_,iiy_}] :=
    Module[ {gl,symbols, coltab ,deltax,deltay,curx,cury,numbers,lbl},
        coltab = {Yellow, Lighter@Cyan, Lighter@Blue, Black,Red};
        numbers = FIBOFxy /@ codes;
        symbols = {{0}};
        gl = {PointSize[1/1.6^(nlevels+1)], getFIBOGrid[nlevels]};
        Do[
             symbols = Flatten[#,1]& @ (subdivFIBO /@ symbols);
        ,{ilevel,nlevels}];
        cury = 0;
        Do[
            deltay = If[ Last[symbols[[iy]]]==0,
                         phi,
                         1
                     ]/phi^(nlevels+1);
            curx = 0;
            Do[
                deltax = If[ Last[symbols[[ix]]]==0,
                             phi,
                             1
                         ]/phi^(nlevels+1);
                If[ MemberQ[numbers,{ix-1,iy-1}],
                    lbl = FIBOF @ (Reverse @ (Drop[#, 1] & @ symbols[[ix]]) );
                    lbl =  Drop[#,1]& /@ {symbols[[ix]],symbols[[iy]]};
                    lbl = Position[codes,Drop[#,1]& /@{symbols[[ix]],symbols[[iy]]}][[1,1]];
                    AppendTo[gl, {
                        LightGray,Rectangle[{curx,cury},{curx+deltax,cury+deltay}]
                        ,Black, Point[{curx,cury}],Text[Style[ToString[lbl(*Position[numbers,{ix-1,iy-1}][[1,1]]-1*) ],Large],{curx,cury},{-1,-1}]
                         } ];
                ];
                curx += deltax;
            ,{ix,Length[symbols]}];
            cury += deltay;
        ,{iy,Length[symbols]}];
        Graphics[gl,Axes->False,PlotLabel->Style[ToString[{iix,iiy} -> T[numbers]], Tiny],ImageSize->If[ nlevels > 3,
                                                                                                         1.61^nlevels{32,32},
                                                                                                         {200,200}
                                                                                                     ] ]
    ] (* getFIBOGridNEW *)


tstFIBOPermutTrees[] :=
    Module[ {},
        {col1,col2,col3} = {Yellow,Red,Cyan(*Lighter@(Lighter@LightGray)*)};
        ntrials = 1000;
        Do[    
            permuttab = {
                {
                    Table[RandomChoice[{0,1}],{1}]
                    ,Table[RandomChoice[{0,1}],{1}]
                    ,Table[RandomChoice[{0,1}],{2}]
                    ,Table[RandomChoice[{0,1}],{3}]
                    (*,Table[RandomChoice[{0,1}],{5}]
                    ,Table[RandomChoice[{0,1}],{8}]*)
                }, {
                    Table[RandomChoice[{0,1}],{1}]
                    ,Table[RandomChoice[{0,1}],{1}]
                    ,Table[RandomChoice[{0,1}],{2}]
                    ,Table[RandomChoice[{0,1}],{3}]
                    (*,Table[RandomChoice[{0,1}],{5}]
                    ,Table[RandomChoice[{0,1}],{8}]*)
                }
            };
            level = Length[permuttab[[1]]];
            codetab = Table[
                permuts = permuttab[[ipermut]];
                If[ Mod[ipermut,1000] == 0,
                    Print[{ipermut,permuttab//Length}(* -> mf[permuts]*) ]
                ];
                nodes = {{0}};
                Do[
                    zeroind = 1;
                    newnodes = Table[
                        node = nodes[[in]];
                        If[ Last[node] == 0,
                            permut = permuts[[il,zeroind]];
                            zeroind++
                        ];
                        subdivFIBOWithPermut[node,permut]
                    ,{in,Length[nodes]}];
                    nodes =  Flatten[#,1]& @ newnodes;
                ,{il,level}];
                codes = (Reverse/@(Drop[#, 1] & /@ nodes));
                order = FIBOF /@ codes;
                poslst = order2permut0toNminus1 @ order;
                codes
            ,{ipermut, Length[permuttab] }];
            sel = {};
            Do[
                Do[
                    codes = (*Sort @*) T[{codetab[[ix]],codetab[[iy]]}];
                    If[ level >= 4,
                        first4pos = (Take[#, 4] & /@ #) & /@ codes
                    ];
                    AppendTo[sel, {codes,{ix,iy},getFIBOTreePermuts[permuttab[[ix]]],getFIBOTreePermuts[permuttab[[iy]]]} ];
                    (*AppendTo[sel, {codes,{ix,iy},getFIBOTreePermuts[permuttab[[ix]]],getFIBOTreePermuts[permuttab[[iy]]]} ];*)
                ,{iy,ix+1,Length[codetab]}]
            ,{ix, Length[codetab]}];
            Do[
                (*Print[{i,Length[sel]}];*)
                    codes = selxy = sel[[i,1]];
                    {ix,iy} = sel[[i,2]];
                    count = Length[Union[(Take[#, level/2] & /@ #) & /@ codes]];
                    goodQ = goodFIBOSetQ[codes];
                    If[ goodQ,
                        Print[i ->  (mf /@ selxy) -> count];
                        FIBOGrid = getFIBOGridNEW[level,selxy,sel[[i,2]]];
                        {FIBOGrid,sel[[i,-2]],sel[[i,-1]]}//Print;
                    ];
            ,{i, Length[sel]}];
        ,{itrial,ntrials}]
    ] (* tstFIBOPermutTrees *)


(*                    If[goodFIBOSetQ[codes],
                            Print["found " -> {ix,iy} -> codes];
                            FIBOGrid = getFIBOGridNEW[level,codes,{ix,iy}];
                             {FIBOGrid,getFIBOTreePermuts[permuttab[[ix]]],getFIBOTreePermuts[permuttab[[iy]]]}//Print;
                        
                    ];
*)
tstFIBORadInverse[inlevel_:2] :=
    Module[ {},
        {col1,col2,col3} = {Yellow,Red,Cyan(*Lighter@(Lighter@LightGray)*)};
        level = inlevel;
        permuttab = {{{0}, {1}, {1,0}, {1,1,0}},                                  {{1}, {0}, {0,1}, {0,0,1}}};
        permuttab = {{{0}, {1}, {0,0}, {0,1,1}},                                  {{1}, {0}, {1,1}, {1,0,0}}};
        permuttab = {{{0}, {1} },                                  {{1}, {0} }};
        permuttab = {{{0}, {1}, {1,0}, {0,1,1}, {0,1,0,0,0} }, {{1}, {0}, {0,1}, {1,0,1}, {1,1,0,1,1} }};
        permuttab = {{{0}, {0}, {0,0}, {0,0,0}, {0,0,0,0,0}, {0,0,0,0,0,0,0,0}}, {{0}, {0}, {0,0}, {0,0,0}, {0,1,0,1,0}, {0,1,1,1,0,1,0,0}}};
        permuttab = {
            {
                Table[RandomChoice[{0,1}],{1}]
                ,Table[RandomChoice[{0,1}],{1}]
                ,Table[RandomChoice[{0,1}],{2}]
                ,Table[RandomChoice[{0,1}],{3}]
                ,Table[RandomChoice[{0,1}],{5}]
                ,Table[RandomChoice[{0,1}],{8}]
            }, {
                Table[RandomChoice[{0,1}],{1}]
                ,Table[RandomChoice[{0,1}],{1}]
                ,Table[RandomChoice[{0,1}],{2}]
                ,Table[RandomChoice[{0,1}],{3}]
                ,Table[RandomChoice[{0,1}],{5}]
                ,Table[RandomChoice[{0,1}],{8}]
            }
        };
        level = Length[permuttab[[1]]];
        codetab = Table[
            permuts = permuttab[[ipermut]];
            If[ Mod[ipermut,1000] == 0,
                Print[{ipermut,permuttab//Length}(* -> mf[permuts]*) ]
            ];
            nodes = {{0}};
            Do[
                zeroind = 1;
                newnodes = Table[
                    node = nodes[[in]];
                    If[ Last[node] == 0,
                        permut = permuts[[il,zeroind]];
                        zeroind++
                    ];
                    subdivFIBOWithPermut[node,permut]
                ,{in,Length[nodes]}];
                nodes =  Flatten[#,1]& @ newnodes;
            ,{il,level}];
            codes = (Reverse/@(Drop[#, 1] & /@ nodes));
            order = FIBOF /@ codes;
            poslst = order2permut0toNminus1 @ order;
            codes
        ,{ipermut, Length[permuttab] }];
        
        (*codes = getFIBOCodes1d[level+1];
        codetab = {codes, Reverse /@ codes};*)
        codetab[[1]] = Reverse /@ codetab[[2]];
        
        
        
(*Abort[]*);
        sel = {};
        Do[
            Do[
                codes = (*Sort @*) T[{codetab[[ix]],codetab[[iy]]}];
                If[ level >= 4,
                    first4pos = (Take[#, 4] & /@ #) & /@ codes
                ];
                AppendTo[sel, {codes,{ix,iy},{},{}} ];
                (*AppendTo[sel, {codes,{ix,iy},getFIBOTreePermuts[permuttab[[ix]]],getFIBOTreePermuts[permuttab[[iy]]]} ];*)
            ,{iy,ix+1,Length[codetab]}]
        ,{ix, Length[codetab]}];
        Do[
            (*Print[{i,Length[sel]}];*)
                codes = selxy = sel[[i,1]];
                {ix,iy} = sel[[i,2]];
                count = Length[Union[(Take[#, level/2] & /@ #) & /@ codes]];
                Print[i -> goodFIBOSetQ[codes] -> (mf /@ selxy) -> count];
                FIBOGrid = getFIBOGridNEW[level,selxy,sel[[i,2]]];
                {FIBOGrid,sel[[i,-2]],sel[[i,-1]]}//Print;
                 
        ,{i, Length[sel]}];
    ] (* tstFIBOPermutTrees *)

second[lst_] :=
    lst[[2]]
third[lst_] :=
    lst[[3]]


getFIBOTreePermuts[permuts_] :=
    Module[ {egdeLabels,svlst,sedges,level = Length[permuts],col1,col2,col3,nodes,edges,zeroind,newnodes,node,permut,nodesaftersubdiv},
        {col1,col2,col3} = {Yellow,Red,Cyan(*Lighter@(Lighter@LightGray)*)};
        nodes = {{0}};
        edges = sedges = svlst = egdeLabels = {};
        Do[
            zeroind = 1;
            newnodes = Table[
                node = nodes[[in]];
                If[ Last[node] == 0,
                    permut = permuts[[il,zeroind]];
                    zeroind++
                ];
                nodesaftersubdiv = subdivFIBOWithPermut[node,permut];
                    (*AppendTo[vlst,node];*)
                AppendTo[edges,{node,#}]& /@ nodesaftersubdiv;
                AppendTo[egdeLabels, If[ Last[node] == 0,
                                         If[ permut == 0,
                                             digits2str[node] -> col1,
                                             digits2str[node] -> col2
                                         ],
                                         digits2str[node] -> col3
                                     ] ];
                nodesaftersubdiv
            ,{in,Length[nodes]}];
            nodes =  Flatten[#,1]& @ newnodes;
        ,{il,level}];
        egdeLabels = Join[egdeLabels,(digits2str[#] -> If[ Last[#] == 0,
                                                           col1,
                                                           col3
                                                       ]) & /@ nodes ];
        svlst = digits2str /@ ( Last /@ edges );
        sedges = Flatten @ ({digits2str[First[#]] \[DirectedEdge] digits2str[Last[#]]}& /@ (edges) );
        TreeGraph[svlst,sedges
            , GraphLayout -> {"LayeredEmbedding"}
            , VertexStyle -> egdeLabels
            , VertexSize -> 0.3
             , VertexLabels ->  Table[svlst[[i]] -> Placed[
                         Switch[StringLength[svlst[[i]]] 
                             ,0, ""
                             ,level+1,Style[Rotate[(StringTake[#,-(level)]& @ svlst[[i]]) <>" = "<> ToString[str2nFIBO[svlst[[i]]]] ,-Pi/2]]
                             ,_, (StringTake[#,-1]& @svlst[[i]]) ]
                     , Below], {i,Length[svlst]}]
            , PlotLabel-> ToString[(*"permuts" -> *)permuts]
            , PlotRangePadding -> {{0,0},{1,0}}
            , ImageSize->{1.61^level 32, Automatic} ]
    ] (* getFIBOTreePermuts *)


getBinaryTree[inpts_,level_,lbl_:"Sobol"] :=
    Module[ {col1,col2,col3},
        vlst = {};
        edges = {};
        {col1,col2,col3} = {Yellow,Red,Cyan};
        (*pts = ((ptsx+1)//order2permut)-1;*)
        pts = inpts;
        ptsDigits = IntegerDigits[#,2,level]& /@ pts;
        positions = IntegerDigits[#,2,level]& /@ Range[0,2^level-1];
        tab = {positions,ptsDigits}//T//Sort;
        prevLevelNodes = Last /@ tab;
        AppendTo[vlst,prevLevelNodes];
        Do[
            nodes = prevLevelNodes;
            prevLevelNodes = Partition[#,2]& @ (Drop[#,1]& /@ nodes);
            verif = And @@((#[[1]] == #[[2]])& /@ prevLevelNodes);
            If[ !verif,
                Print["something wrong:",nodes->prevLevelNodes];
                Abort[]
            ];
            prevLevelNodes = First /@ prevLevelNodes;
            dstnodes = Partition[#,2]& @ nodes;
            AppendTo[edges, Table[{prevLevelNodes[[i]] \[DirectedEdge] dstnodes[[i,1]], prevLevelNodes[[i]] \[DirectedEdge] dstnodes[[i,2]] },{i,Length[prevLevelNodes]}] ];
            AppendTo[vlst,prevLevelNodes];
            (*Print[ilevel," vlst=",vlst];
            Print[ilevel," edges=",edges];*)
         ,{ilevel,level}];
        el = Flatten[#, 1] & @ edges;
        vertices = Union[Last /@ Flatten[el]];
        egdeLabels = (digits2str[#] -> If[ First[#] == 0,
                                           col1,
                                           col3
                                       ]) & /@ vertices;
        egdeLabels = Join[egdeLabels, Table[ If[ el[[i,;;,2,1]] == {1,0},
                                                 digits2str[ el[[i,1,1]] ] -> col2
                                             ] ,{i,Length[el]}]];
        vlst = Flatten[#, 1] &@vlst;
        svlst = digits2str /@ vlst;
        sedges = Flatten @ ({digits2str[First[#]] \[DirectedEdge] digits2str[Last[#]]}& /@ (Flatten[#] &@edges) );
        tg = TreeGraph[svlst,sedges
            , GraphLayout -> {"LayeredEmbedding"}
            , VertexStyle -> egdeLabels
            , VertexSize -> 0.3
            , EdgeStyle -> Arrowheads[.005]
            , VertexLabels ->  Table[svlst[[i]] -> Placed[
                        Switch[StringLength[svlst[[i]]] 
                            ,0, ""
                            (*,level,Style[Rotate[ToString[str2n[svlst[[i]]]] <>"="<>svlst[[i]],Pi/2]]*)
                            ,level,Style[Rotate[ToString[str2n[svlst[[i]]]]<>" = "<>svlst[[i]] ,Pi/2]]
                            ,_, (StringTake[#,1]& @svlst[[i]]) ]
                    , Below], {i,Length[svlst]}]
            , PlotLabel-> "Level="<>ToString[level]<>" "<>lbl
            , PlotRangePadding -> {{0,0},{1,0}}
            , ImageSize->{32 2^level,Automatic} ];
        tg
    ] (* getBinaryTree *)
    
testFIBOOK[level_,codes_] :=
    Module[ {codesYsorted,xCode1,yCode1,xCode2,yCode2,xCode1Ysorted,yCode1Ysorted,xCode2Ysorted,yCode2Ysorted,test1,test2,nodes},
        codesYsorted = Reverse /@ (Sort@(Reverse /@ codes));
        nodes = {{}};
        Do[
            nodes = Flatten[#,1]& @ (subdivFIBO /@ nodes);
        ,{level}];
        And @@ Table[
            If[ nodes[[i,-2;;-1]] == {0,0} && nodes[[i+1,-2;;-1]] == {0,1},
                {xCode1,yCode1} = codes[[i]];
                {xCode2,yCode2} = codes[[i+1]];
                {xCode1Ysorted,yCode1Ysorted} = codesYsorted[[i]];
                {xCode2Ysorted,yCode2Ysorted} = codesYsorted[[i+1]];
                test1 = (First[yCode1] != First[yCode2]);
                test2 = First[xCode1Ysorted] != First[xCode2Ysorted];
                (*Print[{i,i+1} -> mf[{codes[[i]],codes[[i]]}]-> mf[{codesYsorted[[i]],codesYsorted[[i]]}] -> {test1,test2}];*)
                test1 && test2,
                True
            ]
        ,{i,Length[nodes]-1}]
    ] (* testFIBOOK *)

countFIBOOK[level_,codes_] :=
    Module[ {codesYsorted,xCode1,yCode1,xCode2,yCode2,xCode1Ysorted,yCode1Ysorted,xCode2Ysorted,yCode2Ysorted,test1,test2,nodes},
        codesYsorted = Reverse /@ (Sort@(Reverse /@ codes));
        nodes = {{}};
        Do[
            nodes = Flatten[#,1]& @ (subdivFIBO /@ nodes);
        ,{level}];
        Count[#,True]& @ Table[
            If[ nodes[[i,-2;;-1]] == {0,0} && nodes[[i+1,-2;;-1]] == {0,1},
                {xCode1,yCode1} = codes[[i]];
                {xCode2,yCode2} = codes[[i+1]];
                {xCode1Ysorted,yCode1Ysorted} = codesYsorted[[i]];
                {xCode2Ysorted,yCode2Ysorted} = codesYsorted[[i+1]];
                test1 = (First[yCode1] != First[yCode2]);
                test2 = First[xCode1Ysorted] != First[xCode2Ysorted];
                (*Print[{i,i+1} -> mf[{codes[[i]],codes[[i]]}]-> mf[{codesYsorted[[i]],codesYsorted[[i]]}] -> {test1,test2}];*)
                test1 && test2
            ]
        ,{i,Length[nodes]-1}]
    ] (* testFIBOOK *)

    




getBinaryGridWithMarks[nlevels_:2,sel_,{iix_,iiy_}] :=
    Module[ {gl,symbols, coltab, delta,deltax,deltay,cur,curx,cury},
        coltab = {Yellow, Red, Cyan, Blue, Magenta, Green, Black, Red, Cyan, Blue, Magenta, Green, Black};
        symbols = {{0}};
        gl = {};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[1/2^(1.2 ilevel+4)]}];
            symbols = Flatten[#,1]& @ (subdivBinary /@ symbols);
            cur = 0;
            Do[
                delta = 1/2^(ilevel);
                AppendTo[gl, {Line[{{0,cur},{1,cur}}], Line[{{0,cur+delta},{1,cur+delta}}]}];
                AppendTo[gl, {Line[{{cur,0},{cur,1}}], Line[{{cur+delta,0},{cur+delta,1}}]}];
                cur += delta;
            ,{i,Length[symbols]}]
        ,{ilevel,nlevels}];
        cury = 0;
        Do[
            deltay = 1/2^(nlevels);
            curx = 0;
            Do[
                deltax = 1/2^(nlevels);
                If[ MemberQ[sel,{ix-1,iy-1}],
                    AppendTo[gl, {Gray,Rectangle[{curx,cury},{curx+deltax,cury+deltay}] } ]
                ];
                curx += deltax;
            ,{ix,Length[symbols]}];
            cury += deltay;
        ,{iy,Length[symbols]}];
        Graphics[gl,Axes->False,PlotLabel->Style[ToString[{iix,iiy} -> T[sel] ], If[ nlevels > 3,
                                                                                     Medium,
                                                                                     Tiny
                                                                                 ] ],ImageSize->If[ nlevels > 3,
                                                                                                    4,
                                                                                                    1
                                                                                                ] {150,150} ]
    ]

showAllBinaryPermutTrees[level_:2] :=
    Module[ {},
        {col1,col2,col3} = {Yellow,Red,Lighter@(Lighter@LightGray)};
        permuttab = Tuples[ Table[Tuples[{0, 1}, 2^(i-1)], {i,level}] ];
 
        (*permuttab = Select[permuttab, And @@ ((First[#] == 0) & /@ #) &];*) (* select only Sobol-likeones *)
        postab = Table[
            permuts = permuttab[[ipermut]];
            (*Print[{ipermut,permuttab//Length} -> mf[permuts] ];*)
            nodes = vlst = {{0}};
            edges = sedges = svlst = egdeLabels = {};
            Do[
                zeroind = 1;
                newnodes = Table[
                    node = nodes[[in]];
                    permut = permuts[[il,zeroind]];
                    zeroind++;
                    nodesaftersubdiv = subdivBinaryWithPermut[node,permut];
                    (*AppendTo[vlst,node];*)
                    AppendTo[vlst,#]& /@ nodesaftersubdiv;
                    AppendTo[edges,{node,#}]& /@ nodesaftersubdiv;
                    AppendTo[egdeLabels, If[ permut == 0,
                                             digits2str[node] -> col1,
                                             digits2str[node] -> col2
                                         ] ];
                    nodesaftersubdiv
                ,{in,Length[nodes]}];
                nodes =  Flatten[#,1]& @ newnodes;
            ,{il,level}];
            svlst = digits2str /@ vlst;
            sedges = Flatten @ ({digits2str[First[#]] \[DirectedEdge] digits2str[Last[#]]}& /@ (edges) );
            If[ level < 4 || (level == 4 && (ipermut == 1 || ipermut == 16)),
                tg = TreeGraph[svlst,sedges
                     , GraphLayout -> {"LayeredEmbedding"}
                     , VertexStyle -> egdeLabels
                     , VertexSize -> 0.3
                     , VertexLabels ->  Table[svlst[[i]] -> Placed[
                                 Switch[StringLength[svlst[[i]]] 
                                     ,level+1,Style[Rotate[
                                         (StringTake[#,-1]& @svlst[[i]]) <>"  "<>svlst[[i]] <> " = " <> ToString[FromDigits[Reverse@vlst[[i,2;;]],2]]
                                         ,-Pi/2]]
                                     ,_, (StringTake[#,-1]& @svlst[[i]]) ]
                             , Below], {i,Length[svlst]}]
                     , PlotLabel-> ToString[ipermut -> permuts]
                     , PlotRangePadding -> {{0,0},{1,0}}
                     , ImageSize->{850,400}/2 ];
                tg//Print;
            ];
            order = FromDigits[Reverse[#],2]& /@ (Drop[#, 1] & /@ nodes);
            poslst = order2permut0toNminus1 @ order;
            If[ level < 4 || Mod[ipermut,1000]==0,
                Print[ipermut,"/",Length[permuttab]->order -> poslst]
            ];
            poslst
        ,{ipermut, 1 Length[permuttab] }];
        gtab = {};
        Do[
            posx = postab[[ix]];
            Do[
                posy = postab[[iy]];
                sel = {order2permut0toNminus1 @ posx, order2permut0toNminus1 @ posy}//T;
                codes = IntegerDigits[#, 2, level] & /@ sel;
                FIBOGrid = getBinaryGridWithMarks[level,sel,{ix,iy}];
                If[ goodBinarySetQ[codes],
                    If[ level > 3,
                        FIBOGrid//Print,
                        AppendTo[gtab,FIBOGrid];
                    ];
                ];
            ,{iy,ix+1,Length[postab]}]
        ,{ix,Length[postab]}];
        Print[gtab];
        ordtabDir = Table[
            permuts = permuttab[[ipermut]];
            nodes = vlst = {{0}};
            edges = sedges = svlst = egdeLabels = {};
            Do[
                zeroind = 1;
                newnodes = Table[
                    node = nodes[[in]];
                    permut = permuts[[il,zeroind]];
                    zeroind++;
                    nodesaftersubdiv = subdivBinaryWithPermut[node,permut];
                    nodesaftersubdiv
                ,{in,Length[nodes]}];
                nodes =  Flatten[#,1]& @ newnodes;
            ,{il,level}];
            order = FromDigits[#,2]& /@ (Drop[#, 1] & /@ nodes);
            order
        ,{ipermut, 1 Length[permuttab] }];
        ordtabInv = Table[
            permuts = permuttab[[ipermut]];
            nodes = vlst = {{0}};
            edges = sedges = svlst = egdeLabels = {};
            Do[
                zeroind = 1;
                newnodes = Table[
                    node = nodes[[in]];
                    permut = permuts[[il,zeroind]];
                    zeroind++;
                    nodesaftersubdiv = subdivBinaryWithPermut[node,permut];
                    nodesaftersubdiv
                ,{in,Length[nodes]}];
                nodes =  Flatten[#,1]& @ newnodes;
            ,{il,level}];
            order = FromDigits[Reverse[#],2]& /@ (Drop[#, 1] & /@ nodes);
            order
        ,{ipermut, 1 Length[permuttab] }];
        postab = Table[
            permuts = permuttab[[ipermut]];
            nodes = vlst = {{0}};
            edges = sedges = svlst = egdeLabels = {};
            Do[
                zeroind = 1;
                newnodes = Table[
                    node = nodes[[in]];
                    permut = permuts[[il,zeroind]];
                    zeroind++;
                    nodesaftersubdiv = subdivBinaryWithPermut[node,permut];
                    nodesaftersubdiv
                ,{in,Length[nodes]}];
                nodes =  Flatten[#,1]& @ newnodes;
            ,{il,level}];
            order = FromDigits[Reverse[#],2]& /@ (Drop[#, 1] & /@ nodes);
            order2permut0toNminus1 @ order
        ,{ipermut, 1 Length[permuttab] }];
    ] (* showAllBinaryPermutTrees *)
    
tstBinary[] :=
    Module[ {},
        permuts12 = {
            {{0},{0,0},{0,0,0,0}},
            {{0},{0,0},{0,0,1,1}}
        };
        permuts12 = {
            {{0},{0,0},{0,0,0,0},{0,0,0,0,0,0,0,0}},
            {{0},{0,0},{0,0,1,1},{0,0,1,1,1,0,0,1}}
        };
        permuts12 = {
            {{0},{0,0},{0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},
            {{0},{0,0},{0,0,1,1},{0,0,1,1,1,0,0,1},{0,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0}}
        };
        permuts12 = {
            {{0},{0,0},{0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},
            {{0},{0,0},{0,0,1,1},{0,0,1,1,1,0,0,1},{0,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0},{0,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0,  0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0}}
        };
        permuts12 = {
            {{0},{0,0},{0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},
            {{0},{0,0},{0,0,1,1},{0,0,1,1,1,0,0,1},{0,0,1,1,1,0,0,1 ,1,0,0,0,0,0,0,1},{0,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0,  0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0}}
        };
        {col1,col2,col3} = {Yellow,Red,Lighter@(Lighter@LightGray)};
        permuts = permuts12[[1]];
        level = permuts // Length;
        nodes = vlst = {{0}};
        edges = sedges = svlst = egdeLabels = {};
        Do[
            zeroind = 1;
            newnodes = Table[
                node = nodes[[in]];
                permut = permuts[[il,zeroind]];
                zeroind++;
                nodesaftersubdiv = subdivBinaryWithPermut[node,permut];
                    (*AppendTo[vlst,node];*)
                AppendTo[vlst,#]& /@ nodesaftersubdiv;
                AppendTo[edges,{node,#}]& /@ nodesaftersubdiv;
                AppendTo[egdeLabels, If[ permut == 0,
                                         digits2str[node] -> col1,
                                         digits2str[node] -> col2
                                     ] ];
                nodesaftersubdiv
            ,{in,Length[nodes]}];
            nodes =  Flatten[#,1]& @ newnodes;
        ,{il,level}];
        svlst = digits2str /@ vlst;
        sedges = Flatten @ ({digits2str[First[#]] \[DirectedEdge] digits2str[Last[#]]}& /@ (edges) );
        tg = TreeGraph[svlst,sedges
             , GraphLayout -> {"LayeredEmbedding"}
             , VertexStyle -> egdeLabels
             , VertexSize -> 0.3
             , VertexLabels ->  Table[svlst[[i]] -> Placed[
                         Switch[StringLength[svlst[[i]]] 
                             ,level+1,Style[Rotate[
                                 (StringTake[#,-1]& @svlst[[i]]) <>"  "<>svlst[[i]] <> " = " <> ToString[FromDigits[Reverse@vlst[[i,2;;]],2]]
                                 ,-Pi/2]]
                             ,_, (StringTake[#,-1]& @svlst[[i]]) ]
                     , Below], {i,Length[svlst]}]
             , PlotLabel-> ToString[ipermut -> permuts]
             , PlotRangePadding -> {{0,0},{1,0}}
             , ImageSize->2 {850,400} ];
        tg//Print;
        order = FromDigits[Reverse[#],2]& /@ (Drop[#, 1] & /@ nodes);
        poslst1 = order2permut0toNminus1 @ order;
        Print[order -> poslst1];
        permuts = permuts12[[2]];
        Do[
            Print["===========",iii];
            pattern = IntegerDigits[iii,2, 8 ];
            permuts[[-1,17;;17+7]] = Reverse @ pattern;
            permuts[[-1,17+8;;]] = pattern;
            nodes = vlst = {{0}};
            edges = sedges = svlst = egdeLabels = {};
            Do[
                zeroind = 1;
                newnodes = Table[
                    node = nodes[[in]];
                    permut = permuts[[il,zeroind]];
                    zeroind++;
                    nodesaftersubdiv = subdivBinaryWithPermut[node,permut];
                    (*AppendTo[vlst,node];*)
                    AppendTo[vlst,#]& /@ nodesaftersubdiv;
                    AppendTo[edges,{node,#}]& /@ nodesaftersubdiv;
                    AppendTo[egdeLabels, If[ permut == 0,
                                             digits2str[node] -> col1,
                                             digits2str[node] -> col2
                                         ] ];
                    nodesaftersubdiv
                ,{in,Length[nodes]}];
                nodes =  Flatten[#,1]& @ newnodes;
            ,{il,level}];
            svlst = digits2str /@ vlst;
            sedges = Flatten @ ({digits2str[First[#]] \[DirectedEdge] digits2str[Last[#]]}& /@ (edges) );
            tg = TreeGraph[svlst,sedges
                 , GraphLayout -> {"LayeredEmbedding"}
                 , VertexStyle -> egdeLabels
                 , VertexSize -> 0.3
                 , VertexLabels ->  Table[svlst[[i]] -> Placed[
                             Switch[StringLength[svlst[[i]]] 
                                 ,level+1,Style[Rotate[
                                     (StringTake[#,-1]& @svlst[[i]]) <>"  "<>svlst[[i]] <> " = " <> ToString[FromDigits[Reverse@vlst[[i,2;;]],2]]
                                     ,-Pi/2]]
                                 ,_, (StringTake[#,-1]& @svlst[[i]]) ]
                         , Below], {i,Length[svlst]}]
                 , PlotLabel-> ToString[ipermut -> permuts]
                 , PlotRangePadding -> {{0,0},{1,0}}
                 , ImageSize->2 {850,400} ];
            tg//Print;
            order = FromDigits[Reverse[#],2]& /@ (Drop[#, 1] & /@ nodes);
            poslst2 = order2permut0toNminus1 @ order;
            Print[order -> poslst2];
            posx = poslst1;
            posy = poslst2;
            sel = {order2permut0toNminus1 @ posx, order2permut0toNminus1 @ posy}//T;
            FIBOGrid = getBinaryGridWithMarks[level,sel,{ix,iy}];
            FIBOGrid//Print;
        ,{iii,0,256}];
    ] (* tstBinary *)

(*------------------------------------------------------*)

(*----------------------- FIBO -----------------------*)
(*FIBOF[symbols_] := Total@Table[Fibonacci[i ] symbols[[i]], {i, Length[symbols]}]
FIBOFxy[symbols_]:=FIBOF/@symbols
(*subdivx[symbol_,permut_]:=Switch[Last[symbol]
    ,0, If[permut == 0, {Join[symbol,{0}],Join[symbol,{1}]},  {Join[symbol,{1}],Join[symbol,{0}]}  ]
    ,1, {Join[symbol,{0}]}
]*)
(*subdivy[symbol_,permut_]:=Switch[Last[symbol]
    ,0, If[permut == 1, {Join[symbol,{0}],Join[symbol,{1}]},  {Join[symbol,{1}],Join[symbol,{0}]}  ]
    ,1, {Join[symbol,{0}]}
]*)
toto[] :=
    Module[ {},
        nlevels = 5;
        permuts = Table[RandomChoice[{0, 1}, Fibonacci[i+1]], {i, nlevels}];
        Print[mf@permuts];
        xsymbols = {{0}};
        Do[
            xsymbols = Flatten[#,1]& @ Table[subdivx[xsymbols[[isymble]],permuts[[ilevel,isymble]]],{isymble,Length[xsymbols]}];
            (*Print["xsymbols" -> ilevel -> mf[xsymbols]];*)
        ,{ilevel,nlevels}];
        ysymbols = {{0}};
        Do[
            ysymbols = Flatten[#,1]& @ Table[subdivy[ysymbols[[isymble]],permuts[[ilevel,isymble]]],{isymble,Length[ysymbols]}];
            (*Print["ysymbols" -> ilevel -> mf[ysymbols]];*)
        ,{ilevel,nlevels}];
        xysymbols = {xsymbols, ysymbols}//T;
        sz = Length[xysymbols];
        
        xy = FIBOFxy /@ xysymbols;
        grid = {{Thickness[.001],Cyan,Table[{Line[{{i,sz},{i,0}}],Line[{{sz,i},{0,i}}]},{i,0,sz}] }};
        Graphics[{grid,Rectangle[#,#+{1,1}]& /@ xy},ImageSize->{1024,1024}]//Print;
    ]
*)


(*

Abort[];
        
(* FIBO-Sobol *)
        xx = Reverse /@ (IntegerDigits[#, 2, nlevels] & /@ ptsx);
        xxFIBO = FIBOF /@ (Select[xx, Max[ListConvolve[{1, 1}, #]] < 2 &]);
        
        yy = Reverse /@ (IntegerDigits[#, 2, nlevels] & /@ ptsy);
        yyFIBO = FIBOF /@ (Select[yy, Max[ListConvolve[{1, 1}, #]] < 2 &]);
        
        npts = Length[xxFIBO];
        Graphics[{PointSize[.01],Point/@T[{xxFIBO,yyFIBO}]},Frame->True,FrameTicks->Automatic,AspectRatio->1,GridLines->{Range[0,npts-1],Range[0,npts-1]}
            ,ImageSize->{650,650}
            ,PlotLabel->"FIBO-Sobol xy: dir numbers="<>ToString[{ind1,ind2}]]//Print;
        Print[{xxFIBO, yyFIBO} // mf];
        Print[mf @ { ptsx//order2permut0toNminus1,ptsy//order2permut0toNminus1 }]*)
(* *) 
 


subdivFIBO[symbol_] :=
    If[ symbol === {},
        {{0}, {1}},
        Switch[Last[symbol]
            ,0, {Join[symbol,{0}],Join[symbol,{1}]}
            ,1, {Join[symbol,{0}]}
        ]
    ]
subdivFIBOWithPermut[symbol_,permut_] :=
    Switch[Last[symbol]
    ,0, If[ permut == 0,
            {Join[symbol,{0}],Join[symbol,{1}]},
            {Join[symbol,{1}],Join[symbol,{0}]}
        ]
    ,1, {Join[symbol,{0}]}
    ]


getFIBOGridWithMarks[nlevels_:2,sel_,{iix_,iiy_}] :=
    Module[ {gl,symbols, coltab, delta,deltax,deltay,cur,curx,cury},
        coltab = {Yellow, Lighter@Cyan, Lighter@Blue, Black,Red};
        symbols = {{0}};
        gl = {};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[1/phi^(1.5 ilevel+4)]}];
            symbols = Flatten[#,1]& @ (subdivFIBO /@ symbols);
            cur = 0;
            Do[
                delta = If[ Last[symbols[[i]]]==0,
                            phi,
                            1
                        ]/phi^(ilevel+1);
                AppendTo[gl, {Line[{{0,cur},{1,cur}}], Line[{{0,cur+delta},{1,cur+delta}}]}];
                AppendTo[gl, {Line[{{cur,0},{cur,1}}], Line[{{cur+delta,0},{cur+delta,1}}]}];
                cur += delta;
            ,{i,Length[symbols]}]
        ,{ilevel,nlevels}];
        cury = 0;
        Do[
            deltay = If[ Last[symbols[[iy]]]==0,
                         phi,
                         1
                     ]/phi^(nlevels+1);
            curx = 0;
            Do[
                deltax = If[ Last[symbols[[ix]]]==0,
                             phi,
                             1
                         ]/phi^(nlevels+1);
                If[ MemberQ[sel,{ix-1,iy-1}],
                    AppendTo[gl, {LightGray,Rectangle[{curx,cury},{curx+deltax,cury+deltay}] } ]
                ];
                curx += deltax;
            ,{ix,Length[symbols]}];
            cury += deltay;
        ,{iy,Length[symbols]}];
        Graphics[gl,Axes->False,PlotLabel->Style[ToString[{iix,iiy} -> T[sel]], Tiny],ImageSize->If[ nlevels >3,
                                                                                                     2,
                                                                                                     1
                                                                                                 ]{150,150} ]
    ] (* getFIBOGridWithMarks *)

digits2strColor[digits_] :=
    StringJoin[ToString /@ digits] 

getFIBOGrid[nlevels_:2,imgsz_:{600,600}] :=
    Module[ {gl(*,symbols*)},
        hlevels = Floor[nlevels/2];
        coltab = {Orange(*Yellow*), Cyan, Blue,Gray, Darker@Red, Orange,Blue,Red,Yellow};
        txtcoltab = {Red, Blue, Green, Orange, Gray,Red};
        symbols = {{}};
        If[ nlevels == 0,
            Return[{Red,Line[{{0,0},{0,1},{1,1},{1,0},{0,0}}] }]
        ];
        gl = {(*Opacity[.75]*)};
        Do[
            gl = Join[gl,{coltab[[Mod[ilevel,Length[coltab],1]]],Thickness[1/phi^(1.5 ilevel+4)]}];
            symbols = Flatten[#,1]& @ (subdivFIBO /@ symbols);
            zvals = FIBOPhi /@ symbols;
            AppendTo[gl, {
                    Line[{{0,1},{1,1}}],Line[{{1,0},{1,1}}] 
                    , {Line[{{0,#},{1,#}}],Line[{{#,0},{#,1}}] }& /@ zvals
             } ];
        ,{ilevel, nlevels}];
        symbols1 = #[[;;hlevels]]& /@ symbols;
        symbols2 = #[[hlevels+1;;]]& /@ symbols;
        AppendTo[gl, {Black,Opacity[1]
            ,Table[
                    Text[ Column[Join[{
                             Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"        " ,Pi/2],Bold,Black]
                            }
                            ,Reverse@Table[Style[  Rotate[ToString@symbols1[[i,j]],Pi/2] ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                        ]
                    ], {FIBOPhi@symbols[[i]],0},{0,1}]
                , {i,Length[symbols]}]
        
        
            ,Table[
                    
                    Text[ Row[Join[
                            Table[Style[  ToString[symbols1[[i,j]]]<>" " ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                             ,{ Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"       " ,0],Bold,Black]
                    } ] ], {0,FIBOPhi@symbols[[i]]},{1,0}]
                , {i,Length[symbols]}]
        
             } ];

       (*Graphics[gl,Axes->False,(*PlotLabel->"FIBO "<>ToString[{nlevels,Length[symbols]}],*)ImageSize -> imgsz]*)
        gl
    ]

getFIBOGridAB[nlevels_:2,imgsz_:{600,600}] :=
    Module[ {gl(*,symbols*)},
        hlevels = Floor[nlevels/2];
        coltab = {Orange, Cyan, Blue,Gray, Darker@Red, Orange,Blue,Red,Yellow};
        txtcoltab = {Red, Blue, Green, Orange};
        symbols = {{}};
        gl = {(*Opacity[.75]*)};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[1/phi^(1.5 ilevel+4)]}];
            prevsymbols = symbols;
            prevzvals = FIBOPhi /@ prevsymbols;
            symbols = Flatten[#,1]& @ (subdivFIBO /@ symbols);
            zvals = FIBOPhi /@ symbols;
            AppendTo[gl, {
                    Line[{{0,1/phi},{1,1/phi}}],Line[{{1,0},{1,1/phi}}] 
                    , {Line[{{#,0},{#,1/phi}}] }& /@ zvals
                    , {Line[{{0,#/phi},{1,#/phi}}] }& /@ prevzvals
             } ];
        ,{ilevel,nlevels}];
        symbols1 = #[[;;hlevels]]& /@ symbols;
        symbols2 = #[[hlevels+1;;]]& /@ symbols;
        AppendTo[gl, {Black,Opacity[1]
            ,Table[
                    Text[ Column[Join[{
                             Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"        " ,Pi/2],Bold,Black]
                            }
                            ,Reverse@Table[Style[  Rotate[ToString@symbols1[[i,j]],Pi/2] ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                        ]
                    ], {FIBOPhi@symbols[[i]],0},{0,1}]
                , {i,Length[symbols]}]
        
        
            ,Table[
                    
                    Text[ Row[Join[
                            Table[Style[  symbols1[[i,j]] ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                             ,{ " "
                            ,Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"       " ,0],Bold,Black]
                    } ] ], {0,FIBOPhi@symbols[[i]]},{1,0}]
                , {i,Length[prevsymbols]}]
        
             } ];
        gl
    ]

getFIBOGridBA[nlevels_:2,imgsz_:{600,600}] :=
    Module[ {gl(*,symbols*)},
        hlevels = Floor[nlevels/2];
        coltab = {Orange, Cyan, Blue,Gray, Darker@Red, Orange,Blue,Red,Yellow};
        txtcoltab = {Red, Blue, Green, Orange};
        symbols = {{}};
        gl = {(*Opacity[.75]*)};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[1/phi^(1.5 ilevel+4)]}];
            prevsymbols = symbols;
            prevzvals = FIBOPhi /@ prevsymbols;
            symbols = Flatten[#,1]& @ (subdivFIBO /@ symbols);
            zvals = FIBOPhi /@ symbols;
            AppendTo[gl, {
                    Line[{{0,1},{1/phi,1}}],Line[{{1/phi,0},{1/phi,1}}] 
                    , {Line[{{#/phi,0},{#/phi,1}}] }& /@ prevzvals
                    , {Line[{{0,#},{1/phi,#}}] }& /@ zvals
             } ];
        ,{ilevel,nlevels}];
        symbols1 = #[[;;hlevels]]& /@ symbols;
        symbols2 = #[[hlevels+1;;]]& /@ symbols;
        AppendTo[gl, {Black,Opacity[1]
            ,Table[
                    Text[ Column[Join[{
                             Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"        " ,Pi/2],Bold,Black]
                            }
                            ,Reverse@Table[Style[  Rotate[ToString@symbols1[[i,j]],Pi/2] ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                        ]
                    ], {FIBOPhi@symbols[[i]],0},{0,1}]
                , {i,Length[prevsymbols]}]
        
        
            ,Table[
                    
                    Text[ Row[Join[
                            Table[Style[  symbols1[[i,j]] ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                             ,{ " "
                            ,Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"       " ,0],Bold,Black]
                    } ] ], {0,FIBOPhi@symbols[[i]]},{1,0}]
                , {i,Length[symbols]}]
        
             } ];
        gl
    ]

prepFIBOGrids[] :=
    Module[ {},
        Table[Graphics[{getFIBOGrid[i]},ImageSize -> {750,750}],{i,8}]//Print;
    (*Table[Graphics[{getFIBOGridAB[i]},ImageSize -> {128,128}],{i,8}]//Print;
        Table[Graphics[{getFIBOGridBA[i]},ImageSize -> {128,128}],{i,8}]//Print;*)
    ]

(*prepFIBOGrids[] :=
    Module[ {},
        (*Table[Graphics[{getFIBOGrid[i]},ImageSize -> { 1.5^i 32,Automatic}],{i,2,8,2}]//Print;
        *)Table[Graphics[{getFIBOGridAB[i]},ImageSize -> { 1.5^i 32,Automatic}],{i,2,8,2}]//Print;
        Table[Graphics[{getFIBOGridBA[i]},ImageSize -> {Automatic, 1.5^i 32}],{i,2,8,2}]//Print;
    ]
*)

(* primitive polynomialsfrom http://mathworld.wolfram.com/notebooks/Algebra/PrimitivePolynomial.nb *)
PolynomialOrder[p_, x_] :=
    Module[ {n = 1},
        While[
         PolynomialRemainder[x^n + 1, p, x, Modulus -> 2] =!= 0, n++];
        n
    ]

PrimitiveQ[p_, x_] :=
    PolynomialOrder[p, x] == 2^Exponent[p, x] - 1

Polynomial[l_List, x_] :=
    Fold[x #1 + #2 &, 0, l]

polys[1] :=
    {x + 1}
polys[n_] :=
    (Expand[Polynomial[Join[{1}, #, {1}], x]]) & /@ 
    Flatten[Outer[List, Sequence @@ Table[{0, 1}, {n - 1}]], n - 2]
  
(*Table[Select[polys[n], PrimitiveQ[#, x] &], {n, 10}]*)
(*
Select[IntegerDigits /@ a058947, Length[#] > 1 && Max[ListConvolve[{1, 1}, #]] < 2 &]
Select[IntegerDigits /@ a058947, Length[#] > 2 &&  Max[ListConvolve[{1, 1, 1}, #]] < 2 &]
Select[IntegerDigits /@ a058947, Length[#] > 3 &&  Max[ListConvolve[{1, 1, 1, 1}, #]] < 2 &]

{{1,0,0,1,0,1},{1,0,1,0,0,1},{1,0,0,0,1,0,0,1},{1,0,0,1,0,0,0,1},{1,0,0,0,0,1,0,0,0,1},{1,0,0,0,1,0,0,0,0,1},{1,0,1,0,0,1,0,1,0,1},{1,0,1,0,1,0,0,1,0,1},{1,0,0,0,0,0,0,1,0,0,1},{1,0,0,1,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,1,0,1},{1,0,0,0,1,0,0,1,0,1,0,1},{1,0,0,0,1,0,1,0,1,0,0,1},{1,0,0,1,0,0,1,0,0,1,0,1},{1,0,0,1,0,0,1,0,1,0,0,1},{1,0,0,1,0,1,0,0,0,1,0,1},{1,0,0,1,0,1,0,0,1,0,0,1},{1,0,0,1,0,1,0,1,0,0,0,1},{1,0,1,0,0,0,0,0,0,0,0,1},{1,0,1,0,0,0,0,1,0,1,0,1},{1,0,1,0,0,0,1,0,1,0,0,1},{1,0,1,0,0,1,0,0,1,0,0,1},{1,0,1,0,1,0,0,0,0,1,0,1},{1,0,1,0,1,0,0,1,0,0,0,1},{1,0,0,0,0,0,1,0,1,0,0,1,0,1},{1,0,0,0,0,1,0,0,0,1,0,1,0,1},{1,0,0,0,0,1,0,0,1,0,1,0,0,1},{1,0,0,0,1,0,0,0,1,0,0,1,0,1},{1,0,0,0,1,0,1,0,0,0,1,0,0,1},{1,0,0,1,0,0,0,0,1,0,0,1,0,1},{1,0,0,1,0,0,0,0,1,0,1,0,0,1},{1,0,0,1,0,0,0,1,0,1,0,0,0,1},{1,0,0,1,0,1,0,0,0,0,1,0,0,1},{1,0,0,1,0,1,0,0,1,0,0,0,0,1},{1,0,0,1,0,1,0,1,0,1,0,1,0,1},{1,0,1,0,0,0,0,1,0,0,0,1,0,1},{1,0,1,0,0,0,1,0,0,0,0,1,0,1},{1,0,1,0,0,1,0,0,0,0,1,0,0,1},{1,0,1,0,0,1,0,0,0,1,0,0,0,1},{1,0,1,0,0,1,0,1,0,0,0,0,0,1},{1,0,1,0,0,1,0,1,0,1,0,1,0,1},{1,0,1,0,1,0,0,0,1,0,0,0,0,1},{1,0,1,0,1,0,1,0,1,0,0,1,0,1},{1,0,1,0,1,0,1,0,1,0,1,0,0,1}}
{{1,0,0,0,1,0,0,1},{1,0,0,1,0,0,0,1},{1,0,0,0,0,1,0,0,0,1},{1,0,0,0,1,0,0,0,0,1},{1,0,0,0,0,0,0,1,0,0,1},{1,0,0,1,0,0,0,0,0,0,1}}
{{1,0,0,0,0,1,0,0,0,1},{1,0,0,0,1,0,0,0,0,1}}


sel = Select[IntegerDigits /@ a058947, 
   Length[#] > 1 && Max[ListConvolve[{1, 1}, #]] < 2 &];
Print[Position[IntegerDigits /@ a058947, #][[1, 1]] & /@ sel]
{8,9,21,23,54,56,66,68,102,108,162,172,174,184,185,188,189,190,204,207,208,209,214,215,491,500,501,520,528,560,561,563,577,580,584,644,647,657,659,664,666,682,691,692}

sel = Select[IntegerDigits /@ a058947, 
   Length[#] > 2 && Max[ListConvolve[{1, 1, 1}, #]] < 2 &];
Print[Position[IntegerDigits /@ a058947, #][[1, 1]] & /@ sel]
{21,23,54,56,102,108}

sel = Select[IntegerDigits /@ a058947, 
   Length[#] > 3 && Max[ListConvolve[{1, 1, 1, 1}, #]] < 2 &];
Print[Position[IntegerDigits /@ a058947, #][[1, 1]] & /@ sel]
{54,56}
*)


digits2str[digits_] :=
    StringJoin[ToString /@ digits] 

str2digits[str_] :=
    Table[ToExpression[StringTake[str,{i,i}]],{i,StringLength[str]}]

(*

            If[ind1 == 1,
                msobol[[1,2]] = 1+2;
                msobol[[1,3]] = 1+2;
                msobol[[1,7]] = 1+2;
                msobol[[1,6]] = 1+2;
                msobol[[1,10]] = 1+2;
                msobol[[1,11]] = 1+2;
            ];
            If[ind1 == 1,
                msobol[[1,2]] = 1+2;
                msobol[[1,3]] = 1+2+4;
                msobol[[1,7]] = 1+2;
                msobol[[1,6]] = 1+2;
                msobol[[1,10]] = 1+2;
                msobol[[1,11]] = 1+2;
            ];

*)

dbgFIBOSobol[nlevels_:5, ind1_:1, ind2_:1111, dbgTxt_:True ] :=
    Module[ {},
        rules = {
             "111111111111111" -> "101010101010101",  (* 15 ones *)
             "11111111111111" -> "10101010101001",  (* 14 ones *)
             "1111111111111" -> "1010101010101",  (* 13 ones *)
             "111111111111" -> "101010101001",  (* 12 ones *)
             "11111111111" -> "10101010101",  (* 11 ones *)
             "1111111111" -> "1010101001",  (* 10 ones *)
             "111111111" -> "101010101",  (* 9 ones *)
             "11111111" -> "10101001", (* 8 ones *)
             "1111111" -> "1010101", (* 7 ones *)
             "111111" -> "101001", (* 6 ones *)
             "11111" -> "10101", (* 5 ones *)
             "1111" -> "1001", (* 4 ones *)
             "111" -> "101", (* 3 ones *)
             "11" -> "10"}; (* 2 ones *)
        buildMSobol[{ind1, ind2},dbgTxt];

(*-------------------- x ---------------------*)
        Print["-------------------- x: Sobol dir number ind=",ind1," a058947[[ind1]]=", a058947[[ind1]] -> (IntegerDigits @ a058947[[ind1]])];
        nf = 1;
        Print["init msobol"-> msobol[[nf,;;20]]];
        If[ ind1 == 2,
            Do[ msobol[[nf,i]] = 1+2^(i-1),{i,4,32}];
        ];
        If[ ind1 == 3,
            Do[ msobol[[nf,i]] = 1+2^(i-1),{i,5,32}];
        ];
        If[ ind1 == 999,
            Do[ msobol[[nf,i]] = 2^i-1,{i,1,32}];
        ];
        Print["new  msobol"-> msobol[[nf,;;20]]];
        Print["msobol"
            -> mf[ Table[Join[ Table[" ",{20-i}], Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]) ], {i,20}] ] 
            -> mf[ Table[Join[Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]),  Table[" ",{20-i}] ], {i,20}] ] 
            ];
        symbols = {{0},{1}};
        Do[
            symbols = Flatten[#,1]& @ (subdivFIBO /@ symbols);
        ,{ilevel,nlevels}];
        npts =  Length[symbols];
        fcodetab = Table[
            seq = symbols[[inunmber]] //Reverse;
            seqlen = Length[seq];
            nn = BitXor @@ Table[ seq[[i]] msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}];
            oldseq = newseq = (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  );
            newseq =  (str2digits @ StringReplace[digits2str[newseq], rules]);
            newseq =  (str2digits @ StringReplace[digits2str[newseq], rules]);
            newseq =  (str2digits @ StringReplace[digits2str[newseq], rules]);
            newseqcorrected = newseq;
            newnumber = FIBOF[newseqcorrected];
            If[ dbgTxt,
                Print[(inunmber-1) -> Reverse[seq] -> seq
                 -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                 -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (seq[[i]] msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                
                 -> oldseq -> newseqcorrected
                 -> newnumber
                
                 ];
            ];
            newseqcorrected
        ,{inunmber,npts}];
        inttab = FIBOF /@ fcodetab;
        xtab = FIBOPhi /@ fcodetab;
        xcodetab = fcodetab;
        Print["-------------" -> nlevels -> Sort[inttab] -> (Sort[inttab]  == Range[0,Fibonacci[nlevels+3]-1 ])];

(*-------------------- y ---------------------*)
        nf = 2;


        (* this works until L4 *)
        msobol[[nf,;;5]] = {1,3,5,8+1,1+4+16};
        rules = {
              "11111111111111" -> "10101010101001",  (* 14 ones *)
              "1111111111111" -> "1010101010101",  (* 13 ones *)
              "111111111111" -> "101010101001",  (* 12 ones *)
              "11111111111" -> "10101010101",  (* 11 ones *)
              "1111111111" -> "1010101001",  (* 10 ones *)
              "111111111" -> "101010101",  (* 9 ones *)
              "11111111" -> "10101001", (* 8 ones *)
              "1111111" -> "1010101", (* 7 ones *)
              "111111" -> "101001", (* 6 ones *)
              "11111" -> "10101", (* 5 ones *)
                 "1111" -> "1001", (* 4 ones *)
              "111" -> "101", (* 3 ones *)     
              "11" -> "01" (* 2 ones *)     
              }; (* 2 ones *)
        Print["-------------------- y: Sobol dir number ind=",ind2," a058947[[ind2]]=", a058947[[ind2]] -> (IntegerDigits @ a058947[[ind2]])];
        Print["init msobol"-> msobol[[nf,;;20]]];
            (*If[ind2 == 2,
                Do[ msobol[[nf,i]] = 1+2^(i-1),{i,4,32}];
            ];
            If[ind2 == 3,
                Do[ msobol[[nf,i]] = 1+2^(i-1),{i,5,32}];
            ];
            If[ind2 == 999,
                Do[ msobol[[nf,i]] = 2^i-1,{i,1,32}];
            ];*)
        Print["new  msobol"-> msobol[[nf,;;20]]];
        Print["msobol"
            -> mf[ Table[Join[ Table[" ",{20-i}], Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]) ], {i,20}] ] 
            -> mf[ Table[Join[Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]),  Table[" ",{20-i}] ], {i,20}] ] 
            ];
        symbols = {{0},{1}};
        Do[
            symbols = Flatten[#,1]& @ (subdivFIBO /@ symbols);
        ,{ilevel,nlevels}];
        npts =  Length[symbols];
        fcodetab = Table[
            seq = symbols[[inunmber]] //Reverse;
            seqlen = Length[seq];
            nn = BitXor @@ Table[ seq[[i]] msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}];
            oldseq = newseq = (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  );
            newseq =  (str2digits @ StringReplace[digits2str[newseq], rules]);
            newseq =  (str2digits @ StringReplace[digits2str[newseq], rules]);
            newseq =  (str2digits @ StringReplace[digits2str[newseq], rules]);
            newseqcorrected = newseq;
            newnumber = FIBOF[newseqcorrected];
(*                If[dbgTxt,
                    Print[(inunmber-1) -> seq 
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (seq[[i]] msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
        
                     -> oldseq -> newseqcorrected
                     -> newnumber -> "|" -> (FIBOF @ (Reverse @ newseqcorrected) ) 
                     -> "{x,y}=" -> {FIBOF @ ( oldseq),newnumber }
                     -> "delta=" -> Abs[(FIBOF @ ( seq) )-newnumber]

                     ];
                ];
                newseqcorrected
            ,{inunmber,npts}];
            
            inttab = FIBOF /@ fcodetab;
*)
            If[ dbgTxt,
                Print[(inunmber-1) -> Reverse[seq] -> seq
                 -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                 -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (seq[[i]] msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                
                 -> oldseq -> newseqcorrected
                 -> newnumber
                
                 ];
            ];
            newseqcorrected
        ,{inunmber,npts}];
        inttab = FIBOF /@ fcodetab;
        ytab = FIBOPhi /@ fcodetab;
        Print["-------------" -> nlevels -> Sort[inttab] -> (Sort[inttab]  == Range[0,Fibonacci[nlevels+3]-1 ])];
        ycodetab = fcodetab;
        xytab = {xtab,ytab}//T;
        xycodetab = {xcodetab,ycodetab}//T;
        grid = getFIBOGrid[nlevels+1];
        Graphics[{{Opacity[.5],grid}, 
            Table[{ptsz,col} = If[ i <= 3,
                                   {.03,Blue},
                                   If[ i <= 8,
                                       {.025,Red},
                                       {0.02,Black}
                                   ]
                               ];
                  {col,PointSize[ptsz], Point @xytab[[i]] ,
                  Text[Style[i-1,36],xytab[[i]],{-1,-1}]}
                ,{i,Length[xytab]}]
            }, ImageSize -> {630,630}]//Print;
        tab = Table[
                {xycodetab[[i,1]],xycodetab[[i,2]],FIBOFinv @ xycodetab[[i,1]],Reverse@xycodetab[[i,1]],Reverse@xycodetab[[i,2]],FIBOF @ xycodetab[[i,1]]}
        ,{i,Length[xycodetab]}];
        Print[tab // mf];
        Print[Sort[tab] // mf];
    (*nodes = 
            egdeLabels = Join[egdeLabels,(digits2str[#] -> If[Last[#] == 0, col1, col3]) & /@ nodes];
            svlst = digits2str /@ vlst;
            sedges = Flatten @ ({digits2str[First[#]] \[DirectedEdge] digits2str[Last[#]]}& /@ (edges) );
             

             tg = TreeGraph[svlst,sedges
                 , GraphLayout -> {"LayeredEmbedding"}
                 , VertexStyle -> egdeLabels
                 , VertexSize -> 0.3
                 , VertexLabels ->  Table[svlst[[i]] -> Placed[
                             Switch[StringLength[svlst[[i]]] 
                                 ,level+1,Style[Rotate[
                                     (StringTake[#,-1]& @svlst[[i]]) <>"  "<>svlst[[i]] <> " = " <> ToString[FIBOstr2nInv[svlst[[i]]]]
                                     ,-Pi/2]]
                                 ,_, (StringTake[#,-1]& @svlst[[i]]) ]
                         , Below], {i,Length[svlst]}]
                 , PlotLabel-> ToString[ipermut -> permuts]
                 , PlotRangePadding -> {{0,0},{1,0}}
                 , ImageSize->{Automatic,400} ];
*)
   ] (* dbgFIBOSobol *)



 (*            (*,"101010" -> "010101"
             ,"101001" -> "100001"
             ,"100101" -> "000001"
             ,"100010" -> "001010"
             ,"100001" -> "101001"
             ,"010101" -> "101010"
             ,"010010" -> "000010"
             ,"010001" -> "010001"
             ,"001010" -> "100010"
             ,"001001" -> "000101"
             ,"000101" -> "001001"
             ,"000010" -> "010010"
             ,"000001" -> "100101"*)

                ,"101010" -> "010001"
             ,"101001" -> "100001"
             ,"100101" -> "000001"
             ,"100010" -> "001010"
             ,"100001" -> "101001"
             ,"010101" -> "010101"
             ,"010010" -> "000010"
             ,"010001" -> "101010"
             ,"001010" -> "100010"
             ,"001001" -> "000101"
             ,"000101" -> "001001"
             ,"000010" -> "010010"
             ,"000001" -> "100101"

             ,"1010" -> "0001"
             ,"1001" -> "1001"
             ,"0101" -> "0010"
             ,"0010" -> "0101"
             ,"0001" -> "1010"

                ,"01" -> "10"
             ,"10" -> "01"

            (* ,"1010" -> "1010"
             ,"1001" -> "0001"
             ,"0101" -> "0010"
             ,"0010" -> "0101"
             ,"0001" -> "1001"

                ,"01" -> "01"
             ,"10" -> "10"*)
*)

(* substitutions *)

            (* ,"0001" -> "1010"
             ,"0010" -> "0010"
             ,"0101" -> "0101"
             ,"1001" -> "1001"
             ,"1010" -> "0001"
             
             (*,"0001" -> "0101"
             ,"0101" -> "0001"
             ,"1001" -> "1001"
             
             ,"001" -> "101"
             ,"101" -> "001"*)
             
             (*,"0001" -> "1001"
             ,"0101" -> "0101"
             ,"1001" -> "0001"
             
             ,"001" -> "001"
             ,"101" -> "101"*)
             
             
              
                ,"01" -> "10"
             ,"10" -> "01"*)

(*
mx = {{0, 1, 1, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}, {1, 0, 0, 0}}    usefulEVecDir/Max[usefulEVecDir] -> {1., 0.5497, 0.671044, 0.819173}
mx = {{2, 1, 1, 1}, {1, 1, 1, 0}, {0, 1, 2, 1}, {1, 0, 1, 2}}     usefulEVecDir/Max[usefulEVecDir] -> {1., 0.5497, 0.671044, 0.819173}
mx = {{1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 0, 1, 1, 0}, {0, 0, 1, 2, 1}, {1, 0, 0, 1, 2}}     usefulEVecDir/Max[usefulEVecDir] -> {1., 1., 0.5497, 0.671044, 0.819173}
mx = {{1,1,1,0,1},{1,1,0,0,0},{1,1,1,1,0},{1,1,1,2,1},{1,1,0,1,2}} usefulEVecDir/Max[usefulEVecDir] -> {0.50494, 0.166103, 0.5497, 1., 0.819173}
mx = {{1,1,1,0,0,1},{1,1,0,0,0,0},{1,1,1,1,0,0},{1,1,1,1,1,1},{1,1,1,1,1,1},{1,1,0,1,0,2}} usefulEVecDir/Max[usefulEVecDir] -> {0.50494, 0.166103, 0.5497, 1., 1., 0.819173}
mx = {{1,1,1,1,1,1},{1,1,1,1,1,1},{1,0,1,1,1,0},{0,0,1,1,1,1},{0,0,0,1,1,0},{1,0,0,1,1,2}} usefulEVecDir/Max[usefulEVecDir] -> {1., 1., 0.5497, 0.50494, 0.166103, 0.819173}

mx = {{1,1,1,1,1,1,0},{1,1,1,1,1,1,0},{1,0,1,1,1,0,0},{0,0,1,1,1,1,0},{0,0,0,1,1,0,0},{1,0,0,1,1,1,1},{1,0,0,1,1,1,1}} usefulEVecDir/Max[usefulEVecDir] -> {1., 1., 0.5497, 0.50494, 0.166103, 0.819173, 0.819173}


prodKenyon2tiles[tiles_] :=
    Module[ {i, res = {}, type, refPt},
        Do[{type, refPt} = tiles[[i]];
           Switch[type
               , typeAB, res = Join[res, {{typeBC, sc refPt}}]
            , typeAC, res = Join[res, {{typeBD, sc refPt}}]
            , typeAD, res = Join[res, {{typeAB, sc refPt - avec}}];(*AA skipped*)
            , typeBC, res = Join[res, {{typeCD, sc refPt}}]
            , typeBD, res = Join[res, {{typeBC, sc refPt + sc dvec}}];
                        res = Join[res, {{typeAC, sc refPt + sc avec + sc dvec}}];
            ,typeCD, res = Join[res, {{typeBD, sc refPt + sc dvec}}];
                        res = Join[res, {{typeAD, sc refPt + sc avec + sc dvec}}];];, {i, 
        Length[tiles]}];
        res
    ]
mx = {
    {0, 0, 0, 1, 0, 0}, 
    {0, 0, 0, 0, 1, 0}, 
    {1, 0, 0, 0, 0, 0}, 
    {0, 0, 0, 0, 0, 1},
    {0, 1, 0, 1, 0, 0}, 
    {0, 0, 1, 0, 1, 0}};
z[v_] := (res = mx.v; Print[res -> Total[v]]; res)
w[v_] := (res = T[mx].v; Print[res -> Total[v]] res)
v = {1, 1, 1, 1, 2, 1};
v = z[v];
v = z[v];
v = z[v];
v = z[v];
v = z[v];
v = z[v];
v = z[v];
v = z[v];
v = {1, 1, 1, 1, 2, 1};
v = w[v];
v = w[v];
v = w[v];
v = w[v];
v = w[v];
v = w[v];
v = w[v];
v = w[v];*)



aa1Type = 11;
aa2Type = 12;
aa3Type = 13;
aa4Type = 14;
ab1Type = 21;
ab2Type = 22;
ba1Type = 31;
ba2Type = 32;
bb1Type = 41;

subdivideTile[tile_] :=
    Module[ {(*sz,xPermuts,yPermuts,foursets,x,y,i,ix,iy, newx, newy*)},
        {tileType, level, tileRefPt, tileSamplingPts} = tile;
        Switch[tileType
            ,ba1Type,
                tileRefPtBL = {};
        ]
    ] (* subdivideTile *)

getFIBOTiles2D[level_] :=
    Module[ {(*sz,xPermuts,yPermuts,foursets,x,y,i,ix,iy, newx, newy*)},
        If[ level == 0,
            Return[{ {{0,0}} }]
        ];
        {level,tileRefPt,tileRefPt} = tile;
        If[ level == 0,
            Return[{ {xyType}, {{0,0}} }]
        ];
        foursets = Table[getFibpSet2D[level-1,randomizeFlag], {iy,2}, {ix,2}];
        sz = Length[ foursets[[1,1]] ];
        {xPermuts,yPermuts} = RandomChoice @ {
                (*{Flatten @ Table[RandomChoice[{{1,1},{1,1}}],{sz}], Flatten @ Table[RandomChoice[{{1,1},{1,1}}],{sz}]},*)
                (*{Flatten @ Table[RandomChoice[{{1,1},{1,1}}],{sz}], Flatten @ Table[RandomChoice[{{0,0},{0,0}}],{sz}]},*)
                {Flatten @ Table[RandomChoice[{{0,0},{0,0}}],{sz}], Flatten @ Table[RandomChoice[{{1,1},{1,1}}],{sz}]}
        };
        Flatten[#,2]& @ Table[
             {x,y} = foursets[[iy,ix,i]];
             newx = 2(ix-1) sz + 2 IntegerPart[x] + BitXor[xPermuts[[(ix-1) sz + IntegerPart[x] + 1]] , (iy-1)];
             newy = 2(iy-1) sz + 2 IntegerPart[y] + BitXor[yPermuts[[(iy-1) sz + IntegerPart[y] + 1]], (ix-1)];
             If[ randomizeFlag,
                 {newx,newy} + {RandomReal[],RandomReal[]},
                 {newx,newy}
             ]
        ,{iy,2}, {ix,2}, {i,sz}]
    ] (* getFibpSet2D *)

getFIBOLDS2Dgl[level_,tiles_] :=
    Module[ {},
        codeTileSamplingPtsX = First /@ Flatten[(Last /@ tiles), 1];
        codeTileSamplingPtsY = Last /@ Flatten[(Last /@ tiles), 1];
        ptsXY = {FIBOPhi[#[[1]]],FIBOPhi[#[[2]]]}& /@ T[{codeTileSamplingPtsX, codeTileSamplingPtsY}];
        {
            getFIBOGrid[2 level  ]
            ,PointSize[.05]
            ,Point /@ ptsXY
        }
    ] (* getFIBOLDS2Dgl *)

demoFIBOLDS2D[] :=
    Module[ {(*sz,xPermuts,yPermuts,foursets,x,y,i,ix,iy, newx, newy*)},
    
    (*tiles = {
        {aa1Type, level, {{0},{0}}, {{0},{0}} }
    };*)
        level = 1;
        tiles = {
            {aa1Type, level, {{0,0},{0,0}}, {{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}}} }
        };
        Graphics[
            getFIBOLDS2Dgl[level,tiles]
            , ImageSize -> {1024,1024}
        ]//Print;
    ] (* demoFIBOLDS2D *)

(*---------------------------- binaryAALDS -------------------------*)
getDiscrepancy2Dexact[set01_] :=
    Module[ {npts, d},
        Export["tmp/tmp"<>pid<>".dat",N[set01]];
        Run[execPrefix<>"stk-discrepancy -i tmp/tmp"<>pid<>".dat -o tmp/res"<>pid<>".dat -m star -I 1 > /dev/null"];
        {{npts, d}} = Import["tmp/res"<>pid<>".dat"];
        d
    ] (* getDiscrepancy2Dexact *)

subdivBinary[symbol_] :=
    {Join[symbol,{0}],Join[symbol,{1}]}

subdivBinaryWithPermut[symbol_,permut_] :=
    If[ permut == 0,
        {Join[symbol,{0}],Join[symbol,{1}]},
        {Join[symbol,{1}],Join[symbol,{0}]}
    ]

getBinaryFrac[code_] :=
    FromDigits[code, 2]/2^Length[code]

getBinaryFracXY[xycode_] :=
    {FromDigits[xycode[[1]], 2]/2^Length[xycode[[1]]],FromDigits[xycode[[2]], 2]/2^Length[xycode[[2]]]}
getBinaryIntXY[xycode_] :=
    {FromDigits[xycode[[1]], 2],FromDigits[xycode[[2]], 2]}

getBinaryGrid[nlevels_:2] :=
    Module[ {gl,symbols, coltab, delta,deltax,deltay,cur,curx,cury,symbols1,symbols2,txtcoltab,hlevels},
        hlevels = Floor[nlevels/2];
        coltab = {(*Orange*)Yellow, Cyan, Blue,Gray, Darker@Red, Orange,Blue,Red,Yellow};
        coltab = {Yellow, Red, Cyan, Blue, Magenta, Green, Black, Red, Cyan, Blue, Magenta, Green, Black};
        txtcoltab = {Red, Blue, Green, Orange};
        symbols = {{}};
        gl = {};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[1/2^(1.2 ilevel+4)]}];
            symbols = Flatten[#,1]& @ (subdivBinary /@ symbols);
            cur = 0;
            Do[
                delta = 1/2^(ilevel);
                AppendTo[gl, {Line[{{0,cur},{1,cur}}], Line[{{0,cur+delta},{1,cur+delta}}]}];
                AppendTo[gl, {Line[{{cur,0},{cur,1}}], Line[{{cur+delta,0},{cur+delta,1}}]}];
                cur += delta;
            ,{i,Length[symbols]}]
        ,{ilevel,nlevels}];
        cury = 0;
        Do[
            deltay = 1/2^(nlevels);
            curx = 0;
            Do[
                deltax = 1/2^(nlevels);
                curx += deltax;
            ,{ix,Length[symbols]}];
            cury += deltay;
        ,{iy,Length[symbols]}];
        If[ hlevels < 4,
            symbols1 = #[[;;hlevels]]& /@ symbols;
            symbols2 = #[[hlevels+1;;]]& /@ symbols;
            AppendTo[gl, {Black,Opacity[1]
                ,Table[
                        Text[ Column[Join[{
                                 Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"        " ,Pi/2],Bold,Black]
                                }
                                ,Reverse@Table[Style[  Rotate[ToString@symbols1[[i,j]],Pi/2] ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                            ]
                        ], {getBinaryFrac@symbols[[i]],0},{0,1}]
                    , {i,Length[symbols]}]
            
            
                ,Table[
                        
                        Text[ Row[Join[
                                Table[Style[  ToString[symbols1[[i,j]]]<>" " ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                                 ,{ Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"       " ,0],Bold,Black]
                        } ] ], {0,getBinaryFrac@symbols[[i]]},{1,0}]
                    , {i,Length[symbols]}]
            
                 } ];
        ];
        (*Graphics[gl,Axes->False(*,ImageSize->If[nlevels > 2, 2^nlevels{20,20}, {150,150}]*)  ]*)
        gl
    ] (* getBinaryGrid*)

goodBinarySetQ[codes_] :=
    Module[ {level,testTuples,dx,dy,xodes,ycodes},
        level = Length[First@(First@codes)];
        testTuples = {Range[0, level], level - Range[0, level]} // T;
        And @@ Table[
            {dx,dy} = testTuples[[i]];
            Length[Union[({xodes,ycodes} = #;
                          {Take[xodes,dx],Take[ycodes,dy]} & /@ #) & /@ codes]] == 2^level
        ,{i,Length[testTuples]}]
    ]

getBasicSubdivTypeBinary[] :=
    Module[ {},
        grid2 = { Thickness[.03],Orange,Table[{Line[{{0,i},{2,i}}/2],Line[{{i,0},{i,2}}/2]},{i,0,2,1}] };
        grid4 = { Thickness[.01],LightGray,Table[{Line[{{0,i},{4,i}}/4],Line[{{i,0},{i,4}}/4]},{i,0,4,1}] };
        grid8 = { Thickness[.01],Orange,Table[{Line[{{0,i},{8,i}}/8],Line[{{i,0},{i,8}}/8]},{i,0,8,1}] };
        grid16 = { Thickness[.003],Red,Table[{Line[{{0,i},{16,i}}/16],Line[{{i,0},{i,16}}/16]},{i,0,16,1}] };
        grid32 = { Thickness[.003],Orange,Table[{Line[{{0,i},{32,i}}/32],Line[{{i,0},{i,32}}/32]},{i,0,32,1}] };
        grid64 = { Thickness[.001],Blue,Table[{Line[{{0,i},{64,i}}/64],Line[{{i,0},{i,64}}/64]},{i,0,64,1}] };
        grid256 = { Thickness[.0002],Cyan,Table[{Line[{{0,i},{256,i}}/256],Line[{{i,0},{i,256}}/256]},{i,0,256,1}] };
        tup = Tuples[IntegerDigits[#, 2, 2] & /@ Range[0, 3], 2];
        t = Tuples[tup, 4];
        sel = Union@(Union/@Select[t, goodBinarySetQ[#] &]);
        tab = Table[
            codes = sel[[i]];
            pts = (getBinaryIntXY /@ codes);
            pts
        ,{i,Length[sel]}];
        basicSubdivTabBinary = Table[
            Select[tab,MemberQ[#,{ix,iy}]& ];
        ,{ix,0,3},{iy,0,3}];
        basicSubdivTabBinaryCodes = Table[
            sel = Select[tab,MemberQ[#,{ix,iy}]& ];
            Table[    ({IntegerDigits[#[[1]],2,2],IntegerDigits[#[[2]],2,2]})& /@ sel[[i]]
                ,{i,Length[sel]}]
        ,{ix,0,3},{iy,0,3}];
        Do[
            codes = basicSubdivTabBinary[[iy+1,ix+1]];
            Table[
                grect = Rectangle[#/4,#/4+1/4] & /@ codes[[i]];
                Graphics[{grid2,grid4,Gray, grect}, ImageSize->{100,100},PlotLabel->{ix,iy} -> {ix,iy}+1] 
            ,{i,Length[codes]}]//Print;
        ,{iy,0,3},{ix,0,3}];
    ]

showbasicSubdivTabBinary[] :=
    Do[
        codes = basicSubdivTabBinary[[iy+1,ix+1]];
        Table[
            grect = Rectangle[#/4,#/4+1/4] & /@ codes[[i]];
            Graphics[{getBinaryGrid[2],Gray, grect}, ImageSize->{100,100},PlotLabel->{ix,iy} -> {ix,iy}+1] 
        ,{i,Length[codes]}]//Print;
    ,{ix,0,3},{iy,0,3}]
        
basicSubdivTabBinary =
    {{  {{{0,0},{1,2},{2,1},{3,3}},{{0,0},{1,2},{2,3},{3,1}},{{0,0},{1,3},{2,1},{3,2}},{{0,0},{1,3},{2,2},{3,1}}},
        {{{0,1},{1,2},{2,0},{3,3}},{{0,1},{1,2},{2,3},{3,0}},{{0,1},{1,3},{2,0},{3,2}},{{0,1},{1,3},{2,2},{3,0}}},
        {{{0,2},{1,0},{2,1},{3,3}},{{0,2},{1,0},{2,3},{3,1}},{{0,2},{1,1},{2,0},{3,3}},{{0,2},{1,1},{2,3},{3,0}}},
        {{{0,3},{1,0},{2,1},{3,2}},{{0,3},{1,0},{2,2},{3,1}},{{0,3},{1,1},{2,0},{3,2}},{{0,3},{1,1},{2,2},{3,0}}}},
        {{{{0,2},{1,0},{2,1},{3,3}},{{0,2},{1,0},{2,3},{3,1}},{{0,3},{1,0},{2,1},{3,2}},{{0,3},{1,0},{2,2},{3,1}}},
        {{{0,2},{1,1},{2,0},{3,3}},{{0,2},{1,1},{2,3},{3,0}},{{0,3},{1,1},{2,0},{3,2}},{{0,3},{1,1},{2,2},{3,0}}},
        {{{0,0},{1,2},{2,1},{3,3}},{{0,0},{1,2},{2,3},{3,1}},{{0,1},{1,2},{2,0},{3,3}},{{0,1},{1,2},{2,3},{3,0}}},
        {{{0,0},{1,3},{2,1},{3,2}},{{0,0},{1,3},{2,2},{3,1}},{{0,1},{1,3},{2,0},{3,2}},{{0,1},{1,3},{2,2},{3,0}}}},
        {{{{0,1},{1,2},{2,0},{3,3}},{{0,1},{1,3},{2,0},{3,2}},{{0,2},{1,1},{2,0},{3,3}},{{0,3},{1,1},{2,0},{3,2}}},
        {{{0,0},{1,2},{2,1},{3,3}},{{0,0},{1,3},{2,1},{3,2}},{{0,2},{1,0},{2,1},{3,3}},{{0,3},{1,0},{2,1},{3,2}}},
        {{{0,0},{1,3},{2,2},{3,1}},{{0,1},{1,3},{2,2},{3,0}},{{0,3},{1,0},{2,2},{3,1}},{{0,3},{1,1},{2,2},{3,0}}},
        {{{0,0},{1,2},{2,3},{3,1}},{{0,1},{1,2},{2,3},{3,0}},{{0,2},{1,0},{2,3},{3,1}},{{0,2},{1,1},{2,3},{3,0}}}},
        {{{{0,1},{1,2},{2,3},{3,0}},{{0,1},{1,3},{2,2},{3,0}},{{0,2},{1,1},{2,3},{3,0}},{{0,3},{1,1},{2,2},{3,0}}},
        {{{0,0},{1,2},{2,3},{3,1}},{{0,0},{1,3},{2,2},{3,1}},{{0,2},{1,0},{2,3},{3,1}},{{0,3},{1,0},{2,2},{3,1}}},
        {{{0,0},{1,3},{2,1},{3,2}},{{0,1},{1,3},{2,0},{3,2}},{{0,3},{1,0},{2,1},{3,2}},{{0,3},{1,1},{2,0},{3,2}}},
        {{{0,0},{1,2},{2,1},{3,3}},{{0,1},{1,2},{2,0},{3,3}},{{0,2},{1,0},{2,1},{3,3}},{{0,2},{1,1},{2,0},{3,3}}}}};
basicSubdivTabBinaryCodes =
    {{{{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,1}}}},
    {{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,0}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,0}}}},
    {{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{1,1}},{{1,1},{0,0}}}},
    {{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{1,0}},{{1,1},{0,1}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{1,0}},{{1,1},{0,0}}}}},
    {{{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{1,0}},{{1,1},{0,1}}}},
    {{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{1,1}},{{1,1},{0,0}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{1,0}},{{1,1},{0,0}}}},
    {{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,0}}}},
    {{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,1}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,0}}}}},
    {{{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,0}}}},
    {{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,0}}}},
    {{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,1}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,0}}},{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{1,0}},{{1,1},{0,1}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{1,0}},{{1,1},{0,0}}}},
    {{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,0}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{1,1}},{{1,1},{0,0}}}}},
    {{{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,0}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,0}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{1,1}},{{1,1},{0,0}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{1,0}},{{1,1},{0,0}}}},
    {{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,1}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{1,0}},{{1,1},{0,1}}}},
    {{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,0}}}},
    {{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}}}}};

allSubdivTabBinaryCodes =
    {{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,1}}},
    {{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,0}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,0}}},
       {{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{1,1}},{{1,1},{0,0}}},
    {{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{1,0}},{{1,1},{0,1}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{1,0}},{{1,1},{0,0}}}};

    
basicPatterns4x4 =
    {{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{0,0}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,1}}},
    {{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{1,1}},{{1,1},{0,0}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{0,1}},{{0,1},{1,1}},{{1,0},{1,0}},{{1,1},{0,0}}},
    {{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{1,1}},{{1,1},{0,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{1,1}},{{1,1},{0,0}}},
    {{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,0}},{{1,0},{1,0}},{{1,1},{0,1}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,0}}},{{{0,0},{1,1}},{{0,1},{0,1}},{{1,0},{1,0}},{{1,1},{0,0}}}};
basicPatterns4x4base4 = {{{0,0},{1,2},{2,1},{3,3}},{{0,0},{1,2},{2,3},{3,1}},{{0,0},{1,3},{2,1},{3,2}},{{0,0},{1,3},{2,2},{3,1}},{{0,1},{1,2},{2,0},{3,3}},{{0,1},{1,2},{2,3},{3,0}},{{0,1},{1,3},{2,0},{3,2}},
    {{0,1},{1,3},{2,2},{3,0}},{{0,2},{1,0},{2,1},{3,3}},{{0,2},{1,0},{2,3},{3,1}},{{0,2},{1,1},{2,0},{3,3}},{{0,2},{1,1},{2,3},{3,0}},{{0,3},{1,0},{2,1},{3,2}},{{0,3},{1,0},{2,2},{3,1}},{{0,3},{1,1},{2,0},{3,2}},{{0,3},{1,1},{2,2},{3,0}}};


(*getBasicSetRandomX2[{xCode_,yCode_}]:=basicSubdivTabBinaryCodes[[2 FromDigits[xCode,2]+1,2 FromDigits[yCode,2]+1,RandomChoice[{1, 2, 3, 4}]]]*)
getBasicSetRandom[{xCode_,yCode_}] :=
    basicSubdivTabBinaryCodes[[FromDigits[xCode,2]+1,FromDigits[yCode,2]+1,    1]]
getBasicSetFirst[{xCode_,yCode_}] :=
    basicSubdivTabBinaryCodes[[FromDigits[xCode,2]+1,FromDigits[yCode,2]+1,RandomChoice[{1, 2, 3, 4}]]]
codes2int[{xCode_,yCode_}] :=
    {FromDigits[xCode,2],FromDigits[yCode,2]}
codes2xy[{xCode_,yCode_}] :=
    {FromDigits[xCode,2],FromDigits[yCode,2]} / 2^Length[xCode]

getRandomBasicPattern4x4[] :=
    RandomChoice@basicPatterns4x4
getRandomBasicPattern4x4[{xCode_,yCode_}] :=
    basicSubdivTabBinaryCodes[[FromDigits[xCode,2]+1,FromDigits[yCode,2]+1,RandomChoice[{1, 2, 3, 4}]]]

(*subdivBinary2D[{xCode_,yCode_},n_] :=
    Module[ {len, halflen,patternindx,patternindy,extraCodes,extraCodesx,extraCodesy,xFirstHalf,yFirstHalf,restx,resty,newxCode,newyCode,xshiftind,yshiftind,xshiftval,yshiftval},
        {newxCode,newyCode} = {Join[xCode,{0,0}],Join[yCode,{0,0}]};
        len = Length[xCode];
        halflen = len/2;
        {patternindx,patternindy} = Take[#,{halflen+1,halflen+2}]& /@ {newxCode,newyCode};
        extraCodes = getBasicSetRandom[{patternindx,patternindy}];
        Table[
            
Switch[halflen
,1,
            {extraCodesx,extraCodesy} = extraCodes[[i]];
            xFirstHalf = Join[Take[newxCode,(halflen)], extraCodesx]; 
            yFirstHalf = Join[Take[newyCode,(halflen)], extraCodesy];
             {xshiftind,yshiftind} = (1+ FromDigits[#,2]&@ (Take[ #,-(halflen+2)])) & /@ {xFirstHalf,yFirstHalf};
            {xshiftval,yshiftval} = {xshiftmask[[xshiftind]],yshiftmask[[yshiftind]]};
            restx = IntegerDigits[#,2,(halflen)]& @ BitXor[FromDigits[#,2]&@Take[Reverse@yCode,-(halflen)], xshiftval ];
            resty = IntegerDigits[#,2,(halflen)]& @ BitXor[FromDigits[#,2]&@Take[Reverse@xCode,-(halflen)], yshiftval ];
,_,
            {extraCodesx,extraCodesy} = extraCodes[[i]];
            xFirstHalf = Join[Take[newxCode,(halflen)], extraCodesx]; 
            yFirstHalf = Join[Take[newyCode,(halflen)], extraCodesy];
             {xshiftind,yshiftind} = (1+ 2 FromDigits[#,2]&@ (Take[ #,-(halflen+2)])) & /@ {xFirstHalf,yFirstHalf};
            {xshiftval,yshiftval} = {xshiftmask[[xshiftind]],yshiftmask[[yshiftind]]};
            restx = IntegerDigits[#,2,(halflen)]& @ BitXor[FromDigits[#,2]&@Take[Reverse@yCode,-(halflen)], xshiftval ];
            resty = IntegerDigits[#,2,(halflen)]& @ BitXor[FromDigits[#,2]&@Take[Reverse@xCode,-(halflen)], yshiftval ];
            (*restx = resty =Table[0,{halflen}]*);

];

            Print[{n,i} -> halflen -> (mf@{xCode,yCode}) -> (mf@{xFirstHalf,yFirstHalf}) -> (mf@{Join[xFirstHalf,restx],Join[yFirstHalf,resty]}) 
                -> {xshiftind,yshiftind}
                -> {xshiftval,yshiftval}
                -> {Take[Reverse@yCode,-(halflen)],FromDigits[#,2]&@Take[Reverse@yCode,-(halflen)], xshiftval}
                -> (mf@{restx,resty})];
            
            {Join[xFirstHalf,restx],Join[yFirstHalf,resty]}
        ,{i,Length[extraCodes]}]
    ] (* subdivBinary2DVar1 *)
*)

(*subdivBinary2D[{xCode_,yCode_},n_] :=
    Module[ {len, halflen,patternindx,patternindy,extraCodes,extraCodesx,extraCodesy,xFirstHalf,yFirstHalf,restx,resty,newxCode,newyCode,res},
        {newxCode,newyCode} = {Join[xCode,{0,0}],Join[yCode,{0,0}]};
        len = Length[xCode];
        halflen = len/2;
        {patternindx,patternindy} = Take[#,{halflen+1,halflen+2}]& /@ {newxCode,newyCode};
        (*extraCodes = getBasicSetRandom[{patternindx,patternindy}];*)
        extraCodes = getRandomBasicPattern4x4[];
        Table[
            {extraCodesx,extraCodesy} = extraCodes[[i]];
            {xFirstHalf,yFirstHalf} = Take[#,halflen]& /@ {xCode,yCode};
            {restx,resty} = Take[Reverse[#],-halflen]& /@ {yCode,xCode};
            res = {Join[xFirstHalf,extraCodesx,restx],Join[yFirstHalf,extraCodesy,resty]};
            (*Print[{n,i} -> halflen -> (mf@{xCode,yCode}) -> (mf@{extraCodesx,extraCodesy}) -> res ];*)
            res
        ,{i,Length[extraCodes]}]
    ] (* subdivBinary2DVar1 *)
pocAALDSBinary2D[nlevels_:3] :=
    Module[ {},
         codes = getBasicSetRandom[{{0,0}, {0,0}}];
        Do[
            showGraphics = If[ilevel <=4, True, False];
            pts = codes2int /@     codes;
            npts = Length[pts];
            npts = 4^ilevel;
            If[showGraphics, Graphics[{
                    getBinaryGrid[2 ilevel]
                        , Black,Rectangle[#,#+1/npts]& /@ (pts/npts)
                        ,Red,Table[Text[Style[i,24],((pts)/npts)[[i]],{-1,-1}],{i,npts}]
                        }
                    ,PlotLabel -> testHierarchicalStratified2D[pts]
                    ,ImageSize -> ilevel/3 {1024,1024} (*{750,750}*)
                    (*, PlotLabel->{ilevel,getptsMinDist12[pts]}*) ]//Print];
            Print[ilevel -> Length[pts] -> Union[Differences[ Sort[First /@ pts]]] -> getDiscrepancy2Dexact[ pts/npts]];

            If[ilevel != nlevels, 
                xshiftmask = Table[FromDigits[#,2]& @ Table[RandomChoice[{1,1}],{ ilevel+1}],{2^(2 ilevel+1)}];
                yshiftmask = Table[FromDigits[#,2]& @ Table[RandomChoice[{1,1}],{ ilevel+1}],{2^(2 ilevel+1)}];
                Do[
                    {xCode,yCode} = codes[[i]];

                    {xshiftind,yshiftind} = (1 + 2 FromDigits[#,2])& /@ {xCode,yCode}; 
                    {xshiftval,yshiftval} = FromDigits[#,2]& /@ (Take[Reverse[#],-ilevel]& /@ {yCode,xCode});
                    {xshiftmask[[xshiftind]],yshiftmask[[yshiftind]]} = {xshiftval,yshiftval};
                    (*Print[i,mf@{xCode,yCode} -> {xshiftind,yshiftind} -> {xshiftval,yshiftval}]*);
                ,{i,Length[codes]}];
                (*Print[mf /@ xshiftmask]*);
                codes = Flatten[#, 1] & @(subdivBinary2D /@ codes)
            ];
        ,{ilevel,1,nlevels}];
    ] (* pocAALDSBinary2D *)
         {lastdigitsindx,lastdigitsindy} = Take[#,-2]& /@ {xCode,yCode};
         lastdigits = getBasicSetRandom[{lastdigitsindx, lastdigitsindy}];
         {newxCode,newyCode} = {Join[xCode,{0,0}],Join[yCode,{0,0}]};
        {patternindx,patternindy} = Take[#,{halflen+1,halflen+2}]& /@ {newxCode,newyCode};
        extraCodes = getBasicSetRandom[{patternindx,patternindy}];
        Table[
            {extraCodesx,extraCodesy} = extraCodes[[i]];
            {lastdigitsx,lastdigitsy} = lastdigits[[i]];
            newxCode[[halflen+1;;halflen+2]] = extraCodesx;
            newyCode[[halflen+1;;halflen+2]] = extraCodesy;
            newxCode[[halflen+3;;]] = Reverse @ yCode;
            newyCode[[halflen+3;;]] = Reverse @ xCode;
            res = {Join[xCode,extraCodesx,restx],Join[yFirstHalf,extraCodesy,resty]};
             Print[(i -> mf@{xCode,yCode}) -> (mf @ {extraCodesx,extraCodesy}) -> (mf @ {lastdigitsx,lastdigitsy}) -> (mf @ {newxCode,newyCode}) ];
             {newxCode,newyCode}
        ,{i,Length[extraCodes]}]

DBGsubdivBinary2D[{xCode_,yCode_}] :=
    Module[ {halflen=Length[xCode]/2,len=Length[xCode],extraCodes,xFirstHalf,yFirstHalf,restx,resty,newxCode,newyCode,patternindx,patternindy,res,resx,resy},
         {newxCode,newyCode} = {Join[xCode,{0,0}],Join[yCode,{0,0}]};
        {patternindx,patternindy} = Take[#,{halflen+1,halflen+2}]& /@ {newxCode,newyCode};
        extraCodes = getBasicSetRandom[{patternindx,patternindy}];
        {xFirstHalf,yFirstHalf} = Take[#,halflen]& /@ {xCode,yCode};
        {restx,resty} = Take[#,-halflen]& /@ {xCode,yCode} ;
        (*res = {Join[xFirstHalf,#[[1]],restx],Join[yFirstHalf,#[[2]],resty]}& /@ extraCodes;   *)
        res = Table[
            {resx,resy} = {newxCode,newyCode};
            resx[[halflen+1;;halflen+2]] = extraCodes[[i,1]];
            resy[[halflen+1;;halflen+2]] = extraCodes[[i,2]];
            (*resx[[len+1;;len+2]] = Reverse @ (BitXor @@ {resy[[;;2]], xshiftmask[[ 1 + FromDigits[resx[[;;len]],2] ]] });
            resy[[len+1;;len+2]] = Reverse @ (BitXor @@ {resx[[;;2]], yshiftmask[[ 1 + FromDigits[resy[[;;len]],2] ]] });*)

            resx[[halflen+3;;len+2]] = Reverse @ resy[[;;halflen]];
            resy[[halflen+3;;len+2]] = Reverse @ resx[[;;halflen]];

            (*Print[i -> resy[[;;halflen]] ->  xshiftmask[[ 1 + FromDigits[resx[[;;len]],2] ]] -> resx[[halflen+3;;len+2]] ];*)
            {resx,resy}
            ,{i,Length[extraCodes]}];   
        res 
     ] (* DBGsubdivBinary2D *)
*)

(* subdivBinary2DVar1[{xCode_,yCode_}] := 
    Module[ {halflen=Length[xCode]/2,extraCodes,xFirstHalf,yFirstHalf,restx,resty},
        {xFirstHalf,yFirstHalf} = Take[#,halflen]& /@ {xCode,yCode};
        (*{restx,resty} = Take[Reverse[#],-halflen]& /@ {yCode,xCode};*)
        {restx,resty} = Take[#,-halflen]& /@ {xCode,yCode} ;
        extraCodes = getRandomBasicPattern4x4[];
        {Join[xFirstHalf,#[[1]],restx],Join[yFirstHalf,#[[2]],resty]}& /@ extraCodes
    ] (* subdivBinary2DVar1 *)*)


(*subdivBinary2D[{order_,{xCode_,yCode_}}] :=
    Module[ {halflen=Length[xCode]/2,extraCodes,xFirstHalf,yFirstHalf,xind,yind,dx,dy,res,newxCode,newyCode,patternindx,patternindy},
         {newxCode,newyCode} = {Join[xCode,{0,0}],Join[yCode,{0,0}]};
        {patternindx,patternindy} = FromDigits[#,2]& /@ (Take[#,{halflen+1,halflen+2}]& /@ {newxCode,newyCode});
        extraCodes = getGoodOrderedPattern[1,patternindx,patternindy];
        {xFirstHalf,yFirstHalf} = Take[#,halflen]& /@ {xCode,yCode};
        (*{restx,resty} = Take[Reverse[#],-halflen]& /@ {yCode,xCode};    (* possibly xor-ring with masks... *)*)
        (*{restx,resty} = Take[#,-halflen]& /@ {xCode,yCode};    (* possibly xor-ring with masks... *)*)
        {dx,dy} = Take[#,-halflen]& /@ {xCode,yCode};
        Table[
            If[halflen == 1,
                xind = Join[xFirstHalf,extraCodes[[i,2,1,1;;1]] ];
                yind = Join[yFirstHalf,extraCodes[[i,2,2,1;;1]] ];
            ,(*ELSE*)
                {xind,yind} = {xCode,yCode};
                xind[[halflen+1;;halflen+2]] = extraCodes[[i,2,1 ]];
                yind[[halflen+1;;halflen+2]] = extraCodes[[i,2,2 ]];
                dx[[halflen - 1;;]] = BitXor@@{xshiftmask[[ 1 + FromDigits[#,2]& @ xind]], Reverse @ (Take[#,2]& @ yFirstHalf)}; 
                dy[[halflen - 1;;]] = BitXor@@{yshiftmask[[ 1 + FromDigits[#,2]& @ yind]], Reverse @ (Take[#,2]& @ xFirstHalf)}; 
                Print[i -> (FromDigits[#,4]& @ order) -> xCode -> xind -> (1 + FromDigits[#,2]& @ xind) -> {xshiftmask[[ 1 + FromDigits[#,2]& @ xind]], Reverse @ (Take[#,2]& @ yFirstHalf)} -> dx ];
                Print[i -> (FromDigits[#,4]& @ order) -> yCode -> yind -> (1 + FromDigits[#,2]& @ yind) -> {yshiftmask[[ 1 + FromDigits[#,2]& @ yind]], Reverse @ (Take[#,2]& @ xFirstHalf)} -> dx ];
            ];
            res = {Join[extraCodes[[i,1]],order], {Join[xFirstHalf,extraCodes[[i,2,1]],dx], Join[yFirstHalf,extraCodes[[i,2,2]],dy]}};
            Print[{order,{xCode,yCode}} -> res];
            res
        ,{i,Length[extraCodes]}]
    ]
*)


(*subdivBinary2D[{order_,{xCode_,yCode_}}] :=
    Module[ {halflen=Length[xCode]/2,extraCodes,xFirstHalf,yFirstHalf,taily,tailx,newxCode,newyCode,patternindx,patternindy,dx,dy,res},
         {newxCode,newyCode} = {Join[xCode,{0,0}],Join[yCode,{0,0}]};
        {patternindx,patternindy} = FromDigits[#,2]& /@ (Take[#,{halflen+1,halflen+2}]& /@ {newxCode,newyCode});
        extraCodes = getGoodOrderedPattern[1,patternindx,patternindy];
        
        {xFirstHalf,yFirstHalf} = Take[#,halflen]& /@ {xCode,yCode};
        (*{tailx,taily} = Take[#,-halflen]& /@ {xCode,yCode};*)
        {tailx,taily} = (Reverse /@ {yFirstHalf,xFirstHalf});
        (*Print[{order,{xCode,yCode}} -> {tailx,taily}];*)
        res = Table[{
            Join[extraCodes[[i,1]],order], 
                {Join[xFirstHalf,extraCodes[[i,2,1]],tailx], 
                 Join[yFirstHalf,extraCodes[[i,2,2]],taily]}
        },{i,Length[extraCodes]}];
        res
    ]
*)


OLDsubdivBinary2D[{order_,{xCode_,yCode_}}] :=
    Module[ {halflen = Length[xCode]/2,extraCodes,maskindx,maskindy,newxCode,newyCode,patternindx,patternindy,res},
        {newxCode,newyCode} = {Join[xCode,{0,0}],Join[yCode,{0,0}]};
(*{zzznewxCode,zzznewyCode} = {newxCode,newyCode};*)
        {patternindx,patternindy} = FromDigits[#,2]& /@ (Take[#,{halflen+1,halflen+2}]& /@ {newxCode,newyCode});
        extraCodes = getGoodOrderedPattern[1,patternindx,patternindy];
        res = Table[
            newxCode[[halflen+1;;halflen+2]] = extraCodes[[i,2,1]];
            newyCode[[halflen+1;;halflen+2]] = extraCodes[[i,2,2]];
            maskindx = 1 + FromDigits[#,2]& @ newxCode[[;;2 halflen]];
            maskindy = 1 + FromDigits[#,2]& @ newyCode[[;;2 halflen]];
(*If[ (FromDigits[#,2]& @ newxCode) < 32 && (FromDigits[#,2]& @ newyCode) < 512,
    Print[i -> (mf /@ {order,{xCode,yCode}}) -> (FromDigits[#,4]& @ order) ->  (mf @ {xshiftmask[[maskindx]], Reverse @ yCode[[ ;; 2]]}) -> (mf @ {zzznewxCode,zzznewyCode}) -> (mf @ {newxCode,newyCode}) -> (mf/@extraCodes)] ;
];*)
            newxCode[[halflen + 3;;]] = BitXor @@ {shiftmask[[maskindx]], Reverse @ (Take[#,halflen]& @ yCode) };
            newyCode[[halflen + 3;;]] = BitXor @@ {shiftmask[[maskindy]], Reverse @ (Take[#,halflen]& @ xCode) };
(*Print[i -> (mf /@ {order,{xCode,yCode}}) -> (BitXor @@ {shiftmask[[maskindx]], Reverse @ (Take[#,halflen]& @ yCode) }) -> newxCode ] ;
*)
            {Join[extraCodes[[i,1]],order], {newxCode,newyCode} }
        ,{i,Length[extraCodes]}];
        (*Print[(mf /@ {order,{xCode,yCode}}) -> (mf /@ res)]*) ;
        res
    ] (* OLDsubdivBinary2D *)


subdivBinary2D[{order_,{xCode_,yCode_}}] :=
    Module[ {halflen = Length[xCode]/2,extraCodes,maskindx,maskindy,newxCode,newyCode,patternindx,patternindy,res},
        {newxCode,newyCode} = {Join[xCode,{0,0}],Join[yCode,{0,0}]};
        {patternindx,patternindy} = FromDigits[#,2]& /@ (Take[#,{halflen+1,halflen+2}]& /@ {newxCode,newyCode});
        extraCodes = getGoodOrderedPattern[1,patternindx,patternindy];
        res = Table[
            newxCode[[halflen+1;;halflen+2]] = extraCodes[[i,2,1]];
            newyCode[[halflen+1;;halflen+2]] = extraCodes[[i,2,2]];
            maskindx = 1 + FromDigits[#,2]& @ newxCode[[ ;; halflen+1 ]];
            maskindy = 1 + FromDigits[#,2]& @ newyCode[[ ;; halflen+1 ]];
            If[ halflen == 1,
                (*newxCode[[2 halflen + 1;;]] = BitXor @@ {shiftmask[[maskindx,maskindy]], newyCode[[1;;2]]};
                newyCode[[2 halflen + 1;;]] = BitXor @@ {shiftmask[[maskindy,maskindx]], newxCode[[1;;2]]};*)
                newxCode[[2 halflen + 1;;]] = shiftmask[[maskindx,maskindy]];
                newyCode[[2 halflen + 1;;]] = shiftmask[[maskindy,maskindx]];,
                (*newxCode[[halflen + 2;;]] = BitXor @@ {shiftmask[[maskindx,maskindy]], (Take[#,halflen+1]& @ newyCode) };
                newyCode[[halflen + 2;;]] = BitXor @@ {shiftmask[[maskindy,maskindx]], (Take[#,halflen+1]& @ newxCode) };*)
                newxCode[[halflen + 2;;]] = shiftmask[[maskindx,maskindy]];
                newyCode[[halflen + 2;;]] = shiftmask[[maskindy,maskindx]];
            ];
(*                Print[i -> (mf /@ {order,{xCode,yCode}}) -> {FromDigits[#,4]& @ order, FromDigits[#,4]& @ Join[extraCodes[[i,1]],order]} ->{maskindx,maskindy} -> shiftmask[[maskindx,maskindy]] -> newxCode ];
*)
            {Join[extraCodes[[i,1]],order], {newxCode,newyCode} }
        ,{i,Length[extraCodes]}];
        (*Print[(mf /@ {order,{xCode,yCode}}) -> (mf /@ res)]*) ;
        res
    ] (* subdivBinary2D *)

pocAALDSBinary2D[nlevels_:4, dbg_:True, generateDiscrepancy_:Last ] :=
    Module[ {},
        (*fname = "data/codes_Binary2D_1M.dat";
        If[ !known[codes1M], codes1M = Get[fname] ];
        Print["Reading ",fanme,": done."];*)
        If[ generateDiscrepancy,
            discrepancyTabBinary2D = Table[{},{nlevels}]
        ];
        codes = Sort @ getGoodOrderedPattern[1]; (* very first version: getBasicSetRandom[{{0},{0,0}, {0,0}}]; *)
        Do[
            showGraphics = If[ ilevel <= 4,
                               True,
                               False
                           ];
            showGraphics = dbg;
            pts = codes2int /@ ((*IntegerDigits[#,2,2 ilevel]& /@ *)(Last /@ codes) );
            npts = Length[pts];
            npts = 4^ilevel;
            If[ generateDiscrepancy,
                ptsXY = pts / npts;
                discrepancy = getDiscrepancy2Dexact[ptsXY];
                discrepancyTabBinary2D[[ilevel]] = { npts, discrepancy};
                Print["discrepancyTabBinary2D" -> ilevel -> Length[codes] -> discrepancy];
                Print[discrepancyTabBinary2D];
            ];
            If[ showGraphics,
                Graphics[{
                Opacity[.5],getBinaryGrid[2 ilevel],Opacity[1]
                , Black,Rectangle[#,#+1/npts]& /@ (pts/npts)
                ,Black,Table[Text[Style[i-1,12],((pts)/npts)[[i]],{-1,-1}],{i,npts}]
                (*,Red,PointSize[.01],Table[Point[(codes2xy @ codes1M[[i,2]]) ],{i,npts}]*)
                }
                (*,PlotLabel -> testHierarchicalStratified2D[pts]*)
                ,ImageSize -> ilevel/2 {1024,1024} (*{750,750}*)
                (*, PlotLabel->{ilevel,getptsMinDist12[pts]}*) ]//Print
            ];
            (*Print[ilevel -> Length[pts] -> testHierarchicalStratified2D[pts,False]];*)
            If[ ilevel != nlevels,
                shiftmask = getShiftMasks[ilevel];
                fname = "data/binary_shiftmask_"<>ToString[ilevel]<>".dat";
                Print[" reading ", fname];
                shiftmask = Get[fname];
                (*Print[(mf @ shiftmask) ];*)
                codes = Sort @ (Flatten[#, 1] & @(subdivBinary2D /@ codes));
            (*Print[mf /@ codes];*)
            ];
        
        ,{ilevel,1,nlevels}];
        If[ generateDiscrepancy,
            discrepancyTabSobol = { (* Sobol 2D Kuo's implementation http://web.maths.unsw.edu.au/~fkuo/sobol/ *)
                    {16, 0.171875},(*pSobol2Dlog1 = discrepancyComplexity[data, (Log[#])/# &, "Discrepancy Sobol 2D N/LogN"]; pSobol2Dlog1 //Print;*)
                     {64, 0.0537109}, 
                     {256, 0.0145874}, 
                     {1024, 0.00429916}, 
                     {4096, 0.00132918}, 
                     {16384, 0.000372991}, 
                     {65536, 0.0000994867},
                     {262144, 0.000027597358}
                 };
            ListPlot[{Log /@ discrepancyTabBinary2D, Log /@ discrepancyTabSobol}, Joined->True,PlotLabel->"log-log discrepancy"]//Print;
        ];
        If[ nlevels == 10,
            fname = "data/codes_Binary2D_1M.dat";
            Put[codes,fname];
            Print["Writing ",fname,": done."];
        ];
    ] (* pocAALDSBinary2D *)

getShiftMasks[nlevels_:1] :=
    Module[ {sz,basicSeq},
        sz = 2^(nlevels + 1);
        basicSeq = Reverse /@ (IntegerDigits[#, 2, (nlevels + 1)] & /@ Range[0, sz - 1]);
        If[ nlevels == 1,
            Return[ Table[(BitXor@@{#,Reverse@basicSeq[[i]]})& /@ basicSeq,{i,sz}] ]
        ];
        Table[
            If[ OddQ[i],
                (BitXor@@{#,Reverse@basicSeq[[(i+1)/2]]})& /@ basicSeq,(*ELSE*)
                (BitXor@@{#,basicSeq[[Mod[(i+4)/2 ,sz,1] ]]})& /@ basicSeq
            ]
        ,{i,sz}]
    ] (* getShiftMasks *)

ZZZgetShiftMasks[nlevels_:1] :=
    Module[ {last,len},
        If[ nlevels == 1,
            Return[{{0},{1},{0},{1}}]
        ];
        last = Flatten @ getShiftMasks[1];
        Do[last = Flatten[#, 1] &@({last, (1 - last), last, (1 - last)}), {nlevels-1}];
        len = Length[last];
        Reverse /@ (Join[{last},Table[
            last = Take[#,len]& @ Flatten[T[{last, last}] ]
        ,{ilevel,nlevels-1}] ]//T)
    ] (* ZZZgetShiftMasks *)


ZZZsubdivBinary2D[{order_,{xCode_,yCode_}}] :=
    Module[ {halflen = Length[xCode]/2,extraCodes,maskindx,maskindy,newxCode,newyCode,patternindx,patternindy,res},
        {newxCode,newyCode} = {Join[xCode,{0,0}],Join[yCode,{0,0}]};
        {zzznewxCode,zzznewyCode} = {newxCode,newyCode};
        {patternindx,patternindy} = FromDigits[#,2]& /@ (Take[#,{halflen+1,halflen+2}]& /@ {newxCode,newyCode});
        extraCodes = getGoodOrderedPattern[1,patternindx,patternindy];
        res = Table[
            newxCode[[halflen+1;;halflen+2]] = extraCodes[[i,2,1]];
            newyCode[[halflen+1;;halflen+2]] = extraCodes[[i,2,2]];
            maskindx = 1 + FromDigits[#,2]& @ newxCode[[;;2 halflen]];
            maskindy = 1 + FromDigits[#,2]& @ newyCode[[;;2 halflen]];
(*If[ (FromDigits[#,2]& @ newxCode) < 32 && (FromDigits[#,2]& @ newyCode) < 512,
    Print[i -> (mf /@ {order,{xCode,yCode}}) -> (FromDigits[#,4]& @ order) ->  (mf @ {xshiftmask[[maskindx]], Reverse @ yCode[[ ;; 2]]}) -> (mf @ {zzznewxCode,zzznewyCode}) -> (mf @ {newxCode,newyCode}) -> (mf/@extraCodes)] ;
];*)
            If[ halflen > 1,
                newxCode[[2 halflen + 1;;]] = BitXor @@ {xshiftmask[[maskindx]], Reverse @ yCode[[ ;; 2]] };
                newyCode[[2 halflen + 1;;]] = BitXor @@ {yshiftmask[[maskindy]], Reverse @ xCode[[ ;; 2]]};,(*ELSE*)
                newxCode[[2 halflen + 2;;]] = BitXor @@ {xshiftmask[[maskindx,2;
                                                                              2]], yCode[[1;;1]]};
                newyCode[[2 halflen + 2;;]] = BitXor @@ {yshiftmask[[maskindy,2;
                                                                              2]], xCode[[1;;1]]};
            (*Print[i,(mf /@ {order,{xCode,yCode}}) -> (maskindx-1) -> {xshiftmask[[maskindx,2;;2]], Reverse @ yCode[[1;;1]]} ];*)
            ];
(*If[ (FromDigits[#,2]& @ newxCode) < 32 && (FromDigits[#,2]& @ newyCode) < 512,
    Print[i -> (mf /@ {order,{xCode,yCode}}) -> (FromDigits[#,4]& @ order) -> (FromDigits[#,4]& @ Join[extraCodes[[i,1]],order]) -> (mf @ {xshiftmask[[maskindx]], Reverse @ yCode[[ ;; 2]]}) -> (mf @ {newxCode,newyCode}) -> (FromDigits[#,2]&/@{newxCode,newyCode})] ;
];*)
            {Join[extraCodes[[i,1]],order], {newxCode,newyCode} }
        ,{i,Length[extraCodes]}];
        (*Print[(mf /@ {order,{xCode,yCode}}) -> (mf /@ res)]*) ;
        res
    ]


PREPpocAALDSBinary2D[nlevels_:6, generateDiscrepancy_:False ] :=
    Module[ {},
        (*fname = "data/codes_Binary2D_1M.dat";
        If[ !known[codes1M], codes1M = Get[fname] ];
        Print["Reading ",fanme,": done."];*)
        If[ generateDiscrepancy,
            discrepancyTabBinary2D = Table[{},{nlevels}]
        ];
        codes = Sort @ getGoodOrderedPattern[1]; (* very first version: getBasicSetRandom[{{0},{0,0}, {0,0}}]; *)
        Do[
            showGraphics = If[ ilevel <= 4,
                               True,
                               False
                           ];
            pts = codes2int /@ ((*IntegerDigits[#,2,2 ilevel]& /@ *)(Last /@ codes) );
            npts = Length[pts];
            npts = 4^ilevel;
            If[ generateDiscrepancy,
                ptsXY = pts / npts;
                discrepancy = getDiscrepancy2Dexact[ptsXY];
                discrepancyTabBinary2D[[ilevel]] = { npts, discrepancy};
                Print["discrepancyTabBinary2D" -> ilevel -> Length[codes] -> discrepancy];
                Print[discrepancyTabBinary2D];
            ];
            If[ showGraphics,
                Graphics[{
                getBinaryGrid[2 ilevel]
                , Gray,Rectangle[#,#+1/npts]& /@ (pts/npts)
                ,Black,Table[Text[Style[i-1,24],((pts)/npts)[[i]],{-1,-1}],{i,npts}]
                (*,Red,PointSize[.01],Table[Point[(codes2xy @ codes1M[[i,2]]) ],{i,npts}]*)
                }
                (*,PlotLabel -> testHierarchicalStratified2D[pts]*)
                ,ImageSize -> ilevel/2 {1024,1024} (*{750,750}*)
                (*, PlotLabel->{ilevel,getptsMinDist12[pts]}*) ]//Print
            ];
            Print[ilevel -> Length[pts] -> testHierarchicalStratified2D[pts]];
            If[ ilevel != nlevels+1,
                xshiftmask = Table[(*FromDigits[#,2]& @*) Table[RandomChoice[{0,0}],{ ilevel}],{2^(2 ilevel)}];
                yshiftmask = Table[(*FromDigits[#,2]& @*) Table[RandomChoice[{0,0}],{ ilevel}],{2^(2 ilevel)}];
                Do[
                    {order,{xCode,yCode}} = codes[[i]];
                    {xshiftind,yshiftind} = (1 + FromDigits[#,2])& /@ {xCode,yCode};
                    {xshiftval,yshiftval} = (*FromDigits[#,2]& /@*)  (Take[Reverse[#],-2]& /@ {yCode,xCode});
                    {xshiftmask[[xshiftind]],yshiftmask[[yshiftind]]} = {xshiftval,yshiftval};
                    (*Print[i-1,mf@{xCode,yCode} -> {xshiftind,yshiftind} -> {xshiftval,yshiftval}];*)
                ,{i,Length[codes]}];
                (*Print[mf @ T[{Range[Length[xshiftmask]],xshiftmask}],mf @ T[{Range[Length[yshiftmask]],yshiftmask}]]*);

                (*cc = Sort[Last /@ codes];
                  tabxy = Table[
                      halflen=ilevel;
                      {xCode,yCode} = cc[[i]];
                      (*Reverse @ (BitXor@@{Take[Reverse @ xCode ,-(halflen)], Take[ yCode ,(halflen)]})*)
                      Reverse @ Take[ yCode ,(halflen)]
                  ,{i,Length[cc]}];
                  Print[mf @ T[{Range[Length[xshiftmask]],xshiftmask}]," xy". ilevel -> Length[cc] -> (mf @ T[{Range[Length[cc]],tabxy}]) ];
                  fname = "data/binary_shiftmask_"<>ToString[ilevel]<>".dat";
                  Print[" writing ", fname];
                Put[tabxy,fname];*)
                codes = Sort @ (Flatten[#, 1] & @(ZZZsubdivBinary2D /@ codes));
                cc = Sort[Last /@ codes];
                tabxy = Table[
                    halflen = ilevel+1;
                    {xCode,yCode} = cc[[i]];
                      (*Reverse @ (BitXor@@{Take[Reverse @ xCode ,-(halflen)], Take[ yCode ,(halflen)]})*)
                    cx = Take[xCode,  (halflen)];
                    cy = Take[yCode,  (halflen)];
                    dx = Take[xCode, -(halflen)];
                    {cx,cy, dx(*BitXor@@{dx,cy}*) }
                ,{i,Length[cc]}]//Sort;
                  (*Print[mf @ T[{Range[Length[xshiftmask]],xshiftmask}]," xy". ilevel -> Length[cc] -> (mf @ T[{Range[Length[cc]],tabxy}]) ];*)
                fname = "data/binary_shiftmask_"<>ToString[ilevel]<>".dat";
                Print[" writing ", fname];
                Put[Partition[#,2^(ilevel+1)]& @ (Last /@ tabxy),fname];
            (*Print[mf /@ codes];*)
            ];
        
        
        ,{ilevel,1,nlevels}];
        If[ generateDiscrepancy,
            discrepancyTabSobol = { (* Sobol 2D Kuo's implementation http://web.maths.unsw.edu.au/~fkuo/sobol/ *)
                    {16, 0.171875},(*pSobol2Dlog1 = discrepancyComplexity[data, (Log[#])/# &, "Discrepancy Sobol 2D N/LogN"]; pSobol2Dlog1 //Print;*)
                     {64, 0.0537109}, 
                     {256, 0.0145874}, 
                     {1024, 0.00429916}, 
                     {4096, 0.00132918}, 
                     {16384, 0.000372991}, 
                     {65536, 0.0000994867},
                     {262144, 0.000027597358}
                 };
            ListPlot[{Log /@ discrepancyTabBinary2D, Log /@ discrepancyTabSobol}, Joined->True,PlotLabel->"log-log discrepancy"]//Print;
        ];
        If[ nlevels == 10,
            fname = "data/codes_Binary2D_1M.dat";
            Put[codes,fname];
            Print["Writing ",fname,": done."];
        ];
    ] (* PREPpocAALDSBinary2D *)

DBGpocAALDSBinary2D[nlevels_:3] :=
    Module[ {},
        codes = getBasicSetRandom[{{0,0}, {0,0}}];
        Do[
            showGraphics = If[ ilevel <= 4,
                               True,
                               False
                           ];
            pts = codes2int /@     codes;
            npts = Length[pts];
            npts = 4^ilevel;
            If[ showGraphics,
                Graphics[{
                getBinaryGrid[2 ilevel]
                , Black,Rectangle[#,#+1/npts]& /@ (pts/npts)
                (*,Red,Table[Text[Style[i,24],((pts)/npts)[[i]],{-1,-1}],{i,npts}]*)
                }
                (*,PlotLabel -> testHierarchicalStratified2D[pts]*)
                ,ImageSize -> ilevel/3 {1024,1024} (*{750,750}*)
                (*, PlotLabel->{ilevel,getptsMinDist12[pts]}*) ]//Print
            ];
            Print[ilevel -> Length[pts] -> testHierarchicalStratified2D[pts] -> getDiscrepancy2Dexact[ pts/npts]];
            If[ ilevel != nlevels,
                xshiftmask = Table[{},{i,Length[codes]}];
                yshiftmask = Table[{},{i,Length[codes]}];
                Do[
                    {xCode,yCode} = codes[[i]];
                    {xshiftval,yshiftval} = Take[#,2]& /@ {yCode,xCode};
                    {xshiftind,yshiftind} = 1 + FromDigits[#,2]& /@ {xCode,yCode};
                    {xshiftmask[[xshiftind]],yshiftmask[[yshiftind]]} = {xshiftval,yshiftval};
                    (*Print[i,mf@{xCode,yCode} -> {xshiftval,yshiftval}];*)
                ,{i,Length[codes]}];
                (*Print[mf /@ xshiftmask];
                Print[mf /@ yshiftmask ];*)
                codes = Flatten[#, 1] & @(subdivBinary2D /@ codes)
            ];
            If[ ilevel == 5,
                set = pts//Sort;
                Graphics[{getBinaryGrid[6]
                            , Black,Point /@ (pts/npts)
                            ,Black,Table[Text[Style[i,10],((pts)/npts)[[i]],{-1,-1}],{i,npts}]
                            }
                        ,ImageSize -> 2 {1024,1024}]//Print;
            ];
            If[ ilevel == 6,
                set = pts//Sort;
                Graphics[{getBinaryGrid[6]
                            , Black,Point /@ (pts/npts)
                            ,Black,Table[Text[Style[i,10],((pts)/npts)[[i]],{-1,-1}],{i,npts}]
                            }
                        ,ImageSize -> 2 {1024,1024}]//Print;
                Graphics[{Black,Point /@ (pts/npts)}
                        ,ImageSize ->
                         {1024,1024}]//Print;
            ];
        
        ,{ilevel,1,nlevels}];
    ] (* DBGpocAALDSBinary2D *)

testHierarchicalStratified2D[set_,dbg_:True] :=
    Module[ {sz,powers,tests,i,tab,gl,stepx,stepy},
        sz = Length[set];
        powers = Table[2^i,{i,0,Log[2,sz]}];
        tests = Select[Tuples[powers, 2], (Times @@ #) == sz &];
        tab = Table[Length[Union[Quotient[#, tests[[i]]] & /@ set]] == sz,{i,Length[tests]}];
        If[ And @@ tab == False,
            Print["testHierarchicalStratified2D: ", Select[{tests,tab}//T,Last[#]==False&]//mf, " -> ", Length[Select[{tests,tab}//T,Last[#]==False&]]  -> Table[Length[Union[Quotient[#, tests[[i]]] & /@ set]] ,{i,Length[tests]}]]
        ];
        If[ dbg,
            Table[
                gl = {};
                {stepx,stepy} = tests[[i]];
                Do[AppendTo[gl,Line[{{ix,0},{ix,sz}}]],{ix,0,sz,stepx}];
                Do[AppendTo[gl,Line[{{sz,iy},{0,iy}}]],{iy,0,sz,stepy}];
                Graphics[{{Cyan,gl},Point/@set }, PlotLabel->tests[[i]]]
            ,{i,Length[tests]}]//Print;
        ];
        And @@ tab
    ] (* testHierarchicalStratified2D *)

preppocAALDSBinary2D[innlevels_:4, ind1_:1, ind2_:2, dbgTxt_:False ] :=
    Module[ {},
        ptsz = .01;
        nlevels = innlevels;
        buildMSobol[{ind1, ind2}];
        (*Print["Sobol dir number ind=",ind1," a058947[[ind1]]=", a058947[[ind1]] -> (IntegerDigits @ a058947[[ind1]])];*)
        If[ dbgTxt,
            Print["msobol"-> msobol[[1,;;20]]];
            Print["msobol"-> mf[ Table[Join[ Table[" ",{20-i}], Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]) ], {i,20}] ] ];
        ];
        Do[
            npts =  2^ilevel;
            npos = Ceiling[Log[2,npts]];
            newtab = Table[
                n = inunmber;
                nf = 1;
                seq = IntegerDigits[n,2] //Reverse;
                seqlen = Length[seq];
                seqpadded = PadRight[#,ilevel]& @ seq;
                nn = BitXor @@ Table[ seq[[i]] msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}];
                nnpadded = PadRight[#,ilevel]& @ (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  );
                newval = FromDigits[ nnpadded ,2];
                If[ dbgTxt,
                    Print[n -> Reverse[seqpadded] -> seqpadded 
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (seq[[i]] msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  )
                     -> nnpadded -> newval -> (newval / 2^ilevel)
                     ];
                ];
                {x,y} = {n,npts sobol1d[nf,n]};
                newval
            ,{inunmber,0,npts-1}];
            ptsx = Table[npts sobol1d[nf,i],{i,0,npts-1}];
        ,{ilevel,nlevels}];

(*Abort[]*);
        (* y *)

        (*Print["Sobol dir number ind=",ind2," a058947[[ind2]]=", a058947[[ind2]] -> (IntegerDigits @ a058947[[ind2]])];*)
        (*If[dbgTxt, 
            Print["msobol"-> msobol[[2,;;20]]];
            Print["msobol"-> mf[ Table[Join[ Table[" ",{20-i}], Take[#,i]& @ (IntegerDigits[msobol[[nf,i]],2,i]) ], {i,20}] ] ];
        ];*)
        Table[
            npts =  2^ilevel;
            npos = Ceiling[Log[2,npts]];
            gobj = Table[
                n = inunmber;
                nf = 2;
                seq = IntegerDigits[n,2] //Reverse;
                seqlen = Length[seq];
                seqpadded = PadRight[#,ilevel]& @ seq;
                nn = BitXor @@ Table[ seq[[i]] msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}];
                nnpadded = PadRight[#,ilevel]& @ (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  );
                newval = FromDigits[ nnpadded ,2];
                If[ dbgTxt,
                    Print[n -> seqpadded 
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> mf[Table[ IntegerDigits[#,2,seqlen]& @ (seq[[i]] msobol[[nf,i]] 2^(seqlen-i)), {i, seqlen}]]  
                     -> (IntegerDigits[#,2,seqlen]& @  (BitXor @@ Table[seq[[i]]  msobol[[nf,i]] 2^(seqlen-i), {i, seqlen}])  )
                     -> nnpadded -> newval -> (newval / 2^ilevel)
                     ];
                ];
                {x,y} = {n,npts sobol1d[nf,n]};
                lbl = StringJoin[ToString/@IntegerDigits[n,2]];
                col = If[ seqlen < 6,
                          getColor[n],
                          getColor[seqlen]
                      ];
                {col,PointSize[.02],Point[{x,y}],Black,Text[lbl,{x,y},{-1,-1}]}
            ,{inunmber,0,npts-1}];
            ptsy = Table[npts sobol1d[nf,i],{i,0,npts-1}];
        ,{ilevel,nlevels}];
        {g1,g2} = {getBinaryTree[ptsx,nlevels,"Sobol ind="<>ToString[ind1]], getBinaryTree[ptsy,nlevels,"Sobol ind="<>ToString[ind2]]};
        pts = T[{ptsx,ptsy}];
        scale = Length[pts];
        xcodes = IntegerDigits[#, 2, nlevels]& /@ ptsx;
        ycodes = IntegerDigits[#, 2, nlevels]& /@ ptsy;
        xycodes = {xcodes,ycodes}//T;
        xycodesFIBOSel = Select[xycodes, Max[(ListConvolve[{1, 1}, #] & /@ #)] < 2 &];
        g3 = Graphics[{PointSize[ptsz],Rectangle[#,#+1/scale]& /@ (pts/scale)   }
            (*,Frame->True,FrameTicks->Automatic,AspectRatio->1,GridLines->{Range[0,npts-1],Range[0,npts-1]}*)
               , PlotRange->{{-eps,1+eps},{-eps,1+eps}} (*{{-eps,2^nlevels+eps},{-eps,2^nlevels+eps}}*)
            ,PlotLabel->"Sobol xy: dir numbers="<>ToString[{ind1,ind2}]];
        Print[Show[Graphics@getBinaryGrid[nlevels],g3,ImageSize->{750,750} (*{1,1}32 2^nlevels*)] ];
    ] (* preppocAALDSBinary2D *)

(*------------------------- FIBOSobolBadTrials -------------------------------*)
(*FIBOSobolBadTrial[innlevels_:4,ind1_:2, ind2_:3] :=
    Module[ {},
        nlevels = innlevels;
        buildMSobol[{ind1, ind2}];
        xycodes = (IntegerDigits[#, 2, nlevels]& /@ #)& /@ ( 2^nlevels Table[sobol2d[i],{i,0,2^nlevels - 1}] );
        xycodesFIBOSel = Select[xycodes, Max[(ListConvolve[{1, 1}, #] & /@ #)] < 2 &];
        Print["FIBOSobolBadTrial" -> nlevels -> {ind1, ind2} -> Length[xycodesFIBOSel] ];
        pts = FIBOFxy /@ xycodesFIBOSel;
        Print[Graphics[{Point/@pts}] ];
    ]
*)
FIBOSobolBadTrial[innlevels_:4,ind1_:1, ind2_:2] :=
    Module[ {},
        nlevels = innlevels;
        buildMSobol[{ind1, ind2}];
        pts = 2^nlevels Table[sobol2d[i],{i,0,2^nlevels - 1}];
        {ptsx, ptsy} = T@pts;
        {xcodes,ycodes} = T[(IntegerDigits[#, 2, nlevels]& /@ #)& /@ pts];
        {ordx,ordy} = {ptsx//order2permut0toNminus1,ptsy//order2permut0toNminus1 };
        {ordcodesx,ordcodesy} = { (IntegerDigits[#, 2, nlevels])& /@ ordx,  (IntegerDigits[#, 2, nlevels])& /@ ordy };
        (*xcodesFIBOSel = Select[xcodes, Max[ListConvolve[{1, 1}, #] ] < 2 &];
        ycodesFIBOSel = Select[ycodes, Max[ListConvolve[{1, 1}, #] ] < 2 &];
        xycodesFIBOSel = {xcodesFIBOSel,ycodesFIBOSel}//T;
        Print["FIBOSobolBadTrial" -> nlevels -> {ind1, ind2} -> Length[xycodesFIBOSel] ];
        pts = FIBOFxy /@ xycodesFIBOSel;
        Print[Graphics[{Point/@pts}] ];*)
        xcodesFIBOSel = Select[ordcodesx, Max[ListConvolve[{1, 1}, #] ] < 2 &];
        ycodesFIBOSel = Select[ordcodesy, Max[ListConvolve[{1, 1}, #] ] < 2 &];
        xycodesFIBOSel = {xcodesFIBOSel,ycodesFIBOSel}//T;
        xy = T @ (order2permut0toNminus1 /@ (T@(FIBOFxy /@ xycodesFIBOSel)));
        npts = Length[xy];
        (*Print[{ Graphics[{Point/@pts}] , Graphics[{Point/@xy}] } ];*)
        Print[  Graphics[{Point/@xy}]  ];
        (*Print["FIBOSobolBadTrial" -> nlevels -> {ind1, ind2} -> Length[pts] -> getDiscrepancy2Dexact[ pts/Length[pts]] ];*)
        Print["FIBOSobolBadTrial" -> nlevels -> {ind1, ind2} -> Length[xy] -> getDiscrepancy2Dexact[ xy/Length[xy]] ];
    ]

(*

Do[FIBOSobolBadTrial[i,1,2],{i,10,20}]
Do[FIBOSobolBadTrial[i,1,3],{i,10,20}]
Do[FIBOSobolBadTrial[i,1,4],{i,10,20}]
Do[FIBOSobolBadTrial[i,1,5],{i,10,20}]
Do[FIBOSobolBadTrial[i,1,6],{i,10,20}]

Do[FIBOSobolBadTrial[i,2,3],{i,10,20}]
Do[FIBOSobolBadTrial[i,2,4],{i,10,20}]
Do[FIBOSobolBadTrial[i,2,5],{i,10,20}]

Do[FIBOSobolBadTrial[i,3,4],{i,10,20}]
Do[FIBOSobolBadTrial[i,4,5],{i,10,20}]
*)
(*
FIBOSobolBadTrial1[innlevels_:8,inind1_:2, inind2_:3] := (* unfortunately, discrepancy is not good *)
    Module[ {},
        nlevels = innlevels;
        {ind1,ind2} = {inind1,inind2};
        
        
        Do[ If[Fibonacci[i] > 2^nlevels, FIBOlevels=i;Break[] ], {i,1,100}];
        FIBOsymbols = {{0}};
        Do[
             FIBOsymbols = Flatten[#,1]& @ (subdivFIBO /@ FIBOsymbols);
        ,{ilevel,FIBOlevels}]; (* 20 -> 17711  29 ->  30 -> 2178309  31 -> 3524578 *)
        
        (*Put[FIBOsymbols, "data/FIBOsymbols_3524578.dat"]     
        FIBOsymbols = Get["data/FIBOsymbols_3524578.dat"];*)
            
        buildMSobol[{ind1, ind2}];
        ptsSobol = Table[sobol2d[i],{i,0,2^nlevels - 1}];
        xycodes = (Reverse[IntegerDigits[#, 2, nlevels]]& /@ #)& /@ ( 2^nlevels  ptsSobol);
        FIBOpts =  (FromDigits[#,2]& /@ #) & /@ xycodes;
        FIBOcodes = (Reverse[FIBOsymbols[[# + 1]]] & /@ #) & /@ FIBOpts;        
        pts = FIBOPhiXY /@ FIBOcodes;
        {Graphics[{Point/@ptsSobol},ImageSize->{1024,1024}] 
        ,Graphics[{Point/@pts},ImageSize->{1024,1024}] 
        }//Print;
        Print["getDiscrepancy2Dexact sobol " -> getDiscrepancy2Dexact[ptsSobol] ];
        Print["getDiscrepancy2Dexact FIBO-sobol " -> getDiscrepancy2Dexact[pts] ];
    ]
*)    
readHDRImage[fname_] :=
    Module[ {},
        data = Import[fname,"Data"];
        Print[fname -> "dims:",Dimensions[data] -> {Min[data],Max[data]} ];
        image = Import[fname];
        image//Print;
    ]
(* 
readHDRImage["HDR_images/1200x1200/HDRimage1200x1200_000.tif"]
*)
loglog[fname_,shift_:35] :=
    Module[ {},
        data = Import[fname,"Data"];
        xdata = Log /@ (First /@ data);
        ydata = Log /@ (Last /@ data);
        yref =  -2 Log[#] + shift & /@ (First /@ data);
        ListPlot[{ {xdata,ydata}//T, {xdata,yref}//T },Joined->True]//Print
    ]


(* {{1,1,1,1},{1,0,1,0},{1,1,1,0},{1,0,0,1}} (* analytical eval: 1/4 (3+Sqrt[5]+Sqrt[6 (5+Sqrt[5])]) *) *)
visuL210[] :=
    Module[ {},
        fname = "data/L2_10.dat";
        fname = "data/L2_BN_1.1.dat";
        data = Get[fname];
        Print[fname -> Dimensions[data] ];
        {     set = data[[2]];
              Graphics[{getBinaryGrid[6], Gray, Rectangle[#,#+1/16]& /@ (set/16)}]
            ,set = data[[3]];
             Graphics[{getBinaryGrid[4], Gray, Rectangle[#,#+1/16]& /@ (set/16)}]
        }//Print;
        Graphics[{getBinaryGrid[6] }]//Print;
    ]

    
    
(*--------------------- Dec 2015 ---------------------*)
getBinaryFracBase4[code_] :=
    FromDigits[code, 4]/4^Length[code]

(*subdivBinaryBase4[symbols_]:= Join[symbols,#]& /@ {{0},{1},{2},{3}}*)
subdivBinaryBase4[symbols_] :=
    Join[symbols,{#}]& /@ {0,1,2,3}

getBinaryGridBase4[nlevels_:2] :=
    Module[ {(*gl,symbols, coltab, delta,deltax,deltay,cur,curx,cury,symbols1,symbols2,txtcoltab*)},
        coltab = {(*Orange*)Yellow, Cyan, Blue,Gray, Darker@Red, Orange,Blue,Red,Yellow};
        coltab = {Yellow, Red, Cyan, Blue, Magenta, Green, Black, Red, Cyan, Blue, Magenta, Green, Black};
        txtcoltab = {Red, Blue, Green, Orange};
        symbols = {{}};
        gl = {};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[1/4^(1.5 ilevel+2)]}];
            symbols = Flatten[#,1]& @ (subdivBinaryBase4 /@ symbols);
            cur = 0;
            Do[
                delta = 1/4^(ilevel);
                AppendTo[gl, {Line[{{0,cur},{1,cur}}], Line[{{0,cur+delta},{1,cur+delta}}]}];
                AppendTo[gl, {Line[{{cur,0},{cur,1}}], Line[{{cur+delta,0},{cur+delta,1}}]}];
                cur += delta;
            ,{i,Length[symbols]}]
        ,{ilevel,nlevels}];
        cury = 0;
        Do[
            deltay = 1/2^(nlevels);
            curx = 0;
            Do[
                deltax = 1/4^(nlevels);
                curx += deltax;
            ,{ix,Length[symbols]}];
            cury += deltay;
        ,{iy,Length[symbols]}];
        If[ nlevels < 5,
            symbols1 = #[[;;nlevels]]& /@ symbols;
            symbols2 = {{}}& /@ symbols;
            AppendTo[gl, {Black,Opacity[1]
                ,Table[ 
                    Text[Rotate[#,Pi/2]& @ (StringJoin @ Table[ToString[symbols1[[i,j]]]<>" ",{j,nlevels}]), {getBinaryFracBase4@symbols[[i]],0},{-1,1} ]
                , {i,Length[symbols]}]
            
                ,Table[ 
                    Text[ StringJoin @ Table[ToString[symbols1[[i,j]]]<>" ",{j,nlevels}], {0,getBinaryFracBase4@symbols[[i]]},{1,-1} ]
                , {i,Length[symbols]}]
                
            } ];
        ];
        gl
    ] (* getBinaryGridBase4 *)

(*subdivBinary2DBase4[{xCode_,yCode_}] :=
    Module[ { extraCodes, res, extraindx,extraindy,lastdigitindx,lastdigitindy,lastdigitx,lastdigity},
            {extraindx,extraindy} = Flatten @ (Take[#,{-2,-2}]& /@ {xCode,yCode});
            {lastdigitindx,lastdigitindy} = FromDigits[#,4]& /@ (Take[#,-2]& /@ {xCode,yCode});
            (*{lastdigitx,lastdigity} = subdivSchemeTab[[extraindx+1,extraindy+1]];*)
            (*{lastdigitx,lastdigity} = subdivSchemeTab[[extraindx+1,extraindy+1]];*)
            {restx,resty} = Take[Reverse[#],halflen]& /@ {yCode,xCode};
            extraCodes = getBasicSetRandomBase4[{extraindx,extraindy}];
            (*Print[{xCode,yCode} -> {extraindx,extraindy} -> {lastdigitindx,lastdigitindy} -> {lastdigitx,lastdigity} -> extraCodes];*)
            (*res = {Join[Drop[#,-1]&@xCode,{#[[1]]},{lastdigitx}],Join[Drop[#,-1]&@yCode,{#[[2]]},{lastdigity}]} & /@ extraCodes;*)

            res = {Join[Drop[#,-1]&@xCode,{#[[1]]},{restx}],Join[Drop[#,-1]&@yCode,{#[[2]]},{resty}]} & /@ extraCodes;
        res     
    ] (* subdivBinary2DBase4 *)
*)
subdivBinary2DBase4[{xCode_,yCode_}] :=
    Module[ {halflen = Length[xCode]/2,extraCodes,xFirstHalf,yFirstHalf,restx,resty},
        {xFirstHalf,yFirstHalf} = Take[#,halflen]& /@ {xCode,yCode};
        (*{restx,resty} = Take[Reverse[#],-halflen]& /@ {yCode,xCode}/.{1:>2,2:>1};*)
        {restx,resty} = Take[#,-halflen]& /@ {xCode,yCode};
        extraCodes = getRandomBasicPattern4x4Base4[];
        {Join[xFirstHalf,#[[1]],restx],Join[yFirstHalf,#[[2]],resty]}& /@ extraCodes
    ] (* subdivBinary2DBase4 *)

getRandomBasicPattern4x4Base4[] :=
    RandomChoice@basicPatterns4x4

codes2intBase4[{xCode_,yCode_}] :=
    {FromDigits[xCode,4],FromDigits[yCode,4]}

getBasicSetRandomBase4[{indx_,indy_}] :=
    basicSubdivTabBinary[[indx+1,indy+1,RandomChoice[{1, 2, 3, 4}]]]

pocAALDSBinary2DBase4[nlevels_:1] :=
    Module[ {},
        fname = "data/L2_10.dat";
        fname = "data/L2_BN_1.1.dat";
        data = Get[fname];
        Print[fname -> Length[data] ];
        basicPatterns4x4 = (IntegerDigits[#,4,2]& /@ #)& /@ data;
        codes = getRandomBasicPattern4x4Base4[];
        Do[
            showGraphics = If[ ilevel <=3,
                               True,
                               False
                           ];
            pts = codes2intBase4 /@ codes;
            npts = Length[pts];
            If[ showGraphics,
                Graphics[{
                getBinaryGridBase4[2 ilevel]
                , Black,Rectangle[#,#+1/npts]& /@ (pts/npts)
                (*,Black,Table[Text[Style[i,24],((pts+.5)/npts)[[i]]],{i,npts}]*)
                }
                (*,PlotLabel -> {testHierarchicalStratified2D[pts],getDiscrepancy2Dexact[ pts/npts]}*)
                ,ImageSize -> ilevel/3 {1024,1024} (*{750,750}*)
                (*, PlotLabel->{ilevel,getptsMinDist12[pts]}*) ]//Print
            ];
            Print[ilevel -> Length[pts] -> testHierarchicalStratified2D[pts] -> getDiscrepancy2Dexact[ pts/npts]];
            If[ ilevel != nlevels,
                codes = Flatten[#, 1] & @(subdivBinary2DBase4 /@ codes)
            ];
        ,{ilevel,1,nlevels}];
        Graphics[Point/@pts]//Print;
    ] (* pocAALDSBinary2DBase4 *)

(*--------------------------- OMEGA == DweRuKi-----------------------------*)

DweRuKigetIntValueDir[word_] :=
    Total @ DweRuKigetIntValueTabDir[word]
DweRuKigetIntValueTabDir[word_] :=
    With[ {len = Length[word] },
        Join @ Table[basicSeqCumulDir[[1,If[ i==1,
                                             1,
                                             word[[i-1]]
                                         ],word[[i]],len-i+1 ]],{i,len}]
    ] (* DweRuKigetIntValueTabDir *)

DweRuKigetFracValueDir[word_] :=
    Total @ DweRuKigetFracValueTabDir[word]
DweRuKigetFracValueTabDir[word_] :=
    With[ {len = Length[word] },
        Join @ Table[basicSeqFracCumulDir[[1,If[ i==1,
                                                 1,
                                                 word[[i-1]]
                                             ],word[[i]], i ]],{i,len}]
    ] (* DweRuKigetFracValueTabDir *)


DweRuKigetIntValueInv[word_] :=
    Total @ DweRuKigetIntValueTabInv[word]
DweRuKigetIntValueTabInv[word_] :=
    With[ {len = Length[word] },
        Join @ Table[basicSeqCumulInv[[1,If[ i==1,
                                             1,
                                             word[[i-1]]
                                         ],word[[i]],i ]],{i,len}]
    ] (* DweRuKigetIntValueTabInv *)

DweRuKigetFracValueInv[word_] :=
    Total @ DweRuKigetFracValueTabInv[word]
DweRuKigetFracValueTabInv[word_] :=
    With[ {len = Length[word] },
        Join @ Table[basicSeqFracCumulInv[[1,If[ i==1,
                                                 1,
                                                 word[[i-1]]
                                             ],word[[i]], len-i+1 ]],{i,len}]
    ] (* DweRuKigetFracValueTabInv *)

DweRuKiPhiXY[{xword_,yword_}] :=
    DweRuKigetFracValueDir /@ {xword,yword}

DweRuKiapplyProductionRules[word_] :=
    Module[ {res,lastSybbol,newSymbols},
        lastSybbol = If[ Length[word] == 0,
                         1,
                         word[[-1]]
                     ];
        newSymbols = productionRulesDir[[lastSybbol]];
        res = (Append[word, #] & /@ newSymbols);
        Return[res]
    ] (* DweRuKiapplyProductionRules *)

DweRuKigetSubdivWordsDir[nlevels_:2,seed_:1] :=
    Module[ {wordsDir = {{seed}}},
        Do[
            wordsDir = Flatten[#,2]& @ {DweRuKiapplyProductionRules /@ wordsDir}
        ,{i,nlevels}];
        Drop[#,1]& /@ wordsDir
    ]

DweRuKiselectactiveCodesFIBO1d[codes_] :=
    With[ {halflen = Length[codes[[1,1]]]},
        Select[codes, (mx [[ #[[1,halflen]], #[[1,halflen+1]] ]] != 0)  &&  (mx [[ #[[2,halflen]], #[[2,halflen+1]] ]] != 0)  &]
    ]

DweRuKiShowInflation[nlevels_:3,sz_:4,dbg_:True] :=
    Module[ {},

        (*myRandomSampleDir:= RandomSample;
        myRandomSampleInv:= randomSampleButFirst;*)
        myRandomSampleDir :=
            Identity;
        myRandomSampleInv :=
            Identity;
        mx = Switch[sz  (* before: getMyFamilyRadixInvertible[mxsz]; *)
            ,3,    mx321
            ,4, mx4233
            ,8, mx87566575
        ];
        init[mx,True,True];
            (*orderDir[[1]] = Table[Select[getRandomGoodPerms4[], MemberQ[productionRulesDir[[i]], #] &], {i,4}];
            orderInv[[1]] = productionRulesDir; 
            buildBasicSeqCumul[True];*)
            (*orderDir = {{{2, 4, 1, 3}, {3, 1}, {1, 2, 4}, {4, 1, 3}}};
            buildBasicSeqCumul[True];*)
        wordsDir = {{}};
        wordsInv = (Reverse/@wordsDir );
        tab = Table[
            (*wd = fwd /@ wordsDir;
            wi = fwi /@ wordsInv;*)
            
            wd = wordsDir;
            wi = wordsInv;
            valuesDir = DweRuKigetIntValueDir /@ wd;
            valuesInv = DweRuKigetIntValueInv /@ wi;
            valuesFracDir = DweRuKigetFracValueDir /@ wd;
            valuesFracInv = DweRuKigetFracValueInv /@ wi;
            valuesTabDir = DweRuKigetIntValueTabDir /@ wd;
            valuesTabInv = DweRuKigetIntValueTabInv /@ wi;
            valuesFracTabDir = DweRuKigetFracValueTabDir /@ wd;
            valuesFracTabInv = DweRuKigetFracValueTabInv /@ wi;
            If[ dbg,
                Print["--------------------------------",{ilevel,Length[wd]}];
                Print[MatrixForm[wd],MatrixForm[valuesDir],MatrixForm[valuesTabDir],MatrixForm[valuesDir//Sort]
                    ,"f", MatrixForm[valuesFracDir],MatrixForm[valuesFracTabDir]
                    ,"i", MatrixForm[valuesInv//Union],MatrixForm[valuesInv],MatrixForm[wi],MatrixForm[valuesTabInv](*,MatrixForm[myPadRightInv/@wi]*)
                    ,"fi", MatrixForm[valuesFracInv],MatrixForm[valuesFracTabInv]
                    ,"fcode", MatrixForm[wordsDir]
                ];
            ];
            If[ ilevel!=nlevels,
                wordsDir = Flatten[{DweRuKiapplyProductionRules/@wordsDir},2];
                wordsInv = (*PadRight[#,16,1]& /@*) (Reverse/@wordsDir );
            ];
            (*{valuesInv, valuesFracDir}//T//Sort//T//mf//Print;*)
            {valuesInv, valuesFracDir}//T//Sort
        ,{ilevel,nlevels}];
        Print["valuesDir, valuesFracInv"];
        Print[#//T//mf]& /@ tab;
        ListPlot[(valuesDir)//Sort,PlotLabel->"valuesDir: "<>ToString[testUnitSteps[Sort[valuesDir]]],Joined->True]//Print;
        ListPlot[(valuesInv)//Sort,PlotLabel->"valuesInv: "<>ToString[testUnitSteps[Sort[valuesInv]]],Joined->True]//Print;
        ListPlot[(valuesFracDir)//Sort,PlotLabel->"valuesFracDir",Joined->True]//Print;
        ListPlot[(valuesFracInv)//Sort,PlotLabel->"valuesFracInv",Joined->True]//Print;
        pts = {valuesDir,valuesInv}//T;
        ListPlot[pts,Joined->False,PlotLabel->"{valuesDir,valuesInv}",AspectRatio->1]//Print;
    (*pts = {valuesFracDir,valuesFracInv}//T;
        ListPlot[pts,Joined->False,PlotLabel->"{valuesFracDir,valuesFracInv}",AspectRatio->1]//Print;
        pts = {valuesDir//Sort,valuesInv//Sort}//T;
        ListPlot[pts,Joined->False,PlotLabel->"{valuesDir,valuesInv} Sorted"]//Print;
        pts = {valuesFracDir//Sort,valuesFracInv//Sort}//T;
        ListPlot[pts,Joined->False,PlotLabel->"{valuesFracDir,valuesFracInv} Sorted"]//Print;*)
    ] (* DweRuKiShowInflation *)


getDweRuKiGrid[nlevels_:2,xTileType_:1,yTileType_:1,showSymbols_:True] :=
    Module[ {(*wordsDir,wordsInv,valuesDir,valuesInv,valuesFracDir,valuesFracInv,hlevels,symbols,symbols1,symbols2,gl,coltab,txtcoltab,xsymbols,ysymbols*)},
        coltab = {Orange(*Yellow*), Cyan, Blue,Gray, Darker@Red, Orange,Blue,Red,Yellow};
        txtcoltab = {Red, Blue, Green, Orange, Gray,Red};
        coltab = {Orange, Lighter@Cyan, Lighter@Blue, Black,Red,Cyan, Black,Red,Cyan, Black,Red,Cyan, Black,Red,Cyan};
        gl = {};
        wordsDir = {{xTileType}};
        {xmax,ymax} = {basicSeqFracDir[[xTileType, 1]] lambda,basicSeqFracDir[[yTileType, 1]] lambda};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[.05/lambda^(ilevel)],{Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] }}];
            symbols =  wordsDir = Flatten[{(*DweRuKi*)applyProductionRules/@wordsDir},2];
            wordsInv = (Reverse/@wordsDir );
            valuesDir = (*DweRuKi*) getIntValueDir /@ wordsDir;
            valuesInv = (*DweRuKi*) getIntValueInv /@ wordsInv;
            valuesFracDir = (*DweRuKi*) getFracValueDir /@ wordsDir;
            valuesFracInv = (*DweRuKi*) getFracValueInv /@ wordsInv;
            Do[
                AppendTo[gl, {Line[{{valuesFracDir[[i]],0},{valuesFracDir[[i]],ymax}}]}];
             ,{i,Length[wordsDir]}];
        ,{ilevel,nlevels}];
        xsymbols = Drop[#,1]& /@ symbols;
        hlevels = Floor[nlevels/2];
        symbols1 = #[[;;hlevels]]&         /@ (xsymbols);
        symbols2 = #[[hlevels+1;;]]&     /@ (xsymbols);
        If[ showSymbols,
            AppendTo[gl, {Black,Opacity[1]
                ,Table[
                    Text[ Column[Join[{
                                 Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"        " ,Pi/2],Bold,Black]
                                }
                                ,Reverse@Table[Style[  Rotate[ToString@symbols1[[i,j]],Pi/2] ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                            ]
                        ], {valuesFracDir[[i]],0},{0,1}]
                    , {i,Length[xsymbols]}]
                } ];
        ];
        wordsDir = {{yTileType}};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[.05/lambda^(ilevel)],{Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] }}];
            symbols =  wordsDir = Flatten[{(*DweRuKi*)applyProductionRules/@wordsDir},2];
            wordsInv = (Reverse/@wordsDir );
            valuesDir = (*DweRuKi*) getIntValueDir /@ wordsDir;
            valuesInv = (*DweRuKi*) getIntValueInv /@ wordsInv;
            valuesFracDir = (*DweRuKi*) getFracValueDir /@ wordsDir;
            valuesFracInv = (*DweRuKi*) getFracValueInv /@ wordsInv;
            Do[
                AppendTo[gl, {Line[{{0,valuesFracDir[[i]]},{xmax,valuesFracDir[[i]]}}]}];
             ,{i,Length[wordsDir]}];
        ,{ilevel,nlevels}];
        ysymbols = Drop[#,1]& /@ symbols;
        symbols1 = #[[;;hlevels]]& /@ (ysymbols);
        symbols2 = #[[hlevels+1;;]]& /@ (ysymbols);
        If[ showSymbols,
            AppendTo[gl, {Black,Opacity[1]
                ,Table[                        
                        Text[ Row[Join[
                                Table[Style[  ToString[symbols1[[i,j]]]<>" " ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                                 ,{ Style[Rotate[ToString[digits2str[symbols2[[i]] ]]<>"       " ,0],Bold,Black]
                        } ] ], {0,valuesFracDir[[i]]},{1,0}]
                , {i,Length[ysymbols]}]    
            } ];
        ];
        gl
    ] (* getDweRuKiGrid*)

mx22 = {{1,1},{1,1}};
mx333 = {{1,1,1},{1,1,1},{1,1,1}};
mx4444 = {{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}};
mx55555 = {{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1}};
mx88888888 = {{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1}};
mx7777777 = {{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1}};
    
mx21 = {{1,1},{1,0}};
mx321 = {{1, 1, 1}, {1, 1, 0}, {1, 0, 0}};    (* symmetrical >>>> ratio:2.24698 analytical eval: 1/3 (2+7^(2/3)/(1/2 (1+3 I Sqrt[3]))^(1/3)+(7/2 (1+3 I Sqrt[3]))^(1/3)) *)
mx4332 = {{1,1,1,1},{1,1,1,0},{1,1,0,1},{1,0,1,0}};     (* >>>> ratio:1.78572 *)
mx4233 = {{1,1,1,1},{1,0,1,0},{1,1,0,1},{1,0,1,1}};     (* >>>> ratio:1.78572 *)
mx87566575 = {{1,1,1,1,1,1,1,1},{1,1,0,1,1,1,1,1},{1,0,1,1,0,1,0,1},{1,1,1,0,1,0,1,1},{1,1,0,1,0,1,0,1},{1,1,1,0,1,1,1,1},{1,1,0,1,0,1,1,1},{1,1,1,1,1,1,1,0}};    (* >>>> ratio:1.57478 *)
mx87566575 = {{1,1,1,1,1,1,1,1},{1,1,0,1,1,1,1,1},{1,0,1,0,1,0,1,1},{1,1,0,1,1,1,1,0},{1,1,1,1,0,1,0,1},{1,1,0,1,1,0,1,0},{1,1,1,1,0,1,1,1},{1,1,1,0,1,0,1,0}}; (* >>>> ratio:1.61092 *)
mx84675675 = {{1,1,1,1,1,1,1,1},{1,0,1,0,1,0,1,0},{1,1,0,1,0,1,1,1},{1,0,1,1,1,1,1,1},{1,1,0,1,1,0,1,0},{1,0,1,1,0,1,1,1},{1,1,1,1,1,1,0,1},{1,0,1,1,0,1,1,0}}; (* >>>> ratio:1.90463 *)
mx86665757 = {{1,1,1,1,1,1,1,1},{1,0,1,0,1,1,1,1},{1,1,1,1,0,1,0,1},{1,0,1,1,1,0,1,1},{1,1,0,1,0,1,0,1},{1,1,1,0,1,1,1,1},{1,1,0,1,0,1,1,0},{1,1,1,1,1,1,0,1}} (* >>>> ratio:{1.58958,1.58958} *)
mx85765667 = {{1,1,1,1,1,1,1,1},{1,1,0,1,0,1,0,1},{1,0,1,1,1,1,1,1},{1,1,1,0,1,0,1,1},{1,0,1,1,0,1,0,1},{1,1,1,0,1,1,1,0},{1,0,1,1,0,1,1,1},{1,1,1,1,1,0,1,1}}; (* >>>> ratio:1.58958 normevecDir:normevecDir lambda:6.38889 ratio:1.58958 CharacteristicPolynomial: 1+5 x-3 x^2-25 x^3+3 x^4+29 x^5-7 x^6-6 x^7+x^8 factorized CharacteristicPolynomial: 1+5 x-3 x^2-25 x^3+3 x^4+29 x^5-7 x^6-6 x^7+x^8 *)
mx87777777 = {{1,1,1,1,1,1,1,1}
            ,{1,1,1,0,1,1,1,1}
            ,{1,1,1,1,1,0,1,1}
            ,{1,0,1,1,1,1,1,1}
            ,{1,1,1,1,1,1,1,0}
            ,{1,1,1,1,0,1,1,1}
            ,{1,1,0,1,1,1,1,1}
            ,{1,1,1,1,1,1,0,1}};
mx86777776 = {{1,1,1,1,1,1,1,1}
            ,{1,0,1,1,1,1,1,0}
            ,{1,1,1,1,0,1,1,1}
            ,{1,1,1,1,1,1,0,1}
            ,{1,1,0,1,1,1,1,1}
            ,{1,1,1,1,1,1,1,0}
            ,{1,1,1,0,1,1,1,1}
            ,{1,0,1,1,1,0,1,1}};

getGoodOrderedActivePattern[nlevels_:2,x0_:0,y0_:0,tileType_] := (* here nlevels: 2^nlevels *)
    Module[ {},
        getGoodOrderedPattern = getGoodOrderedPattern[nlevels,x0,y0];
    ]

doNothing[] :=
    {}

consolidateBestPatterns[mxsz_:4] :=
    Module[ {},
        mx = Switch[mxsz, 2, mx21, 4, mx4233, 8, mx86777776 ];
        basename = Switch[mxsz, 2, "mx21", 4, "mx4233", 8, "mx86777776" ];
        deltasel = Switch[mxsz, 2, 1. , 4, .01, 8, .001 ];
        myRandomSampleDir = myRandomSampleInv = Identity;
        init[mx,True, True];
        tab = Table[
                fname = "data/prepDweRuKi"<>ToString[mxsz]<>"x"<>ToString[mxsz]<>"BestPatterns_"<>ToString[ix]<>"_"<>ToString[iy]<>".dat";
                data = (*Flatten[#,1]& /@*) Get[fname];
                unifieddata = Reverse @ (Sort @ Complement[Union[Join @@ data], {{}} ]);
                thebest = unifieddata[[1,1]];
                sel = Select[unifieddata, #[[1]] > (thebest-deltasel)&];
                Print["Reading ",fname -> Length[unifieddata] -> Length[sel] ];

                     (*res = {};
                     Do[
                         If[unifieddata[[idata]] === {}, Continue[] ];
                         {pattern,buds} = unifieddata[[idata]];
                         test = And @@ (((mx [[ #[[1,-1]], iy ]] != 0) && (mx [[ #[[2,-1]], ix ]] != 0))& /@ pattern);
                         If[test == True,
                             respattern = ((Drop[#,1]& /@ #)& /@ (Join @@ {pattern, buds}));
                             Print[({ix,iy}-1) -> respattern];
                         ];
                     ,{idata,Length[unifieddata]}];*)
                Table[
                    {mindist, pattern,buds} = sel[[idata]];
                    respattern = ((Drop[#,1]& /@ #)& /@ (Join @@ {pattern, buds}));
                    Print[idata,"/",Length[sel] -> ({ix,iy}-1) -> mindist -> respattern];
                    respattern
                 ,{idata,Length[sel]}]
        ,{iy,mxsz},{ix,mxsz}];
        fname = "data/"<>basename<>"_consolidated.dat";
        Put[tab,fname];
        tab = Table[
                fname = "data/prepDweRuKi"<>ToString[mxsz]<>"x"<>ToString[mxsz]<>"BestPatterns_"<>ToString[ix]<>"_"<>ToString[iy]<>".dat";
                data = (*Flatten[#,1]& /@*) Get[fname];
                unifieddata = Reverse @ (Sort @ Complement[Union[Join @@ data], {{}} ]);
                thebest = unifieddata[[1,1]];
                sel = Select[unifieddata, #[[1]] > (thebest-deltasel)&];
                Print["ActiveOnly Reading ",fname -> Length[unifieddata] -> Length[sel] ];
                Table[
                    {mindist, pattern,buds} = sel[[idata]];
                    respattern = ((Drop[#,1]& /@ #)& /@ pattern);
                    Print[idata,"/",Length[sel] -> ({ix,iy}-1) -> mindist -> respattern];
                    respattern
                 ,{idata,Length[sel]}]
        ,{iy,mxsz},{ix,mxsz}];
        fname = "data/"<>basename<>"_consolidated_ActiveOnly.dat";
        Put[tab,fname];
    ]


(*---------------------- getGoodOrderedPattern ----------------------*)
prepGoodPermsBruteForce[sz_:4, showGraphics_:True] :=
    Module[ {},
        nbits = Log[2,sz];
        ptab = Permutations[Range[0,sz-1]];
        t = ({Range[0,sz-1], #} // T) & /@ ptab;
        sets = Select[t, testHierarchicalStratified2D[#] &];
        If[ showGraphics,
            Do[
               pts = sets[[i]];
               npts = Length[pts];
               Graphics[{
                   getBinaryGrid[nbits]
                       , Black,Rectangle[#,#+1/npts]& /@ (pts/npts)
                       (*,Red,Table[Text[Style[i,24],((pts)/npts)[[i]],{-1,-1}],{i,npts}]*)
                       }
                   ,ImageSize -> 1/4 {1024,1024} ]//Print
             ,{i,Length[sets]}];
        ];
        Plus[#,1]& /@ Union[Last/@(T/@sets)]
    ] (* prepGoodPermsBruteForce *)

prepGoodPerms[insz_:8, showGraphics_:True] :=
    Module[ {},
        sz = insz;
        nbits = Log[2,sz];
        mask =  (IntegerDigits[#, 2, nbits] & /@ Range[0, sz - 1]);
        maskR = Reverse /@ mask;
        basicset = {maskR, mask} // T;
        sets = Table[
            {maskBitXor1,maskBitXor2} = basicset[[i]];
            {BitXor @@ {maskBitXor1,#[[1]]},BitXor @@ {maskBitXor2,#[[2]]} }& /@ basicset
        ,{i,Length[basicset]}]
    ] (* prepGoodPerms *)

        
(*        ptab = Permutations[Range[0,sz-1]];
        t = ({Range[0,sz-1], #} // T) & /@ ptab;
        sets = Select[t, testHierarchicalStratified2D[#] &];
        If[showGraphics,
             Do[
                pts = sets[[i]];
                npts = Length[pts];
                Graphics[{getBinaryGrid[nbits]
                            , Black,Rectangle[#,#+1/npts]& /@ (pts/npts)
                            (*,Red,Table[Text[Style[i,24],((pts)/npts)[[i]],{-1,-1}],{i,npts}]*)
                            }
                ,ImageSize -> 1/4 {1024,1024} ]//Print;
          ,{i, 16 (*Length[sets]*)}];
      ];
      Plus[#,1]& /@ Union[Last/@(T/@sets)]
*)

(*getBayerOrdering[nlevels_:2,dx_:0,dy_:0] :=
     Module[ {res={ {0,{{},{}}} } },
         Do[
             res = Flatten[#,1]& @ ({
                 {4 #[[1]]+0,  {Join[{0},#[[2,1]]],Join[{0},#[[2,2]]]} } ,
                 {4 #[[1]]+1,  {Join[{0},#[[2,1]]],Join[{1},#[[2,2]]]} } ,
                 {4 #[[1]]+2,  {Join[{1},#[[2,1]]],Join[{0},#[[2,2]]]} } ,
                 {4 #[[1]]+3,  {Join[{1},#[[2,1]]],Join[{1},#[[2,2]]]} }
             }& /@ res) ;
         ,{ilevel,nlevels}];
         ({#[[1]], { BitXor@@{FromDigits[#,2]& @ #[[2,1]], dx}, BitXor@@{FromDigits[#,2]& @ #[[2,2]], dy} } }) & /@ res
     ] (* getBayerOrdering *)
*)

getBayerOrdering[nlevels_:2,dx_:0,dy_:0] :=
    Module[ {res = { {0,{{},{}}} } },
        Do[
            res = Flatten[#,1]& @ ({
                {4 #[[1]]+0,  {Join[{0},#[[2,1]]],Join[{0},#[[2,2]]]} } ,
                {4 #[[1]]+2,  {Join[{0},#[[2,1]]],Join[{1},#[[2,2]]]} } ,
                {4 #[[1]]+3,  {Join[{1},#[[2,1]]],Join[{0},#[[2,2]]]} } ,
                {4 #[[1]]+1,  {Join[{1},#[[2,1]]],Join[{1},#[[2,2]]]} }
            }& /@ res);
         ,{ilevel,nlevels}];
        ({#[[1]], { BitXor@@{FromDigits[#,2]& @ #[[2,1]], dx}, BitXor@@{FromDigits[#,2]& @ #[[2,2]], dy} } }) & /@ res
    ] (* getBayerOrdering *)

getGoodOrderedPattern[nlevels_:2,x0_:0,y0_:0] := (* here nlevels: 2^nlevels *)
    Module[ {ntilles1d,resTab,ordering,order,pattenindx,patternindy,pattern},
        ntilles1d = 2^nlevels;
        resTab = Table[{0,{}},{iy,ntilles1d},{ix,ntilles1d}];
        ordering = getBayerOrdering[nlevels, Quotient[x0,ntilles1d], Quotient[y0,ntilles1d]];
        Do[
           {order,{pattenindx,patternindy}} = ordering[[i]];
           resTab[[1+patternindy,1+pattenindx,1]] = {order};
        ,{i,Length[ordering]}];
        pattern = getGoodPattern[2 nlevels, x0, y0];
        Do[
           {pattenindx,patternindy} = (Quotient[#,ntilles1d]& /@ pattern[[i]]);
           resTab[[1+patternindy,1+pattenindx,2]] = {IntegerDigits[#,2,2 nlevels]& @ pattern[[i,1]], IntegerDigits[#,2,2 nlevels]& @ pattern[[i,2]]};
        ,{i,Length[pattern]}];
        Sort[Flatten[#,1]& @ resTab]
    ]

tstGoodOrderedActivePattern[nlevels_:1] :=  (* here nlevels: 2^nlevels *)
    Module[ {},
        ntiles1d = 2^nlevels;
        linearsz = 4^nlevels;
        Do[
            lst = getGoodOrderedPattern[nlevels, ix, iy];
            npts = Length[lst];
            Graphics[{getBinaryGrid[2 nlevels],                      
                        Table[
                            {{order}, {xCode,yCode}} = lst[[i]];
                            {posx,posy} = (FromDigits[#,2]& /@ #)& @ {xCode,yCode};
                            {
                                   {Opacity[.5],Gray,Rectangle[#, # + 1/npts] & @ ({posx,posy}/linearsz)} ,
                                Text[Style[order,24],#,{-1,-1}] & @ ({posx,posy}/linearsz) 
                            }
                        ,{i,Length[lst]}]
                }                
                ,PlotLabel -> {ix,iy}, ImageSize -> 1/2 {1024, 1024}] // Print
        , {iy, 0, linearsz-1 }, {ix, 0, linearsz-1 }]
    ]

tstGoodOrderedPattern[nlevels_:2] :=  (* here nlevels: 2^nlevels *)
    Module[ {},
        ntiles1d = 2^nlevels;
        linearsz = 4^nlevels;
        Do[
            lst = getGoodOrderedPattern[nlevels, ix, iy];
            npts = Length[lst];
            Graphics[{getBinaryGrid[2 nlevels],                      
                        Table[
                            {order, {posx,posy}} = lst[[i]];
                            {
                                   {Opacity[.5],Gray,Rectangle[#, # + 1/npts] & @ ({posx,posy}/linearsz)} ,
                                Text[Style[order,24],#,{-1,-1}] & @ ({posx,posy}/linearsz) 
                            }
                        ,{i,Length[lst]}]
                }                
                ,PlotLabel -> {ix,iy}, ImageSize -> 1/2 {1024, 1024}] // Print
        , {iy, 0, linearsz-1 }, {ix, 0, linearsz-1 }]
    ]

tstGoodPattern[nlevels_:4] :=  (* here nlevels: 2^nlevels *)
    Module[ {},
        sz = 2^nlevels;
        Do[
            pts = getGoodPattern[nlevels, ix, iy];
            npts = Length[pts];
            Graphics[{getBinaryGrid[nlevels], Black, 
               Rectangle[#, # + 1/npts] & /@ (pts/npts)}
                ,PlotLabel -> {ix,iy}, ImageSize -> 1/2 {1024, 1024}] // Print
        , {ix, 0, sz-1}, {iy, 0, sz-1}]
    ]
  

tstBayerOrdering[nlevels_:2] :=
    Module[ {},
        linearsz = 2^nlevels;
        linearsz = 2^nlevels;
        nbits = nlevels;
        Do[
            lst = getBayerOrdering[nlevels, ix, iy];
            npts = Length[lst];
            Graphics[{getBinaryGrid[nbits], 
                        Table[
                            {order, {posx,posy}} = lst[[i]];
                            orderBits = IntegerDigits[#,2,2 nlevels]& @ order;
                            bits1 = Reverse @ Table[orderBits[[i]],{i,1,Length[orderBits], 2}];
                            bits2 = Reverse @ Table[orderBits[[i]],{i,2,Length[orderBits], 2}];
                            {
                                Text[order, # + .5/linearsz, {0,-1}] & @ ({posx,posy}/linearsz) 
                                ,Text[{ Style[#,Red]& @ StringJoin[ToString/@bits1], Style[#,Blue]& @ StringJoin[ToString/@bits2] }, # + .5/linearsz, {0,1}] & @ ({posx,posy}/linearsz) 
                            }
                        ,{i,Length[lst]}]
                }                
                ,PlotLabel -> {ix,iy}, ImageSize -> 2/3 {1024, 1024}] // Print
        , {iy, 0, 0, 1 (*linearsz-1*) }, {ix, 0, 0, 1 (*linearsz-1*) }];
        Graphics[{getBinaryGrid[2 nbits], 
                    
                    masksx = Table[IntegerDigits[#,2,nlevels]& /@ getRandomGoodPermsWithIndex4[ i ], {i,4}];
                    masksy = Table[IntegerDigits[#,2,nlevels]& /@ getRandomGoodPermsWithIndex4[ i ], {i,4}];
                    Table[
                        {order, {posx,posy}} = lst[[i]];
                        {tilexCode, tileyCode} = IntegerDigits[#,2,nlevels]& /@ {posx,posy};
                        orderBits = IntegerDigits[#,2,2 nlevels]& @ order;
                        bits1 =  Table[orderBits[[i]],{i,1,Length[orderBits], 2}];
                        bits2 =  Table[orderBits[[i]],{i,2,Length[orderBits], 2}];
                        maskx = masksx[[1, 1 + Last@tilexCode]];
                        masky = masksy[[1, 1 + Last@tileyCode]];
                        newcodes = {Join[tilexCode, Reverse @ (BitXor@@{tilexCode,tileyCode,maskx})], Join[tileyCode, Reverse @ (BitXor@@{tilexCode,tileyCode,masky}) ]};
                        xy = codes2xy @ newcodes;
                            (*Print[(i-1) -> (mf @ {order, {posx,posy}}) -> orderBits -> (mf @ {bits1,bits2}) -> BitXor@@{bits1,bits2} -> newcodes -> maskx -> masky];*)
                        {    PointSize[.01],
                            Point @ xy
                            ,Text[Style[order,18], #, {-1,-1}] & @ xy 
                            (*,Text[Style[newcodes,18], #, {-1,1}] & @ xy *)
                        }
                    ,{i,Length[lst]}]
            }                
            ,PlotLabel -> {ix,iy}, ImageSize -> 2/3 {1024, 1024}] // Print;
    ] (* tstBayerOrdering *)


(*--------------------------------- pocDweRuKi -------------------------------*)
DweRuKiselectactiveCodes[codes_] :=
    With[ {halflen = (Length[codes[[1,1]]]+1)/2},
        Select[codes, 
                (And @@ Table[(mx [[ #[[1,i]], #[[1,i+1]] ]] != 0),{i,halflen-1}])
             && (And @@ Table[(mx [[ #[[2,i]], #[[2,i+1]] ]] != 0),{i,halflen-1}])
             && (mx [[ #[[1,halflen]], #[[2,halflen]] ]] != 0) 
        &]
    ]

goodPerms2 = {{1,2},{2,1}};
goodPerms4 = {{1,3,2,4},{1,3,4,2},{1,4,2,3},{1,4,3,2},{2,3,1,4},{2,3,4,1},{2,4,1,3},{2,4,3,1},{3,1,2,4},{3,1,4,2},{3,2,1,4},{3,2,4,1},{4,1,2,3},{4,1,3,2},{4,2,1,3},{4,2,3,1}}; (* result of prepGoodPerms[4] *)
goodPerms8 = Get["data/goodPerms8.dat"];

getRandomGoodPerms2[] :=
    myRandomChoice @ goodPerms2
getRandomGoodPerms4[] :=
    myRandomChoice @ goodPerms4
selectGoodPerms4[ind_:1] :=
    Select[goodPerms4, First[#] == ind& ];
getRandomGoodPermsWithIndex4[ind_:1] :=
    myRandomChoice @ selectGoodPerms4[ind]

getRandomGoodPerms8[] :=
    myRandomChoice @ goodPerms8
selectGoodPerms8[ind_:1] :=
    Select[goodPerms8, First[#] == ind& ];
getRandomGoodPermsWithIndex8[ind_:1] :=
    myRandomChoice @ selectGoodPerms8[ind]

getGoodPattern[nlevels_:4,x0_:0,y0_:0] := (* here nlevels: 2^nlevels *)
    Module[ {dir,inv,sz = 2^nlevels},
        dir = Range[0, sz - 1];
        inv = FromDigits[#, 2] & /@ Reverse /@ (IntegerDigits[#, 2, nlevels] & /@ dir);
        {BitXor[#, x0] & /@ inv, BitXor[#, y0] & /@ dir} // T
    ]


subdivDweRuKi2D[{xCode_,yCode_},count_:0] :=
    Module[ {len = Length[xCode],halflen,xType,yType,extraCodes,xFirstHalf,yFirstHalf,xExtra,yExtra,xRest,yRest},
        halflen = len/2;
        {xFirstHalf,yFirstHalf} = Take[#,(halflen)]& /@ {xCode,yCode};
        {xType,yType} = #[[halflen]]& /@ {xCode,yCode};
        extraCodes = getRandomGoodPatternDweRuKi[xType,yType];
        Table[
            {xExtra,yExtra} = extraCodes[[i]];
            xBeginning = Join[xFirstHalf,xExtra];
            yBeginning = Join[yFirstHalf,yExtra];
            xBeginningRev = Reverse @ xBeginning;
            yBeginningRev = Reverse @ yBeginning;
            xRest = Table[
                (*xThisDigit = yBeginningRev[[j+2]];*)
                xThisDigit = yBeginningRev[[j+2]];
                xThisPermutType = xBeginningRev[[j]];
                xPermuts[[ xThisPermutType, xThisDigit ]]
            ,{j,halflen}];
            yRest = Table[
                yThisDigit = xBeginningRev[[j+2]];
                yThisPermutType = yBeginningRev[[j]];
                yPermuts[[ yThisPermutType, yThisDigit ]]
            ,{j,halflen}];
            Print[{count,i}," subdivDweRuKi2D",mf[{xCode,yCode}] -> (mf[{xType,yType}])(* -> (mf/@extraCodes) *)-> (mf/@{xBeginningRev,yBeginningRev}) -> {xThisDigit,xThisPermutType->xPermuts[[ xThisPermutType, xThisDigit ]]} -> (mf@ {Join[xBeginning,xRest],Join[yBeginning,yRest]} ) ];
            {Join[xBeginning,xRest],Join[yBeginning,yRest]}
        ,{i,Length[extraCodes]}]
    ] (* subdivDweRuKi2D *)

(*getDweRuKicodes2D[level_:1,x0_:1,y0_:1] :=
    Module[ {bincodes,inttab,basecodes,tilecodes},
        codelen=base/2 (level);
           bincodes = (Last /@ (getGoodOrderedPattern[base/2 (level)]));
           inttab = (FromDigits[#,2]& /@ #)& /@ bincodes;
           basecodes = (1+ IntegerDigits[#,base,codelen]& @ #)& /@ inttab;
           tilecodes =     (Drop[#,-codelen/2]& /@ #)& /@ Select[basecodes, mx[[ #[[1,codelen/2]], #[[2,codelen/2]] ]] != 0 &];
           {xtilecodes,ytilecodes} = {First/@tilecodes,Last/@tilecodes};
           xextracodes = Table[
               lastdigit = xtilecodes[[i,-1]];
               Table[lastdigit=mx[[lastdigit,1]],{codelen/2}]
        ,{i,Length[xtilecodes]}]
    ] (* getDweRuKicodes2D *)*)

DweRuKiBitReverse[word_] :=
    1 + (FromDigits[#,2]& /@ ( Reverse /@ (IntegerDigits[#-1,2,baselog]& /@ word) ) ) (* worksonly for bases 2^n *)


getDweRuKicodes2D[level_:1] :=
    Module[ {(*bincodes,inttab,basecodes,tilecodes,xtilecodes,ytilecodes,codelen*)},
        codelen = base/2 (level);
        bincodes = (Last /@ (getGoodOrderedPattern[base/2 (level)]));
        inttab = (FromDigits[#,2]& /@ #)& /@ bincodes;
        basecodes = (1+ IntegerDigits[#,base,codelen]& @ #)& /@ inttab;
        tilecodes =     (Drop[#,-codelen/2]& /@ #)& /@ Select[basecodes, mx[[ #[[1,codelen/2]], #[[2,codelen/2]] ]] != 0 &];
        {xtilecodes,ytilecodes} = {First/@tilecodes,Last/@tilecodes};
        {xsubtilecodes,ysubtilecodes} = {Reverse@ytilecodes,Reverse@xtilecodes};
        combined = {T[{xtilecodes,ytilecodes}],T[{xsubtilecodes,ysubtilecodes}]}//T;
        sel = Select[combined, mx[[ #[[2,1,codelen/2-1]], #[[2,2,codelen/2-1]] ]] != 0 &];
        tab = Table[
            Print[i -> sel[[i]] ];
            {Join[sel[[i,1,1]], sel[[i,2,1]] ],Join[sel[[i,1,2]], sel[[i,2,2]] ]}
        ,{i,Length[sel]}];
        tab
    ] (* getDweRuKicodes2D *)


xApplyPermut[MSBcodes_,LSBcodes_] :=
    Table[xPermuts[[MSBcodes[[-i]], LSBcodes[[i]]]],{i,Length[MSBcodes]}]
yApplyPermut[MSBcodes_,LSBcodes_] :=
    Table[yPermuts[[MSBcodes[[-i]], LSBcodes[[i]]]],{i,Length[MSBcodes]}]

(*getGoodPattern1d[nlevels_:4] := (* here nlevels: 2^nlevels *)
    Module[ {dir,inv,sz, x0,y0},
        sz = 2^nlevels;
        {x0,y0} = {myRandomChoice@Range[0, sz - 1], myRandomChoice@Range[0, sz - 1]};
        dir = Range[0, sz - 1];
        inv = FromDigits[#, 2] & /@ Reverse /@ (IntegerDigits[#, 2, nlevels] & /@ dir);
        BitXor[#, x0] & /@ inv
    ]
*)


getGoodPattern1d[nlevels_:4] := (* here nlevels: 2^nlevels *)
    Module[ {dir,inv,sz},
        sz = 2^nlevels;
        dir = Range[0, sz - 1];
        inv = (Reverse /@ (IntegerDigits[#, 2, nlevels] & /@ dir));
        FromDigits[#, 2] & /@  inv
    ]

myRandomChoice :=
    RandomChoice (* or First *)

getRandomGoodPatternDweRuKi[ix_:1,iy_:1,xshift_:1,yshift_:1] :=
    goodPatternsDweRuKi[[iy,ix]][[yshift,xshift]]
getRandomGoodPatternDweRuKiActiveOnly[ix_:1,iy_:1,xshift_:1,yshift_:1] :=
    goodPatternsDweRuKi[[iy,ix]][[yshift,xshift]][[1]]


(*recursiveSubdivDweRuKi2D[level_:1,x0_:1,y0_:1] :=
    Module[ {distribBetweenPatterns,x1,x2,y1,y2,prevlevelPattern,newpattern,i,j,xtile,ytile,xtype,ytype},
        If[level == 1, Return[getRandomGoodPatternDweRuKiActiveOnly[x0,y0] ] ];
        distribBetweenPatterns = getRandomGoodPatternDweRuKi[x0,y0];
           Flatten[#,1]& @ Table[
            {{x1,x2},{y1,y2}} = distribBetweenPatterns[[i]];
            prevlevelPattern = recursiveSubdivDweRuKi2D[level-1,x1,y1];
            newpattern = Table[
                xtile = prevlevelPattern[[j,1,1]];
                ytile = prevlevelPattern[[j,2,1]];
                xtype = prevlevelPattern[[j,1,-1]];
                ytype = prevlevelPattern[[j,2,-1]];
                x2 = xPermuts[[xtype,y1]];
                y2 = yPermuts[[ytype,x1]];        
                (*Print[prevlevelPattern[[j]] -> {xtile,ytile} -> {xtype,ytype} -> xPermuts[[ytile,xtype]] -> {Join[{x1},prevlevelPattern[[j,1]],{x2}], Join[{y1},prevlevelPattern[[j,2]],{y2}]}];*)
                {Join[{x1},prevlevelPattern[[j,1]],{x2}], Join[{y1},prevlevelPattern[[j,2]],{y2}]}
            ,{j,Length[prevlevelPattern]}];
            (*Print[prevlevelPattern[[j]] -> {x1,y1}->{x2,y2}->"distribBetweenPatterns"-> (mf/@newpattern)];*)
            (*Select[newpattern, (mx [[ #[[2,-2]], #[[2,-1]] ]] != 0) &]*)
            newpattern
        ,{i,Length[distribBetweenPatterns]}]
    ] (* recursiveSubdivDweRuKi2D *)
*)

recursiveSubdivDweRuKi2D[level_:1,x0_:1,y0_:1] :=
    Module[ {prevlevelActiveCodes,prevlevelBuds,allnewActiveCodes,xcode,ycode,xtiletype,ytiletype,xshift,yshift,newActiveCodes,newBuds,xbaseCode,ybaseCode,allnewBuds,xc,yc,xlastDigit,ylastDigit},
        If[ level == 1,
            Return[getRandomGoodPatternDweRuKi[x0,y0]]
        ];
        {prevlevelActiveCodes,prevlevelBuds} = recursiveSubdivDweRuKi2D[level-1,x0,y0];
        allnewActiveCodes =
        Join[
            Flatten[#,1]& @ Table[
                {xcode,ycode} = prevlevelActiveCodes[[i]];
                {xtiletype,ytiletype} = #[[-2]]& /@ {xcode,ycode};
                {xshift,yshift} = #[[-1]]& /@ {xcode,ycode};
                {newActiveCodes,newBuds} = getRandomGoodPatternDweRuKi[xtiletype,ytiletype,1,1];
                {xbaseCode,ybaseCode} = (Drop[#,-1]& /@ {xcode,ycode});
                Print[i -> {xcode,ycode} -> {xtiletype,ytiletype} -> {xshift,yshift} ];
                Table[
                    {xc,yc} = newActiveCodes[[j]];
                    xlastDigit = xPermuts[[ xc[[-1]], ycode[[1]] ]];
                    ylastDigit = yPermuts[[ yc[[-1]], xcode[[1]] ]];
                    xlastDigit = 1;
                    ylastDigit = 1;

                       (*xlastDigit = xcode[[ -1 ]];
                       ylastDigit = ycode[[ -1 ]];*)
                    {Join[xbaseCode,xc,{xlastDigit}], Join[ybaseCode,yc,{ylastDigit}]}
                ,{j,Length[newActiveCodes]}]
            ,{i,Length[prevlevelActiveCodes]}]
            ,
            Flatten[#,1]& @ Table[
                {xcode,ycode} = prevlevelBuds[[i]];
                {xtiletype,ytiletype} = #[[-2]]& /@ {xcode,ycode};
                {xshift,yshift} = {1,1};
                {newActiveCodes,newBuds} = getRandomGoodPatternDweRuKi[xtiletype,ytiletype,1,1];
                {xbaseCode,ybaseCode} = (Drop[#,-1]& /@ {xcode,ycode});
                Print[i -> {xcode,ycode} -> {xtiletype,ytiletype} -> {xshift,yshift} ];
                Table[
                    {xc,yc} = newActiveCodes[[j]];
                    xlastDigit = xPermuts[[ xc[[-1]], ycode[[1]] ]];
                    ylastDigit = yPermuts[[ yc[[-1]], xcode[[1]] ]];
                    xlastDigit = 1;
                    ylastDigit = 1;

                       (*xlastDigit = xcode[[ -1 ]];
                       ylastDigit = ycode[[ -1 ]];*)
                    {Join[xbaseCode,xc,{xlastDigit}], Join[ybaseCode,yc,{ylastDigit}]}
                ,{j,Length[newActiveCodes]}]
            ,{i,Length[prevlevelBuds]}]
        ];
        allnewBuds = {};
        {allnewActiveCodes,allnewBuds}
    ] (* recursiveSubdivDweRuKi2D *)

pocDweRuKi[innlevels_:1, inmxsz_:4, generateDiscrepancy_:True, generateFourier_:False ] :=
    Module[ {},
        showGraphics = If[ ilevel <= 2,
                           True,
                           False
                       ];
        fouriertabsz = 1024;
        fsum = Table[0,{fouriertabsz},{fouriertabsz}];
        mxsz = inmxsz;
        base = mxsz;
        baselog = Log[2,base];
        nlevels = innlevels;
        mx = Switch[mxsz, 2, mx21, 4, mx4233, 8, mx86777776 ];
        basename = Switch[mxsz, 2, "mx21", 4, "mx4233", 8, "mx86777776" ];

        (*mx = Switch[mxsz, 2, mx22, 4, mx4444, 8, mx88888888 ];*)
        myRandomSampleDir = myRandomSampleInv = Identity;
        orderTabLength = 10;
        init[mx,True, True];
        fname = "data/DweRuKi_"<>basename<>"_BestPatterns.dat";
        goodPatternsDweRuKi = Get[fname];
        discrepancyTabDweRuKi = Table[0,{nlevels}];
        discrepancyTabDweRuKi = Table[0,{nlevels}];
        Switch[mxsz
        ,2,
            xcodePermuts = Table[Select[getRandomGoodPerms2[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
            ycodePermuts = Table[Select[getRandomGoodPerms2[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
        ,4,
            xcodePermuts = Table[Select[getRandomGoodPerms4[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
            ycodePermuts = Table[Select[getRandomGoodPerms4[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
        ,8,
            xcodePermuts = Table[Select[getRandomGoodPerms8[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
            ycodePermuts = Table[Select[getRandomGoodPerms8[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
        ];
        xPermuts = yPermuts = Table[Range[mxsz],{mxsz}];
        Do[ tmp = {productionRulesDir[[i]],xcodePermuts[[i]]};
            xPermuts[[i, tmp[[1]] ]] = tmp[[2]];
        ,{i,mxsz}];
        Do[ tmp = {productionRulesDir[[i]],ycodePermuts[[i]]};
            yPermuts[[i, tmp[[1]] ]] = tmp[[2]];
        ,{i,mxsz}];
        codes = getRandomGoodPatternDweRuKi[];
        activeCodes = getRandomGoodPatternDweRuKiActiveOnly[];
        Do[
            (*codes = recursiveSubdivDweRuKi2D[ilevel];*)
            (*codes = getDweRuKicodes2D[ilevel];*)
            
            (*activeCodes = Reverse /@ (Sort @ (Reverse /@ codes) );*)
            (*activeCodes = codes;*)
            ptsXY = DweRuKiPhiXY /@ activeCodes;
            If[ generateDiscrepancy,
                discrepancy = getDiscrepancy2Dexact[ptsXY];
                discrepancyTabDweRuKi[[ilevel]] = { Length[activeCodes], discrepancy};
                Print[ilevel -> Length[codes]  -> Length[activeCodes]  -> DweRuKinacci[2 ilevel + 2] -> discrepancy];
                Print[discrepancyTabDweRuKi];
            ];
            If[ showGraphics,
                g = Graphics[{{Opacity[.5], getDweRuKiGrid[2 ilevel]} 
                        ,PointSize[.005],Point/@ ptsXY
                        ,Table[Text[Style[(*DweRuKigetIntValueInv@*) activeCodes[[i]],6],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]
                        (*,Table[Text[Style[Mod[i,100],18],ptsXY[[i]],{-1,1}],{i,Length[ptsXY]}]*)
                    } ,ImageSize -> ilevel/3 {1200,1200}   ];
                g//Print;
                Export["g.pdf",g];
            (*Print[mf/@activeCodes[[;;10]]];*)
            ];
            If[ ilevel != nlevels,
                (*codes = Sort @ (Flatten[#, 1] & @ Table[subdivDweRuKi2D[codes[[i]],i], {i,Length[codes]} ] );*)
                {activeCodes,buds} = recursiveSubdivDweRuKi2D[ilevel+1];
                Print[Length[First/@activeCodes] -> (Length@Union[First/@activeCodes])];
                Print[Length[Last/@activeCodes] -> (Length@Union[Last/@activeCodes])];
            ];
        ,{ilevel,1,nlevels}];
        Graphics[{Point/@ptsXY}]//Print;
        If[ generateDiscrepancy,
            discrepancyTabSobol = { (* Sobol 2D Kuo's implementation http://web.maths.unsw.edu.au/~fkuo/sobol/ *)
                    {16, 0.171875},(*pSobol2Dlog1 = discrepancyComplexity[data, (Log[#])/# &, "Discrepancy Sobol 2D N/LogN"]; pSobol2Dlog1 //Print;*)
                     {64, 0.0537109}, 
                     {256, 0.0145874}, 
                     {1024, 0.00429916}, 
                     {4096, 0.00132918}, 
                     {16384, 0.000372991}, 
                     {65536, 0.0000994867},
                     {262144, 0.000027597358}
                 };
            discrepancyTabDweRuKim21 = {{3,0.618034},{5,0.418034},{8,0.27051},{13,0.193678},{21,0.130694},{34,0.0866825},{55,0.0554336},{89,0.0372093},{144,0.0244132},{233,0.0161211},
                {377,0.010242},{610,0.00673888},{987,0.00436806},{1597,0.00285382},{2584,0.00180478},{4181,0.0011745},{6765,0.000755457},{10946,0.000489471},{17711,0.000308601},{28657,0.000199274}};
            ListPlot[{Log[2,#]& /@ discrepancyTabDweRuKi, Log[2,#]& /@ discrepancyTabSobol}, Joined->True
                ,Ticks->{Table[{i,i},{i,20}],Automatic}
                ,PlotLabel->"log-log discrepancy"]//Print;
        ];
        If[ generateFourier,
            fsum += getFourier2D[Ceiling[(fouriertabsz ptsXY)],fouriertabsz];
            fsum[[1,1]] = 0;
            fsum = Reorg[fsum];
            ListDensityPlot[fsum, ImageSize -> {1024,1024}]//Print;
        ];
    ] (*pocDweRuKi*)


xDweRuKiApplyPermut[MSBcodes_,LSBcodes_] :=
    Table[xPermuts[[MSBcodes[[i]], LSBcodes[[i]]]],{i,Length[MSBcodes]}]
yDweRuKiApplyPermut[MSBcodes_,LSBcodes_] :=
    Table[yPermuts[[MSBcodes[[i]], LSBcodes[[i]]]],{i,Length[MSBcodes]}]

prepDweRuKiBestPatterns[mxsz_:4, dbgGraphics_:True] :=
    Module[ {},
        myRandomChoice :=
            RandomChoice;
        ntrials = 1;
        mx = Switch[mxsz, 2, mx21, 4, mx4233, 8, mx86777776 ];
        basename = Switch[mxsz, 2, "mx21", 4, "mx4233", 8, "mx86777776" ];
        myRandomSampleDir = myRandomSampleInv = Identity;
        init[mx, False, True];
        orderInv = Table[
            Table[Select[1+getGoodPattern1d[Log[2,mxsz]], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}]
            ,{orderTabLength}];
        buildBasicSeqCumul[True];
        xTileTypetileMSBcodes = Table[ (*Partition[#,1]& @*) Select[getRandomGoodPermsWithIndex4[1], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
        yTileTypetileMSBcodes = Table[ (*Partition[#,1]& @*) Select[getRandomGoodPermsWithIndex4[1], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
        Switch[mxsz
        ,4,
            xcodePermuts = Table[Select[getRandomGoodPermsWithIndex4[i], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
            ycodePermuts = Table[Select[getRandomGoodPermsWithIndex4[i], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
        ];
        xPermuts = yPermuts = Table[Range[mxsz],{mxsz}];
        Do[    tmp = {productionRulesDir[[i]],xcodePermuts[[i]]};
               xPermuts[[i, tmp[[1]] ]] = tmp[[2]];
        ,{i,mxsz}];
        Do[    tmp = {productionRulesDir[[i]],ycodePermuts[[i]]};
               yPermuts[[i, tmp[[1]] ]] = tmp[[2]];
        ,{i,mxsz}];
        res = Table[
            bestPatternsTab = Table[{},{mxsz},{mxsz}];
            mindistTab = Table[0,{mxsz},{mxsz}];
            Do[
            Do[
                Do[
                    (*tuples = Tuples[{xTileTypetileMSBcodes[[xTileType]], yTileTypetileMSBcodes[[yTileType]]}];*)
                    (*codes = Table[
                        {xtileMSBcode,ytileMSBcode} = tuples[[iTuples]];
                        xtileLSBcodes = xPermuts[[xtileMSBcode,yTileType]];
                        ytileLSBcodes = yPermuts[[ytileMSBcode,xTileType]];
                        {Join[{xtileMSBcode},{xtileLSBcodes}], Join[{ytileMSBcode},{ytileLSBcodes}]}
                    ,{iTuples,Length[tuples] }];*)
                    
                    cL2 = DweRuKigetSubdivWordsDir[2];
                    indtab = DweRuKigetIntValueInv /@ cL2;
                    codes = {cL2, cL2[[1 + indtab]]}//T;
                    extendedCodes = ({Join[{xTileType},#[[1]]],  Join[{yTileType},#[[2]]]}& /@ codes );
                    activeCodes = DweRuKiselectactiveCodes @ extendedCodes;
                    buds = Complement[extendedCodes,activeCodes];
                    mindist = If[ Length[activeCodes] == 1,
                                  1,
                                  getsetMinDist1[activeCodes]
                              ];
                    pivots = Select[activeCodes,#[[1,-1]] == 1 && #[[2,-1]] == 1 &];
                    (*Abort[];*)
                    indTab = (#[[2]] & /@ #) & /@ pivots;
                    (*Print[{iixshift,iiyshift,iidx,iidy} -> indTab];*)
                    Do[
                        {ix,iy} = indTab[[j]];
                        If[ mindist > mindistTab[[iy,ix]] + eps,
                            mindistTab[[iy,ix]] = mindist;
                            (*bestPatternsTab[[iy,ix]] = ((Drop[#,1]& /@ #)& /@ (Join @@ {activeCodes, buds}));*)
                            bestPatternsTab[[iy,ix]] = {(Drop[#,1]& /@ #)& /@ activeCodes, (Drop[#,1]& /@ #)& /@ buds};
                            Print[(*pivots -> *)itrial -> j -> {xTileType,yTileType}," : ", {ix,iy} -> "Updating bestPatternsTab " -> ( Total /@ ((If[ Length[#] > 0,
                                                                                                                                                       1,
                                                                                                                                                       0
                                                                                                                                                   ] & /@ #) & /@ bestPatternsTab) ),"/",mxsz];
                            If[ dbgGraphics,
                                pts = (getFracValueDir /@ #)& /@ activeCodes;
                                grid = getDweRuKiGrid[2,xTileType,yTileType];
                                gl = Table[
                                    {    Point[pts[[i]]]
                                        (*,Text[( activeCodes[[i]]),pts[[i]],{-1,-1}]}*)
                                        (*,Text[Style[(i-1),18],pts[[i]],{-1,-1}]*)
                                        }
                                ,{i,Length[activeCodes]}];
                                Graphics[{grid, PointSize[.02], gl }, ImageSize -> {1024,1024}/2]//Print;
                            (*Abort[];*)
                            ];
                        ];
                    ,{j, 1 Length[indTab]}];
                ,{iysubype,mxsz},{ixsubype,mxsz}];
                ,{iiyshift,mxsz},{iixshift,mxsz}]
        ,{itrial,ntrials}];
            Print[{xTileType,yTileType} -> ( mindistTab )];
            bestPatternsTab
        ,{yTileType,mxsz},{xTileType,mxsz}];
        fname = "data/DweRuKi_"<>basename<>"_BestPatterns.dat";
        Print["writing into",fname];
        Put[res,fname];
    ] (* prepDweRuKiBestPatterns *)

getsetMinDist1PlusFirstDigit[codes_,{xTileType_,yTileType_}] :=
    getptsMinDist1[(getFracValueDir /@ #)& /@ ({Join[{xTileType},#[[1]]],  Join[{yTileType},#[[2]]]}& /@ codes)]
(*getsetMinDist1[codes_] := First @ ( getptsMinDist12[(getFracValueDir /@ #)& /@ codes] )*)
getsetMinDist1[codes_] :=
    ( getptsMinDist1[(getFracValueDir /@ #)& /@ codes] )


getptsMinDist1[pts_] :=
    Module[ {elem,iElem,len = Length[pts]},
        If[ Length[pts] == 1,
            Return[1]
        ];
        Table[
            elem = pts[[iElem]];
            Sort[euclidlen2[elem-#] & /@ pts][[2;;2]]
        ,{iElem, len}]//Min
    ] (* getptsMinDist1 *)

(*
getptsMinDist12[ptsunsorted_,torFlag_:False] := (* needs triple-checking for toroidal and non-int bases.... *)
    Module[ {pts = Sort[ptsunsorted],firstrow,firstcol,lastrow,lastcol,elem,iElem,len = Length[ptsunsorted],lensq,tab},
        lensq = 2 + Ceiling @ Sqrt[Length[ptsunsorted]];
        If[ torFlag,
            firstrow = (Reverse /@ (Sort[Reverse /@ pts])[[;; lensq]]);
            firstrow = Join[firstrow, {First[Sort[firstrow]]+{len,0}},{Last[Sort[firstrow]]+{-len,0}} ];
            lastrow = (Reverse /@ (Sort[Reverse /@ pts])[[len-lensq+1;;len]]);
            lastrow = Join[lastrow, {First[Sort[lastrow]]+{len,0}},{Last[Sort[lastrow]]+{-len,0}} ];
            firstcol = pts[[;; lensq]];
            lastcol = pts[[len-lensq+1;;len]];
            pts = Join[pts, 
                Plus[#,{0,1}]& /@ firstrow, 
                Plus[#,{1,1}]& /@ firstrow[[1;;1]], 
                Plus[#,{-1,1}]& /@ firstrow[[-1;;-1]], 
                Plus[#,{0,-1}]& /@ lastrow, 
                Plus[#,{1,-1}]& /@ lastrow[[1;;1]], 
                Plus[#,{-1,-1}]& /@ lastrow[[-1;;-1]], 
                Plus[#,{1,0}]& /@ firstcol , 
                Plus[#,{-1,0}]& /@ lastcol 
            ]
        ];
        tab = Table[
            elem = pts[[iElem]];
            Sort[euclidlen2[elem-#] & /@ pts][[2;;3]]
        ,{iElem, len}];
        (*{Min[First/@tab], Min[Total/@tab]}*)
        Round[1000000 (Sort[{#[[1]], Total@#} & /@ tab][[1]])]/1000000.
    ] (* getptsMinDist12 *)
*)

getSetDweRuKiHaltonLike[mx1_,mx2_,nlevels_] :=
    Module[ {xcodes,ycodes,xvals,yvals,len},
        init[mx1,False,True];
        xcodes = {{}};
        Do[ xcodes = Flatten[#,1]& @ (DweRuKiapplyProductionRules /@ xcodes ) ,{nlevels}];
        xvals = DweRuKigetFracValueInv/@xcodes;
        init[mx2,False,True];
        ycodes = {{}};
        Do[ ycodes = Flatten[#,1]& @ (DweRuKiapplyProductionRules /@ ycodes ) ,{nlevels}];
        yvals = DweRuKigetFracValueInv/@ycodes;
        len = Min[xvals // Length, yvals // Length];
        {Take[xvals,len], Take[yvals,len]}//T
    ]
    
    
pocDweRuKiHaltonLike[nlevels_:2] :=  (* does not work !!!!!!!*)
    Module[ {},
        generateDiscrepancy = True;
        generateFourier = False;
        fouriertabsz = 1024;
        fsum = Table[0,{fouriertabsz},{fouriertabsz}];
        discrepancyTabDweRuKi = Table[0,{nlevels}];
        mx1 = mx22;
        mx2 = mx21;
        mx1 = mx87566575;
        mx2 = mx85765667;
        mx1 = mx22;
        mx2 = mx321;
        mx1 = mx55555;
        mx2 = mx333;
        mx1 = mx321;
        mx2 = mx4332;
        Do[
            ptsXY = getSetDweRuKiHaltonLike[mx1,mx2,ilevel];
            If[ generateDiscrepancy,
                discrepancy = getDiscrepancy2Dexact[ptsXY];
                discrepancyTabDweRuKi[[ilevel]] = { Length[ptsXY], discrepancy};
                Print[ilevel -> Length[ptsXY] -> discrepancy];
                Print[discrepancyTabDweRuKi];
            ];
        ,{ilevel,1,nlevels}];
        Graphics[{Point/@ptsXY},AspectRatio->1,Frame->True]//Print;
        If[ generateDiscrepancy,
            discrepancyTabSobol = { (* Sobol 2D Kuo's implementation http://web.maths.unsw.edu.au/~fkuo/sobol/ *)
                    {16, 0.171875},(*pSobol2Dlog1 = discrepancyComplexity[data, (Log[#])/# &, "Discrepancy Sobol 2D N/LogN"]; pSobol2Dlog1 //Print;*)
                     {64, 0.0537109}, 
                     {256, 0.0145874}, 
                     {1024, 0.00429916}, 
                     {4096, 0.00132918}, 
                     {16384, 0.000372991}, 
                     {65536, 0.0000994867},
                     {262144, 0.000027597358}
                 };
            discrepancyTabDweRuKim21 = {{3,0.618034},{5,0.418034},{8,0.27051},{13,0.193678},{21,0.130694},{34,0.0866825},{55,0.0554336},{89,0.0372093},{144,0.0244132},{233,0.0161211},
                {377,0.010242},{610,0.00673888},{987,0.00436806},{1597,0.00285382},{2584,0.00180478},{4181,0.0011745},{6765,0.000755457},{10946,0.000489471},{17711,0.000308601},{28657,0.000199274}};
            ListPlot[{Log[2,#]& /@ discrepancyTabDweRuKi, Log[2,#]& /@ discrepancyTabSobol}, Joined->True
                ,Ticks->{Table[{i,i},{i,20}],Automatic}
                ,PlotLabel->"log-log discrepancy"]//Print;
        ];
        If[ generateFourier,
            fsum += getFourier2D[Ceiling[(fouriertabsz ptsXY)],fouriertabsz];
            fsum[[1,1]] = 0;
            fsum = Reorg[fsum];
            ListDensityPlot[fsum, ImageSize -> {1024,1024}]//Print;
        ];
    ] (* pocDweRuKiHaltonLike *)
(*
mx22 = {{1,1},{1,1}};
mx333 = {{1,1,1},{1,1,1},{1,1,1}};
mx4444 = {{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}};
mx55555 = {{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1}};
mx88888888 = {{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1}};
mx7777777 = {{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1}};
    
mx21 = {{1,1},{1,0}};
mx321 = {{1, 1, 1}, {1, 1, 0}, {1, 0, 0}};    (* symmetrical >>>> ratio:2.24698 analytical eval: 1/3 (2+7^(2/3)/(1/2 (1+3 I Sqrt[3]))^(1/3)+(7/2 (1+3 I Sqrt[3]))^(1/3)) *)
mx4332 = {{1,1,1,1},{1,1,1,0},{1,1,0,1},{1,0,1,0}};     (* >>>> ratio:1.78572 *)
mx4233 = {{1,1,1,1},{1,0,1,0},{1,1,0,1},{1,0,1,1}};     (* >>>> ratio:1.78572 *)
mx87566575 = {{1,1,1,1,1,1,1,1},{1,1,0,1,1,1,1,1},{1,0,1,1,0,1,0,1},{1,1,1,0,1,0,1,1},{1,1,0,1,0,1,0,1},{1,1,1,0,1,1,1,1},{1,1,0,1,0,1,1,1},{1,1,1,1,1,1,1,0}};    (* >>>> ratio:1.57478 *)
mx87566575 = {{1,1,1,1,1,1,1,1},{1,1,0,1,1,1,1,1},{1,0,1,0,1,0,1,1},{1,1,0,1,1,1,1,0},{1,1,1,1,0,1,0,1},{1,1,0,1,1,0,1,0},{1,1,1,1,0,1,1,1},{1,1,1,0,1,0,1,0}}; (* >>>> ratio:1.61092 *)
mx84675675 = {{1,1,1,1,1,1,1,1},{1,0,1,0,1,0,1,0},{1,1,0,1,0,1,1,1},{1,0,1,1,1,1,1,1},{1,1,0,1,1,0,1,0},{1,0,1,1,0,1,1,1},{1,1,1,1,1,1,0,1},{1,0,1,1,0,1,1,0}}; (* >>>> ratio:1.90463 *)
mx86665757 = {{1,1,1,1,1,1,1,1},{1,0,1,0,1,1,1,1},{1,1,1,1,0,1,0,1},{1,0,1,1,1,0,1,1},{1,1,0,1,0,1,0,1},{1,1,1,0,1,1,1,1},{1,1,0,1,0,1,1,0},{1,1,1,1,1,1,0,1}} (* >>>> ratio:{1.58958,1.58958} *)
mx85765667 = {{1,1,1,1,1,1,1,1},{1,1,0,1,0,1,0,1},{1,0,1,1,1,1,1,1},{1,1,1,0,1,0,1,1},{1,0,1,1,0,1,0,1},{1,1,1,0,1,1,1,0},{1,0,1,1,0,1,1,1},{1,1,1,1,1,0,1,1}}; (* >>>> ratio:1.58958 normevecDir:normevecDir lambda:6.38889 ratio:1.58958 CharacteristicPolynomial: 1+5 x-3 x^2-25 x^3+3 x^4+29 x^5-7 x^6-6 x^7+x^8 factorized CharacteristicPolynomial: 1+5 x-3 x^2-25 x^3+3 x^4+29 x^5-7 x^6-6 x^7+x^8 *)

*)



(*-------------------- pocAALDSFIBO2D -----------------------*)
FIBOF[symbols_] :=
    With[ {s = Reverse[symbols]},
        Total@Table[Fibonacci[i+1 ] s[[i]], {i, Length[s]}]
    ]
FIBOFinv[symbols_] :=
    Total@Table[Fibonacci[i+1 ] symbols[[i]], {i, Length[symbols]}]
FIBOFxy[symbols_] :=
    FIBOF/@symbols

phitab = Table[phi^-i, {i, 32}] // N;
FIBOPhi[s_] :=
    Sum[phitab[[i]] s[[i]], {i, Length[s]}] 

FIBOPhiXY[s_] :=
    FIBOPhi/@s


FIBOstr2nfromsecondpos[str_] :=
    FIBOF @ Table[ToExpression @ StringTake[str, {i}] , {i, 2,StringLength[str]}]
FIBOstr2n[str_] :=
    FIBOF @ Table[ToExpression @ StringTake[str, {i}] , {i, StringLength[str]}]
FIBOstr2nInv[str_] :=
    FIBOF @ Table[ToExpression @ StringTake[str, {i}] , {i, StringLength[str],2,-1}]

getFIBOCodes1d[nlevels_:1] :=
    Block[ {codes = {{0}}},
        Table[ codes = Flatten[#,1]& @ (subdivFIBO /@ codes),{nlevels-1}];
        Drop[#,1]& /@ codes
    ] (* getFIBOCodes1d *)

getFIBOCodes1dShort[nlevels_:1] :=
    Block[ {codes = {{1}}},
        Table[ codes = Flatten[#,1]& @ (subdivFIBO /@ codes),{nlevels-1}];
        Drop[#,1]& /@ codes
    ] (* getFIBOCodes1dShort *)


subdivFIBO2D[{xCode_,yCode_},count_:0] :=
    Module[ {len = Length[xCode](*,halflen,tyletype,patterntype,extraCodes,xFirstHalf,yFirstHalf,restx,resty,res,reslen*)},
        halflen = len/2;
        {xFirstHalf,yFirstHalf} = Take[#,(halflen)]& /@ {xCode,yCode};
        {restx,resty} = Take[Reverse[#],-halflen]& /@ {yCode,xCode};
        tyletype = #[[halflen]]& /@ {xCode,yCode};
        patterntype = #[[halflen+1]]& /@ {xCode,yCode};
        (*If[patterntype == {{0,1},{0,1}}, Print[">>>>>>>>>>>>>>",tyletype -> patterntype] ];*)
        extraCodes = Switch[tyletype
            ,{0,0},(* tyletype == {0,0} large square *)
                RandomChoice @ {
                    {{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}},
                    {{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}},
                    {{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{0,0}},{{1,1},{1,1}}},
                    {{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}},{{1,1},{1,1}}}
                }
        
            ,{0,1}, (* tyletype == {0,1} hor rect *)
                RandomChoice @ {
                    {{{0,0},{0,0}},{{1,0},{0,1}}},
                    {{{0,0},{0,1}},{{1,0},{0,0}}}
                }
        
            ,{1,0}, (* tyletype == {1,0} vert rect *)
                RandomChoice @ {
                    {{{0,0},{0,0}},{{0,1},{1,0}}},
                    {{{0,0},{1,0}},{{0,1},{0,0}}}
                }                    
            ,_,     { {{0,0},{0,0}} }
        
        ];
        res = {Join[xFirstHalf,#[[1]],restx],Join[yFirstHalf,#[[2]],resty]}& /@ extraCodes;
        reslen = Length[res ];
        If[ Max[(ListConvolve[{1, 1}, #] & /@ #)& /@ (Take[#,Min[3,reslen]]& @ res)] > 1,
            Print["<<<<<<<<<<<<",count," subdivFIBO2D",mf[{xCode,yCode}] -> (mf[tyletype]) -> (mf[patterntype]) -> (mf/@extraCodes)  -> (mf/@res) ]
        ];
        (*Print[count," subdivFIBO2D",mf[{xCode,yCode}] -> (mf[tyletype]) -> (mf[patterntype]) -> (mf/@extraCodes) -> (mf/@res),  If[Max[(ListConvolve[{1, 1}, #] & /@ #)& /@ (Take[#,Min[3,reslen]]& @ res)] > 1, "<<<<<<<<<<<<",""] ]*);
        res
    ] (* subdivFIBO2D *)
    
tstFIBOXor[nlevels_:3] :=
    Module[ {},
        grid = getFIBOGrid[2 nlevels];
        codes = getFIBOCodes1d[nlevels+1];
        count = 0;
        gl = Table[
            xcodes = codes[[ix]];
            ycodes = codes[[iy]];
            xycode = {Join[xcodes,Reverse@ycodes],Join[ycodes,Reverse@xcodes]};
            xy = FIBOPhiXY@xycode;
            If[ Max[(ListConvolve[{1, 1}, #] & /@ xycode)] < 2,
                count++;
                Print[count -> {ix,iy} -> (mf@{xcodes,ycodes}) -> (mf@xycode)];
                {Point[xy],Text[Style[count,24],xy,{-1,-1}]},(*ELSE*)
                Print[">>>>>>>>>>>>" -> {ix,iy} -> (mf@{xcodes,ycodes}) -> (mf@xycode)];
                {}
            ]
        ,{iy,Length[codes]},{ix,Length[codes]}];
        Graphics[{grid,PointSize[.03],gl},ImageSize -> {750,750}]//Print
    ]
    
 tstFIBOShift[nlevels_:6] :=
     Module[ {},
         grid = getFIBOGrid[nlevels];
         codes = getFIBOCodes1d[nlevels+1];
         len = Length[codes];
         Table[
             count = 0;
             gl = Table[
                 xcodes = codes[[ii]];
                 ycodes = Reverse@codes[[ Mod[ii-ishift,len,1] ]];
                 xycode = {Join[xcodes ],Join[ycodes ]};
                 xy = FIBOPhiXY@xycode;
                 If[ Max[(ListConvolve[{1, 1}, #] & /@ xycode)] < 2,
                     count++;
                     (*Print[{ishift,count} -> (mf@{xcodes,ycodes}) -> (mf@xycode)];*)
                     {Point[xy],Text[Style[count,24],xy,{-1,-1}]},(*ELSE*)
                     Print[">>>>>>>>>>>>" -> {ishift,count} -> (mf@{xcodes,ycodes}) -> (mf@xycode)];
                     {}
                 ]
             ,{ii,Length[codes]}];
             Graphics[{grid,PointSize[.03],gl},ImageSize -> {700,700}/2,PlotLabel->{ishift,Length[gl]-Count[gl,{}]}]
         ,{ishift,0,len-1}]//Print;
     ]
    
    
getFIBO2Dmarks[codes_,textMaks_:True] :=
    Module[ {halflen,len,orig,dx,dy,xCode,yCode,col = If[ textMaks,
                                                          Gray,
                                                          Black
                                                      ]},
        Table[
            {xCode,yCode} = codes[[i]];
            len = Length[xCode];
            halflen = len/2;
            orig = FIBOPhiXY[{xCode,yCode}];
            (*Print[{xCode,yCode} -> tyletype -> orig];*)
            {dx,dy} = Last /@ {xCode, yCode};
            {col, Rectangle[orig,orig+{phitab[[len+dx]],phitab[[len+dy]]}]
                , If[ textMaks,
                      {Black, Text[Style[i,24],FIBOPhiXY @ {xCode,yCode} ,{-1,-1}]},
                      {}
                  ]
            }
        ,{i,Length[codes]}]
    ]


selectactiveCodesFIBO[codes_] :=
    With[ {halflen = Length[codes[[1,1]]]/2},
        Select[codes, !((#[[1,halflen]] == 1) && (#[[2,halflen]] == 1)) &]
    ]

pocAALDSFIBO2D[nlevels_:4,textMaks_:True,generateDiscrepancy_:True] :=
    Module[ {},
        fouriertabsz = 4096;
        ntrials = 10;
        codes = {{{0, 0}, {0, 0}}, {{0, 1}, {1, 0}}, {{1, 0}, {0, 1}}, {{1, 1}, {1, 1}}};
        codes = {{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}};
        codes = {{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}};
        discrepancyTabFIBO = Table[0,{nlevels}];
        Do[
            activeCodes = selectactiveCodesFIBO[codes];
            If[ generateDiscrepancy,
                ptsXY = FIBOPhiXY /@ activeCodes;
                discrepancy = getDiscrepancy2Dexact[ptsXY];
                discrepancyTabFIBO[[ilevel]] = { Length[activeCodes], discrepancy};
                Print[ilevel -> Length[codes]  -> Length[activeCodes]  -> Fibonacci[2 ilevel + 2] -> discrepancy];
                Print[discrepancyTabFIBO];
            ];
            len = Length[codes[[1,1]]];
            halflen = len/2;
            permutCodes = getFIBOCodes1d[halflen+2 ];
            permutCodesShort = getFIBOCodes1dShort[halflen+2 ];
            newcodes = {Join[#[[1]],Table[0,{len}]],Join[#[[2]],Table[0,{len}]] } & /@ codes;
            (*Print["permutCodes: ",mf@permutCodes];
            Print["permutCodesShort: ",mf@permutCodesShort];
            Print["newcodes: ",mf/@newcodes];*)
            codesX = Take[#,(halflen+1)]& /@ (First /@ (Sort@newcodes));
            codesY = Take[#,(halflen+1)]& /@ (First/@(Sort@(Reverse/@newcodes)));
            {shifttabx,shifttaby} = { (#[[ilevel+1;;]]& /@(Last/@(Sort[Reverse /@ codes]))),      (#[[ilevel+1;;]]& /@(First@(Sort/@(Reverse@newcodes))))};
            shiftedXcodes = Table[
                    xcode = codesX[[i]];
                    If[ Last[xcode] == 1,
                        RotateRight[permutCodesShort, FIBOF[xcode] ],
                        RotateRight[permutCodes, FIBOF[xcode] ]
                    ]
                    
                    (*RotateRight[permutCodes, FIBOF[If[Last[xcode]==1,Join[xcode,{0}],xcode]] ]*)
                ,{i,Length[codesX]}];
            shiftedYcodes = Table[
                    ycode = codesY[[i]];
                    If[ Last[ycode] == 1,
                        RotateRight[permutCodesShort, FIBOF[ycode] ],
                        RotateRight[permutCodes, FIBOF[ycode] ]
                    ]
                    (*RotateRight[permutCodes, FIBOF[ycode] ]*)
                    (*RotateRight[permutCodes, FIBOF[If[Last[ycode]==1,Join[ycode,{0}],ycode]] ]*)
                ,{i,Length[codesY]}];
            (*Print["shiftedXcodes: ", ilevel -> (mf /@ shiftedXcodes)];
            Print["shiftedYcodes: ", ilevel -> (mf /@ shiftedYcodes)];*)
            showGraphics = If[ ilevel <= 6,
                               True,
                               False
                           ];
            If[ showGraphics,
                Graphics[{{getFIBOGrid[Length[First@(First@codes)] ]}, getFIBO2Dmarks[#,textMaks]& @ activeCodes
                        (*,Point/@ (FIBOPhiXY /@ codes)*)
                    } ,ImageSize -> ilevel/3 {1024,1024}  ]//Print
            ];
            If[ ilevel != nlevels,
                codes = Flatten[#, 1] & @ Table[subdivFIBO2D[codes[[i]],i], {i,Length[codes]} ];
            ];
        ,{ilevel,1,nlevels}];
        If[ generateDiscrepancy,
            discrepancyTabSobol = { (* Sobol 2D Kuo's implementation http://web.maths.unsw.edu.au/~fkuo/sobol/ *)
                    {16, 0.171875},(*pSobol2Dlog1 = discrepancyComplexity[data, (Log[#])/# &, "Discrepancy Sobol 2D N/LogN"]; pSobol2Dlog1 //Print;*)
                     {64, 0.0537109}, 
                     {256, 0.0145874}, 
                     {1024, 0.00429916}, 
                     {4096, 0.00132918}, 
                     {16384, 0.000372991}, 
                     {65536, 0.0000994867},
                     {262144, 0.000027597358}
                 };
            ListPlot[{Log /@ discrepancyTabFIBO, Log /@ discrepancyTabSobol}, Joined->True,PlotLabel->"log-log discrepancy"]//Print;
        ];
        Graphics[{Point /@ ptsXY}]//Print;
    ] (* pocAALDSFIBO2D *)
(*
discrepancyTabFIBO2D = {{3,0.618034},{8,0.27051},{21,0.108351},{55,0.0554336},{144,0.0233996},{377,0.0100185},{987,0.00436806},{2584,0.00180478},{6765,0.000736167},{17711,0.000306409},{46368,0.000127471},{121393,0.000051631}}
*)

prepFIBOBestPatterns[mxsz_:8, xTileType_:1,yTileType_:1, dbgGraphics_:False] :=
    Module[ {},
        mx = Switch[mxsz, 2, {{1,1},{1,0}}, 4, mx4233, 8, mx87566575 ];
        mx = Switch[mxsz, 2, {{1,1},{1,0}}, 4, mx4233, 8, mx87777777 ];
        myRandomSampleDir = myRandomSampleInv = Identity;
        init[mx,True, True];
        {permutTabSzX,permutTabSzY} = Length /@ {DweRuKigetSubdivWordsDir[2,xTileType],DweRuKigetSubdivWordsDir[2,yTileType]};
        bestPatternsTab = Table[{},{permutTabSzY},{permutTabSzX}];
        mindistTab = Table[0,{permutTabSzY},{permutTabSzX}];
        xTileTypetileMSBcodes = DweRuKigetSubdivWordsDir[1,xTileType];
        yTileTypetileMSBcodes = DweRuKigetSubdivWordsDir[1,yTileType];
        mindistLimit = Switch[mxsz, 4, .01, 8, .0000001 ]; ;
        xTileTypetileMSBcodes = DweRuKigetSubdivWordsDir[1,xTileType];
        yTileTypetileMSBcodes = DweRuKigetSubdivWordsDir[1,yTileType];
        ntrials = 10000000;
        Do[
            If[ Mod[itrial, 10000] == 0,
                Print["...",{itrial} -> ( mindistTab )];
                fname = Switch[mxsz
                    ,2, "data/prepDweRuKi2x2BestPatterns_"<>ToString[xTileType]<>"_"<>ToString[yTileType]<>".dat"
                    ,4, "data/prepDweRuKi4x4BestPatterns_"<>ToString[xTileType]<>"_"<>ToString[yTileType]<>".dat"
                    ,8, "data/prepDweRuKi8x8BestPatterns_"<>ToString[xTileType]<>"_"<>ToString[yTileType]<>".dat"
                ];
                Put[bestPatternsTab,fname];
            ];
            Switch[mxsz
            ,2,
                xcodePermuts = Table[Select[getRandomGoodPerms2[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
                ycodePermuts = Table[Select[getRandomGoodPerms2[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
            ,4,
                xcodePermuts = Table[Select[getRandomGoodPerms4[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
                ycodePermuts = Table[Select[getRandomGoodPerms4[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
            ,8,
                xcodePermuts = Table[Select[getRandomGoodPerms8[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
                ycodePermuts = Table[Select[getRandomGoodPerms8[], MemberQ[productionRulesDir[[i]], #] &], {i,mxsz}];
            ];
            xPermuts = yPermuts = Table[Range[mxsz],{mxsz}];
            Do[
                tmp = {productionRulesDir[[i]],xcodePermuts[[i]]};
                xPermuts[[i, tmp[[1]] ]] = tmp[[2]];
            ,{i,mxsz}];
            Do[
                tmp = {productionRulesDir[[i]],ycodePermuts[[i]]};
                yPermuts[[i, tmp[[1]] ]] = tmp[[2]];
            ,{i,mxsz}];
            codes = Flatten[#,1]& @ Table[
                xtileMSBcodes = xTileTypetileMSBcodes[[ix]];
                ytileMSBcodes = yTileTypetileMSBcodes[[iy]];
                xtileLSBcodes = xDweRuKiApplyPermut[xtileMSBcodes,Reverse@ytileMSBcodes];
                ytileLSBcodes = yDweRuKiApplyPermut[ytileMSBcodes,Reverse@xtileMSBcodes];
                {Join[xtileMSBcodes,xtileLSBcodes], Join[ytileMSBcodes,ytileLSBcodes]}
            ,{iy,Length[yTileTypetileMSBcodes]},{ix,Length[xTileTypetileMSBcodes]}];
            extendedCodes = ({Join[{xTileType},#[[1]]],  Join[{yTileType},#[[2]]]}& /@ codes );
            activeCodes = DweRuKiselectactiveCodes @ extendedCodes;
            
             (*goodPattern = And @@ (((mx [[ #[[1,-1]], yTileType ]] != 0) && (mx [[ #[[2,-1]], xTileType ]] != 0))& /@ activeCodes);
             If[!goodPattern, Continue[] ];*)
            buds = Complement[extendedCodes,activeCodes];
            mindist = If[ Length[activeCodes] == 1,
                          1,
                          getsetMinDist1[activeCodes]
                      ];
            (*Print[">>>>>>",Length/@{extendedCodes,activeCodes,buds},mindist];*)
            If[ mindist < mindistLimit,
                Continue[]
            ];
            indTab = Plus[#,1]& /@ ( (getIntValueDir /@ #)& /@activeCodes);
            Do[
                {ix,iy} = indTab[[i]];
                If[ mindist > mindistTab[[iy,ix]] + eps,
                    mindistTab[[iy,ix]] = mindist;
                    (*bestPatternsTab[[iy,ix]] = ((Drop[#,1]& /@ #)& /@ (Join @@ {activeCodes, buds}));*)
                    bestPatternsTab[[iy,ix]] = {mindist, Sort@activeCodes, Sort@buds};
                    Print[{xTileType,yTileType} ->  itrial -> i -> "Updating bestPatternsTab ",{iy,ix} -> ( Total /@ ((If[ Length[#] > 0,
                                                                                                                           1,
                                                                                                                           0
                                                                                                                       ] & /@ #) & /@ bestPatternsTab) ),"/",permutTabSzY];
                    If[ dbgGraphics,
                        pts = (getFracValueDir /@ #)& /@ activeCodes;
                        grid = getDweRuKiGrid[2,xTileType,yTileType];
                        gl = Table[
                            {Point[pts[[i]]],Text[( activeCodes[[i]]),pts[[i]],{-1,-1}]}
                        ,{i,Length[activeCodes]}];
                        Graphics[{grid, PointSize[.005], gl }, ImageSize -> {1024,1024}/2]//Print;
                        Abort[];
                    ];
                ];
            ,{i,Length[indTab]}];
        ,{itrial,ntrials}];
    ] (* prepDweRuKiBestPatterns *)
(*-------------------- interesting starts here ----------------------*)
foundFIBOLen8Patterns = (* 34 patterns produced with FIBOshowAllPermutTrees[4] *)
{{{{0,0,0,0},{0,1,0,1}},{{1,0,0,0},{0,0,0,1}},{{0,1,0,0},{1,0,0,1}},{{1,0,1,0},{0,1,0,0}},{{0,0,1,0},{0,0,0,0}},{{1,0,0,1},{1,0,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{1,0,0,0},{0,1,0,1}},{{0,0,0,0},{0,0,0,1}},{{0,1,0,0},{1,0,0,1}},{{0,0,1,0},{0,1,0,0}},{{1,0,1,0},{0,0,0,0}},{{1,0,0,1},{1,0,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{1,0,0,0},{0,1,0,1}},{{0,0,0,0},{1,0,0,1}},{{0,1,0,0},{0,0,0,1}},{{0,0,1,0},{0,1,0,0}},{{1,0,1,0},{0,0,0,0}},{{1,0,0,1},{1,0,0,0}},{{0,0,0,1},{0,0,1,0}},{{0,1,0,1},{1,0,1,0}}}
    ,{{{0,1,0,0},{0,0,1,0}},{{0,0,0,0},{1,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{0,0,1,0},{0,0,0,0}},{{1,0,1,0},{0,1,0,0}},{{0,0,0,1},{0,1,0,1}},{{1,0,0,1},{0,0,0,1}},{{0,1,0,1},{1,0,0,1}}}
    ,{{{0,1,0,0},{0,0,0,1}},{{0,0,0,0},{1,0,0,1}},{{1,0,0,0},{0,1,0,1}},{{0,0,1,0},{0,1,0,0}},{{1,0,1,0},{0,0,0,0}},{{1,0,0,1},{1,0,0,0}},{{0,0,0,1},{0,0,1,0}},{{0,1,0,1},{1,0,1,0}}}
    ,{{{0,1,0,0},{1,0,0,1}},{{0,0,0,0},{0,0,0,1}},{{1,0,0,0},{0,1,0,1}},{{0,0,1,0},{0,1,0,0}},{{1,0,1,0},{0,0,0,0}},{{1,0,0,1},{1,0,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{0,1,0,0},{0,0,1,0}},{{0,0,0,0},{1,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,1,0},{0,0,0,0}},{{0,0,1,0},{0,1,0,0}},{{1,0,0,1},{0,1,0,1}},{{0,0,0,1},{0,0,0,1}},{{0,1,0,1},{1,0,0,1}}}
    ,{{{0,1,0,0},{1,0,1,0}},{{0,0,0,0},{0,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,1,0},{0,0,0,0}},{{0,0,1,0},{0,1,0,0}},{{1,0,0,1},{0,1,0,1}},{{0,0,0,1},{1,0,0,1}},{{0,1,0,1},{0,0,0,1}}}
    ,{{{0,1,0,0},{1,0,0,1}},{{1,0,0,0},{0,0,0,1}},{{0,0,0,0},{0,1,0,1}},{{1,0,1,0},{0,1,0,0}},{{0,0,1,0},{0,0,0,0}},{{1,0,0,1},{1,0,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{0,1,0,0},{0,0,1,0}},{{0,0,0,0},{1,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{0,0,1,0},{0,0,0,0}},{{1,0,1,0},{0,1,0,0}},{{0,1,0,1},{1,0,0,1}},{{1,0,0,1},{0,0,0,1}},{{0,0,0,1},{0,1,0,1}}}
    ,{{{0,1,0,0},{0,0,1,0}},{{0,0,0,0},{1,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,1,0},{0,0,0,0}},{{0,0,1,0},{0,1,0,0}},{{0,1,0,1},{1,0,0,1}},{{0,0,0,1},{0,0,0,1}},{{1,0,0,1},{0,1,0,1}}}
    ,{{{0,1,0,0},{1,0,1,0}},{{0,0,0,0},{0,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,1,0},{0,0,0,0}},{{0,0,1,0},{0,1,0,0}},{{0,1,0,1},{0,0,0,1}},{{0,0,0,1},{1,0,0,1}},{{1,0,0,1},{0,1,0,1}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{0,0,0,0},{1,0,0,1}},{{1,0,0,0},{1,0,0,0}},{{0,1,0,0},{0,0,0,0}},{{1,0,0,1},{0,1,0,0}},{{0,0,0,1},{0,0,1,0}},{{0,1,0,1},{1,0,1,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{0,0,0,0},{1,0,0,1}},{{1,0,0,0},{0,1,0,0}},{{0,1,0,0},{0,0,0,0}},{{1,0,0,1},{1,0,0,0}},{{0,0,0,1},{0,0,1,0}},{{0,1,0,1},{1,0,1,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{1,0,0,0},{1,0,0,1}},{{0,0,0,0},{0,0,0,0}},{{0,1,0,0},{1,0,0,0}},{{1,0,0,1},{0,1,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{1,0,0,0},{1,0,0,1}},{{0,0,0,0},{1,0,0,0}},{{0,1,0,0},{0,0,0,0}},{{1,0,0,1},{0,1,0,0}},{{0,0,0,1},{0,0,1,0}},{{0,1,0,1},{1,0,1,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{1,0,0,0},{1,0,0,1}},{{0,0,0,0},{0,0,1,0}},{{0,1,0,0},{1,0,1,0}},{{1,0,0,1},{0,1,0,0}},{{0,0,0,1},{1,0,0,0}},{{0,1,0,1},{0,0,0,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{1,0,0,0},{1,0,0,1}},{{0,0,0,0},{1,0,1,0}},{{0,1,0,0},{0,0,1,0}},{{1,0,0,1},{0,1,0,0}},{{0,0,0,1},{0,0,0,0}},{{0,1,0,1},{1,0,0,0}}}
    ,{{{1,0,1,0},{0,1,0,1}},{{0,0,1,0},{0,0,0,1}},{{1,0,0,0},{1,0,0,1}},{{0,0,0,0},{1,0,1,0}},{{0,1,0,0},{0,0,1,0}},{{0,0,0,1},{0,1,0,0}},{{1,0,0,1},{0,0,0,0}},{{0,1,0,1},{1,0,0,0}}}
    ,{{{1,0,1,0},{0,1,0,1}},{{0,0,1,0},{0,0,0,1}},{{1,0,0,0},{1,0,0,1}},{{0,0,0,0},{0,1,0,0}},{{0,1,0,0},{1,0,0,0}},{{1,0,0,1},{0,0,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{1,0,0,0},{1,0,0,1}},{{0,0,0,0},{0,0,1,0}},{{0,1,0,0},{1,0,1,0}},{{0,1,0,1},{0,0,0,0}},{{0,0,0,1},{1,0,0,0}},{{1,0,0,1},{0,1,0,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{1,0,0,0},{1,0,0,1}},{{0,0,0,0},{1,0,1,0}},{{0,1,0,0},{0,0,1,0}},{{0,1,0,1},{1,0,0,0}},{{0,0,0,1},{0,0,0,0}},{{1,0,0,1},{0,1,0,0}}}
    ,{{{1,0,1,0},{0,1,0,1}},{{0,0,1,0},{0,0,0,1}},{{1,0,0,0},{1,0,0,1}},{{0,0,0,0},{1,0,1,0}},{{0,1,0,0},{0,0,1,0}},{{0,1,0,1},{1,0,0,0}},{{1,0,0,1},{0,0,0,0}},{{0,0,0,1},{0,1,0,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{0,1,0,0},{1,0,0,1}},{{0,0,0,0},{0,0,0,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,0,1},{0,1,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{0,1,0,0},{1,0,0,1}},{{1,0,0,0},{1,0,0,0}},{{0,0,0,0},{0,0,0,0}},{{1,0,0,1},{0,1,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{0,0,1,0},{0,1,0,1}},{{1,0,1,0},{0,0,0,1}},{{0,1,0,0},{1,0,0,1}},{{1,0,0,0},{0,1,0,0}},{{0,0,0,0},{0,0,0,0}},{{1,0,0,1},{1,0,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{1,0,1,0},{0,1,0,1}},{{0,0,1,0},{0,0,0,1}},{{0,1,0,0},{1,0,0,1}},{{0,0,0,0},{0,1,0,0}},{{1,0,0,0},{0,0,0,0}},{{1,0,0,1},{1,0,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{1,0,1,0},{0,1,0,1}},{{0,0,1,0},{0,0,0,1}},{{0,1,0,0},{1,0,0,1}},{{0,0,0,0},{0,1,0,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,0,1},{0,0,0,0}},{{0,0,0,1},{1,0,1,0}},{{0,1,0,1},{0,0,1,0}}}
    ,{{{0,0,0,1},{0,1,0,1}},{{1,0,0,1},{0,0,0,1}},{{0,1,0,1},{1,0,0,1}},{{0,1,0,0},{0,0,1,0}},{{0,0,0,0},{1,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{0,0,1,0},{0,0,0,0}},{{1,0,1,0},{0,1,0,0}}}
    ,{{{1,0,0,1},{0,1,0,1}},{{0,0,0,1},{0,0,0,1}},{{0,1,0,1},{1,0,0,1}},{{0,1,0,0},{0,0,1,0}},{{0,0,0,0},{1,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,1,0},{0,0,0,0}},{{0,0,1,0},{0,1,0,0}}}
    ,{{{1,0,0,1},{0,1,0,1}},{{0,0,0,1},{1,0,0,1}},{{0,1,0,1},{0,0,0,1}},{{0,1,0,0},{1,0,1,0}},{{0,0,0,0},{0,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,1,0},{0,0,0,0}},{{0,0,1,0},{0,1,0,0}}}
    ,{{{0,1,0,1},{0,0,0,1}},{{0,0,0,1},{1,0,0,1}},{{1,0,0,1},{0,1,0,1}},{{0,1,0,0},{1,0,1,0}},{{0,0,0,0},{0,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,1,0},{0,0,0,0}},{{0,0,1,0},{0,1,0,0}}}
    ,{{{0,1,0,1},{1,0,0,1}},{{0,0,0,1},{0,0,0,1}},{{1,0,0,1},{0,1,0,1}},{{0,1,0,0},{0,0,1,0}},{{0,0,0,0},{1,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{1,0,1,0},{0,0,0,0}},{{0,0,1,0},{0,1,0,0}}}
    ,{{{0,1,0,1},{1,0,0,1}},{{1,0,0,1},{0,0,0,1}},{{0,0,0,1},{0,1,0,1}},{{0,1,0,0},{0,0,1,0}},{{0,0,0,0},{1,0,1,0}},{{1,0,0,0},{1,0,0,0}},{{0,0,1,0},{0,0,0,0}},{{1,0,1,0},{0,1,0,0}}}};

visuFIBOSet[codes_] :=
    Module[ {level = Length[First@(First@codes)] },
        Graphics[{{getFIBOGrid[level]}, getFIBO2Dmarks[#,True]& @ codes
            ,Point/@ (FIBOPhiXY /@ codes)
            } 
            ,ImageSize -> level/3 {1024,1024} /4  ]
    ]

consolidateFIBOLen8Patterns[dbgGraphics_:False] :=
    Module[ {},
        res = {};
        Do[
            srccodes = Union @ foundFIBOLen8Patterns[[isrcpattern]];
            permuts = IntegerDigits[#,2,6]& /@ Range[0,63];
            Do[
                codes = srccodes;
                If[ permuts[[i,1]] == 1,
                    pos1 = FirstPosition[First/@codes,{0,0,0,0}][[1]];
                    pos2 = FirstPosition[First/@codes,{0,0,0,1}][[1]];
                    codes[[{pos1,pos2},1]] = codes[[{pos2,pos1},1]]
                ];
                If[ permuts[[i,2]] == 1,
                    pos1 = FirstPosition[First/@codes,{0,1,0,0}][[1]];
                    pos2 = FirstPosition[First/@codes,{0,1,0,1}][[1]];
                    codes[[{pos1,pos2},1]] = codes[[{pos2,pos1},1]]
                ];
                If[ permuts[[i,3]] == 1,
                    pos1 = FirstPosition[First/@codes,{1,0,0,0}][[1]];
                    pos2 = FirstPosition[First/@codes,{1,0,0,1}][[1]];
                    codes[[{pos1,pos2},1]] = codes[[{pos2,pos1},1]]
                ];
                If[ permuts[[i,4]] == 1,
                    pos1 = FirstPosition[Last/@codes,{0,0,0,0}][[1]];
                    pos2 = FirstPosition[Last/@codes,{0,0,0,1}][[1]];
                    codes[[{pos1,pos2},2]] = codes[[{pos2,pos1},2]]
                ];
                If[ permuts[[i,5]] == 1,
                    pos1 = FirstPosition[Last/@codes,{0,1,0,0}][[1]];
                    pos2 = FirstPosition[Last/@codes,{0,1,0,1}][[1]];
                    codes[[{pos1,pos2},2]] = codes[[{pos2,pos1},2]]
                ];
                If[ permuts[[i,6]] == 1,
                    pos1 = FirstPosition[Last/@codes,{1,0,0,0}][[1]];
                    pos2 = FirstPosition[Last/@codes,{1,0,0,1}][[1]];
                    codes[[{pos1,pos2},2]] = codes[[{pos2,pos1},2]]
                ];               
                (*xycodesFIBOSel =  Select[activeCodes, Max[(ListConvolve[{1, 1}, #] & /@ #)] < 2 &];*)
                test = goodFIBOSetQ[codes];
                (*Print[{isrcpattern,i} -> test];*)
                If[ test,
                    AppendTo[res,codes],
                    Print[" not conformal pattern : ",codes]
                ];
                If[ dbgGraphics,
                    Graphics[{{getFIBOGrid[4]}
                            ,PointSize[.05],Point/@ (FIBOPhiXY /@ codes)
                            ,Table[Text[Style[i-1,24],FIBOPhiXY@codes[[i]],{-1,-1}],{i,Length[codes]}]    
                        } ,PlotLabel -> {permuts[[i]],test} ,ImageSize -> {1024,1024}/3  ]//Print
                ];
            ,{i,Length[permuts]}];
            AppendTo[res,srccodes];
        ,{isrcpattern,Length[foundFIBOLen8Patterns]}];
        res = res00 = Union[res];
        visuFIBOSet[First@res00]//Print;
        Print["res00 " -> Length[res00] ]; 

         (* Horizontal rect *)
        selected = Table[
                set = res[[i]];
                codes = Select[set, (#[[2,1]] == 0)&]
            ,{i,Length[res]}];
            (* healing horizontal tiles *)
        allgoodx = Select[getFIBOCodes1d[5], #[[-1]] != 1 &];
        healedSelected = {};
        Do[
            sortedcodes = Sort[selected[[i]]];
            {xcodes,ycodes} = {First /@ sortedcodes, Last /@ sortedcodes};
            healedCodes = {allgoodx, ycodes}//T;
            test = goodFIBOSetQHorizontalOrVerticalRectangles[healedCodes];
            If[ test,
                AppendTo[healedSelected,healedCodes],
                Print[i,"/",Length[selected]," not conformal pattern : "]
            ];
        ,{i,Length[selected]}];
        healed01 = Union[healedSelected];
        visuFIBOSet[First@healed01]//Print;
        Print["healed01 " -> Length[healed01] ]; 
         
        (* Vertical rect *)
        selected = Table[
                set = res[[i]];
                Select[set, (#[[1,1]] == 0)&]
            ,{i,Length[res]}];
        allgoodx = Select[getFIBOCodes1d[5], #[[-1]] != 1 &];
        healedSelected = {};
        Do[
            sortedcodes = Reverse /@ Sort[Reverse /@ selected[[i]]];
            {xcodes,ycodes} = {First /@ sortedcodes, Last /@ sortedcodes};
            healedCodes = {xcodes, allgoodx}//T;
            test = goodFIBOSetQHorizontalOrVerticalRectangles[healedCodes];
            If[ test,
                AppendTo[healedSelected,healedCodes],
                Print[i,"/",Length[selected]," not conformal pattern : "]
            ];
        ,{i,Length[selected]}];
        healed10 = Union[healedSelected];
        visuFIBOSet[First@healedSelected]//Print;
        Print["healed10 " -> Length[healed10] ]; 
         
        (* Small Squares rect *)
        selected = Table[
                set = res[[i]];
                Select[set, (#[[1,1]] == 0) && (#[[2,1]] == 0) &]
            ,{i,Length[res]}];
        allgoodx = Select[getFIBOCodes1d[5], #[[-1]] != 1 &&  #[[1]] == 0 &];
        healedSelected = {};
        newselected = Table[
            sortedcodes = Sort[selected[[i]]];
            {xcodes,ycodes} = {First /@ sortedcodes, Last /@ sortedcodes};
            healedCodes = {allgoodx, ycodes}//T
        ,{i,Length[selected]}];
        Do[
            sortedcodes = Reverse /@ Sort[Reverse /@ newselected[[i]]];
            {xcodes,ycodes} = {First /@ sortedcodes, Last /@ sortedcodes};
            healedCodes = {xcodes, allgoodx}//T;
            test = goodFIBOSetQSmallSquares[healedCodes];
            If[ test,
                AppendTo[healedSelected,healedCodes]
            (*, Print[i,"/",Length[selected]," not conformal pattern : "]*) ];
        ,{i,Length[selected]}];
        healed11 = Union[healedSelected];
        visuFIBOSet[First@healedSelected]//Print;
        Print["healed11 " -> Length[healed11] ];
        consolidated = {{res00,healed10},{healed01,healed11}};
        fname = "data/goodFIBOLen8Patterns_consolidated.dat";
        Print["found: " -> {Length[res],Length[healed01],Length[healed10],Length[healed11]} -> " patterns. Writing into " -> fname];
        Put[consolidated,fname];
    ] (* consolidateFIBOLen8Patterns *)

(*goodPatternsFibo = {{{{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}}},{{{{0,0},{0,0}},{{0,1},{1,0}}},{{{0,0},{1,0}},{{0,1},{0,0}}}}},{{{{{0,0},{0,0}},{{1,0},{0,1}}},{{{0,0},{0,1}},{{1,0},{0,0}}}},{{{{0,0},{0,0}}}}}};
getRandomGoodPatternFibo[ix_:0,iy_:0]:= First @ goodPatternsFibo[[iy+1,ix+1]]

recursiveSubdivDweRuKi2DFibo[level_:1,x0_:0,y0_:0] :=
    Module[ {distribBetweenPatterns,x1,x2,y1,y2,prevlevelPattern,newpattern,i,j,xtile,ytile,xtype,ytype,xlastbit,ylastbit},
        If[level == 1, Return[getRandomGoodPatternsFibo2Di[x0+1,y0+1] ] ];
        distribBetweenPatterns = getRandomGoodPatternFibo[x0,y0];
           Flatten[#,1]& @ Table[
            {{x1,x2},{y1,y2}} = distribBetweenPatterns[[i]];
            prevlevelPattern = recursiveSubdivDweRuKi2DFibo[level-1,x1,y1];
            newpattern = Table[
                xtile = prevlevelPattern[[j,1,1]];
                ytile = prevlevelPattern[[j,2,1]];
                xtype = prevlevelPattern[[j,1,-1]];
                ytype = prevlevelPattern[[j,2,-1]];
                xlastbit = If[xtype == 0 && y1 == 1, 1, 0];
                ylastbit = If[ytype == 0 && x1 == 1, 1, 0];
                (*Print[prevlevelPattern[[j]] -> {xtile,ytile} -> {xtype,ytype} -> {{x1,x2},{y1,y2}} -> {xlastbit,ylastbit} -> {Join[{x1},prevlevelPattern[[j,1]],{xlastbit}], Join[{y1},prevlevelPattern[[j,2]],{ylastbit}]}]*);
                {Join[{x1},prevlevelPattern[[j,1]],{xlastbit}], Join[{y1},prevlevelPattern[[j,2]],{ylastbit}]}
            ,{j,Length[prevlevelPattern]}];
            (*Print[prevlevelPattern[[j]] -> {x1,y1}->{x2,y2}->"distribBetweenPatterns"-> (mf/@newpattern)];*)
            (*Select[newpattern, (mx [[ #[[2,-2]], #[[2,-1]] ]] != 0) &]*)
            newpattern
        ,{i,Length[distribBetweenPatterns]}]
    ] (* recursiveSubdivDweRuKi2DFibo *)
*)

goodPatternsFIBO = {{{{{{0,0},{0,0}},{{0,1},{1,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{0,1}},{{0,1},{1,0}},{{1,0},{0,0}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,0}},{{1,0},{0,1}},{{1,1},{1,1}}},{{{0,0},{1,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,1},{1,1}}}},{{{{0,0},{0,0}},{{0,1},{1,0}}},{{{0,0},{1,0}},{{0,1},{0,0}}}}},{{{{{0,0},{0,0}},{{1,0},{0,1}}},{{{0,0},{0,1}},{{1,0},{0,0}}}},{{{{0,0},{0,0}}}}}};
getRandomGoodPatternFIBO[ix_:0,iy_:0] :=
    First @ goodPatternsFIBO[[iy+1,ix+1]]

FIBOrecursiveSubdiv[level_:1,x0_:0,y0_:0] :=
    Module[ {distribBetweenPatterns,x1,x2,y1,y2,prevlevelPattern,newpattern,i,j,xtile,ytile,xtype,ytype,xLastDigit,yLastDigit},
        If[ level == 1,
            Return[getRandomGoodPatternsFIBO2Di[x0+1,y0+1] ]
        ];
        distribBetweenPatterns = getRandomGoodPatternFIBO[x0,y0];
        Flatten[#,1]& @ Table[
         {{x1,x2},{y1,y2}} = distribBetweenPatterns[[i]];
         prevlevelPattern = FIBOrecursiveSubdiv[level-1,x1,y1];
         newpattern = Table[
             xtile = prevlevelPattern[[j,1,1]];
             ytile = prevlevelPattern[[j,2,1]];
             xtype = prevlevelPattern[[j,1,-1]];
             ytype = prevlevelPattern[[j,2,-1]];
             xLastDigit = If[ xtype == 0 && y1 == 1,
                              1,
                              0
                          ];
             yLastDigit = If[ ytype == 0 && x1 == 1,
                              1,
                              0
                          ];
                (*Print[prevlevelPattern[[j]] -> {xtile,ytile} -> {xtype,ytype} -> {{x1,x2},{y1,y2}} -> {xLastDigit,yLastDigit} -> {Join[{x1},prevlevelPattern[[j,1]],{xLastDigit}], Join[{y1},prevlevelPattern[[j,2]],{yLastDigit}]}]*);
             {Join[{x1},prevlevelPattern[[j,1]],{xLastDigit}], Join[{y1},prevlevelPattern[[j,2]],{yLastDigit}]}
         ,{j,Length[prevlevelPattern]}];
            (*Print[prevlevelPattern[[j]] -> {x1,y1}->{x2,y2}->"distribBetweenPatterns"-> (mf/@newpattern)];*)
            (*Select[newpattern, (mx [[ #[[2,-2]], #[[2,-1]] ]] != 0) &]*)
         newpattern
        ,{i,Length[distribBetweenPatterns]}]
    ] (* FIBOrecursiveSubdiv *)

getRandomGoodPatternsFIBO2Di[ix_:1,iy_:1] :=
    myRandomChoice @ goodPatternsFIBO2D[[iy,ix]]

myRandomChoice :=
    RandomChoice;

FIBOpoc2DRecursive[innlevels_:2, showGraphics_:False, generateDiscrepancy_:False, generateFourier_:False ] :=
    Module[ {},
        dbg = False;
        mxsz = 2;
        base = mxsz;
        baselog = Log[2,base];
        nlevels = innlevels;
        basename = "goodFIBOLen8Patterns";
        fouriertabsz = 1024;
        fsum = Table[0,{fouriertabsz},{fouriertabsz}];
        discrepancyTabFIBO = Table[0,{nlevels}];
        If[ !known[goodPatternsFIBO2D],
            fname = "data/"<>basename<>"_consolidated.dat";
            goodPatternsFIBO2D = Get[fname];
            Print[fname," : read " -> {goodPatternsFIBO2D[[1, 1]] // Length,goodPatternsFIBO2D[[1, 2]] // Length,goodPatternsFIBO2D[[2, 1]] // Length,goodPatternsFIBO2D[[2, 2]] // Length} ]
        ];
        codes = getRandomGoodPatternsFIBO2Di[];
        Do[
           If[ generateDiscrepancy,
               ptsXY = FIBOPhiXY /@ codes;
               discrepancy = getDiscrepancy2Dexact[ptsXY];
               discrepancyTabFIBO[[ilevel]] = { Length[codes], discrepancy};
               Print[ilevel -> Length[codes]  -> Length[codes]  -> DweRuKinacci[2 ilevel + 2] -> discrepancy];
               Print[discrepancyTabFIBO];
           ];
           If[ showGraphics,
               ptsXY = FIBOPhiXY /@ codes;
               g = Graphics[{{Opacity[.25], getFIBOGrid[2 ilevel +2]} 
                       ,PointSize[.01],Point/@ ptsXY
                       (*,Table[Text[Style[DweRuKigetIntValueInv@ codes[[i,2]],18],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]*)
                       ,Table[Text[Style[Mod[i,100],18],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]
                   } 
                   ,PlotLabel -> goodFIBOSetQ[codes]
                   ,ImageSize -> ilevel/3 {1200,1200}   ];
               g//Print;
                (*Print[Length[First/@codes] -> (Length@Union[First/@codes])];
                Print[Length[Last/@codes] -> (Length@Union[Last/@codes])];*)
               Graphics[{Point/@ptsXY},PlotRange->{{0,1},{0,1}},Frame->True,FrameTicks->None]//Print;
           ];
           If[ ilevel != nlevels,
               codes = FIBOrecursiveSubdiv[ilevel+1];
           ];
        ,{ilevel,1,nlevels}];
        If[ generateDiscrepancy,
            discrepancyTabSobol = { (* Sobol 2D Kuo's implementation http://web.maths.unsw.edu.au/~fkuo/sobol/ *)
                    {16, 0.171875},(*pSobol2Dlog1 = discrepancyComplexity[data, (Log[#])/# &, "Discrepancy Sobol 2D N/LogN"]; pSobol2Dlog1 //Print;*)
                     {64, 0.0537109}, 
                     {256, 0.0145874}, 
                     {1024, 0.00429916}, 
                     {4096, 0.00132918}, 
                     {16384, 0.000372991}, 
                     {65536, 0.0000994867},
                     {262144, 0.000027597358}
                 };
            discrepancyTabFIBOm21 = {{3,0.618034},{5,0.418034},{8,0.27051},{13,0.193678},{21,0.130694},{34,0.0866825},{55,0.0554336},{89,0.0372093},{144,0.0244132},{233,0.0161211},
                {377,0.010242},{610,0.00673888},{987,0.00436806},{1597,0.00285382},{2584,0.00180478},{4181,0.0011745},{6765,0.000755457},{10946,0.000489471},{17711,0.000308601},{28657,0.000199274}};
            discrepancyTabFIBOLen8 = {{8,0.27051},{21,0.120557},{55,0.0501118},{144,0.0230114},{377,0.00982341},{987,0.00427672},{2584,0.00180458},{6765,0.000750238},{17711,0.000306409},{46368,0.000126695}
                ,{121393, 0.0000516168}};
            ListPlot[{Log[2,#]& /@ discrepancyTabFIBO, Log[2,#]& /@ discrepancyTabSobol}, Joined->True
                ,Ticks->{Table[{i,i},{i,20}],Automatic}
                ,PlotLabel->"log-log discrepancy"]//Print;
        ];
        If[ generateFourier,
            ptsXY = FIBOPhiXY /@ codes;
            fsum += getFourier2D[Ceiling[(fouriertabsz ptsXY)],fouriertabsz];
            fsum[[1,1]] = 0;
            fsum = Reorg[fsum];
            ListDensityPlot[fsum, ImageSize -> {1024,1024}]//Print;
        ];
        codes
    ] (*FIBOpoc2DRecursive *)

mkGoodFIBOLen8pointsets[nlevels_:14] :=
    Module[ {},
        Do[
            codes = FIBOpoc2DRecursive[ilevel];
            ptsXY = FIBOPhiXY /@ codes;
            fname = "data/FIBOLen8pointsets/pts_"<>ToString[ Length[ptsXY] ]<>".dat";
            Print[ilevel -> fname];
            Export[fname,ptsXY];
        ,{ilevel,nlevels}];
    ] (* mkGoodFIBOLen8pointsets *)


(*

 *)
 
 (*

MU4goodSetQ[codes_] := 
    Module[ {level,testTuples,dx,dy,xodes,ycodes},
        level = Length[First@(First@codes)];
        testTuples = {Range[0, level], level - Range[0, level]} // T;
        And @@ Table[
            {dx,dy} = testTuples[[i]];
            MU4basicSeq[[level + 4]] == (Length @ (Union @ (MU4FXY /@ Table[
                {xodes,ycodes} = codes[[i]];
                {Take[xodes,dx],Take[ycodes,dy]}
            ,{i,Length[codes]}]))) 
        ,{i,Length[testTuples]}]
    ] (* goodFIBOSetQ *)
goodFIBOSetQ[codes_] := (* old version *)
    Module[ {level,testTuples,dx,dy,xodes,ycodes},
        level = Length[First@(First@codes)];
        testTuples = {Range[0, level], level - Range[0, level]} // T;
        And @@ Table[
            {dx,dy} = testTuples[[i]];
            Length[Union[({xodes,ycodes} = #; {Take[xodes,dx],Take[ycodes,dy]} & /@ #) & /@ codes]] == Fibonacci[level + 2]
        ,{i,Length[testTuples]}]
    ] (* goodFIBOSetQ *)

goodFIBOSetQHorizontalOrVerticalRectangles[codes_] := (* old version *)
    Module[ {level,testTuples,dx,dy,xodes,ycodes},
        level = Length[First@(First@codes)];
        testTuples = {Range[0, level], level - Range[0, level]} // T;
        And @@ Table[
            {dx,dy} = testTuples[[i]];
            Length[Union[({xodes,ycodes} = #; {Take[xodes,dx],Take[ycodes,dy]} & /@ #) & /@ codes]] == Fibonacci[level + 1]
        ,{i,Length[testTuples]}]
    ] (* goodFIBOSetQ10 *)

goodFIBOSetQSmallSquares[codes_] := (* old version *)
    Module[ {level,testTuples,dx,dy,xodes,ycodes},
        level = Length[First@(First@codes)];
        testTuples = {Range[0, level], level - Range[0, level]} // T;
        And @@ Table[
            {dx,dy} = testTuples[[i]];
            Length[Union[({xodes,ycodes} = #; {Take[xodes,dx],Take[ycodes,dy]} & /@ #) & /@ codes]] == Fibonacci[level]
        ,{i,Length[testTuples]}]
    ] (* goodFIBOSetQ10 *)
*)
(*
(* ---------- prep Mu4 tiles with trees needs double-checking--------------*)
MU4showAllPermutTrees[inlevel_:4, initfrom_:1]:= (* level5 : no solution! *)
    Module[ {},
        {col1,col2,col3} = {Yellow,Red,Cyan(*Lighter@(Lighter@LightGray)*)};
        level = inlevel;
        
        found = {};
            permuttab = Tuples[ Table[Tuples[{0, 1}, MU4basicSeq[[i+1]]], {i,level}] ];
            Print["MU4showAllPermutTrees level=",level -> Length[permuttab]];
            codetab = Table[
                permuts = permuttab[[ipermut]];
                If[Mod[ipermut,1000] == 0, Print[{ipermut,permuttab//Length}(* -> mf[permuts]*) ] ];
                nodes = {{0}};
                Do[
                    zeroind = 1;
                    newnodes = Table[
                        node = nodes[[in]];
                        If[Last[node] == 0, permut = permuts[[il,zeroind]]; zeroind++];
                        MU4subdiv1dWithPermut[node,permut]
                    ,{in,Length[nodes]}];
                    nodes =  Flatten[#,1]& @ newnodes;
                ,{il,level}];
                 codes = (Reverse/@(Drop[#, 1] & /@ nodes));
                 order = MU4F /@ (MU4binCode2symbols@codes);
                 poslst = order2permut0toNminus1 @ order;
                 codes
            ,{ipermut, Length[permuttab] }];

        Print["MU4showAllPermutTrees level=",level -> Length[permuttab] -> "done."];

        {tox,toy} = {1,32};
        {fromx,fromy} = {1,32};
        Do[
            Print[ix,"/",to];
            Do[
                    If[Mod[iy,100000] == 0, Print[{ix,iy}] ];
                    codes = (*Sort @*) T[{codetab[[ix]],codetab[[iy]]}];
                     {MU4getTreePermuts[permuttab[[ix]]],MU4getTreePermuts[permuttab[[iy]]]}//Print;
            ,{iy,fromy,toy,1}]
        ,{ix, fromx,tox,1}];
    ] (* MU4showAllPermutTrees *)


MU4getTreePermuts[permuts_] :=
    Module[ {egdeLabels,svlst,sedges,level=Length[permuts],col0,col1,col2,col3,nodes,edges,zeroind,newnodes,node,permut,nodesaftersubdiv},
        {col0,col1,col2,col3} = {Yellow,Red,Cyan,Black};
        nodes = {{0}};
        edges = sedges = svlst = egdeLabels = {};
        Do[
            zeroind = 1;
            newnodes = Table[
                node = nodes[[in]];
                If[ Last[node] == 0,
                    permut = permuts[[il,zeroind]];
                    zeroind++
                ];
                nodesaftersubdiv = MU4subdiv1dWithPermut[node,permut];
                    (*AppendTo[vlst,node];*)
                AppendTo[edges,{node,#}]& /@ nodesaftersubdiv;
                AppendTo[egdeLabels, Switch[ Last[node], 0, digits2str[node] -> col0, 1, digits2str[node] -> col1, 2, digits2str[node] -> col2, 3, digits2str[node] -> col3 ] ];
                nodesaftersubdiv
            ,{in,Length[nodes]}];
            nodes =  Flatten[#,1]& @ newnodes;
        ,{il,level}];

        egdeLabels = Join[egdeLabels,(digits2str[#] -> Switch[ Last[#] ,0,col0,1,col1,2,col2,3,col3 ]) & /@ nodes ];
        svlst = digits2str /@ ( Last /@ edges );
        sedges = Flatten @ ({digits2str[First[#]] \[DirectedEdge] digits2str[Last[#]]}& /@ (edges) );
        TreeGraph[svlst,sedges
            , GraphLayout -> {"LayeredEmbedding"}
            , VertexStyle -> egdeLabels
            , VertexSize -> 0.3
             , VertexLabels ->  Table[svlst[[i]] -> Placed[
                         Switch[StringLength[svlst[[i]]] 
                             ,0, ""
                             ,level+1,Style[Rotate[(StringTake[#,-(level)]& @ svlst[[i]]) <>" = "<> ToString[MU4str2n[svlst[[i]]]] ,-Pi/2]]
                             ,_, (StringTake[#,-1]& @svlst[[i]]) ]
                     , Below], {i,Length[svlst]}]
            , PlotLabel-> ToString[(*"permuts" -> *)permuts]
            , PlotRangePadding -> {{0,0},{1,0}}
            , ImageSize->{1.61^level 32, Automatic} ]
    ] (* MU4getTreePermuts *)
*)

(*MU4recursiveSubdiv[level_:1,x0_:a,y0_:a] :=
    Module[ {distribBetweenPatterns,x1,y1,prevlevelPattern,newpattern,i,j,xprevFirstDigit,yprevFirstDigit,xprevLastDigit,yprevLastDigit,xLastDigit,yLastDigit,xprev,yprev,res,xDistribMasks},
        If[level == 1, Return[{{{},{}}}] ];
        distribBetweenPatterns  = getRandomGoodPatternFibo[x0,y0];
           Flatten[#,1]& @ Table[
            {{x1,x2,x3},{y1,y2,y3}} = distribBetweenPatterns[[i]];
            prevlevelPattern = MU4recursiveSubdiv[level-1,x1,y1];
            newpattern = Table[
                {xprev,yprev} = prevlevelPattern[[j]];
                {xprevFirstDigit,xprevLastDigit} = {xprev[[1]],xprev[[-1]]} ;
                {yprevFirstDigit,yprevLastDigit} = {yprev[[1]],yprev[[-1]]} ;
                
                 xlastbit = If[xtype == 0 && y1 == 1, 1, 0];
                ylastbit = If[ytype == 0 && x1 == 1, 1, 0];
   
                   xLastDigit = Switch[xprevLastDigit
                       ,a, Switch[{y1,y2,y3}
                           {}
                           ]
                       ,b,
                       ,c,
                       ,d,
                     ,_, Print["pb."];
                ];
               yLastDigit = Switch[yprevLastDigit
                       ,a,
                       ,b,
                       ,c,
                       ,d,
                    ,_, Print["pb."];
                ];
                res = {Join[{x1},xprev,{xLastDigit}], Join[{y1},yprev,{yLastDigit}]};
                res
            ,{j,Length[prevlevelPattern]}];
            newpattern
        ,{i,Length[distribBetweenPatterns]}]
    ] (* MU4recursiveSubdiv *)
*)

(*recursiveSubdivDweRuKi2DFibo[level_:1,x0_:0,y0_:0] :=
    Module[ {distribBetweenPatterns,x1,x2,y1,y2,prevlevelPattern,newpattern,i,j,xtile,ytile,xtype,ytype,xlastbit,ylastbit},
        If[level == 1, Return[getRandomGoodPatternsFibo2Di[x0+1,y0+1] ] ];
        distribBetweenPatterns = getRandomGoodPatternFibo[x0,y0];
           Flatten[#,1]& @ Table[
            {{x1,x2},{y1,y2}} = distribBetweenPatterns[[i]];
            prevlevelPattern = recursiveSubdivDweRuKi2DFibo[level-1,x1,y1];
            newpattern = Table[
                xtile = prevlevelPattern[[j,1,1]];
                ytile = prevlevelPattern[[j,2,1]];
                xtype = prevlevelPattern[[j,1,-1]];
                ytype = prevlevelPattern[[j,2,-1]];
                xlastbit = If[xtype == 0 && y1 == 1, 1, 0];
                ylastbit = If[ytype == 0 && x1 == 1, 1, 0];
                {Join[{x1},prevlevelPattern[[j,1]],{xlastbit}], Join[{y1},prevlevelPattern[[j,2]],{ylastbit}]}
            ,{j,Length[prevlevelPattern]}];
            newpattern
        ,{i,Length[distribBetweenPatterns]}]
    ] (* recursiveSubdivDweRuKi2DFibo *)

(*If[level == targetlevel, 
            ac = {xprev,yprev};
            ptsXY = MU4PhiXY /@ ac;
                g = Graphics[{{Opacity[.25], MU4getGrid[2 ]} 
                        ,PointSize[.01],Point/@ ptsXY
                        ,Table[Text[Style[Mod[i,100],18],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]
                    } 
                    ,ImageSize -> 1/6 {1200,1200}   ];
                g//Print;
                        
    Print[{x0,y0} -> ac -> xprevLastDigit -> xind -> MU4binCode2symbols @ ( BitXor @@ {MU4symbols2binCode@y1, xDistribMasks[[xind]] } )] 
];
                        MU4binCode2symbols @ ( BitXor @@ {MU4symbols2binCode@y1, xDistribMasks[[xind]] } )
(*Print[level->(mf/@prevlevelPattern) -> (mf/@{xres,yres}) -> (mf/@(MU4symbols2binCode@{xres,yres})) -> xind -> xDistribMasks[[xind]] -> xLastDigit -> "<<<<<<<<<<<<<<<<<<<<<<"];*)
(*Print[level->(mf/@prevlevelPattern) -> (mf/@{xres,yres}) -> (mf/@res) -> (mf/@(MU4symbols2binCode@res))  -> xLastDigit];*)
*)
MU4recursiveSubdiv[level_:1,x0_:a,y0_:a] :=
    Module[ {distribBetweenPatterns,x1,y1,prevlevelPattern,newpattern,i,j,xprevFirstDigit,yprevFirstDigit,xprevLastDigit,
            yprevLastDigit,xLastDigit,yLastDigit,xprev,yprev,res,xDistribMasks,yDistribMasks,xsubdivTileCodes,ysubdivTileCodes,xind,xres,yres,last3,yind},
        (*If[level == 1, Return[ MU4getRandomGoodPattern[x0,y0] ] ];*)
        If[level == 1, Return[{{{},{}}}] ];
        xDistribMasks = Table[RandomChoice[{0,0}],{MU4basicSeq[[3 level+1]]}] ;
        yDistribMasks = Table[RandomChoice[{0,0}],{MU4basicSeq[[3 level+1]]}] ;
        {xsubdivTileCodes,ysubdivTileCodes} = {MU4getCodes1d[1,x0], MU4getCodes1d[1,y0]};
        distribBetweenPatterns  = Tuples@{xsubdivTileCodes,ysubdivTileCodes};
        (*xDistribMasks = Table[RandomChoice[{0,0}],{MU4basicSeq[[2 level+1]]}] ;*)
           Flatten[#,1]& @ Table[
            {{x1},{y1}} = distribBetweenPatterns[[i]];
            prevlevelPattern = MU4recursiveSubdiv[level-1,x1,y1];
            
            newpattern = Table[
                {xprev,yprev} = prevlevelPattern[[j]];
                {xprevFirstDigit,xprevLastDigit} = If[xprev === {}, {1,1}, {xprev[[1]],xprev[[-1]]} ];
                {yprevFirstDigit,yprevLastDigit} = If[yprev === {}, {1,1}, {yprev[[1]],yprev[[-1]]} ];
                {xLastDigit,yLastDigit} = {y1,x1};
                {xres,yres} = {Join[{x1},xprev ], Join[{y1},yprev ]};
                If[level == targetlevel && level > 2,
                    last3 = Take[xres,-3];
                    If[(MU4symbols2binCode@last3) === {0,0,0} ,
                        xind = 1 + (MU4F @ (Drop[#,-1]& @ xres) );
                        xLastDigit = MU4binCode2symbols @ ( BitXor @@ {MU4symbols2binCode@y1, xDistribMasks[[xind]] } );
(*Print[level-> y1 -> xDistribMasks[[xind]] -> xLastDigit -> "<<<<<<<<<<<<<<<<<<<<<<xxxxxxx"]*);
                    ];
                    last3 = Take[yres,-3];
                    If[(MU4symbols2binCode@last3) === {0,0,0} ,
                        yind = 1 + (MU4F @ (Drop[#,-1]& @ yres) );
                        yLastDigit = MU4binCode2symbols @ ( BitXor @@ {MU4symbols2binCode@x1, yDistribMasks[[yind]] } );
(*Print[level-> x1 -> yDistribMasks[[yind]] -> yLastDigit -> "<<<<<<<<<<<<<<<<<<<<<<yyyyyyy"]*);
                    ];
                ];
                res = {Join[{x1},xprev,{xLastDigit}], Join[{y1},yprev,{yLastDigit}]};
(*Print[level->  {x0,y0} ->{{x1},{y1}}->(mf/@prevlevelPattern) -> (mf/@{xres,yres}) -> (mf/@res) -> (mf/@(MU4symbols2binCode@res))  -> xLastDigit]*);
                res
            ,{j,Length[prevlevelPattern]}];
            newpattern
        ,{i,Length[distribBetweenPatterns]}]
    ] (* MU4recursiveSubdiv *)
*)



(*MU4recursiveSubdiv[level_:1,x0_:a,y0_:a] :=
    Module[ {distribBetweenPatterns,x1,y1,prevlevelPattern,newpattern,i,j,xprevFirstDigit,yprevFirstDigit,xprevLastDigit,
            yprevLastDigit,xLastDigit,yLastDigit,xprev,yprev,res,xsubdivTileCodes,ysubdivTileCodes},
        If[level == 1, Return@MU4getRandomGoodPattern[] ];
        {xsubdivTileCodes,ysubdivTileCodes} = {MU4getCodes1d[1,x0], MU4getCodes1d[1,y0]};
        distribBetweenPatterns  = Tuples@{xsubdivTileCodes,ysubdivTileCodes};
        (*xDistribMasks = Table[RandomChoice[{0,0}],{MU4basicSeq[[2 level+1]]}] ;*)

        subdivTiles = Tuples@{MU4getCodes1d[1,x0], MU4getCodes1d[1,y0]};
           Flatten[#,1]& @ Table[
            {{x1},{y1}} = distribBetweenPatterns[[i]];
            prevlevelPattern = MU4recursiveSubdiv[level-1,x1,y1];
            newpattern = Table[
                {xprev,yprev} = prevlevelPattern[[j]];
                {xprevFirstDigit,xprevLastDigit} = If[xprev === {}, {1,1}, {xprev[[1]],xprev[[-1]]} ];
                {yprevFirstDigit,yprevLastDigit} = If[yprev === {}, {1,1}, {yprev[[1]],yprev[[-1]]} ];
                {xLastDigit,yLastDigit} = {0,0}; (*{y1,x1};*)
                res = {Join[{x1},xprev,{xLastDigit}], Join[{y1},yprev,{yLastDigit}]};
                res
            ,{j,Length[prevlevelPattern]}];
            newpattern
        ,{i,Length[subdivTiles]}]
    ] (* MU4recursiveSubdiv *)
*)
(*MU4recursiveSubdiv[level_:1,x0_:a,y0_:a] :=
    Module[ {},
        If[level == 1, Return@MU4getRandomGoodPattern[] ];
        subdivTiles = Tuples@{MU4getCodes1d[3,x0], MU4getCodes1d[3,y0]};
           Flatten[#,1]& @ Table[
               {xSubtilePrefix,ySubtilePrefix} = subdivTiles[[isubtile]];
               prevlevelPattern = MU4getRandomGoodPattern[Last@xSubtilePrefix,Last@ySubtilePrefix];
            newpattern = Table[
                {xprev,yprev} = prevlevelPattern[[j]];
                {xSubtilePostfix,ySubtilePostfix} = {getStdPostfix[Take[#,-3]&@xprev,ySubtilePrefix],{a,a,a}};
                Print[{xSubtilePrefix,ySubtilePrefix} -> xprev -> xSubtilePostfix];
                 {Join[xSubtilePrefix,xprev,xSubtilePostfix], Join[ySubtilePrefix,yprev,ySubtilePostfix]}
            ,{j,Length[prevlevelPattern]}];
            newpattern
        ,{isubtile,Length[subdivTiles]}]
    ] (* MU4recursiveSubdiv *)
*)
    

(*
prepGoodPatterns4MU4pocRecursive[inxtype_:a,inytype_:a,inshowGraphics_:False] :=
    Module[ {},
        {xtype,ytype} = {inxtype,inytype};
        nlevels = 3;
        myRandomChoice :=
            RandomChoice;
        showGraphics = inshowGraphics;
        distlimit = Switch[{xtype,ytype},{a,a},.05,{a,b},.05,{b,a},.05,{a,c},.04,{c,a},.07,{a,d},.07,{d,a},.07
            ,{b,b},.0, {b,c},.04,{c,b},.04, {b,d},.04,{d,b},.04
            ,{c,c},.04,{c,d},.05,{d,c},.05,{d,d},.05
        ];
        distlimit = .03;
        (* HORIZONTAL PERMUTS *)
        Switch[{xtype,ytype}
            ,{a,a},
                xtuples = Tuples[{
                    {{1,2,3,4},{2,1,3,4},{1,2,4,3},{2,1,4,3},{3,4,1,2},{3,4,2,1},{4,3,1,2},{4,3,2,1}},                
                    {{1}},
                    {{1,2},{2,1}},
                    {{1,2,3},{2,1,3}}
                }];
            ,{a,b},
                xtuples = Tuples[{
                    {{1,2,3,4},{2,1,3,4},{1,2,4,3},{2,1,4,3},{3,4,1,2},{3,4,2,1},{4,3,1,2},{4,3,2,1}},
                    {{1}},
                    {{1,2},{2,1}},
                    {{1,2,3},{1,3,2}}
                }];
            ,{a,c},
                xtuples = Tuples[{
                    (*{{1,3,2,4},{1,3,4,2},{1,4,2,3},{1,4,3,2},{2,4,1,3},{4,2,1,3},{2,3,1,4},{3,2,1,4}},*)
                    {{1,2,3,4},{2,1,3,4},{1,2,4,3},{2,1,4,3},{3,4,1,2},{3,4,2,1},{4,3,1,2},{4,3,2,1}},
                    {{1}}
                }];
            ,{a,d},
                xtuples = Tuples[{
                    {{1,2,3,4},{2,1,3,4},{1,2,4,3},{2,1,4,3},{3,4,1,2},{3,4,2,1},{4,3,1,2},{4,3,2,1}},
                    {{1}},
                    {{1,2},{2,1}},
                    {{1,2,3},{2,1,3}}
                }];

            ,{b,a},
                xtuples = Tuples[{
                    {{1,2,3,4},{2,1,3,4},{1,2,4,3},{2,1,4,3},{3,4,1,2},{3,4,2,1},{4,3,1,2},{4,3,2,1}},
                    {{1}},
                    {{1,2},{2,1}},
                    {{1,2,3},{1,3,2}}
                }];
                
            ,{c,a},
                xtuples = Tuples[{
                    {{1,2,3,4},{2,1,3,4},{1,2,4,3},{2,1,4,3},{3,4,1,2},{3,4,2,1},{4,3,1,2},{4,3,2,1}},
                    {{1}},
                    {{1,2},{2,1}},
                    {{1,2,3},{2,1,3}}
                }];
            ,{d,a},
                xtuples = Tuples[{
                    {{1,2,3,4},{2,1,3,4},{1,2,4,3},{2,1,4,3},{3,4,1,2},{3,4,2,1},{4,3,1,2},{4,3,2,1}},
                    {{1}},
                    {{1,2},{2,1}}
                }];

            ,{b,b},
                xtuples = Tuples[{
                    {{1}}
                }];
            ,{b,c},
                xtuples = Tuples[{
                    {{1,2},{2,1}}
                }];
            ,{c,b},
                xtuples = Tuples[{
                    {{1,2},{2,1}}
                }];
            ,{b,d},
                xtuples = Tuples[{
                    {{1,2,3}}
                }];
            ,{d,b},
                xtuples = Tuples[{
                    {{1,2,3},{2,1,3}}
                }];
            ,{c,c},
                xtuples = Tuples[{
                    {{1,2,3},{2,1,3}}
                }];
            ,{c,d},
                xtuples = Tuples[{
                    {{1,2,3,4},{2,1,3,4},{1,2,4,3},{2,1,4,3},{3,4,1,2},{3,4,2,1},{4,3,1,2},{4,3,2,1}}
                }];
            ,{d,c},
                xtuples = Tuples[{
                    {{1,2,3,4},{2,1,3,4},{1,2,4,3},{2,1,4,3},{3,4,1,2},{3,4,2,1},{4,3,1,2},{4,3,2,1}}
                }];
            ,{d,d},
                xtuples = Tuples[{
                    {{1,2,3},{2,1,3}},
                    {{1,2},{2,1}}
                }];
        ];
        (* VERTICAL PERMUTS *)
        Switch[{xtype,ytype}
            ,{a,a},
                ytuples = Tuples[{
                    {{1,2,3,4},{2,1,3,4},{1,2,4,3},{2,1,4,3},{3,4,1,2},{3,4,2,1},{4,3,1,2},{4,3,2,1}},
                    {{1}},
                    {{1,2},{2,1}},
                    {{1,2,3},{2,1,3}}
                }];
            ,{a,b},
                ytuples = Tuples[{
                    {{1,2,3,4},{2,1,3,4},{1,2,4,3},{2,1,4,3},{3,4,1,2},{3,4,2,1},{4,3,1,2},{4,3,2,1}},
                    {{1}},
                    {{1,2},{2,1}},
                    {{1,2,3},{2,1,3}}
                }];
            ,{a,c},
                ytuples = Tuples[{
                    {{1,2,3,4},{2,1,3,4},{1,2,4,3},{2,1,4,3},{3,4,1,2},{3,4,2,1},{4,3,1,2},{4,3,2,1}},
                    {{1}}
                }];
            ,{a,d},
                ytuples = Tuples[{
                    {{1,2,3,4},{2,1,3,4},{1,2,4,3},{2,1,4,3},{3,4,1,2},{3,4,2,1},{4,3,1,2},{4,3,2,1}},
                    {{1}},
                    {{1,2},{2,1}},
                    {{1,2,3},{2,1,3}}
                }];
            ,{b,a},
                ytuples = Tuples[{
                    {{1,2,3,4},{2,1,3,4},{1,2,4,3},{2,1,4,3},{3,4,1,2},{3,4,2,1},{4,3,1,2},{4,3,2,1}},
                    {{1}},
                    {{1,2},{2,1}},
                    {{1,2,3},{2,1,3}}
                }];
            ,{c,a},
                ytuples = Tuples[{
                    {{1,2,3,4},{2,1,3,4},{1,2,4,3},{2,1,4,3},{3,4,1,2},{3,4,2,1},{4,3,1,2},{4,3,2,1}},
                    {{1}},
                    {{1,2},{2,1}},
                    {{1,2,3},{2,1,3}}
                }];
            ,{d,a},
                ytuples = Tuples[{
                    {{1,2,3,4},{2,1,3,4},{1,2,4,3},{2,1,4,3},{3,4,1,2},{3,4,2,1},{4,3,1,2},{4,3,2,1}},
                    {{1}} ,
                    {{1,2},{2,1}}
                }];
            ,{b,b},
                ytuples = Tuples[{
                    {{1}}
                }];
            ,{b,c},
                ytuples = Tuples[{
                    {{1,2},{2,1}}
                }];
            ,{c,b},
                ytuples = Tuples[{
                    {{1,2},{2,1}}
                }];
            ,{b,d},
                ytuples = Tuples[{
                    {{1,2,3},{2,1,3}}
                }];
            ,{d,b},
                ytuples = Tuples[{
                    {{1,2,3}}
                }];
            ,{c,c},
                ytuples = Tuples[{
                    {{1,2,3},{2,1,3}}
                }];
            ,{c,d},
                ytuples = Tuples[{
                    {{1,2,3,4},{2,1,3,4},{1,2,4,3},{2,1,4,3},{3,4,1,2},{3,4,2,1},{4,3,1,2},{4,3,2,1}}
                }];
            ,{d,c},
                ytuples = Tuples[{
                    {{1,2,3,4},{2,1,3,4},{1,2,4,3},{2,1,4,3},{3,4,1,2},{3,4,2,1},{4,3,1,2},{4,3,2,1}}
                }];
            ,{d,d},
                ytuples = Tuples[{
                    {{1,2,3},{2,1,3}},
                    {{1,2},{2,1}}
                }];
        ];
        permutTuples = Tuples[{xtuples,ytuples}];
        codes = MU4getActiveCodes @ MU4recursiveSubdivSIMPLEST[nlevels,xtype,ytype];
        ptsXY = MU4PhiXY /@ codes;
        Graphics[{{Opacity[.25], MU4getGrid[6,xtype,ytype]} 
                                ,PointSize[.05],Point/@ ptsXY
                                ,Table[Text[Style[Mod[i,100],36],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]
                            } 
                            ,PlotLabel->{"SRC",{xtype,ytype}}
                            ,ImageSize -> 1/3 {1200,1200}   ]//Print;


        (*codes = Sort[codes,  MU4F[#1[[1]]] < MU4F[#2[[1]]] &]; (* SORTED according to X *) 
        ptsXY = MU4PhiXY /@ codes;
        Graphics[{{Opacity[.25], MU4getGrid[6,xtype,ytype]} 
                                ,PointSize[.05],Point/@ ptsXY
                                ,Table[Text[Style[Mod[i,100],36],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]
                            } 
                            ,PlotLabel->{"SORTED according to X",{xtype,ytype}}
                            ,ImageSize -> 1/3 {1200,1200}   ]//Print;

        codes = Sort[codes,  MU4F[#1[[2]]] < MU4F[#2[[2]]] &]; (* SORTED according to X *) 
        ptsXY = MU4PhiXY /@ codes;
        Graphics[{{Opacity[.25], MU4getGrid[6,xtype,ytype]} 
                                ,PointSize[.05],Point/@ ptsXY
                                ,Table[Text[Style[Mod[i,100],36],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]
                            } 
                            ,PlotLabel->{"SORTED according to Y",{xtype,ytype}}
                            ,ImageSize -> 1/3 {1200,1200}   ]//Print;*)
        rescodes = {};
        count = 1;
        tab = Table[
            {xpermuts,ypermuts} = permutTuples[[ipermut]];
            
            
            (************ permuting x *********)
            codes = Sort[codes,  MU4F[#1[[2]]] < MU4F[#2[[2]]] &]; (* <<<<<<<<<<<<<<<<<<<<<< SORTED according to X *) 

            (*codes = Sort[codes]*); (* SORTED according to X *)
            {xcodes,ycodes} = codes//T;
            subcodes = Switch[{xtype,ytype}
                ,{a,a},
                    Flatten[#,1]& @ {xcodes[[1;;4]][[xpermuts[[1]]]],xcodes[[5;;5]][[xpermuts[[2]]]],xcodes[[6;;7]][[xpermuts[[3]]]],xcodes[[8;;10]][[xpermuts[[4]]]] }
                ,{a,b},
                    Flatten[#,1]& @ {xcodes[[1;;4]][[xpermuts[[1]]]] }
                ,{b,a},
                    Flatten[#,1]& @ {xcodes[[1;;4]][[xpermuts[[1]]]] }
                ,{a,c},
                    Flatten[#,1]& @ {xcodes[[1;;4]][[xpermuts[[1]]]],xcodes[[5;;5]][[xpermuts[[2]]]] }
                ,{c,a},
                    Flatten[#,1]& @ {xcodes[[1;;4]][[xpermuts[[1]]]],xcodes[[5;;5]][[xpermuts[[2]]]] }
                ,{a,d},
                    Flatten[#,1]& @ {xcodes[[1;;4]][[xpermuts[[1]]]],xcodes[[5;;5]][[xpermuts[[2]]]],xcodes[[6;;7]][[xpermuts[[3]]]]  }
                ,{d,a},
                    Flatten[#,1]& @ {xcodes[[1;;4]][[xpermuts[[1]]]],xcodes[[5;;5]][[xpermuts[[2]]]],xcodes[[6;;7]][[xpermuts[[3]]]]  }
                ,{b,b},
                    Flatten[#,1]& @ {xcodes[[1;;1]][[xpermuts[[1]]]] }
                ,{b,c},
                    Flatten[#,1]& @ {xcodes[[1;;2]][[xpermuts[[1]]]] }
                ,{c,b},
                    Flatten[#,1]& @ {xcodes[[1;;2]][[xpermuts[[1]]]] }
                ,{b,d},
                    Flatten[#,1]& @ {xcodes[[1;;3]][[xpermuts[[1]]]] }
                ,{d,b},
                    Flatten[#,1]& @ {xcodes[[1;;3]][[xpermuts[[1]]]] }
                ,{c,c},
                    Flatten[#,1]& @ {xcodes[[1;;3]][[xpermuts[[1]]]] }
                ,{c,d},
                    Flatten[#,1]& @ {xcodes[[1;;4]][[xpermuts[[1]]]] }
                ,{d,c},
                    Flatten[#,1]& @ {xcodes[[1;;4]][[xpermuts[[1]]]] }
                ,{d,d},
                    Flatten[#,1]& @ {xcodes[[1;;3]][[xpermuts[[1]]]],xcodes[[4;;5]][[xpermuts[[2]]]] }
            ];
            codes = {subcodes,ycodes}//T;
            (************ permuting y *********)
            codes = Sort[codes,  MU4F[#1[[1]]] < MU4F[#2[[1]]] &]; (* <<<<<<<<<<<<<<<<<<<<<<<< SORTED according to X *) 
            
            (*codes = Reverse /@ Sort[Reverse/@codes]*); (* SORTED according to X *)
            {xcodes,ycodes} = codes//T;
            subcodes = Switch[{xtype,ytype}
                ,{a,a},
                    Flatten[#,1]& @ {ycodes[[1;;4]][[ypermuts[[1]]]],ycodes[[5;;5]][[ypermuts[[2]]]],ycodes[[6;;7]][[ypermuts[[3]]]],ycodes[[8;;10]][[ypermuts[[4]]]] }
                ,{a,b},
                    Flatten[#,1]& @ {ycodes[[1;;4]][[ypermuts[[1]]]] }
                ,{b,a},
                    Flatten[#,1]& @ {ycodes[[1;;4]][[ypermuts[[1]]]] }
                ,{a,c},
                    Flatten[#,1]& @ {ycodes[[1;;4]][[ypermuts[[1]]]],ycodes[[5;;5]][[ypermuts[[2]]]] }
                ,{c,a},
                    Flatten[#,1]& @ {ycodes[[1;;4]][[ypermuts[[1]]]],ycodes[[5;;5]][[ypermuts[[2]]]] }
                ,{a,d},
                    Flatten[#,1]& @ {ycodes[[1;;4]][[ypermuts[[1]]]],ycodes[[5;;5]][[ypermuts[[2]]]],ycodes[[6;;7]][[ypermuts[[3]]]]  }
                ,{d,a},
                    Flatten[#,1]& @ {ycodes[[1;;4]][[ypermuts[[1]]]],ycodes[[5;;5]][[ypermuts[[2]]]],ycodes[[6;;7]][[ypermuts[[3]]]]  }
                ,{b,b},
                    Flatten[#,1]& @ {ycodes[[1;;1]][[ypermuts[[1]]]] }
                ,{b,c},
                    Flatten[#,1]& @ {ycodes[[1;;2]][[ypermuts[[1]]]] }
                ,{c,b},
                    Flatten[#,1]& @ {ycodes[[1;;2]][[ypermuts[[1]]]] }
                ,{b,d},
                    Flatten[#,1]& @ {ycodes[[1;;3]][[ypermuts[[1]]]] }
                ,{d,b},
                    Flatten[#,1]& @ {ycodes[[1;;3]][[ypermuts[[1]]]] }
                ,{c,c},
                    Flatten[#,1]& @ {ycodes[[1;;3]][[ypermuts[[1]]]] }
                ,{c,d},
                    Flatten[#,1]& @ {ycodes[[1;;4]][[ypermuts[[1]]]] }
                ,{d,c},
                    Flatten[#,1]& @ {ycodes[[1;;4]][[ypermuts[[1]]]] }
                ,{d,d},
                    Flatten[#,1]& @ {ycodes[[1;;3]][[ypermuts[[1]]]],ycodes[[4;;5]][[ypermuts[[2]]]] }
            ];
            codes = {xcodes,subcodes}//T;
            ptsXY = MU4PhiXY /@ codes;
            dist = getptsMinDist1[ptsXY];
            If[ dist > distlimit,
                AppendTo[rescodes,codes];
                Print[count++,{xtype,ytype} -> ipermut,"/",Length[permutTuples] -> dist];
            ];
            {dist,codes}
        ,{ipermut,Length[permutTuples]}];
        rescodes = Union[Sort/@rescodes];
        showGraphics = True;
        Do[
            codes = rescodes[[i]];
            ptsXY = MU4PhiXY /@ codes;
            If[ showGraphics,
                Graphics[{{Opacity[.25], MU4getGrid[7,xtype,ytype]} 
                   ,PointSize[.05],Point/@ ptsXY
                   ,Table[Text[Style[Mod[i,100],36],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]
                } 
                ,PlotLabel->{xtype,ytype}
                ,ImageSize -> 1/3 {1200,1200}   ]//Print;
            ];
        ,{i,Length[rescodes]}];
        fname = "data/MU4_bestTiles_"<>ToString[MU4symbols2index@xtype]<>ToString[MU4symbols2index@ytype]<>".dat";
        Print["Writing into ",fname];
        Put[rescodes,fname];
    ] (*prepGoodPatterns4MU4pocRecursive *)
*)

(* -------------------MU4 -----------------------*)
mxMU3 = {{1,1,0},{0,0,1},{1,0,0}} (* MU3 *)
mxMU3POW2 = {{1,1,1},{1,0,0},{1,1,0}}      (* MU3POW2 *)
mxMU4POW3 = {{1,1,1,1},{1,0,0,0},{1,1,0,0},{1,1,1,0}}     (* MU4POW3 *) 
mxMU4 = {{1,1,0,0},{0,0,1,0},{0,0,0,1},{1,0,0,0}}    (* MU4 lambda:1.38028 ratio:2.62966 CharacteristicPolynomial: -1-x^3+x^4  *)
    (*aeval // TeXForm : \begin{multline} \lambda_{\mu} =   \frac{1}{4}+\frac{1}{4} \sqrt{1-16 \sqrt[3]{\frac{2}{3 \left(\sqrt{849}-9\right)}}+2
   \left(\frac{2}{3}\right)^{2/3} \sqrt[3]{\sqrt{849}-9}}+ \\
   \frac{1}{2} \sqrt{\frac{1}{2}+4
   \sqrt[3]{\frac{2}{3 \left(\sqrt{849}-9\right)}}-\frac{\sqrt[3]{\frac{1}{2} \left(\sqrt{849}-9\right)}}{3^{2/3}}+\frac{1}{2 \sqrt{1-16 \sqrt[3]{\frac{2}{3
   \left(\sqrt{849}-9\right)}}+2 \left(\frac{2}{3}\right)^{2/3} \sqrt[3]{\sqrt{849}-9}}}} \approx 1.3802775690976141. \end{multline} *)

lambdaMU4 = 1.3802775690976141;
lambdaMU4Squared = 1.9051661677540188;

MU4basicSeq = {0,1,1,1,2,3,4,5,7,10,14,19,26,36,50,69,95,131,181,250,345,476,657,907,1252,1728,2385,3292,4544,6272,8657,11949,16493,22765,31422,43371,59864,82629,114051,157422,217286,299915,413966,571388,788674,1088589,1502555,
    2073943,2862617,3951206,5453761,7527704,10390321,14341527,19795288,27322992,37713313,52054840,71850128,99173120,136886433,188941273,260791401,359964521,496850954,685792227,946583628,1306548149,1803399103,2489191330,3435774958,
    4742323107,6545722210,9034913540,12470688498,17213011605,23758733815,32793647355,45264335853,62477347458,86236081273,119029728628,164294064481,226771411939,313007493212,432037221840,596331286321,823102698260,1136110191472,
    1568147413312,2164478699633,2987581397893,4123691589365,5691839002677,7856317702310,10843899100203,14967590689568,20659429692245,28515747394555,39359646494758,54327237184326};

MU4F[symbols_] :=
    With[ {s = Reverse@(symbols//MU4symbols2binCode)},
        Total@Table[MU4basicSeq[[i+3]] s[[i]], {i, Length[s]}]
    ]
MU4Finv[symbols_] :=
    With[ {s = (symbols//MU4symbols2binCode)},
        Total@Table[MU4basicSeq[[i+3]] s[[i]], {i, Length[s]}]
    ]
MU4FXY[symbols_] :=
    MU4F/@symbols

phitab = Table[lambdaMU4^-i, {i, 0, 100}] // N;
MU4PhiBin[binsymbols_] :=
    With[ {s = (binsymbols)},
        Sum[phitab[[i+1]] s[[i]], {i, Length[s]}]
    ]
MU4Phi[symbols_] :=
    With[ {s = (symbols//MU4symbols2binCode)},
        Sum[phitab[[i+1]] s[[i]], {i, Length[s]}]
    ]
MU4PhiXY[s_] :=
    MU4Phi/@s
MU4PhiXYbin[s_] :=
    MU4PhiBin/@s


MU4symbols2binCode[symbols_] :=
    (symbols/.{a:>0,b:>1,c:>0,d:>0})
MU4symbols2index[symbols_] :=
    (symbols/.{a:>1,b:>2,c:>3,d:>4})

MU4getCodes1d[nlevels_:1,initsymbol_:a] :=
    Block[ {codes = {{initsymbol}}},
    	If[nlevels == 0, Return[codes] ];
        Table[ codes = Flatten[#,1]& @ (MU4subdiv1d /@ codes),{nlevels}];
        Drop[#,1]& /@ codes
    ] (* MU4getCodes1d *)


MU4subdiv1d[symbol_] :=
    If[ symbol === {},
        {{a}, {b}},
        Switch[Last[symbol]
            ,a, {Join[symbol,{a}],Join[symbol,{b}]}
            ,b, {Join[symbol,{c}]}
            ,c, {Join[symbol,{d}]}
            ,d, {Join[symbol,{a}]}
            ,_, Print["Houston, we've got a problem"];
                            ]
    ]
MU4subdiv1dWithPermut[symbol_,permut_] :=
    Switch[Last[symbol]
    ,0, If[ permut == 0,
            {Join[symbol,{0}],Join[symbol,{1}]},
            {Join[symbol,{1}],Join[symbol,{0}]}
        ]
    ,1, {Join[symbol,{2}]}
    ,2, {Join[symbol,{3}]}
    ,3, {Join[symbol,{0}]}
    ]

visuConvert :=
    MU4symbols2binCode (* ToString or MU4symbols2binCode*)


MU4getGrid[nlevels_:2,xTileType_:a,yTileType_:a,showSymbols_:True] :=
    Module[ {hlevels,symbols1,symbols2,gl = {},coltab,txtcoltab,xSymbols,ySymbols,xvaluesFracDir,yvaluesFracDir,xmax,ymax,xind,yind},
        txtcoltab = {Red, Red,Red, Red,Red, Red,Red, Red};
        coltab = {Green, Red, Lighter@Orange, Black,Red,Blue, Black,Red,Red, Black,Red,Blue, Black,Green,Cyan};
        {xind,yind} = {Switch[xTileType,a,1,b,4,c,3,d,2],Switch[yTileType,a,1,b,4,c,3,d,2]};
        {xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
        Do[
            gl = Join[gl,{coltab[[ilevel]],Thickness[.02/lambdaMU4^(ilevel/1.25)],{Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] }}];
            xSymbols = If[ xTileType===a,
                           MU4getCodes1d[ilevel,xTileType],
                           (Drop[#, If[ xTileType===d,
                                        2,
                                        1
                                    ]] & /@ MU4getCodes1d[ilevel,xTileType])
                       ];
            ySymbols = If[ yTileType===a,
                           MU4getCodes1d[ilevel,yTileType],
                           (Drop[#, If[ yTileType===d,
                                        2,
                                        1
                                    ]] & /@ MU4getCodes1d[ilevel,yTileType])
                       ];
            xvaluesFracDir = MU4Phi /@ xSymbols;
            yvaluesFracDir = MU4Phi /@ ySymbols;
            Do[AppendTo[gl, {Line[{{xvaluesFracDir[[i]],0},{xvaluesFracDir[[i]],ymax}}]}],{i,Length[xSymbols]}];
            Do[AppendTo[gl, {Line[{{0,yvaluesFracDir[[i]]},{xmax,yvaluesFracDir[[i]]}}]}],{i,Length[ySymbols]}];
        ,{ilevel,2,nlevels}];
        hlevels = Floor[nlevels/2];
        If[ showSymbols,
            symbols1 = #[[;;hlevels]]&         /@ (xSymbols);
            symbols2 = #[[hlevels+1;;]]&     /@ (xSymbols);
            AppendTo[gl, {Black,Opacity[1]
                ,Table[
                    Text[ Column[Join[{
                                 Style[Rotate[ToString[digits2str[visuConvert/@symbols2[[i]] ]]<>"        " ,Pi/2],Bold,Black]
                                }
                                ,Reverse@Table[Style[  Rotate[visuConvert@symbols1[[i,j]],Pi/2] ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                            ]
                        ], {xvaluesFracDir[[i]],0},{0,1}]
                    , {i,Length[xvaluesFracDir]}]
                } ];
            symbols1 = #[[;;hlevels]]& /@ (ySymbols);
            symbols2 = #[[hlevels+1;;]]& /@ (ySymbols);
            AppendTo[gl, {Black,Opacity[1]
                ,Table[                        
                        Text[ Row[Join[
                                Table[Style[  ToString[visuConvert@symbols1[[i,j]]]<>" " ,Bold,txtcoltab[[j]]] ,{j,hlevels}]
                                 ,{ Style[Rotate[ToString[digits2str[visuConvert/@symbols2[[i]] ]]<>"       " ,0],Bold,Black]
                        } ] ], {0,yvaluesFracDir[[i]]},{1,0}]
                , {i,Length[yvaluesFracDir]}]    
            } ];
        ];
        gl
    ] (* MU4getGrid*)

showMU4Grid[] :=
    Module[ {},
        mx = mxMU4POW3;
        init[mx,False];
        Graphics[getDweRuKiGrid[2]]//Print;
        Graphics[MU4getGrid[6,a,b],Axes->True]//Print;
        Graphics[MU4getGrid[6,b,c],Axes->True]//Print;
        Graphics[MU4getGrid[6,c,d],Axes->True]//Print;
        Graphics[MU4getGrid[6,d,a],Axes->True]//Print;
    ]

tstMU4subdiv1d[] :=
    Module[ {},
        symbols = MU4getCodes1d[6];
    ]

MU4getRandomGoodPattern[ix_:a,iy_:a] :=
    Module[ {fname},
        If[ !known[MU4goodPatterns],
            MU4goodPatterns = Table[{},{4},{4}];
            Table[
                fname = "data/MU4_L4patterns/MU4_bestTiles_"<>ToString[iix]<>ToString[iiy]<>".dat";
                MU4goodPatterns[[iix,iiy]] = Get[fname];
                Print["Reading ",fname -> Length[MU4goodPatterns[[iix,iiy]]]];
            ,{iiy,4},{iix,4}];
        ];
	    RandomChoice @ MU4goodPatterns[[MU4symbols2index@ix,MU4symbols2index@iy]]
    ]

MU4ActiveBinCodesQ[binCodes_] :=
    And @@ {And @@ (Max[ListConvolve[#, binCodes[[1]]]] < 2 & /@ forbidPatterns),
            And @@ (Max[ListConvolve[#, binCodes[[2]]]] < 2 & /@ forbidPatterns)}

MU4getActiveBinCodes[codes_] :=
    Module[ {codesBin},
        forbidPatterns = Switch[Length[codes[[1,1]]],2,{{1,1}} ,2,{{1,1},{1,0,1}}, _,{{1,1},{1,0,1},{1,0,0,1}} ];
        codesBin = MU4symbols2binCode@codes;
        Select[codesBin, MU4ActiveBinCodesQ[#]& ]
    ]

MU4getActiveCodes[codes_] :=
    Module[ {codesBin,cc,sel},
        forbidPatterns = Switch[Length[codes[[1,1]]],2,{{1,1}} ,2,{{1,1},{1,0,1}}, _,{{1,1},{1,0,1},{1,0,0,1}} ];
        codesBin = MU4symbols2binCode@codes;
        cc = {codes,codesBin}//T;
        sel = Select[cc, MU4ActiveBinCodesQ[#[[2]]]& ];
        First /@ sel
    ]

MU4recursiveSubdivSIMPLEST[level_:1,x0_:a,y0_:a] := (* used in prepGoodPatterns4MU4pocRecursive[] *)
    Module[ {distribBetweenPatterns,x1,y1,prevlevelPattern,newpattern,i,j,xLastDigit,yLastDigit,xprev,yprev,res,xsubdivTileCodes,ysubdivTileCodes},
        If[ level == 0,
            Return[{{{},{}}}]
        ];
        {xsubdivTileCodes,ysubdivTileCodes} = {MU4getCodes1d[1,x0], MU4getCodes1d[1,y0]};
        distribBetweenPatterns  = Tuples@{xsubdivTileCodes,ysubdivTileCodes};
        Flatten[#,1]& @ Table[
         {{x1},{y1}} = distribBetweenPatterns[[i]];
         prevlevelPattern = MU4recursiveSubdivSIMPLEST[level-1,x1,y1];
         newpattern = Table[
             {xprev,yprev} = prevlevelPattern[[j]];
             {xLastDigit,yLastDigit} = {y1,x1};
             res = {Join[{x1},xprev,{xLastDigit}], Join[{y1},yprev,{yLastDigit}]};
             res
         ,{j,Length[prevlevelPattern]}];
         newpattern
        ,{i,Length[distribBetweenPatterns]}]
    ] (* MU4recursiveSubdivSIMPLEST *)


MU4recursiveSubdiv[level_:1,x0_:a,y0_:a] :=
    Module[ {subdivTiles,prevlevelPattern, xSubtilePrefix,ySubtilePrefix },
        If[ level == 1, Return@MU4getRandomGoodPattern[x0,y0] ];
        subdivTiles = Tuples@{MU4getCodes1d[1,x0], MU4getCodes1d[1,y0]};
        Flatten[#,1]& @ Table[ {{xSubtilePrefix},{ySubtilePrefix}} = subdivTiles[[isubtile]];
            prevlevelPattern = MU4recursiveSubdiv[level-1,xSubtilePrefix,ySubtilePrefix];
            {Join[{xSubtilePrefix},#[[1]],{ySubtilePrefix}], Join[{ySubtilePrefix},#[[2]],{xSubtilePrefix}]} & /@ prevlevelPattern
        ,{isubtile,Length[subdivTiles]}]
    ] (* MU4recursiveSubdiv *)

MU4pocRecursive[innlevels_:5, showGraphics_:True, generateDiscrepancy_:True, generateFourier_:False ] :=
    Module[ {},
        dbg = False;
        mxsz = 2;
        base = mxsz;
        baselog = Log[2,base];
        nlevels = innlevels;
        myRandomChoice :=
            RandomChoice;
        basename = "goodFIBOLen8Patterns";
        fouriertabsz = 2 4096 ;
        fsum = Table[0,{fouriertabsz},{fouriertabsz}];
        discrepancyMU4 = Table[{0,0},{nlevels}];
        (*If[!known[MU4goodPatterns],*)
        MU4goodPatterns = Table[{},{4},{4}];
        Table[
            fname = "data/MU4_L4patterns/MU4_bestTiles_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU4goodPatterns[[ix,iy]] = Get[fname];
            Print["Reading ",fname -> Length[MU4goodPatterns[[ix,iy]]]];
        ,{iy,4},{ix,4}];
        (*];*)
        Do[
            targetlevel = ilevel;
            codes = MU4recursiveSubdiv[ilevel];
            (*activeBinCodes = MU4getActiveBinCodes@codes;*)
            ptsXY = MU4PhiXY /@ codes;
            Print[ilevel -> Length[ codes] ];
            If[ generateDiscrepancy,
                discrepancy = getDiscrepancy2Dexact[ptsXY];
                discrepancyMU4[[ilevel]] = { Length[ptsXY], discrepancy};
                Print[ilevel -> Length[codes]  -> Length[ptsXY] -> discrepancy];
                Print[discrepancyMU4];
            ];
            If[ showGraphics,
                If[ ilevel < 3,
                    g = Graphics[{{Opacity[.2], MU4getGrid[6 ilevel ]} 
                            ,PointSize[.01],Point/@ ptsXY
                            (*,Table[Text[Style[DweRuKigetIntValueInv@ codes[[i,2]],18],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]*)
                            ,Table[Text[Style[Mod[i,100],24],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]
                        } 
                        ,PlotLabel->ilevel
                        ,ImageSize -> ilevel/3 {1200,1200}   ];
                    g//Print;
                    ,(*ELSE*)
	                    If [ilevel < 6,
	                   		g = Graphics[{PointSize[.01],Point/@ptsXY},PlotRange->{{0,1},{0,1}},Frame->True,FrameTicks->None];
	                    	Export["fig-MU4_pts_L"<>ToString[ilevel]<>".pdf",g];
	                    	g//Print
              			  ];
                ];
            (*Print[(mf/@codes) -> (mf/@activeBinCodes)];*)
                (*Abort[];*)
            ];
        ,{ilevel,1,nlevels}];
        If[ generateDiscrepancy,
            discrepancyTabSobol = { (* Sobol 2D Kuo's implementation http://web.maths.unsw.edu.au/~fkuo/sobol/ *)
                    {16, 0.171875},(*pSobol2Dlog1 = discrepancyComplexity[data, (Log[#])/# &, "Discrepancy Sobol 2D N/LogN"]; pSobol2Dlog1 //Print;*)
                     {64, 0.0537109}, 
                     {256, 0.0145874}, 
                     {1024, 0.00429916}, 
                     {4096, 0.00132918}, 
                     {16384, 0.000372991}, 
                     {65536, 0.0000994867},
                     {262144, 0.000027597358}
                 };
            discrepancyTabFIBOm21 = {{3,0.618034},{5,0.418034},{8,0.27051},{13,0.193678},{21,0.130694},{34,0.0866825},{55,0.0554336},{89,0.0372093},{144,0.0244132},{233,0.0161211},
                {377,0.010242},{610,0.00673888},{987,0.00436806},{1597,0.00285382},{2584,0.00180478},{4181,0.0011745},{6765,0.000755457},{10946,0.000489471},{17711,0.000308601},{28657,0.000199274}};
            discrepancyTabFIBOLen8 = {{8,0.27051},{21,0.120557},{55,0.0501118},{144,0.0230114},{377,0.00982341},{987,0.00427672},{2584,0.00180458},{6765,0.000750238},{17711,0.000306409},{46368,0.000126695}
                ,{121393, 0.0000516168}};
            ListPlot[{Log[2,#]& /@ discrepancyMU4, Log[2,#]& /@ discrepancyTabSobol}, Joined->True
                ,Ticks->{Table[{i,i},{i,20}],Automatic}
                ,PlotLabel->"log-log discrepancy"]//Print;
        ];
        If[ generateFourier,
            fsum += getFourier2D[Ceiling[(fouriertabsz ptsXY)],fouriertabsz];
            (*fsum[[1,1]] = 0;*)
            fsum = Reorg[fsum];
            centralPart = (fsum[[fouriertabsz/2-fouriertabsz/16 ;; fouriertabsz/2+fouriertabsz/16, fouriertabsz/2-fouriertabsz/16 ;; fouriertabsz/2+fouriertabsz/16]])^2;
            (*ListDensityPlot[centralPart, ImageSize -> {1024,1024}]//Print;*)
            psprectrum = niceRaster[50000 centralPart /Max[centralPart],zoom->1];
            Print[psprectrum];
            Export["fig-MU4-spectrum.png",psprectrum]
        ];
    ] (*MU4pocRecursive *)

       


MU4makeGoodPatternsWithType[xsz_:4,ysz_:4,dbgGraphics_:True] :=
    Module[ {},
        (*xlimit = Switch[xtype,a,4,b,1,c,2,d,3];
        ylimit = Switch[ytype,a,4,b,1,c,2,d,3];*)
        res = {};
        Do[
            intcodes = basicPatterns4x4base4[[i]];
            sel = Select[intcodes, (#[[1]] < xsz ) && (#[[2]] < ysz ) &  ];
            If[ Length[sel] == Min[xsz,ysz],
                codes = sel /.{0:>{a,a,a},1:>{a,a,b},2:>{a, b, c}, 3:> {b, c, d} };
                AppendTo[res,codes];
            ]; 
        ,{i,Length[basicPatterns4x4base4]}];
        res = Union[res];
        If[ dbgGraphics,
            Do[
                codes = res[[i]];
                xy = MU4PhiXY /@ codes;
                Graphics[{MU4getGrid[6,a,a], PointSize[.05], Point/@ xy},PlotLabel->{i,{xsz,ysz}} ]//Print;
                codes
            ,{i,Length[res]}];
        ];
        res
    ] (* MU4makeGoodPatternsWithType *)

MU4makeGoodPatterns[dbgGraphics_:True] :=
    Module[ {},
        resTab = Table[
            MU4makeGoodPatternsWithType[ix,iy,dbgGraphics]
        ,{ix,4},{iy,4}];
        resTab[[2,2]] = resTab[[1, 1]];
        Print[resTab];
    ]




prepGoodPatterns4MU4pocRecursive[inxtype_:a,inytype_:a,inshowGraphics_:False,innlevels_:4] :=
    Module[ {},
        {xtype,ytype} = {inxtype,inytype};
        nlevels = innlevels;
        showGraphics = inshowGraphics;
        distlimit = .0001;
        
  Switch[nlevels
  	,4,      
        distlimit = Switch[{xtype,ytype} (* this set for nlevels == 4 *)
        	,{a,a},.019
        	,{a,b},.045
        	,{a,c},.038
        	,{a,d},.022
        	
        	,{b,a},.045
            ,{b,b},.0
            ,{b,c},.038
            ,{b,d},.038

        	,{c,a},.032
            ,{c,b},.038
            ,{c,c},.038
            ,{c,d},.045

        	,{d,a},.029
        	,{d,b},.038
            ,{d,c},.045
            ,{d,d},.038
        ];
        
        
   	,5,      
        distlimit = Switch[{xtype,ytype} (* this set for nlevels == 5 *)
        	,{a,a},.005(*.0082*)
        	,{a,b},.014
        	,{a,c},.015
        	,{a,d},.0096
        	
        	,{b,a},.014
            ,{b,b},.019
            ,{b,c},.019
            ,{b,d},.022

        	,{c,a},.015
            ,{c,b},.026
            ,{c,c},.018
            ,{c,d},.014

        	,{d,a},.011
        	,{d,b},.022
            ,{d,c},.013
            ,{d,d},.0118
        ];
  ];
        fname = "data/MU4_bestTiles_"<>ToString[MU4symbols2index@xtype]<>ToString[MU4symbols2index@ytype]<>".dat";

        codes = initcodes = MU4getActiveCodes @ MU4recursiveSubdivSIMPLEST[nlevels,xtype,ytype];
        npts = Length[codes];
        ptsXY = MU4PhiXY /@ codes;
        Graphics[{{Opacity[.25], MU4getGrid[6,xtype,ytype]} 
                                ,PointSize[.05],Point/@ ptsXY
                                ,Table[Text[Style[Mod[i,100],36],ptsXY[[i]],{-1,-1}],{i,npts}]
                            } 
                            ,PlotLabel->{"SRC",{xtype,ytype},npts}
                            ,ImageSize -> 1/3 {1200,1200}   ]//Print;

		npermuts = 10000000;
        rescodes = {};
        count = 1;
        bestval = 0;
		Do[
			If[Mod[ipermut,100000] == 0, Print[ipermut -> bestval]; Print[rescodes] ];
			xnewcodes = (First/@initcodes)[[ RandomSample[Range[npts]] ]];
			ynewcodes = (Last/@initcodes)[[ RandomSample[Range[npts]] ]];
            codes = {xnewcodes,ynewcodes}//T;
            ptsXY = MU4PhiXY /@ codes;
            dist = getptsMinDist1[ptsXY];
            If[ dist > distlimit,
            	If[dist > bestval, bestval = dist];
                AppendTo[rescodes,codes];
        		rescodes = Union[Sort/@rescodes];
        		Print["Writing into ",fname -> Length[rescodes] -> bestval];
        		Put[rescodes,fname];
	            If[ showGraphics,
	                Graphics[{{Opacity[.25], MU4getGrid[7,xtype,ytype]} 
	                   ,PointSize[.05],Point/@ ptsXY
	                   ,Table[Text[Style[Mod[i,100],36],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]
	                } 
	                ,PlotLabel->{xtype,ytype}
	                ,ImageSize -> 1/3 {1200,1200}   ]//Print;
	            ];
            ];
            {dist,codes}
        ,{ipermut,npermuts}];

        Do[
            codes = rescodes[[i]];
            ptsXY = MU4PhiXY /@ codes;
            If[ showGraphics,
                Graphics[{{Opacity[.25], MU4getGrid[7,xtype,ytype]} 
                   ,PointSize[.05],Point/@ ptsXY
                   ,Table[Text[Style[Mod[i,100],36],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]
                } 
                ,PlotLabel->{xtype,ytype}
                ,ImageSize -> 1/3 {1200,1200}   ]//Print;
            ];
        ,{i,Length[rescodes]}];
    ] (*prepGoodPatterns4MU4pocRecursive *)

(*
prepGoodPatterns4MU4pocRecursive[a,a]
prepGoodPatterns4MU4pocRecursive[a,b]
prepGoodPatterns4MU4pocRecursive[a,c]
prepGoodPatterns4MU4pocRecursive[a,d]
prepGoodPatterns4MU4pocRecursive[b,a]
prepGoodPatterns4MU4pocRecursive[b,b]
prepGoodPatterns4MU4pocRecursive[b,c]
prepGoodPatterns4MU4pocRecursive[b,d]
prepGoodPatterns4MU4pocRecursive[c,a]
prepGoodPatterns4MU4pocRecursive[c,b]
prepGoodPatterns4MU4pocRecursive[c,c]
prepGoodPatterns4MU4pocRecursive[c,d]
prepGoodPatterns4MU4pocRecursive[d,a]
prepGoodPatterns4MU4pocRecursive[d,b]
prepGoodPatterns4MU4pocRecursive[d,c]
prepGoodPatterns4MU4pocRecursive[d,d]
*)

							
						
				

makeRefDiscrepancy[method_:5] :=
    Module[ {},
        Switch[method
        ,1, basename = "pointsets_stk-sampler-whitenoiseT2-m1-b";
        ,2, basename = "pointsets_stk-sampler-stratifiedT2-m1-b";
        ,3, basename = "pointsets_stk-sampler-sobolT2-m1-b";
        ,4, basename = "pointsets_stk-sampler-haltonT2-m1-b";
        ,5, basename = "pointsets_stk-sampler-poissondiskT2-m1-b";
        ,6, basename = "pointsets_sampler_nrooks-m1-b";
        ,7, basename = "pointsets_BNOT";
        ,8, basename = "pointsets_sampler_cmj_m1-b";
        ,9, basename = "pointsets_MU4_set0";
        ];
        fname = "data/list_"<>basename<>".txt";
        Print["Reading ",fname];
        data = Import[fname,"Data"];
        flst = First /@ data;

        discrepancyTab = Table[{0, 0}, {Length[flst]}];
        
        Do[
        	fname = "data/"<>basename<>"/"<>ToString[flst[[i]]];
        	pts = Complement[Import[fname],{{}}];
        	Print["Reading ",fname];
            discrepancy = getDiscrepancy2Dexact[pts];
            discrepancyTab[[i]] = { Length[pts], discrepancy};
            Print[discrepancyTab];
       		Put[discrepancyTab,"results/discrepancy_"<>basename<>".dat"];
        ,{i,Length[flst]}];
    ] (* makeRefDiscrepancy *)

MU4makeDiscrepancy[] :=
    Module[ {},
    	
    	basename = "MU4";
        lentab = Table[MU4basicSeq[[i]], {i, 12, 46, 2}];
        iset = 0;
        discrepancyTab = Table[{0, 0}, {Length[lentab]}];
        Do[
    		len = lentab[[i]];
        	fname = "data/pointsets_MU4/pts_"<>ToString[NumberForm[len, 7, NumberPadding -> "0"]]<>"_"<>ToString[NumberForm[iset, 3, NumberPadding -> "0"]]<>".dat";
         	pts = Import[fname];
        	Print["Reading ",fname];
            discrepancy = getDiscrepancy2Dexact[pts];
            discrepancyTab[[i]] = { len, discrepancy};
            Print[discrepancyTab];
       		Put[discrepancyTab,"results/discrepancy_"<>basename<>".dat"];
        ,{i,Length[lentab]} ];     
    ] (* MU4makeDiscrepancy *)

    
MU4generatePointSets[] :=
    Module[ {},
    	nsets = 1;
    	Do[
	        (*Parallelize @*) Do[
				codes = MU4recursiveSubdiv[iiter,a,a];
				ptsXY = MU4PhiXY /@ codes;
				len = Length[ptsXY];
	        	fname = "data/pointsets_MU4/pts_"<>ToString[NumberForm[len, 7, NumberPadding -> "0"]]<>"_"<>ToString[NumberForm[iset, 3, NumberPadding -> "0"]]<>".dat";
				Print[iiter -> fname];
				Export[fname,ptsXY];
	        ,{iiter,19,20}];
	    ,{iset,0,nsets-1}]
    ] (* MU4generatePointSets *)

fzone[{x_, y_}, kzone_] :=
      (Sin[(kzone x)^2 + (kzone y)^2] (*+ 1*))/2;
  
mitchellFilter[x_] := With[{b=1/3,c=1/3},
      Piecewise[{{(12 - 9 b - 6 c) Abs@x^3 + (-18 + 12 b +  6 c) x^2 + (6 - 2 b),  Abs@x < 1}, {(-b - 6 c) Abs@x^3 + (6 b + 30 c) x^2 + (-12 b - 48 c) Abs@x + (8 b + 24 c), 1 <= Abs@x < 2}}, 0]/6
]

mitchellFilterC = (* compiled version *)
  Compile[{{x, _Real}}, Piecewise[{{7 Abs@x^3 + -12 x^2 + 16/3, Abs@x < 1}, {-7/3 Abs@x^3 + 12 x^2 - 20 Abs@x + 32/3, 1 <= Abs@x < 2}}, 0]/6]
  
fzoneC = Compile[{{coord, _Real, 1}, {kzone, _Real}}, (Sin[(kzone coord[[1]])^2 + (kzone coord[[2]])^2] + 1)/2]
	
makeZonePlateFromFile[fname_:"data_discrepancy/pts_grid_L9.dat", samplesPerPixel_:1, filterSz_:2, outputSize_:512, stkFlag_:True] :=
(* it takes about 3 minutes to generate 512x512 output, 1 samples per pixel *)
        Block[ {zoomFactor, kzone, pts, szPts, dupNb, ptsDuplicated, indx, indy, tab, gTab, sz, i, x, y, res, outputfname},
            zoomFactor = 1;
            kzone = 2/(4 Pi);	(*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< here: Sqrt[2.] because our zoneplate goes till f=2 *)
            sz = outputSize;
            If[ !FileExistsQ[fname],
                Print["File does not exist: ",fname];
                Abort[]
            ];
            pts = If[stkFlag, Drop[#,1]& @ Import[fname], Import[fname]] ; (* stk : first line contains meta-information *)
            szPts = Round[Sqrt@(Length@pts)/Sqrt[samplesPerPixel] ];
            pts = pts*szPts;
            (*Graphics[Point/@pts]//Print;*)
            dupNb = Ceiling[2 sz/szPts]; 	(* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<here: 2 because our zoneplate goes till f=2 *)
            ptsDuplicated =  Flatten[Table[# + {x*szPts, y*szPts} & /@ pts, {x, 0, dupNb}, {y, 0, dupNb}], 2];
            Print[samplesPerPixel, " sample per pixel (mean)",mf@{fname,{samplesPerPixel,filterSz,outputSize,szPts}}];
            Print["Image size = ", sz,mf@{fname,{samplesPerPixel,filterSz,outputSize,szPts}}];
            Print[dupNb^2, " duplications of initial point set",mf@{fname,{samplesPerPixel,filterSz,outputSize,szPts}}];
            tab = Table[{}, {sz}, {sz}];
            (indx = Floor@#[[1]] + 1;
             indy = Floor@#[[2]] + 1;
             (*Parallelize @*) Do[ (* parallelization does not work here *)
                If[ (0 < indx + i < sz) && (0 < indy + j < sz),
                    tab[[indx + i, indy + j]] = {tab[[indx + i, indy + j]], 
                        mitchellFilterC[Norm[# - {indx + i, indy + j}]]*fzoneC[#, kzone]};
                ];
    		,{i, -filterSz, filterSz}, {j, -filterSz, filterSz}]) & /@ ptsDuplicated;
            tab = Rescale @ Map[Total@Flatten[#] &, tab, {2}];
            res = niceRaster[tab,zoom->zoomFactor];
	        Print["the result of ",mf@{fname,{samplesPerPixel,filterSz,outputSize,szPts}},":"];	        	
            res//Print;
            outputfname = fname<>"_zoneplate.png";
            Export[outputfname,res,"PNG"];
            (*Return[res]*)
        ] (*makeZonePlateFigure*)


(* exemples: 
*)

mkZonePlates[nSamplesPerPixel_:4] :=
    Module[ {},
        Parallelize @ {
			makeZonePlateFromFile["data_discrepancy/pts_grid_L9.dat",nSamplesPerPixel,2,512,True],
			makeZonePlateFromFile["data_discrepancy/pts_Sobol_L9.dat",nSamplesPerPixel,2,512,False], 
			makeZonePlateFromFile["data_discrepancy/pts_halton_L9.dat",nSamplesPerPixel,2,512,True],
			makeZonePlateFromFile["data_discrepancy/pts_MU4_00299915_0000.dat",nSamplesPerPixel,2,512,True],
        	
			makeZonePlateFromFile["data_discrepancy/pts_grid_L10.dat",nSamplesPerPixel,2,512,True],
            makeZonePlateFromFile["data_discrepancy/pts_Sobol_L10.dat",nSamplesPerPixel,2,512,False],
            makeZonePlateFromFile["data_discrepancy/pts_halton_L10.dat",nSamplesPerPixel,2,512,True],
			makeZonePlateFromFile["data_discrepancy/pts_MU4_01088589_0000.dat",nSamplesPerPixel,2,512,True]
        };
    ]

discrepancyAllRefMethods2D[inmethod_:4, fromLevel_:2,toLevel_:10] :=
    Module[ {},
    	imethod = inmethod;
    	Print["imethod = ", imethod];
    	methods = {"whitenoise", "grid", "stratified", "poisson-disk", "sobol", "halton", "ccvt", "fpo"};
    		method = methods[[imethod]];
	        discrepancyTab = {};
	        prevSessionTime = SessionTime[];
	        dtab = {};
	        Do[
	        	npts = 4^ilevel;
				Print[" Processing ",method,{ilevel,npts}];
				Run[execPrefix<>"stk-sampler -s "<>method<>" -n "<>ToString[npts]<>" -o data_discrepancy/pts_"<>method<>"_L"<>ToString[ilevel]<>".dat > /dev/null"];
				Run[execPrefix<>"stk-discrepancy -i data_discrepancy/pts_"<>method<>"_L"<>ToString[ilevel]<>".dat -o data_discrepancy/discrepancy2D_"<>method<>"_L"<>ToString[ilevel]<>".dat -m star -I 1 > /dev/null"];
				curSessionTime = SessionTime[];
				timing = curSessionTime - prevSessionTime; (* about 20secs for 16K; 5mins for 64K; 1h30 for 256K; 24h for 1M *)
				prevSessionTime = curSessionTime; 
	        	Print["-------------- timing ", method,{ilevel,npts} -> timing];
	        	{{npts, d}} = Import["data_discrepancy/discrepancy2D_"<>method<>"_L"<>ToString[ilevel]<>".dat"];
	        	AppendTo[dtab, {npts, d}];
		        Put[dtab,"data_discrepancy/res_discrepancy2D_"<>method<>".dat"];
	        ,{ilevel,fromLevel,toLevel}];
]; (* discrepancyAllRefMethods2D *)

discrepancySobol2D[] :=
    Module[ {},
        {ind1, ind2} = {1,2};
        buildMSobol[{ind1, ind2}];
        discrepancyTabSobol = {};
        prevSessionTime = SessionTime[];
        Do[
        	npts = 4^ilevel;
	        set = pts = Table[ sobol2d[i] //N,{i,0,npts-1}]; 
			Print[" Processing ",{ilevel,Length[set]}];
			d = getDiscrepancy2Dexact[set];
			curSessionTime = SessionTime[];
			timing = curSessionTime - prevSessionTime; (* about 20secs for 16K; 5mins for 64K; 1h30 for 256K; 24h for 1M *)
			prevSessionTime = curSessionTime; 
			AppendTo[discrepancyTabSobol, {npts,d} ];
        	Print[{ilevel,timing}->"discrepancyTabSobol = ",discrepancyTabSobol];
        	Put[discrepancyTabSobol,"data_discrepancy/discrepancyTabSobol2D.dat"];     	
        ,{ilevel,2,10}];
]; (* discrepancySobol2D *)

makeSobol2DPointSets[] :=
    Module[ {},
        {ind1, ind2} = {1,2};
        buildMSobol[{ind1, ind2}];
        discrepancyTabSobol = {};
        prevSessionTime = SessionTime[];
        Do[
        	npts = 4^ilevel;
	        set = pts = Table[ sobol2d[i] //N,{i,0,npts-1}]; 
	        fname = "data_discrepancy/pts_Sobol_L"<>ToString[ilevel]<>".dat";
			Print[" Processing ",{ilevel,Length[set]} -> fname];
			Export[fname,pts];			   	
        ,{ilevel,2,12}];
]; (* discrepancySobol2D *)

a2alpha[symbols_]:=(symbols(*/.{a :> \[Alpha], b :> \[Beta], c :> \[Gamma], d :> \[Delta]}*))


MU4pmkFigureRanking[innlevels_:5] :=
    Module[ {},
        dbg = False;
        mxsz = 2;
        base = mxsz;
        baselog = Log[2,base];
        nlevels = innlevels;
            MU4goodPatterns = Table[{},{4},{4}];
            MU4goodPatterns[[1,1]] = { {{{a},{a}}} };
            MU4goodPatterns[[1,2]] = { {{{a},{b}}} };
            MU4goodPatterns[[1,3]] = { {{{a},{c}}} };
            MU4goodPatterns[[1,4]] = { {{{a},{d}}} };
            MU4goodPatterns[[2,1]] = { {{{b},{a}}} };
            MU4goodPatterns[[2,2]] = { {{{b},{b}}} };
            MU4goodPatterns[[2,3]] = { {{{b},{c}}} };
            MU4goodPatterns[[2,4]] = { {{{b},{d}}} };
            MU4goodPatterns[[3,1]] = { {{{c},{a}}} };
            MU4goodPatterns[[3,2]] = { {{{c},{b}}} };
            MU4goodPatterns[[3,3]] = { {{{c},{c}}} };
            MU4goodPatterns[[3,4]] = { {{{c},{d}}} };
            MU4goodPatterns[[4,1]] = { {{{d},{a}}} };
            MU4goodPatterns[[4,2]] = { {{{d},{b}}} };
            MU4goodPatterns[[4,3]] = { {{{d},{c}}} };
            MU4goodPatterns[[4,4]] = { {{{d},{d}}} };
        Do[
            codes = MU4recursiveSubdivSimple[ilevel];
            hlen = If[Length[codes[[1]]] == 0, 0, Length[codes[[1,1]]]/2 ];
            If[hlen > 0,
	            codes = Last /@ (Sort @ Table[
	            	{Reverse@Table[Switch[{codes[[i,2,j]],codes[[i,1,j]]}//MU4symbols2binCode,{0,0},0,{1,1},1,{0,1},2,{1,0},3] ,{j,hlen}], codes[[i]]}
	            ,{i,Length[codes]}])  ;
            ];
            
            ptsXY = MU4PhiXY /@ codes;
                    g = Graphics[{{ MU4getGrid4Figures[ilevel, a,a ]} 
                            ,PointSize[.01],Point/@ ptsXY
                            ,Table[
                            	(*ordercode = Reverse@If[hlen == 0, {}, Join[Reverse@codes[[i,1,;;hlen]],Reverse@codes[[i,1,hlen+1;;]]] ];*)
                            	Text[Style[ i-1  ,14],ptsXY[[i]],{-1,-1}]
                            ,{i,Length[ptsXY]}]
                            (*,Table[Text[Style[ MU4symbols2binCode@codes[[i]],10],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]*)
                        } 
                        ,PlotLabel->Style["Ranking",24]
                        ,ImageSize -> {300,300}  2 ];
                    g//Print;
                    Export["prep-figs/Fig-ranking"<>ToString[ilevel]<>".png",g];
        ,{ilevel,1,nlevels}];
        
     ] (*MU4pocRecursive *)



MU4pmkFigureDiscrepancy[innlevels_:5] :=
    Module[ {},
        discrepancyTabSobol = Sort@{ (* Sobol 2D Kuo's implementation http://web.maths.unsw.edu.au/~fkuo/sobol/ *)
                    {16, 0.171875},(*pSobol2Dlog1 = discrepancyComplexity[data, (Log[#])/# &, "Discrepancy Sobol 2D N/LogN"]; pSobol2Dlog1 //Print;*)
                     {64, 0.0537109}, {256, 0.0145874}, {1024, 0.00429916}, {4096, 0.00132918}, {16384, 0.000372991}, 
                     {65536, 0.0000994867}, {262144, 0.000027597358}, {524288, 0.0000140669159}, {23, 0.106317935}, {25, 0.105}, {27, 0.0882523148}, {30, 0.0690104167}, 
		 {32, 0.08984375}, {35, 0.0880859375}, {39, 0.0938501603}, 
		 {42, 0.0902157738}, {46, 0.0748980978}, {50, 0.074453125}, 
		 {54, 0.0568576389}, {59, 0.0460143008}, {64, 0.0537109375}, 
		 {70, 0.0488002232}, {77, 0.0461310824}, {83, 0.0471220821}, 
		 {91, 0.03961517}, {99, 0.0469144571}, {108, 0.0342881944}, 
		 {118, 0.0316389698}, {128, 0.0251464844}, {140, 0.027940339}, 
		 {153, 0.0330644955}, {166, 0.0256623378}, {182, 0.021554173}, 
		 {198, 0.0212032434}, {216, 0.0215148574}, {235, 0.0159235762}, 
		 {256, 0.0145864727}, {280, 0.0165697277}, {305, 0.0162710302}, 
		 {332, 0.0142836636}, {363, 0.0137116417}, {395, 0.012420268}, 
		 {431, 0.010309985}, {470, 0.00967041261}, {512, 0.00840716504}, 
		 {559, 0.0113430831}, {609, 0.00919006964}, {664, 0.00972255577}, 
		 {725, 0.00853665948}, {790, 0.00817986438}, {862, 0.00585917711}, 
		 {940, 0.00481335463}, {1024, 0.00429868774}, {1117, 0.00532755559}, 
		 {1218, 0.00543690086}, {1328, 0.00403968607}, {1449, 0.00409410641}, 
		 {1580, 0.00357260709}, {1723, 0.00408891342}, {1879, 0.00321273078}, 
		 {2048, 0.00244782819}, {2234, 0.00271898542}, {2436, 0.00254464514}, 
		 {2656, 0.00245600676}, {2897, 0.00263177274}, {3159, 0.00233313479}, 
		 {3445, 0.00190401359}, {3757, 0.00176822063}, {4096, 0.00132905861}, 
		 {4467, 0.00152440517}, {4871, 0.00166753384}, {5312, 0.00147806944}, 
		 {5793, 0.00130337899}, {6317, 0.00120295656}, {6889, 0.0011255177}, 
		 {7513, 0.00129263016}, {8192, 0.000690815434}, {8934, 0.000873437929}, 
		 {9742, 0.000867572018}, {10624, 0.000825983782}, {11586, 0.000781608716}, 
		 {12634, 0.000658344388}, {13778, 0.000594917117}, {15025, 0.000576783198}, 
		 {16384, 0.00037303003}, {17867, 0.000482112227}, {19484, 0.000441907958}, 
		 {21248, 0.000415187813}, {23171, 0.00044763666}, {25268, 0.000409131172}, 
		 {27555, 0.000310170058}, {30049, 0.000311846477}, {32768, 0.000184114327}, 
		 {35734, 0.000258251669}, {38968, 0.000255032729}, {42495, 0.00023253739}, 
		 {46341, 0.000222175572}, {50536, 0.000209905422}, {55109, 0.000199194703}, 
		 {60097, 0.000167325262}, {71468, 0.000144252335}, {77936, 0.000123521739}, 
		 {84990, 0.000131856449}, {92682, 0.000114479448}, {101071, 0.000111130104}, 
		 {110218, 0.0000978767895}, {120194, 0.000102485663}, 
		 {131072, 0.0000527280102}, {142936, 0.0000795586604}, 
		 {155872, 0.0000746982132}, {169980, 0.0000687550169}, 
		 {185364, 0.0000695650986}, {202141, 0.000054818211}, 
		 {220436, 0.0000524728558}, {240388, 0.0000477785069},{142936, 0.0000795586604}, {155872, 0.0000746982132}, 
		 {169980, 0.0000687550169}, {185364, 0.0000695650986}, 
		 {202141, 0.000054818211}, {220436, 0.0000524728558}, 
		 {240388, 0.0000477785069}, {285871, 0.0000440788092}, 
		 {311744, 0.0000400307408}, {339959, 0.0000354367992}, {370728, 0.0000330688862}, {404282, 0.0000327886915}, {440872, 0.0000306034981}, {480775, 0.0000270391537}
		 };
        discrepancyMU4 =
        {{19, 0.146047841}, {36, 0.103530643}, {69, 0.0527673202}, 
         {131, 0.0273933695}, {250, 0.0155366725}, {476, 0.0101402503}, 
         {907, 0.00658340997}, {1728, 0.00333721823}, {3292, 0.0017801236}, 
         {6272, 0.000971873004}, {11949, 0.000609853692}, {22765, 0.000323574524}, 
         {43371, 0.000178162995}, {82629, 0.000103392976}, {157422, 0.0000547636298}, 
         {299915, 0.0000329007774}, {571388, 0.0000172023262}};
        discrepancyHalton =
         {{16, 0.201388881}, {64, 0.0520833414}, {256, 0.0187596362}, 
         {1024, 0.00683593721}, {4096, 0.0018634827}, {16384, 0.000605039886}, 
         {65536, 0.000165298918}, {262144, 0.0000538696156}, {524288, 0.000024675911}};
        discrepancyStratified =Sort@{{16, 0.213034745}, {64, 0.0709137031}, {256, 0.0316960362}, 
        {1024, 0.0119466926}, {4096, 0.00557852794}, {16384, 0.00224638866}, 
        {65536, 0.000772120463}, {262144, 0.00028607714},{32761, 0.00115389248}, {35721, 0.00121735005}, {38809, 0.00110083768}, 
        {42436, 0.000940464914}, {46225, 0.000854904337}, {50176, 0.000923739271}, 
        {54756, 0.000823025958}, {60025, 0.000763457011}, {65536, 0.000720000833}, 
        {71289, 0.000691395535}, {77841, 0.00060903935}, {84681, 0.000636986172}, 
        {92416, 0.000504863665}, {100489, 0.000540370125}, {109561, 0.000508040637}, 
        {119716, 0.000512242047}, {131044, 0.000492276998}, 
        {142884, 0.000436647994}, {155236, 0.000410358193}, {169744, 0.00035490255}, 
        {184900, 0.000367616561}, {201601, 0.000410009732}, {262144, 0.000303958353}, {524176, 0.000163622138}};
        discrepancyWhiteNoise = Sort@{{16, 0.342189611}, {64, 0.148375189}, {256, 0.0548872369}, 
        {1024, 0.0272475585}, {4096, 0.0199811024}, {16384, 0.0079053351}, 
        {65536, 0.00651998611}, {262144, 0.00266947127}};
        discrepancyFPO = Sort@{{16, d}, {64, d}, {256, d}, {1024, d}, {4096, d}, {16384, d}, {65536, d}, 
        {262144, d}, {1048576, d}};
        discrepancyPoissonDisk = Sort@{{103, 0.0620065505}, {561, 0.0230182789}, {1120, 0.0107352259}, 
        {3968, 0.00897262723}, {7884, 0.00579264966}, {17215, 0.00248684245}, 
        {31626, 0.00220532215}, {63050, 0.0015112938}, {106101, 0.00127231602}, 
        {194579, 0.00066065794}};
        discrepancyPoissonDisk = Sort@{{9, 0.308367447}, {51, 0.126053686}, {236, 0.0465494665}, 
         {1028, 0.0120422176}, {4077, 0.00663867607}, {16737, 0.00260661281},
         {103, 0.0620065505}, {561, 0.0230182789}, {1120, 0.0107352259}, 
         {3968, 0.00897262723}, {7884, 0.00579264966}, {17215, 0.00248684245}, 
         {31626, 0.00220532215}, {63050, 0.0015112938}, {106101, 0.00127231602}, 
         {194579, 0.00066065794}, {550512, 0.000538741466} };
        discrepancyBNOT = Sort@{{100, 0.0475730366}, {200, 0.0278109149}, {2, 0.0278109149}, 
         {1000, 0.00982811914}, {2048, 0.00734707037}, {4096, 0.00360289798}, 
         {10000, 0.00264887797}, {100000, 0.00227561152}, {200000, 0.00161330407}, 
         {300000, 0.00133587581}};
        discrepancyCMJ = Sort@{
        {16, 0.125702845}, {64, 0.0445100149}, 
         {256, 0.0210656044}, {1024, 0.00655676413}, {4096, 0.00196644971}, 
         {16384, 0.000682649013}, {65536, 0.000327020385}, {262144, 0.000127795326},
         {32768, 0.000477686521}, {35734, 0.000540079884}, {38968, 0.00413222832}, 
         {42495, 0.00143681654}, {46341, 0.0025473752}, {50536, 0.0071929403}, 
         {55109, 0.00646953367}, {60097, 0.00124051691}, {65536, 0.000327020385}, 
         {71468, 0.00253774755}, {77936, 0.00125356996}, {84990, 0.00367361738}, 
         {92682, 0.00289614833}, {101071, 0.00579858446}, {110218, 0.00600086928}, 
         {120194, 0.00400828394}, {131072, 0.000249043833}, {142936, 0.00039118716}, 
         {155872, 0.00410697221}, {169980, 0.00140523428}, {185364, 0.00252276932}, 
         {202141, 0.0026921155}, {220436, 0.00216881255}, {240388, 0.00121196693}};
        discrepancyNROOKS = Sort@{
        {4096, 0.00305789209}, {4871, 0.0225977462}, {5793, 0.00394034708}, 
         {6889, 0.00189941196}, {8192, 0.0113540644}, {9742, 0.0142263796}, 
         {11586, 0.011883946}, {13778, 0.00657030478}, {16384, 0.00108374669}, 
         {19484, 0.00841803838}, {23171, 0.00299870679}, {27555, 0.011909777}, 
         {32768, 0.000764104157}, {38968, 0.00411820502}, {46341, 0.00254233051}, 
         {55109, 0.00640717672}, {65536, 0.000409610463}, {77936, 0.00126532263}, 
         {92682, 0.00288960751}, {110218, 0.00595245169}, {131072, 0.000332417051}, 
         {155872, 0.00408539736}, {185364, 0.00250810949}, {220436, 0.0021593175}, 
         {262144, 0.000155646316}, {311744, 0.00122783704},{16, 0.142233863}, {64, 0.0579094977}, {256, 0.017721039}, 
         {1024, 0.00874068078}, {4096, 0.00305789209}, {16384, 0.00108374669}, 
         {65536, 0.000409610463}, {262144, 0.000155646316}  };

		p = ListPlot[{
			Log[10,#]& /@ discrepancyTabSobol,
			Log[10,#]& /@ discrepancyHalton, 
			Log[10,#]&  /@ discrepancyPoissonDisk, 
			Log[10,#]&  /@ discrepancyStratified, 
			Log[10,#]&  /@ discrepancyWhiteNoise,
			Log[10,#]&  /@ discrepancyMU4
		}
			, PlotLegends ->  {Style[#,24]& @"Sobol",Style[#,24]& @"Halton",Style[#,24]& @"PoissonDisk",Style[#,24]& @"Jitter",Style[#,24]& @"WhiteNoise",Style[#,24]& @"Ours"}
			,AspectRatio->1
			,FrameLabel->{Style[#,24]& @"Log(10,NSamples)",Style[#,36]& @"Log(10,Discrepancy)"}
			,FrameStyle->Directive[Black,24]
			, RotateLabel -> True
			,Frame->True
			,ImageSize -> {800,800}
			,PlotStyle->{Black,Blue,Orange,Green,Gray,Red}
			, Joined->True,PlotLabel->Style["log-log Discrepancy",36]];
		p//Print;
    	Export["prep-figs/fig-discrepancy.png",p];

] (*MU4pmkFigureDiscrepancy *)

MU4pmkFigureVariance[innlevels_:5] :=
    Module[ {},
dataHalton = Sort@{{1024,4.72385 10^-09},{1116,4.27215 10^-09},{1217,3.86941 10^-09},{1327,3.51124 10^-09},{1448,3.04187 10^-09},{1579,2.61556 10^-09},{1722,2.17235 10^-09},{1878,2.00734 10^-09},{2047,1.79497 10^-09},{2233,1.59541 10^-09},{2435,1.40438 10^-09},{2655,1.29315 10^-09},{2896,1.16564 10^-09},{3158,1.0391 10^-09},{3444,8.59686 10^-10},{3756,7.73393 10^-10},{4095,6.91897 10^-10},{4466,5.98507 10^-10},{4870,5.30897 10^-10},{5311,4.6292 10^-10},{5792,4.27257 10^-10},{6316,3.67627 10^-10},{6888,3.04905 10^-10},{7512,2.75237 10^-10},{8191,2.68505 10^-10},{8933,2.31284 10^-10},{9741,2.08418 10^-10},{10623,1.89642 10^-10},{11585,1.58783 10^-10},{12633,1.3541 10^-10},{13777,1.20433 10^-10},{15024,1.07613 10^-10},{16383,9.08945 10^-11},{17866,8.16799 10^-11},{19483,7.71746 10^-11},{21247,6.74092 10^-11},{23170,5.91286 10^-11},{25267,5.50502 10^-11},{27554,4.43745 10^-11},{30048,4.04336 10^-11},{32767,3.57416 10^-11},{35733,3.19275 10^-11},{38967,2.84736 10^-11},{42494,2.55971 10^-11},{46340,2.15014 10^-11},{50535,1.88664 10^-11},{55108,1.60468 10^-11},{60096,1.51338 10^-11},{65535,1.41107 10^-11},{71467,1.18651 10^-11},{77935,1.06828 10^-11},{84989,9.29725 10^-12},{92681,8.17442 10^-12},{101070,7.62139 10^-12},{110217,6.33536 10^-12},{120193,5.88906 10^-12},{131071,5.33948 10^-12},{142935,4.47651 10^-12},{155871,3.76866 10^-12},{169979,3.41356 10^-12},{185363,2.8671 10^-12},{202140,2.43725 10^-12},{220435,2.22423 10^-12},{240387,2.09334 10^-12},{262143,1.83684 10^-12},{285870,1.65288 10^-12},{311743,1.3863 10^-12},{339958,1.21686 10^-12},{370727,1.00945 10^-12},{404281,8.95613 10^-13},{440871,8.04393 10^-13},{480774,7.42037 10^-13},{524287,6.32021 10^-13},{571740,5.53772 10^-13},{623487,4.86628 10^-13},{679917,4.40111 10^-13},{741455,3.63368 10^-13},{808562,3.30345 10^-13},{881743,2.81733 10^-13},{961548,2.51519 10^-13},{1048575,2.10966 10^-13},{16,7.20486 10^-07},{17,6.88192 10^-07},{19,5.7792 10^-07},{20,5.45614 10^-07},{22,5.12803 10^-07},{24,4.22121 10^-07},{26,3.556 10^-07},{29,3.31329 10^-07},{31,3.26676 10^-07},{34,3.08068 10^-07},{38,2.57035 10^-07},{41,2.26639 10^-07},{45,1.96226 10^-07},{49,1.87969 10^-07},{53,1.56591 10^-07},{58,1.43122 10^-07},{63,1.30483 10^-07},{69,1.13903 10^-07},{76,9.7556 10^-08},{82,8.38625 10^-08},{90,7.95865 10^-08},{98,7.41864 10^-08},{107,6.78932 10^-08},{117,5.89775 10^-08},{127,5.35736 10^-08},{139,5.0855 10^-08},{152,4.2893 10^-08},{165,3.85062 10^-08},{181,3.73423 10^-08},{197,3.47446 10^-08},{215,3.08397 10^-08},{234,2.64342 10^-08},{255,2.40767 10^-08},{279,2.22086 10^-08},{304,1.979 10^-08},{331,1.78382 10^-08},{362,1.61472 10^-08},{394,1.44618 10^-08},{430,1.2981 10^-08},{469,1.1633 10^-08},{511,1.08186 10^-08},{558,1.00823 10^-08},{608,8.91343 10^-09},{663,8.24493 10^-09},{724,7.00686 10^-09},{789,6.19174 10^-09},{861,5.53095 10^-09},{939,4.9288 10^-09}};
dataPoissonDisk = Sort@{{1132,4.42803 10^-09},{1101215,1.61619 10^-12},{12154,2.70173 10^-10},{2220,2.17297 10^-09},{24280,1.17645 10^-10},{275204,7.34787 10^-12},{4302,9.3741 10^-10},{48676,5.28339 10^-11},{550620,3.09186 10^-12},{97375,2.26802 10^-11},{141,6.01618 10^-08},{137716,1.57875 10^-11},{1583,3.16257 10^-09},{17201,1.72801 10^-10},{202,3.5618 10^-08},{27,4.84967 10^-07},{282,2.50907 10^-08},{3093,1.48901 10^-09},{34343,7.59261 10^-11},{37,3.3632 10^-07},{399,1.63136 10^-08},{389279,4.61436 10^-12},{50,2.15686 10^-07},{559,1.10575 10^-08},{70,1.29831 10^-07},{68885,3.53046 10^-11},{791,7.1636 10^-09},{778898,2.29125 10^-12},{8563,4.15955 10^-10},{100,9.19958 10^-08},{140,5.68744 10^-08},{17,7.70464 10^-07},{199,3.71319 10^-08},{23,5.47999 10^-07},{285,2.2691 10^-08},{30,3.35514 10^-07},{400,1.57873 10^-08},{47,2.29765 10^-07},{575,1.1019 10^-08},{73,1.28577 10^-07},{794,7.6395 10^-09},{98,8.26657 10^-08}};
dataStratified = Sort@{{100489,1.33207 10^-11},{1024,5.46568 10^-09},{1048576,4.09643 10^-13},{10609,3.07446 10^-10},{1024,5.90465 10^-09},{109561,1.22108 10^-11},{1089,5.12715 10^-09},{11449,2.47101 10^-10},{1156,4.58537 10^-09},{119716,1.08101 10^-11},{1156,4.79876 10^-09},{12544,2.22638 10^-10},{121,8.50605 10^-08},{131044,8.97484 10^-12},{1296,4.01628 10^-09},{13689,2.10383 10^-10},{142884,8.01294 10^-12},{1444,3.5758 10^-09},{14884,1.80158 10^-10},{155236,8.28032 10^-12},{1521,3.37064 10^-09},{16384,1.59472 10^-10},{169744,6.11956 10^-12},{1681,3.04771 10^-09},{17689,1.41766 10^-10},{169,5.16877 10^-08},{184900,5.46797 10^-12},{1849,2.75848 10^-09},{19321,1.32858 10^-10},{2025,2.52346 10^-09},{21025,1.17784 10^-10},{2209,1.99854 10^-09},{23104,9.89408 10^-11},{16,1.03434 10^-06},{2401,1.87707 10^-09},{24964,8.94696 10^-11},{256,3.2788 10^-08},{262144,3.49121 10^-12},{2601,1.83251 10^-09},{27225,8.62807 10^-11},{2809,1.55601 10^-09},{29929,6.64063 10^-11},{3136,1.3407 10^-09},{32761,6.64017 10^-11},{25,6.24817 10^-07},{3364,1.23034 10^-09},{35721,5.6998 10^-11},{361,2.25832 10^-08},{369664,2.06528 10^-12},{3721,1.15468 10^-09},{38809,4.73357 10^-11},{4096,9.99037 10^-10},{42436,4.96091 10^-11},{4356,8.68328 10^-10},{36,4.16572 10^-07},{46225,3.89677 10^-11},{4761,7.93342 10^-10},{50176,3.41295 10^-11},{484,1.45696 10^-08},{524176,1.21372 10^-12},{5184,7.19914 10^-10},{54756,2.98748 10^-11},{5776,6.41411 10^-10},{60025,2.62789 10^-11},{6241,5.69409 10^-10},{64,2.04752 10^-07},{65536,2.72894 10^-11},{6724,5.16109 10^-10},{71289,2.25353 10^-11},{676,1.00193 10^-08},{741321,7.02636 10^-13},{7396,4.55026 10^-10},{77841,1.88009 10^-11},{8100,4.05338 10^-10},{84681,1.52729 10^-11},{8836,3.55125 10^-10},{81,1.4406 10^-07},{92416,1.53745 10^-11},{9604,3.30923 10^-10},{169744,6.11956 10^-12},{201601,4.98642 10^-12},{219961,4.2477 10^-12},{240100,3.62304 10^-12},{285156,3.09032 10^-12},{311364,2.57272 10^-12},{339889,2.21519 10^-12},{403225,1.69748 10^-12},{439569,1.64525 10^-12},{480249,1.50136 10^-12},{571536,1.04911 10^-12},{622521,9.3861 10^-13},{678976,8.46255 10^-13},{808201,6.18509 10^-13},{881721,5.35332 10^-13},{960400,5.07743 10^-13},{100,1.02774 10^-07},{100,1.02774 10^-07},{121,8.88676 10^-08},{121,8.88676 10^-08},{144,7.22166 10^-08},{144,7.22166 10^-08},{16,1.06374 10^-06},{16,1.06374 10^-06},{169,5.9301 10^-08},{196,4.32657 10^-08},{16,1.06374 10^-06},{16,1.06374 10^-06},{196,4.32657 10^-08},{16,1.06374 10^-06},{225,3.96501 10^-08},{16,1.06374 10^-06},{225,3.96501 10^-08},{25,6.33913 10^-07},{256,3.23135 10^-08},{25,6.33913 10^-07},{289,2.74456 10^-08},{25,6.33913 10^-07},{324,2.40872 10^-08},{25,6.33913 10^-07},{361,2.11204 10^-08},{36,3.98131 10^-07},{361,2.11204 10^-08},{36,3.98131 10^-07},{400,1.78423 10^-08},{36,3.77407 10^-07},{441,1.64804 10^-08},{49,2.70263 10^-07},{484,1.516 10^-08},{49,2.70263 10^-07},{529,1.31287 10^-08},{49,2.70263 10^-07},{576,1.15331 10^-08},{49,2.70263 10^-07},{625,1.00337 10^-08},{64,1.86315 10^-07},{676,9.48307 10^-09},{64,1.86315 10^-07},{784,8.24101 10^-09},{81,1.37473 10^-07},{841,6.84963 10^-09},{81,1.37473 10^-07},{900,6.59047 10^-09},{81,1.37473 10^-07}};
dataWhiteNoise = Sort@{{1024,1.76508 10^-08},{1116,1.7162 10^-08},{1217,1.70045 10^-08},{1327,1.70263 10^-08},{1448,1.66251 10^-08},{1579,1.54927 10^-08},{1722,1.41752 10^-08},{1878,7.40324 10^-09},{2047,7.04639 10^-09},{2233,6.19671 10^-09},{2435,5.3744 10^-09},{2655,5.26713 10^-09},{2896,1.58516 10^-08},{3158,1.36985 10^-08},{3444,1.20603 10^-08},{3756,9.77763 10^-09},{4095,9.22642 10^-09},{4466,8.92463 10^-09},{4870,4.49218 10^-09},{5311,4.87493 10^-09},{5792,6.44711 10^-09},{6316,6.25659 10^-09},{6888,3.71658 10^-09},{7512,3.61157 10^-09},{8191,3.55204 10^-09},{8933,4.63238 10^-09},{9741,5.12157 10^-09},{10623,2.65007 10^-09},{11585,1.98436 10^-09},{12633,2.51697 10^-09},{13777,1.8003 10^-09},{15024,2.12408 10^-09},{16383,1.60369 10^-09},{17866,1.4768 10^-09},{19483,1.52858 10^-09},{21247,7.25451 10^-10},{23170,9.84082 10^-10},{25267,6.99913 10^-10},{27554,1.10528 10^-09},{30048,8.44946 10^-10},{32767,7.22875 10^-10},{35733,6.75238 10^-10},{38967,7.45348 10^-10},{42494,4.9861 10^-10},{46340,6.32674 10^-10},{50535,6.09888 10^-10},{55108,3.23396 10^-10},{60096,5.3596 10^-10},{65535,2.61484 10^-10},{71467,3.4705 10^-10},{77935,3.38178 10^-10},{84989,2.87784 10^-10},{92681,2.99903 10^-10},{101070,1.99716 10^-10},{110217,2.06284 10^-10},{120193,2.06806 10^-10},{131071,2.68576 10^-10},{142935,1.71887 10^-10},{155871,1.32786 10^-10},{169979,1.21414 10^-10},{185363,1.08958 10^-10},{202140,1.8911 10^-10},{220435,1.38418 10^-10},{240387,9.39473 10^-11},{262143,1.13536 10^-10},{285870,5.6572 10^-11},{311743,7.74948 10^-11},{339958,1.21482 10^-10},{370727,7.31304 10^-11},{404281,6.19848 10^-11},{440871,5.04896 10^-11},{480774,7.27671 10^-11},{524287,4.03138 10^-11},{571740,4.34659 10^-11},{623487,3.87823 10^-11},{679917,3.47211 10^-11},{741455,3.69034 10^-11},{808562,2.05997 10^-11},{881743,3.31569 10^-11},{961548,2.52612 10^-11},{1048575,1.56584 10^-11},{16,1.76465 10^-06},{17,1.5251 10^-06},{19,1.48727 10^-06},{20,1.4518 10^-06},{22,1.25603 10^-06},{24,1.03056 10^-06},{26,7.76514 10^-07},{29,6.00169 10^-07},{31,5.75152 10^-07},{34,5.13219 10^-07},{38,5.06635 10^-07},{41,4.42033 10^-07},{45,4.99438 10^-07},{49,4.28577 10^-07},{53,3.76283 10^-07},{58,3.05994 10^-07},{63,2.85543 10^-07},{69,4.8286 10^-07},{76,4.00887 10^-07},{82,4.33591 10^-07},{90,3.90031 10^-07},{98,3.67031 10^-07},{107,3.37337 10^-07},{117,3.12244 10^-07},{127,3.39572 10^-07},{139,2.40786 10^-07},{152,1.98947 10^-07},{165,1.22108 10^-07},{181,9.92853 10^-08},{197,1.05288 10^-07},{215,9.78663 10^-08},{234,8.57372 10^-08},{255,7.81421 10^-08},{279,5.97116 10^-08},{304,5.47413 10^-08},{331,5.93572 10^-08},{362,5.61937 10^-08},{394,5.18123 10^-08},{430,4.60659 10^-08},{469,4.08842 10^-08},{511,3.69436 10^-08},{558,3.54223 10^-08},{608,3.80042 10^-08},{663,3.21107 10^-08},{724,3.48171 10^-08},{789,4.13685 10^-08},{861,3.54745 10^-08},{939,3.70055 10^-08}};
dataMU4 = Sort@{{19,6.6695 10^-07},{36,3.19307 10^-07},{69,1.2575 10^-07},{131,5.38466 10^-08},{250,2.67361 10^-08},{476,1.13276 10^-08},{907,4.57458 10^-09},{1728,1.91524 10^-09},{3292,8.31386 10^-10},{6272,3.306 10^-10},{11949,1.39315 10^-10},{22765,5.59056 10^-11},{43371,2.18593 10^-11},{82629,8.29322 10^-12},{157422,3.3464 10^-12},{299915,1.26982 10^-12},{571388,4.90327 10^-13},{1088589,1.76056 10^-13}};
dataSobol = Sort@{{1024,3.56004 10^-09},{1116,3.339 10^-09},{1217,3.19021 10^-09},{1327,2.94467 10^-09},{1448,2.67144 10^-09},{1579,2.44837 10^-09},{1722,2.05721 10^-09},{1878,1.80771 10^-09},{2047,1.50228 10^-09},{2233,1.44813 10^-09},{2435,1.38139 10^-09},{2655,1.25928 10^-09},{2896,1.16321 10^-09},{3158,1.04833 10^-09},{3444,9.54614 10^-10},{3756,8.26515 10^-10},{4095,7.16388 10^-10},{4466,6.6807 10^-10},{4870,6.074 10^-10},{5311,5.36525 10^-10},{5792,4.79298 10^-10},{6316,3.94465 10^-10},{6888,3.51076 10^-10},{7512,3.06983 10^-10},{8191,2.45929 10^-10},{8933,2.45562 10^-10},{9741,2.19182 10^-10},{10623,2.07404 10^-10},{11585,1.81118 10^-10},{12633,1.52996 10^-10},{13777,1.376 10^-10},{15024,1.14549 10^-10},{16383,9.27436 10^-11},{17866,8.83543 10^-11},{19483,8.20665 10^-11},{21247,7.22391 10^-11},{23170,6.48565 10^-11},{25267,5.36817 10^-11},{27554,5.11895 10^-11},{30048,4.27405 10^-11},{32767,3.37584 10^-11},{35733,3.44688 10^-11},{38967,3.06648 10^-11},{42494,2.63997 10^-11},{46340,2.3704 10^-11},{50535,1.86593 10^-11},{55108,1.67864 10^-11},{60096,1.38803 10^-11},{65535,1.04489 10^-11},{71467,1.16609 10^-11},{77935,1.06677 10^-11},{84989,9.94014 10^-12},{92681,9.01025 10^-12},{101070,7.94047 10^-12},{110217,7.44086 10^-12},{120193,6.13505 10^-12},{131071,4.35447 10^-12},{142935,4.65055 10^-12},{155871,4.30226 10^-12},{169979,3.66693 10^-12},{185363,3.15327 10^-12},{202140,2.53427 10^-12},{220435,2.26764 10^-12},{240387,2.00054 10^-12},{262143,1.42313 10^-12},{285870,1.62431 10^-12},{311743,1.41732 10^-12},{339958,1.25047 10^-12},{370727,1.1304 10^-12},{404281,9.48631 10^-13},{440871,8.30693 10^-13},{480774,7.37677 10^-13},{524287,5.0552 10^-13},{571740,5.2391 10^-13},{623487,5.01641 10^-13},{679917,4.586 10^-13},{741455,3.7654 10^-13},{808562,3.14803 10^-13},{881743,2.79445 10^-13},{961548,2.29086 10^-13},{1048575,1.4263 10^-13},{16,1.01755 10^-06},{17,9.14168 10^-07},{19,7.68306 10^-07},{20,7.33917 10^-07},{22,6.54947 10^-07},{24,5.74232 10^-07},{26,4.88302 10^-07},{29,3.65212 10^-07},{31,3.37464 10^-07},{34,2.94991 10^-07},{38,2.82964 10^-07},{41,2.57731 10^-07},{45,2.21423 10^-07},{49,1.87419 10^-07},{53,1.60332 10^-07},{58,1.44247 10^-07},{63,1.22972 10^-07},{69,1.2145 10^-07},{76,1.17738 10^-07},{82,1.03922 10^-07},{90,9.66756 10^-08},{98,8.54212 10^-08},{107,7.10619 10^-08},{117,6.65298 10^-08},{127,5.42737 10^-08},{139,5.33481 10^-08},{152,4.76259 10^-08},{165,4.26719 10^-08},{181,3.5386 10^-08},{197,3.29381 10^-08},{215,2.98715 10^-08},{234,2.53999 10^-08},{255,2.19114 10^-08},{279,2.21545 10^-08},{304,2.05738 10^-08},{331,1.81759 10^-08},{362,1.80693 10^-08},{394,1.5217 10^-08},{430,1.42257 10^-08},{469,1.19236 10^-08},{511,1.02019 10^-08},{558,9.46088 10^-09},{608,8.54402 10^-09},{663,7.75269 10^-09},{724,6.78136 10^-09},{789,5.98074 10^-09},{861,5.40531 10^-09},{939,4.47351 10^-09}};
		p = ListPlot[{
			Log[10,#]& /@ dataSobol, 
			Log[10,#]& /@ dataHalton, 
			Log[10,#]&  /@ dataPoissonDisk, 
			Log[10,#]&  /@ dataStratified, 
			Log[10,#]&  /@ dataWhiteNoise,
			Log[10,#]&  /@ dataMU4
		}
			, PlotLegends ->  {Style[#,24]& @"Sobol",Style[#,24]& @"Halton",Style[#,24]& @"PoissonDisk",Style[#,24]& @"Jitter",Style[#,24]& @"WhiteNoise",Style[#,24]& @"Ours"}
			,PlotRange->{Automatic,{-13,-6}}
			,AspectRatio->1
			,FrameLabel->{Style[#,24]& @"Log(10,NSamples)",Style[#,36]& @"Log(10,Variance)"}
			, RotateLabel -> True
			,FrameStyle->Directive[Black,24]
			,ImageSize -> {800,800}
			,Frame->True
			,PlotStyle->{Black,Blue,Orange,Green,Gray,Red}
			, Joined->True,PlotLabel->Style["log-log Variance",36]];
		p//Print;
    	Export["prep-figs/fig-variance.png",p];

] (*MU4pmkFigureVariance *)


mkFig1D[wordsDir_] :=
    Module[ {gl,h = .01, level, col, wordDir},
        level = Length[wordsDir[[1]] ] - 2;
        gl = {};
        mycolors = {Black,Blue,Darker@Darker@Green,Darker@Darker@Darker@Orange};
        
        wordsInv = (Reverse/@wordsDir );
        intValueDir = getIntValueDir/@wordsDir;
        fracValueDir = getFracValueDir/@wordsDir;
        intValueInv = getIntValueInv/@wordsInv;
        fracValueInv = getFracValueInv/@wordsInv;
        Table[
            wordDir = wordsDir[[i]];
            type = Last@wordDir;
            col = mycolors[[type]];
            start = fracValueDir[[i]];
            stop = start + evecDir[[type]] lambda^(-level);
            center = (start+stop)/2;
            AppendTo[gl,{Opacity[.7],
                {col,Rectangle[{start,-h},{stop,h}]},{Opacity[1],Black,Thickness[.003],Line[{{start,-h},{start,h},{stop,h},{stop,-h},{start,-h}}]}
                (*,Text[getIntValueInv@(Reverse@wordDir),{center,0},{0,-1}],Text[{{intValueDir[[i]],intValueInv[[i]]}}//T,{center,0},{0,1}]*)
            }]
        ,{i,Length[wordsDir]}];
        gl
    ] (* mkFig1D *)

mkFigMultiplePoints[nlevels_:5,inmxsz_:4] :=
    Module[ {},
        mxsz = inmxsz;
        orderTabLength = 1;
        myRandomSampleDir = Identity;
        myRandomSampleInv = Identity;  (* RandomSample or randomSampleButFirst or Identity *)
        fouriertabsz =  64 1024;
        imagesize = {2 1024,Automatic};
        labelDweRuKi = "mx4233";
                mx = mx4233;
                mx = {{1,1,0,0},{0,0,1,0},{0,0,0,1},{1,0,0,0}};

             init[mx,False, True];

        Print["orderDir:",mf@orderDir];
        Print["orderInv:",mf@orderInv];
        wordsDir = {{1},{2},{3},{4}};
        wordsDir = {{1}};
        (*tiles = { {{1},{0,1}} };*)
        gtab = Table[
            gl = getAALDS1dGL[wordsDir];
            g = Graphics[{gl}, ImageSize -> imagesize, AspectRatio->.025, PlotRange->{{-.01,1.01},Automatic}, Axes->False];
            (*tiles = Flatten[#, 2] &@{AALDS1dSubdivideTile /@ tiles};*)
            wordsDir = Flatten[#,2]& @ {applyProductionRules/@wordsDir}; 
            Print[ wordsDir ];
            g//Print;      
            g
        ,{ilevel,nlevels}];
        res = GraphicsColumn[gtab[[4;;]] ];
        res//Print;
        Export["prep-figs/fig-production1d.png",res];
    ] (* AALDS1dDemo *)

    
mkFigMultiplePoitns[innlevels_:4, showGraphics_:True ] :=
    Module[ {},
        dbg = False;
        mxsz = 2;
        base = mxsz;
        baselog = Log[2,base];
        nlevels = innlevels;
        myRandomChoice :=
            RandomChoice;
        basename = "goodFIBOLen8Patterns";
        (*If[!known[MU4goodPatterns],*)
        MU4goodPatterns = Table[{},{4},{4}];
        Table[
            fname = "data/MU4_L4patterns/MU4_bestTiles_"<>ToString[ix]<>ToString[iy]<>".dat";
            MU4goodPatterns[[ix,iy]] = Get[fname];
            Print["Reading ",fname -> Length[MU4goodPatterns[[ix,iy]]]];
        ,{iy,4},{ix,4}];
        (*];*)
        Do[
            targetlevel = ilevel;
            codes = MU4recursiveSubdiv[ilevel];
            (*activeBinCodes = MU4getActiveBinCodes@codes;*)
            ptsXY = MU4PhiXY /@ codes;
            Print[ilevel -> Length[ codes] ];
            If[ generateDiscrepancy,
                discrepancy = getDiscrepancy2Dexact[ptsXY];
                discrepancyMU4[[ilevel]] = { Length[ptsXY], discrepancy};
                Print[ilevel -> Length[codes]  -> Length[ptsXY] -> discrepancy];
                Print[discrepancyMU4];
            ];
            If[ showGraphics,
                    g = Graphics[{{ MU4getGrid4Figures[ilevel,a,a, False ]} 
                            ,PointSize[.01],Point/@ ptsXY
                            (*,Table[Text[Style[DweRuKigetIntValueInv@ codes[[i,2]],18],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]*)
                        } 
                        ,PlotLabel->ilevel
                        ,ImageSize ->{1200,1200}   ];
            ];
        ,{ilevel,1,nlevels}];
        g//Print;
        Export["prep-figs/fig-multi-points.png",g];
    ] (* mkFigMultiplePoitns *)


MU4recursiveSubdivSimple[level_:1,x0_:a,y0_:a] :=
    Module[ {subdivTiles,prevlevelPattern, xSubtilePrefix,ySubtilePrefix },
        If[ level == 1, Return [{ {{},{}} }] (*Return@MU4getRandomGoodPattern[x0,y0]*) ];
        subdivTiles = (Tuples@{MU4getCodes1d[1, a], MU4getCodes1d[1, a]})[[{1,2,3,4}]]; (*[[{1, 4, 2, 3}]];*)
        MU4getActiveCodes @ (Flatten[#,1]& @ Table[ {{xSubtilePrefix},{ySubtilePrefix}} = subdivTiles[[isubtile]];
            prevlevelPattern = MU4recursiveSubdivSimple[level-1,xSubtilePrefix,ySubtilePrefix];
            {Join[{xSubtilePrefix},#[[1]],{ySubtilePrefix}], Join[{ySubtilePrefix},#[[2]],{xSubtilePrefix}]} & /@ ((*Reverse@*)prevlevelPattern)
        ,{isubtile,Length[subdivTiles]}])
    ] (* MU4recursiveSubdiv *)

    
zzzMU4pmkFigureProduction[innlevels_:5] :=
    Module[ {},
        dbg = False;
        mxsz = 2;
        base = mxsz;
        baselog = Log[2,base];
        nlevels = innlevels;
            MU4goodPatterns = Table[{},{4},{4}];
            MU4goodPatterns[[1,1]] = { {{{a},{a}}} };
            MU4goodPatterns[[1,2]] = { {{{a},{b}}} };
            MU4goodPatterns[[1,3]] = { {{{a},{c}}} };
            MU4goodPatterns[[1,4]] = { {{{a},{d}}} };
            MU4goodPatterns[[2,1]] = { {{{b},{a}}} };
            MU4goodPatterns[[2,2]] = { {{{b},{b}}} };
            MU4goodPatterns[[2,3]] = { {{{b},{c}}} };
            MU4goodPatterns[[2,4]] = { {{{b},{d}}} };
            MU4goodPatterns[[3,1]] = { {{{c},{a}}} };
            MU4goodPatterns[[3,2]] = { {{{c},{b}}} };
            MU4goodPatterns[[3,3]] = { {{{c},{c}}} };
            MU4goodPatterns[[3,4]] = { {{{c},{d}}} };
            MU4goodPatterns[[4,1]] = { {{{d},{a}}} };
            MU4goodPatterns[[4,2]] = { {{{d},{b}}} };
            MU4goodPatterns[[4,3]] = { {{{d},{c}}} };
            MU4goodPatterns[[4,4]] = { {{{d},{d}}} };
        Do[
            codes = MU4recursiveSubdivSimple[ilevel];
            hlen = If[Length[codes[[1]]] == 0, 0, Length[codes[[1,1]]]/2 ];
            If[hlen > 0,
	            codes = Last /@ (Sort @ Table[
	            	{Reverse@Table[Switch[{codes[[i,2,j]],codes[[i,1,j]]}//MU4symbols2binCode,{0,0},0,{1,1},1,{0,1},2,{1,0},3] ,{j,hlen}], codes[[i]]}
	            ,{i,Length[codes]}])  ;
            ];
            
            ptsXY = MU4PhiXY /@ codes;
                    g = Graphics[{{ MU4getGrid4Figures[ilevel, a,a ]} 
                            ,PointSize[.01],Point/@ ptsXY
                            ,Table[
                            	(*ordercode = Reverse@If[hlen == 0, {}, Join[Reverse@codes[[i,1,;;hlen]],Reverse@codes[[i,1,hlen+1;;]]] ];*)
                            	Text[Style[ i-1  ,14],ptsXY[[i]],{-1,-1}]
                            ,{i,Length[ptsXY]}]
                            (*,Table[Text[Style[ MU4symbols2binCode@codes[[i]],10],ptsXY[[i]],{-1,-1}],{i,Length[ptsXY]}]*)
                        } 
                        ,PlotLabel->Style["Ranking",24]
                        ,ImageSize -> {300,300}  2 ];
                    g//Print;
                    Export["prep-figs/Fig-ranking"<>ToString[ilevel]<>".png",g];
        ,{ilevel,1,nlevels}];
        
     ] (*MU4pmkFigureProduction *)

     
 MU4pmkFigureProduction[] :=
    Module[ {},
        dbg = False;
        mxsz = 2;
        base = mxsz;
        baselog = Log[2,base];
        nlevels = innlevels;
 			gtab = Table[
            {xcode,ycode} = {a,a};
            codes = MU4recursiveSubdivSIMPLEST[ilevel];
            ptsXY = MU4PhiXY /@ codes;
                    g = Graphics[{{ MU4getGrid4Figures[ilevel, xcode,ycode ] } 
                          } 
                          (*,PlotRange->{{-.2,1.2},{-.2,1.2}}*)
                          ,PlotLabel->Style[ToString[ilevel-1]<>" subdivisions", 36]
                        ,ImageSize -> {300,300}  2 ];
                    g//Print;
                    g
             ,{ilevel,6}];
             grid = GraphicsGrid@(Partition[gtab,3]);
             Export["prep-figs/fig-sundivisions.png",grid];

        
     ] (*MU4pmkFigureProduction *)

MU4getGrid4Figures[nlevels_:2,xTileType_:a,yTileType_:a,showSymbols_:True,gridcol_:Cyan ] :=
    Module[ {hlevels, gl ,txtcoltab,xSymbols,ySymbols,xvaluesFracDir,yvaluesFracDir,xmax,ymax,xind,yind},
        txtcoltab = {Red, Red,Red, Red,Red, Red,Red, Red};
        {xind,yind} = {Switch[xTileType,a,1,b,4,c,3,d,2],Switch[yTileType,a,1,b,4,c,3,d,2]};
        {xmax,ymax} = {phitab[[xind]],phitab[[yind]]};
        gl = {};
        Do[
            gl = Join[gl,{Thickness[gridThickness],{gridcol,Line[{{0,0},{xmax,0}}],Line[{{0,ymax},{xmax,ymax}}],Line[{{0,0},{0,ymax}}],Line[{{xmax,0},{xmax,ymax}}] } }];
            xSymbols = MU4getCodes1d[ilevel-1,xTileType];
            ySymbols = MU4getCodes1d[ilevel-1,yTileType];
            xvaluesFracDir = MU4Phi /@ xSymbols;
            yvaluesFracDir = MU4Phi /@ ySymbols;
            AppendTo[xvaluesFracDir,1.];
            AppendTo[yvaluesFracDir,1.];
            Do[AppendTo[gl, {gridcol,Line[{{xvaluesFracDir[[i]],0},{xvaluesFracDir[[i]],ymax}}]}],{i,Length[xSymbols]}];
            Do[AppendTo[gl, {gridcol,Line[{{0,yvaluesFracDir[[i]]},{xmax,yvaluesFracDir[[i]]}}]}],{i,Length[ySymbols]}];
        ,{ilevel,1,nlevels}];
        hlevels = Floor[nlevels/2];
        If[ showSymbols,
        	AppendTo[gl, {
        			Table[ Text[Style[#,24]& @ (Last@xSymbols[[ix]]), {(xvaluesFracDir[[ix]]+xvaluesFracDir[[ix+1]])/2.,-.02},{0,1}] , {ix,Length[xSymbols]}] ,
        			Table[ Text[Style[#,24]& @ (Last@ySymbols[[iy]]), {-.02, (yvaluesFracDir[[iy]]+yvaluesFracDir[[iy+1]])/2.},{1,0}] , {iy,Length[ySymbols]}] 
        	}];
        ];
        gl
    ] (* MU4getGrid4Figures*)

    MU4pmkFigurePopulating[] :=
    Module[ {},
        dbg = False;
        mxsz = 2;
        base = mxsz;
        baselog = Log[2,base];
        nlevels = innlevels;
 			gtab = Table[
            {xcode,ycode} = {a,a};
            codes = MU4getActiveCodes @  MU4recursiveSubdivSIMPLEST[ilevel];
            ptsXY = MU4PhiXY /@ codes;
                    g = Graphics[{{ 
                   		gridThickness = .01; 
                     	g1 = MU4getGrid4Figures[ilevel +1, xcode,ycode, False,Cyan   ];
                    	gridThickness = .001; 
                     	g2 = MU4getGrid4Figures[2 ilevel + 1, xcode,ycode, False, Magenta   ];
                    	{g1,g2}
                    	} 
                            ,PointSize[.03],Point/@ ptsXY
                         } 
                          (*,PlotRange->{{-.2,1.2},{-.2,1.2}}*)
                          ,PlotLabel->Style[ToString[ilevel]<>" subdivisions", 36]
                        ,ImageSize -> {300,300}  2 ];
                    g//Print;
                    g
             ,{ilevel,4}];
             grid = GraphicsGrid@(Partition[gtab,2]);
             Export["prep-figs/fig-populating.png",grid];

        
     ] (*MU4pmkFigureProduction *)
